<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>云笺</title>
  
  <subtitle>一些技术摘要和写作技巧</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.iwxyi.com/"/>
  <updated>2019-10-12T23:27:51.132Z</updated>
  <id>http://blog.iwxyi.com/</id>
  
  <author>
    <name>命燃芯乂</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>工厂模式</title>
    <link href="http://blog.iwxyi.com/2019/10/12/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://blog.iwxyi.com/2019/10/12/工厂模式/</id>
    <published>2019-10-12T12:18:00.000Z</published>
    <updated>2019-10-12T23:27:51.132Z</updated>
    
    <content type="html"><![CDATA[<p>在平时编程中，构建对象最常用的方式是 new 一个对象。乍一看这种做法没什么不好，而实际上这也属于一种硬编码。每 new 一个对象，相当于<strong>调用者多知道了一个类</strong>，增加了类与类之间的联系，不利于程序的松耦合。其实构建过程可以被封装起来，工厂模式便是用于封装对象的设计模式。</p><a id="more"></a><h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2><p>举个例子，直接 new 对象的方式相当于当我们需要一个苹果时，我们需要知道苹果的构造方法，需要一个梨子时，需要知道梨子的构造方法。更好的实现方式是有一个水果工厂，我们告诉工厂需要什么种类的水果，水果工厂将我们需要的水果制造出来给我们就可以了。这样我们就无需知道苹果、梨子是怎么种出来的，<strong>只用和水果工厂打交道</strong>即可。</p><p>水果工厂：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FruitFactory</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Fruit <span class="title">create</span><span class="params">(String type)</span></span>{</span><br><span class="line">        <span class="keyword">switch</span> (type){</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"苹果"</span>: <span class="keyword">return</span> <span class="keyword">new</span> Apple();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"梨子"</span>: <span class="keyword">return</span> <span class="keyword">new</span> Pear();</span><br><span class="line">            <span class="keyword">default</span>: <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"暂时没有这种水果"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>调用：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>{</span><br><span class="line">        FruitFactory fruitFactory = <span class="keyword">new</span> FruitFactory();</span><br><span class="line">        Fruit apple = fruitFactory.create(<span class="string">"苹果"</span>);</span><br><span class="line">        Fruit pear = fruitFactory.create(<span class="string">"梨子"</span>);</span><br><span class="line">        apple.eat();</span><br><span class="line">        pear.eat();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>事实上，将构建过程封装的好处不仅可以<strong>降低耦合</strong>，如果某个产品构造方法相当复杂，使用工厂模式可以大大<strong>减少代码重复</strong>。</p><p>简单工厂模式就是让一个工厂类承担构建所有对象的职责。调用者需要什么产品，让工厂生产出来即可。它的弊端也显而易见：</p><ul><li>一是如果需要生产的产品过多，此模式会导致<strong>工厂类过于庞大</strong>，承担过多的职责，变成超级类。当苹果生产过程需要修改时，要来修改此工厂。梨子生产过程需要修改时，也要来修改此工厂。也就是说这个类不止一个引起修改的原因。违背了单一职责原则。</li><li>二是当要生产新的产品时，必须在工厂类中<strong>添加新的分支</strong>。而开闭原则告诉我们：类应该对修改封闭。我们希望在添加新功能时，只需增加新的类，而不是修改既有的类，所以这就违背了开闭原则。</li></ul><h2 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h2><p>为了解决简单工厂模式的这两个弊端，工厂方法模式应运而生，它规定每个产品都有一个专属工厂。比如苹果有专属的苹果工厂，梨子有专属的梨子工厂，Java 代码如下：</p><p>苹果工厂：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppleFactory</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Fruit <span class="title">create</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Apple();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>梨子工厂：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PearFactory</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Fruit <span class="title">create</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Pear();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>调用者：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>{</span><br><span class="line">        AppleFactory appleFactory = <span class="keyword">new</span> AppleFactory();</span><br><span class="line">        Fruit apple = appleFactory.create();</span><br><span class="line">        PearFactory pearFactory = <span class="keyword">new</span> PearFactory();</span><br><span class="line">        Fruit pear = pearFactory.create();</span><br><span class="line">        apple.eat();</span><br><span class="line">        pear.eat();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>调用者虽然不需要和 Apple 、Pear 类打交道了，但却需要和 <code>AppleFactory</code>、<code>PearFactory</code> 类打交道。有几种水果就需要知道几个工厂类，耦合度完全没有下降啊，甚至还增加了代码量！</p><p>仔细想一想，工厂模式的第二个优点在工厂方法模式中还是存在的。当构建过程相当复杂时，工厂将构建过程封装起来，调用者可以很方便的直接使用，同样以苹果生产为例：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppleFactory</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Fruit <span class="title">create</span><span class="params">()</span></span>{</span><br><span class="line">        AppleSeed appleSeed = <span class="keyword">new</span> AppleSeed();</span><br><span class="line">        Sunlight sunlight = <span class="keyword">new</span> Sunlight();</span><br><span class="line">        Water water = <span class="keyword">new</span> Water();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Apple(appleSeed, sunlight, water);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>调用者无需知道苹果的生产细节，当生产过程需要修改时也无需更改调用端。同时，工厂方法模式解决了简单工厂模式的两个弊端。</p><ul><li>当生产的产品种类越来越多时，工厂类不会变成超级类。<strong>工厂类会越来越多</strong>，保持灵活。<strong>不会越来越大</strong>、变得臃肿。如果苹果的生产过程需要修改时，只需修改苹果工厂。梨子的生产过程需要修改时，只需修改梨子工厂。符合单一职责原则。</li><li>当需要生产新的产品时，无需更改既有的工厂，只需要<strong>添加新的工厂</strong>即可。保持了面向对象的可扩展性，符合开闭原则。</li></ul><h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><p>工厂方法模式可以进一步优化，提取出工厂接口：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IFactory</span> </span>{</span><br><span class="line">    <span class="function">Fruit <span class="title">create</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>然后苹果工厂和梨子工厂都实现此接口：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppleFactory</span> <span class="keyword">implements</span> <span class="title">IFactory</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Fruit <span class="title">create</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Apple();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PearFactory</span> <span class="keyword">implements</span> <span class="title">IFactory</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Fruit <span class="title">create</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Pear();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>此时，调用者可以将 <code>AppleFactory</code> 和 <code>PearFactory</code> 统一作为 <code>IFactory</code> 对象使用：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>{</span><br><span class="line">        IFactory appleFactory = <span class="keyword">new</span> AppleFactory();</span><br><span class="line">        Fruit apple = appleFactory.create();</span><br><span class="line">        IFactory pearFactory = <span class="keyword">new</span> PearFactory();</span><br><span class="line">        Fruit pear = pearFactory.create();</span><br><span class="line">        apple.eat();</span><br><span class="line">        pear.eat();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>可以看到，我们在创建时指定了具体的工厂类后，在使用时就无需再关心是哪个工厂类，只需要将此工厂当作抽象的 <code>IFactory</code> 接口使用即可。这种经过抽象的工厂方法模式被称作<strong>抽象工厂模式</strong>。</p><p>由于客户端只和 <code>IFactory</code> 打交道了，调用的是接口中的方法，使用时根本<strong>不需要知道是在哪个具体工厂</strong>中实现的这些方法，这就使得<strong>替换工厂</strong>变得非常容易。</p><p>例如：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>{</span><br><span class="line">        IFactory factory = <span class="keyword">new</span> AppleFactory();</span><br><span class="line">        Fruit fruit = factory.create();</span><br><span class="line">        fruit.eat();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>如果需要替换为吃梨子，只需要更改一行代码即可：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>{</span><br><span class="line">        IFactory factory = <span class="keyword">new</span> PearFactory();</span><br><span class="line">        Fruit fruit = factory.create();</span><br><span class="line">        fruit.eat();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>IFactory 中只有一个抽象方法时，或许还看不出抽象工厂模式的威力。实际上抽象工厂模式主要用于替换一系列方法。例如将程序中的 SQL Server 数据库整个替换为 Access 数据库，使用抽象方法模式的话，只需在 IFactory 接口中定义好增删改查四个方法，让 SQLFactory 和 AccessFactory 实现此接口，调用时直接使用 IFactory 中的抽象方法即可，调用者无需知道使用的什么数据库，我们就可以非常方便的整个替换程序的数据库，并且让客户端毫不知情。</p><p>抽象工厂模式很好的发挥了开闭原则、依赖倒置原则，但缺点是抽象工厂模式<strong>太重了</strong>，如果 IFactory 接口需要新增功能，则会影响到所有的具体工厂类。使用抽象工厂模式，替换具体工厂时只需更改一行代码，但要新增抽象方法则需要修改所有的具体工厂类。所以抽象工厂模式适用于增加同类工厂这样的横向扩展需求，不适合新增功能这样的纵向扩展。</p><blockquote><p>参考：<a href="https://zhuanlan.zhihu.com/p/85624457" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/85624457</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在平时编程中，构建对象最常用的方式是 new 一个对象。乍一看这种做法没什么不好，而实际上这也属于一种硬编码。每 new 一个对象，相当于&lt;strong&gt;调用者多知道了一个类&lt;/strong&gt;，增加了类与类之间的联系，不利于程序的松耦合。其实构建过程可以被封装起来，工厂模式便是用于封装对象的设计模式。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="设计模式" scheme="http://blog.iwxyi.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>单例模式</title>
    <link href="http://blog.iwxyi.com/2019/10/12/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://blog.iwxyi.com/2019/10/12/单例模式/</id>
    <published>2019-10-12T12:17:00.000Z</published>
    <updated>2019-10-12T23:43:40.492Z</updated>
    
    <content type="html"><![CDATA[<p>单例模式非常常见，某个对象全局只需要一个实例时，就可以使用单例模式。它的优点也显而易见：</p><ul><li>它能够避免对象重复创建，节约空间并提升效率</li><li>避免由于操作不同实例导致的逻辑错误</li></ul><p>单例模式有两种实现方式：<strong>饿汉式</strong>和<strong>懒汉式</strong>。</p><a id="more"></a><h2 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h2><p>饿汉式：变量在声明时便初始化。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>{</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>{</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>可以看到，我们将构造方法定义为 <code>private</code>，这就保证了其他类无法实例化此类，必须通过 <code>getInstance</code> 方法才能获取到唯一的 instance 实例，非常直观。但饿汉式有一个弊端，那就是即使这个单例不需要使用，它也会<strong>在类加载之后立即创建出来，占用一块内存，并增加类初始化时间</strong>。就好比一个电工在修理灯泡时，先把所有工具拿出来，不管是不是所有的工具都用得上。就像一个饥不择食的饿汉，所以称之为饿汉式。</p><h2 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h2><p>懒汉式：先声明一个空变量，需要用时才初始化。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>{</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">null</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>{</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) {</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>我们先声明了一个初始值为 null 的 instance 变量，当需要使用时判断此变量是否已被初始化，没有初始化的话才 new 一个实例出来。就好比电工在修理灯泡时，开始比较偷懒，什么工具都不拿，当发现需要使用螺丝刀时，才把螺丝刀拿出来。当需要用钳子时，再把钳子拿出来。就像一个不到万不得已不会行动的懒汉，所以称之为懒汉式。</p><p>懒汉式解决了饿汉式的弊端，好处是<strong>按需加载，避免了内存浪费，减少了类初始化时间</strong>。</p><h3 id="双检锁方式：线程安全"><a href="#双检锁方式：线程安全" class="headerlink" title="双检锁方式：线程安全"></a>双检锁方式：线程安全</h3><p>上述代码的懒汉式单例乍一看没什么问题，但其实它不是线程安全的。如果有多个线程同一时间调用 getInstance 方法，instance 变量<strong>可能会被实例化多次</strong>。为了保证线程安全，我们需要给判空过程加上锁：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>{</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">synchronized</span> (Singleton.class) {</span><br><span class="line">            <span class="keyword">if</span> (instance == <span class="keyword">null</span>) {</span><br><span class="line">                instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这样就能保证多个线程调用 getInstance 时，一次最多只有一个线程能够执行判空并 new 出实例的操作，所以 instance 只会实例化一次。</p><h4 id="双检锁提高性能"><a href="#双检锁提高性能" class="headerlink" title="双检锁提高性能"></a>双检锁提高性能</h4><p>但这样的写法仍然有问题，当多个线程调用 getInstance 时，每次都需要执行 synchronized 同步化方法，这样会严重影响程序的执行效率。所以更好的做法是在同步化之前，<strong>再加上一层检查</strong>：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>{</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) {</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) {</span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这样增加一种检查方式后，如果 instance 已经被实例化，则不会执行同步化操作，大大提升了程序效率。上面这种写法也就是我们平时较常用的双检锁方式实现的线程安全的单例模式。</p><h3 id="静态内部类方式"><a href="#静态内部类方式" class="headerlink" title="静态内部类方式"></a>静态内部类方式</h3><p>除了双检锁方式外，还有一种比较常见的静态内部类方式保证懒汉式单例的线程安全：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>{</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>{</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.instance;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>虽然我们经常使用这种静态内部类的懒加载方式，但其中的原理不一定每个人都清楚。接下来我们便来分析其原理，搞清楚两个问题：</p><ul><li>静态内部类方式是怎么实现懒加载的</li><li>静态内部类方式是怎么保证线程安全的</li></ul><blockquote><p>Java 类的加载过程包括：加载、验证、准备、解析、初始化。初始化阶段即执行类的 clinit 方法（clinit = class + initialize），包括为类的静态变量赋初始值和执行静态代码块中的内容。但<strong>不会立即加载内部类，内部类会在使用时才加载</strong>。所以当此 Singleton 类加载时，SingletonHolder 并不会被立即加载，所以不会像饿汉式那样占用内存。</p><p>另外，Java 虚拟机规定，<strong>当访问一个类的静态字段时，如果该类尚未初始化，则立即初始化此类</strong>。当调用Singleton 的 getInstance 方法时，由于其使用了 SingletonHolder 的静态变量 instance，所以这时才会去初始化 SingletonHolder，在 SingletonHolder 中 new 出 Singleton 对象。这就实现了懒加载。</p><p>第二个问题的答案是 Java 虚拟机的设计是非常稳定的，早已经考虑到了多线程并发执行的情况。虚拟机在加载类的 clinit 方法时，会保证 clinit 在多线程中被正确的加锁、同步。<strong>即使有多个线程同时去初始化一个类，一次也只有一个线程可以执行 clinit 方法</strong>，其他线程都需要阻塞等待，从而保证了线程安全。</p></blockquote><p>懒汉式的缺点就是<strong>将程序加载时间从启动时延后到了运行时</strong>，虽然启动时间缩短了，但我们浏览页面时就会看到数据的 loading 过程。</p><p>一般的建议是：对于构建不复杂，加载完成后会立即使用的单例对象，推荐使用饿汉式。对于构建过程耗时较长，并不是所有使用此类都会用到的单例对象，推荐使用懒汉式。</p><blockquote><p>参考：<a href="https://zhuanlan.zhihu.com/p/85624457" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/85624457</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;单例模式非常常见，某个对象全局只需要一个实例时，就可以使用单例模式。它的优点也显而易见：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;它能够避免对象重复创建，节约空间并提升效率&lt;/li&gt;
&lt;li&gt;避免由于操作不同实例导致的逻辑错误&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;单例模式有两种实现方式：&lt;strong&gt;饿汉式&lt;/strong&gt;和&lt;strong&gt;懒汉式&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="多线程" scheme="http://blog.iwxyi.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="设计模式" scheme="http://blog.iwxyi.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>GCC和G++的区别</title>
    <link href="http://blog.iwxyi.com/2019/09/18/GCC%E5%92%8CG-%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://blog.iwxyi.com/2019/09/18/GCC和G-的区别/</id>
    <published>2019-09-18T00:23:00.000Z</published>
    <updated>2019-10-13T00:24:17.598Z</updated>
    
    <content type="html"><![CDATA[<p>gcc和g++都是GNU(组织)的一个编译器。</p><p>误区一:<strong>gcc只能编译c代码,g++只能编译c++代码</strong><br><strong>两者都可以</strong>，但是请注意：<br>1<strong>.后缀为.c的，gcc把它当作是C程序，而g++当作是c++程序</strong>；后缀为.cpp的，两者都会认为是c++程序，注意，虽然<strong>c++是c的超集，但是两者对语法的要求是有区别的。C++的语法规则更加严谨一些。</strong><br>2.<strong>编译阶段，g++会调用gcc，对于c++代码，两者是等价的</strong>，但是因为<strong>gcc命令不能自动和C＋＋程序使用的库联接，所以通常用g++来完成链接</strong>，<strong>为了统一起见，干脆编译/链接统统用g++了，这就给人一种错觉，好像cpp程序只能用g++似的。</strong> </p><a id="more"></a><p>误区二:<strong>gcc不会定义__cplusplus宏，而g++会</strong><br>实际上，这个宏只是标志着编译器将会把代码按C还是C++语法来解释，如上所述，如果后缀为.c，并且采用gcc编译器，则该宏就是未定义的，否则，就是已定义。</p><p>误区三:<strong>编译只能用gcc，链接只能用g++</strong><br>严格来说，这句话不算错误，但是它混淆了概念，应该这样说：<strong>编译可以用gcc/g++，而链接可以用g++或者gcc -lstdc++。</strong>因为<strong>gcc命令不能自动和C＋＋程序使用的库联接，所以通常使用g++来完成联接。但在编译阶段，g++会自动调用gcc，二者等价。</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;gcc和g++都是GNU(组织)的一个编译器。&lt;/p&gt;
&lt;p&gt;误区一:&lt;strong&gt;gcc只能编译c代码,g++只能编译c++代码&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;两者都可以&lt;/strong&gt;，但是请注意：&lt;br&gt;1&lt;strong&gt;.后缀为.c的，gcc把它当作是C程序，而g++当作是c++程序&lt;/strong&gt;；后缀为.cpp的，两者都会认为是c++程序，注意，虽然&lt;strong&gt;c++是c的超集，但是两者对语法的要求是有区别的。C++的语法规则更加严谨一些。&lt;/strong&gt;&lt;br&gt;2.&lt;strong&gt;编译阶段，g++会调用gcc，对于c++代码，两者是等价的&lt;/strong&gt;，但是因为&lt;strong&gt;gcc命令不能自动和C＋＋程序使用的库联接，所以通常用g++来完成链接&lt;/strong&gt;，&lt;strong&gt;为了统一起见，干脆编译/链接统统用g++了，这就给人一种错觉，好像cpp程序只能用g++似的。&lt;/strong&gt; &lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C++" scheme="http://blog.iwxyi.com/tags/C/"/>
    
      <category term="编译原理" scheme="http://blog.iwxyi.com/tags/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>C++可变长参数</title>
    <link href="http://blog.iwxyi.com/2019/08/11/C-%E5%8F%AF%E5%8F%98%E9%95%BF%E5%8F%82%E6%95%B0/"/>
    <id>http://blog.iwxyi.com/2019/08/11/C-可变长参数/</id>
    <published>2019-08-11T00:13:00.000Z</published>
    <updated>2019-10-13T00:22:46.607Z</updated>
    
    <content type="html"><![CDATA[<p><code>type function(type arg1, ...) { }</code></p><a id="more"></a><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdarg&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">vsum</span><span class="params">(<span class="keyword">int</span> count, ...)</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个变长参数类型的指针变量：ap （Argument Pointer）</span></span><br><span class="line">    va_list ap;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化指针变量ap.</span></span><br><span class="line">    <span class="comment">// 第二个参数count是用来确定ap的起始位置的，count是vsum的第一个参数，</span></span><br><span class="line">    <span class="comment">// 注意： 如果vsum在count参数后，还有一个命名的参数叫abc, 那么就要va_start(ap, abc)来初始化ap了</span></span><br><span class="line">    <span class="comment">// 后边的变长参数是根据count的地址来计算出来</span></span><br><span class="line">    va_start(ap, count);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">val</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历变长参数内容，通过ap。</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;count; ++i) {</span><br><span class="line">        <span class="comment">// va_arg的第一个参数是va_list定义的变长参数指针ap，</span></span><br><span class="line">        <span class="comment">// 第二个参数指明了当前位置变长参数的类型。va_arg会自动改变ap的指针位置。</span></span><br><span class="line">        <span class="comment">// 下次再调用va_arg它就自动取下一个参数了，这里ap就像个迭代器</span></span><br><span class="line">        val = va_arg(ap, <span class="keyword">int</span>);</span><br><span class="line">        sum += val;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清理工作</span></span><br><span class="line">    va_end(ap);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; vsum(<span class="number">4</span>, <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>示例：递归求和</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function">T <span class="title">vsum</span><span class="params">(<span class="keyword">const</span> T &amp;t)</span> </span>{ <span class="keyword">return</span> t; }</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ... Args&gt;</span><br><span class="line"><span class="function">T <span class="title">vsum</span><span class="params">(<span class="keyword">const</span> T &amp;t, <span class="keyword">const</span> Args&amp;... args)</span> </span>{</span><br><span class="line">    <span class="function">T <span class="title">sum</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">    sum += t;</span><br><span class="line">    sum += vsum(args...);</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; vsum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><blockquote><p>参考：<a href="https://blog.csdn.net/elloop/article/details/50092631" target="_blank" rel="noopener">https://blog.csdn.net/elloop/article/details/50092631</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;type function(type arg1, ...) { }&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C++" scheme="http://blog.iwxyi.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>小顶堆TopN</title>
    <link href="http://blog.iwxyi.com/2019/07/07/%E5%B0%8F%E9%A1%B6%E5%A0%86TopN/"/>
    <id>http://blog.iwxyi.com/2019/07/07/小顶堆TopN/</id>
    <published>2019-07-07T12:48:00.000Z</published>
    <updated>2019-10-12T12:49:29.508Z</updated>
    
    <content type="html"><![CDATA[<p>应用场景：10亿个数中取前1000大的数</p><a id="more"></a><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmallHeap</span> </span>{</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;description&gt;获取前N数据&lt;/description&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> n</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: ouyp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span>: Seeyon V7.0 SP2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018年10月16日 下午4:52:27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] topN(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> n) {</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 构建堆积</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">int</span>[] list = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">System.arraycopy(arr, <span class="number">0</span>, list, <span class="number">0</span>, n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line"><span class="keyword">int</span> t = i;</span><br><span class="line"><span class="keyword">while</span> (t != <span class="number">0</span> &amp;&amp; list[parent(t)] &gt; list[t]) {</span><br><span class="line">swap(list, t, t = parent(t));</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 小顶堆</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n, len = arr.length; i &lt; len; i++) {</span><br><span class="line"><span class="keyword">if</span> (arr[i] &gt;= list[<span class="number">0</span>]) {</span><br><span class="line"><span class="comment">// 置换栈顶</span></span><br><span class="line">list[<span class="number">0</span>] = arr[i];</span><br><span class="line"><span class="comment">// 调整栈顶</span></span><br><span class="line"><span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ((left(t) &lt; n &amp;&amp; list[t] &gt; list[left(t)]) || (right(t) &lt; n &amp;&amp; list[t] &gt; list[right(t)])) {</span><br><span class="line"><span class="keyword">if</span> (right(t) &lt; n &amp;&amp; list[right(t)] &lt; list[left(t)]) {</span><br><span class="line">swap(list, t, t = right(t));</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">swap(list, t, t = left(t));</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;description&gt;对象交换&lt;/description&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> list</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> j</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: ouyp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span>: Seeyon V7.0 SP2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018年10月16日 下午4:56:33</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] list, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> tmp = list[i];</span><br><span class="line">list[i] = list[j];</span><br><span class="line">list[j] = tmp;</span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;description&gt;父节点索引&lt;/description&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: ouyp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018年10月16日 下午3:34:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">parent</span><span class="params">(<span class="keyword">int</span> i)</span> </span>{</span><br><span class="line"><span class="keyword">return</span> (i - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;description&gt;左孩子索引&lt;/description&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: ouyp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018年10月16日 下午4:01:30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">left</span><span class="params">(<span class="keyword">int</span> i)</span> </span>{</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span> * i + <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;description&gt;右孩子索引&lt;/description&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: ouyp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018年10月16日 下午4:02:04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">right</span><span class="params">(<span class="keyword">int</span> i)</span> </span>{</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span> * i + <span class="number">2</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]{<span class="number">56</span>, <span class="number">30</span>, <span class="number">71</span>, <span class="number">18</span>, <span class="number">29</span>, <span class="number">93</span>, <span class="number">44</span>, <span class="number">75</span>, <span class="number">20</span>, <span class="number">65</span>, <span class="number">68</span>, <span class="number">34</span>};</span><br><span class="line">System.out.println(<span class="string">"原始数组: "</span>);</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line">System.out.println(<span class="string">"调整后数组: "</span>);</span><br><span class="line">System.out.println(Arrays.toString(SmallHeap.topN(arr, <span class="number">5</span>)));</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;应用场景：10亿个数中取前1000大的数&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="算法" scheme="http://blog.iwxyi.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>C++ new和malloc的10点区别</title>
    <link href="http://blog.iwxyi.com/2019/04/18/C-new%E5%92%8Cmalloc%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://blog.iwxyi.com/2019/04/18/C-new和malloc的区别/</id>
    <published>2019-04-18T00:27:00.000Z</published>
    <updated>2019-10-13T01:59:55.873Z</updated>
    
    <content type="html"><![CDATA[## 1. 申请的内存所在位置<p>new操作符从<strong>自由存储区（free store）</strong>上为对象动态分配内存空间，而malloc函数从<strong>堆</strong>上动态分配内存。自由存储区是C++基于new操作符的一个抽象概念，凡是通过new操作符进行内存申请，该内存即为自由存储区。而堆是操作系统中的术语，是操作系统所维护的一块特殊内存，用于程序的内存动态分配，C语言使用malloc从堆上分配内存，使用free释放已分配的对应内存。</p><a id="more"></a><p>那么自由存储区是否能够是堆（问题等价于new是否能在堆上动态分配内存），这取决于operator new 的实现细节。自由存储区不仅可以是堆，还可以是静态存储区，这都看operator new在哪里为对象分配内存。</p><p>特别的，new甚至可以不为对象分配内存！<strong>定位new</strong>的功能可以办到这一点：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> (place_address) type</span><br></pre></td></tr></tbody></table></figure><p>place_address为一个指针，代表一块内存的地址。当使用上面这种仅以一个地址调用new操作符时，new操作符调用特殊的operator new，也就是下面这个版本：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> * <span class="keyword">operator</span> <span class="title">new</span> <span class="params">(<span class="keyword">size_t</span>,<span class="keyword">void</span> *)</span> <span class="comment">//不允许重定义这个版本的operator new</span></span></span><br></pre></td></tr></tbody></table></figure><p>这个operator new<strong>不分配任何的内存</strong>，它只是简单地返回指针实参，然后右new表达式负责在place_address指定的地址进行对象的初始化工作。</p><h2 id="2-返回类型安全性"><a href="#2-返回类型安全性" class="headerlink" title="2.返回类型安全性"></a>2.返回类型安全性</h2><p>new操作符内存分配成功时，返回的是对象类型的指针，类型严格与对象匹配，无须进行类型转换，故new是符合<strong>类型安全</strong>性的操作符。而malloc内存分配成功则是返回void * ，需要通过强制类型转换将void*指针转换成我们需要的类型。<br>类型安全很大程度上可以等价于内存安全，类型安全的代码不会试图方法自己没被授权的内存区域。关于C++的类型安全性可说的又有很多了。</p><h2 id="3-内存分配失败时的返回值"><a href="#3-内存分配失败时的返回值" class="headerlink" title="3.内存分配失败时的返回值"></a>3.内存分配失败时的返回值</h2><p>new内存分配失败时，会抛出bac_alloc异常，它<strong>不会返回NULL</strong>；malloc分配内存失败时返回NULL。<br>在使用C语言时，我们习惯在malloc分配内存后判断分配是否成功：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *a  = (<span class="keyword">int</span> *)<span class="built_in">malloc</span> ( <span class="keyword">sizeof</span> (<span class="keyword">int</span> ));</span><br><span class="line"><span class="keyword">if</span>(<span class="literal">NULL</span> == a)</span><br><span class="line">{</span><br><span class="line">    ...</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">{</span><br><span class="line">    ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>从C语言走入C++阵营的新手可能会把这个习惯带入C++：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> * a = <span class="keyword">new</span> <span class="keyword">int</span>();</span><br><span class="line"><span class="keyword">if</span>(<span class="literal">NULL</span> == a)</span><br><span class="line">{</span><br><span class="line">    ...</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{   </span><br><span class="line">    ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>实际上这样做<strong>一点意义也没有</strong>，因为new根本不会返回NULL，而且程序能够执行到if语句已经说明内存分配成功了，如果失败早就抛异常了。正确的做法应该是使用异常机制：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">int</span> *a = <span class="keyword">new</span> <span class="keyword">int</span>();</span><br><span class="line">}</span><br><span class="line"><span class="keyword">catch</span> (bad_alloc)</span><br><span class="line">{</span><br><span class="line">    ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>如果你想顺便了解下异常基础，可以看<a href="http://www.cnblogs.com/QG-whz/p/5136883.htmlC++" target="_blank" rel="noopener">http://www.cnblogs.com/QG-whz/p/5136883.htmlC++</a> 异常机制分析。</p><h2 id="4-是否需要指定内存大小"><a href="#4-是否需要指定内存大小" class="headerlink" title="4.是否需要指定内存大小"></a>4.是否需要指定内存大小</h2><p>使用new操作符申请内存分配时无须指定内存块的大小，编译器会根据类型信息自行计算，而malloc则需要显式地指出所需内存的尺寸。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>{</span>...}</span><br><span class="line">A * ptr = <span class="keyword">new</span> A;</span><br><span class="line">A * ptr = (A *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(A)); <span class="comment">//需要显式指定所需内存大小sizeof(A);</span></span><br></pre></td></tr></tbody></table></figure><p>当然了，我这里使用malloc来为我们自定义类型分配内存是不怎么合适的，请看下一条。</p><h2 id="5-是否调用构造函数-析构函数"><a href="#5-是否调用构造函数-析构函数" class="headerlink" title="5.是否调用构造函数/析构函数"></a>5.是否调用构造函数/析构函数</h2><p>使用new操作符来分配对象内存时会经历三个步骤：</p><ul><li>第一步：调用operator new 函数（对于数组是operator new[]）分配一块足够大的，<strong>原始</strong>的，未命名的内存空间以便存储特定类型的对象。</li><li>第二步：编译器运行相应的<strong>构造函数</strong>以构造对象，并为其传入初值。</li><li>第三部：对象构造完成后，返回一个指向该对象的指针。</li></ul><p>使用delete操作符来释放对象内存时会经历两个步骤：</p><ul><li>第一步：调用对象的析构函数。</li><li>第二步：编译器调用operator delete(或operator delete[])函数释放内存空间。</li></ul><p>总之来说，new/delete会调用对象的构造函数/析构函数以完成对象的构造/析构。而malloc则不会。如果你不嫌啰嗦可以看下我的例子：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    A() :a(<span class="number">1</span>), b(<span class="number">1.11</span>){}</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">double</span> b;</span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    A * ptr = (A*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(A));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在return处设置断点，观看ptr所指内存的内容：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://images2015.cnblogs.com/blog/610439/201601/610439-20160119004300406-962244228.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p>可以看出A的默认构造函数并没有被调用，因为数据成员a,b的值并没有得到初始化，这也是上面我为什么说使用malloc/free来处理C++的自定义类型不合适，其实不止自定义类型，标准库中凡是需要构造/析构的类型通通不合适。</p><p>而使用new来分配对象时：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    A * ptr = <span class="keyword">new</span> A;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>查看程序生成的汇编代码可以发现，A的默认构造函数被调用了：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://images2015.cnblogs.com/blog/610439/201601/610439-20160119004332328-1197338727.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><h2 id="6-对数组的处理"><a href="#6-对数组的处理" class="headerlink" title="6.对数组的处理"></a>6.对数组的处理</h2><p>C++提供了new[]与delete[]来专门处理数组类型:</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A * ptr = <span class="keyword">new</span> A[<span class="number">10</span>];<span class="comment">//分配10个A对象</span></span><br></pre></td></tr></tbody></table></figure><p>使用new[]分配的内存必须使用delete[]进行释放：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> [] ptr;</span><br></pre></td></tr></tbody></table></figure><p>new对数组的支持体现在它会分别调用构造函数函数初始化每一个数组元素，释放对象时为每个对象调用析构函数。注意delete[]要与new[]配套使用，不然会找出数组对象部分释放的现象，造成内存泄漏。</p><p>至于malloc，它并知道你在这块内存上要放的数组还是啥别的东西，反正它就给你一块原始的内存，在给你个内存的地址就完事。所以如果要动态分配一个数组的内存，还需要我们手动自定数组的大小：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int * ptr = (int *) malloc( sizeof(int)* 10 );//分配一个10个int元素的数组</span><br></pre></td></tr></tbody></table></figure><h2 id="7-new与malloc是否可以相互调用"><a href="#7-new与malloc是否可以相互调用" class="headerlink" title="7.new与malloc是否可以相互调用"></a>7.new与malloc是否可以相互调用</h2><p>operator new /operator delete的实现可以基于malloc，而malloc的实现不可以去调用new。下面是编写operator new /operator delete 的一种简单方式，其他版本也与之类似：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> * <span class="keyword">operator</span> <span class="title">new</span> <span class="params">(<span class="keyword">sieze_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">void</span> * mem = <span class="built_in">malloc</span>(size)</span><br><span class="line">        <span class="keyword">return</span> mem;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">throw</span> bad_alloc();</span><br><span class="line">}</span><br><span class="line"><span class="keyword">void</span> <span class="keyword">operator</span> <span class="keyword">delete</span>(<span class="keyword">void</span> *mem) <span class="keyword">noexcept</span></span><br><span class="line">{</span><br><span class="line">    <span class="built_in">free</span>(mem);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="8-是否可以被重载"><a href="#8-是否可以被重载" class="headerlink" title="8.是否可以被重载"></a>8.是否可以被重载</h2><p>opeartor new /operator delete可以被重载。标准库是定义了operator new函数和operator delete函数的8个重载版本：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这些版本可能抛出异常</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> * <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="keyword">size_t</span>)</span></span>;</span><br><span class="line"><span class="keyword">void</span> * <span class="keyword">operator</span> <span class="keyword">new</span>[](<span class="keyword">size_t</span>);</span><br><span class="line"><span class="function"><span class="keyword">void</span> * <span class="keyword">operator</span> <span class="title">delete</span> <span class="params">(<span class="keyword">void</span> * )</span><span class="keyword">noexcept</span></span>;</span><br><span class="line"><span class="keyword">void</span> * <span class="keyword">operator</span> <span class="keyword">delete</span>[](<span class="keyword">void</span> *<span class="number">0</span>）<span class="keyword">noexcept</span>;</span><br><span class="line"><span class="comment">//这些版本承诺不抛出异常</span></span><br><span class="line"><span class="keyword">void</span> * <span class="keyword">operator</span> <span class="keyword">new</span>(<span class="keyword">size_t</span> ,<span class="keyword">nothrow_t</span>&amp;) <span class="keyword">noexcept</span>;</span><br><span class="line"><span class="keyword">void</span> * <span class="keyword">operator</span> <span class="keyword">new</span>[](<span class="keyword">size_t</span>, <span class="keyword">nothrow_t</span>&amp; );</span><br><span class="line"><span class="keyword">void</span> * <span class="keyword">operator</span> <span class="keyword">delete</span> (<span class="keyword">void</span> *,<span class="keyword">nothrow_t</span>&amp; )<span class="keyword">noexcept</span>;</span><br><span class="line"><span class="keyword">void</span> * <span class="keyword">operator</span> <span class="keyword">delete</span>[](<span class="keyword">void</span> *<span class="number">0</span>,<span class="keyword">nothrow_t</span>&amp; ）<span class="keyword">noexcept</span>;</span><br></pre></td></tr></tbody></table></figure><p>我们可以自定义上面函数版本中的任意一个，前提是自定义版本必须位于全局作用域或者类作用域中。太细节的东西不在这里讲述，总之，我们知道我们有足够的自由去重载operator new /operator delete ,以决定我们的new与delete如何为对象分配内存，如何回收对象。</p><p>而malloc/free并<strong>不允许重载</strong>。</p><h2 id="9-能够直观地重新分配内存"><a href="#9-能够直观地重新分配内存" class="headerlink" title="9. 能够直观地重新分配内存"></a>9. 能够直观地重新分配内存</h2><p>使用malloc分配的内存后，如果在使用过程中发现内存不足，可以使用realloc函数进行内存重新分配实现内存的扩充。realloc先判断当前的指针所指内存是否有足够的连续空间，如果有，原地扩大可分配的内存地址，并且返回原来的地址指针；如果空间不够，先按照新指定的大小分配空间，将原有数据从头到尾拷贝到新分配的内存区域，而后释放原来的内存区域。</p><p>new没有这样直观的配套设施来扩充内存。</p><h2 id="10-客户处理内存分配不足"><a href="#10-客户处理内存分配不足" class="headerlink" title="10. 客户处理内存分配不足"></a>10. 客户处理内存分配不足</h2><p>在operator new抛出异常以反映一个未获得满足的需求之前，它会先调用一个用户指定的错误处理函数，这就是<strong>new-handler</strong>。new_handler是一个指针类型：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="built_in">std</span></span><br><span class="line">{</span><br><span class="line">    <span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*new_handler)</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>指向了一个没有参数没有返回值的函数,即为错误处理函数。为了指定错误处理函数，客户需要调用set_new_handler，这是一个声明于的一个标准库函数:</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="built_in">std</span></span><br><span class="line">{</span><br><span class="line">    <span class="function">new_handler <span class="title">set_new_handler</span><span class="params">(new_handler p )</span> <span class="title">throw</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>set_new_handler的参数为new_handler指针，指向了operator new 无法分配足够内存时该调用的函数。其返回值也是个指针，指向set_new_handler被调用前正在执行（但马上就要发生替换）的那个new_handler函数。</p><p>对于malloc，客户并不能够去编程决定内存不足以分配时要干什么事，只能看着malloc返回NULL。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>将上面所述的10点差别整理成表格：</p><table><thead><tr><th align="center">特征</th><th align="center">new/delete</th><th align="center">malloc/free</th></tr></thead><tbody><tr><td align="center">分配内存的位置</td><td align="center">自由存储区</td><td align="center">堆</td></tr><tr><td align="center">内存分配成功的返回值</td><td align="center">完整类型指针</td><td align="center">void*</td></tr><tr><td align="center">内存分配失败的返回值</td><td align="center">默认抛出异常</td><td align="center">返回NULL</td></tr><tr><td align="center">分配内存的大小</td><td align="center">由编译器根据类型计算得出</td><td align="center">必须显式指定字节数</td></tr><tr><td align="center">处理数组</td><td align="center">有处理数组的new版本new[]</td><td align="center">需要用户计算数组的大小后进行内存分配</td></tr><tr><td align="center">已分配内存的扩充</td><td align="center">无法直观地处理</td><td align="center">使用realloc简单完成</td></tr><tr><td align="center">是否相互调用</td><td align="center">可以，看具体的operator new/delete实现</td><td align="center">不可调用new</td></tr><tr><td align="center">分配内存时内存不足</td><td align="center">客户能够指定处理函数或重新制定分配器</td><td align="center">无法通过用户代码进行处理</td></tr><tr><td align="center">函数重载</td><td align="center">允许</td><td align="center">不允许</td></tr><tr><td align="center">构造函数与析构函数</td><td align="center">调用</td><td align="center">不调用</td></tr></tbody></table><p>malloc给你的就好像一块原始的土地，你要种什么需要自己在土地上来播种</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://images2015.cnblogs.com/blog/610439/201601/610439-20160119011445828-2003774083.jpg" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p>而new帮你划好了田地的分块（数组），帮你播了种（构造函数），还提供其他的设施给你使用:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://images2015.cnblogs.com/blog/610439/201601/610439-20160119012007484-749179736.jpg" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p>当然，malloc并不是说比不上new，它们各自有适用的地方。在C++这种偏重OOP的语言，使用new/delete自然是更合适的。</p><hr><blockquote><p>参考：<a href="https://www.cnblogs.com/QG-whz/p/5140930.html" target="_blank" rel="noopener">https://www.cnblogs.com/QG-whz/p/5140930.html</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      ## 1. 申请的内存所在位置

&lt;p&gt;new操作符从&lt;strong&gt;自由存储区（free store）&lt;/strong&gt;上为对象动态分配内存空间，而malloc函数从&lt;strong&gt;堆&lt;/strong&gt;上动态分配内存。自由存储区是C++基于new操作符的一个抽象概念，凡是通过new操作符进行内存申请，该内存即为自由存储区。而堆是操作系统中的术语，是操作系统所维护的一块特殊内存，用于程序的内存动态分配，C语言使用malloc从堆上分配内存，使用free释放已分配的对应内存。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C++" scheme="http://blog.iwxyi.com/tags/C/"/>
    
      <category term="内存管理" scheme="http://blog.iwxyi.com/tags/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>公众号token服务器配置</title>
    <link href="http://blog.iwxyi.com/2019/04/14/%E5%85%AC%E4%BC%97%E5%8F%B7token%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/"/>
    <id>http://blog.iwxyi.com/2019/04/14/公众号token服务器配置/</id>
    <published>2019-04-14T12:30:00.000Z</published>
    <updated>2019-10-12T12:38:03.322Z</updated>
    
    <content type="html"><![CDATA[<h1 id="修改公众号的服务器配置"><a href="#修改公众号的服务器配置" class="headerlink" title="修改公众号的服务器配置"></a>修改公众号的服务器配置</h1><p><img src="/images/pasted-0.png" alt="配置"></p><p>Token配置代码，文件放在对应的URL路径下</p><p>微信会发送GET请求来验证</p><a id="more"></a><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">define(<span class="string">"TOKEN"</span>, <span class="string">"mrxy"</span>); <span class="comment">// 你自己的Token</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//验证消息</span></span><br><span class="line">$echoStr = $_GET[<span class="string">"echostr"</span>];</span><br><span class="line"><span class="keyword">if</span>(checkSignature()){</span><br><span class="line">    <span class="keyword">echo</span> $echoStr;</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//检查签名</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkSignature</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    $signature = $_GET[<span class="string">"signature"</span>];</span><br><span class="line">    $timestamp = $_GET[<span class="string">"timestamp"</span>];</span><br><span class="line">    $nonce = $_GET[<span class="string">"nonce"</span>];</span><br><span class="line">    $token = TOKEN;</span><br><span class="line">    $tmpArr = <span class="keyword">array</span>($token, $timestamp, $nonce);</span><br><span class="line">    sort($tmpArr, SORT_STRING);</span><br><span class="line">    $tmpStr = implode($tmpArr);</span><br><span class="line">    $tmpStr = sha1($tmpStr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>($tmpStr == $signature){</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    }<span class="keyword">else</span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>微信授权网页登录：<a href="https://www.cnblogs.com/whowhere/p/5787247.html" target="_blank" rel="noopener">https://www.cnblogs.com/whowhere/p/5787247.html</a></p></blockquote><blockquote><p>微信扫码登录：<a href="https://www.cnblogs.com/0201zcr/p/5133062.html" target="_blank" rel="noopener">https://www.cnblogs.com/0201zcr/p/5133062.html</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;修改公众号的服务器配置&quot;&gt;&lt;a href=&quot;#修改公众号的服务器配置&quot; class=&quot;headerlink&quot; title=&quot;修改公众号的服务器配置&quot;&gt;&lt;/a&gt;修改公众号的服务器配置&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/pasted-0.png&quot; alt=&quot;配置&quot;&gt;&lt;/p&gt;
&lt;p&gt;Token配置代码，文件放在对应的URL路径下&lt;/p&gt;
&lt;p&gt;微信会发送GET请求来验证&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="微信小程序" scheme="http://blog.iwxyi.com/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>C++ generate生成</title>
    <link href="http://blog.iwxyi.com/2019/02/28/C-generate%E7%94%9F%E6%88%90/"/>
    <id>http://blog.iwxyi.com/2019/02/28/C-generate生成/</id>
    <published>2019-02-27T23:51:00.000Z</published>
    <updated>2019-10-13T00:00:45.970Z</updated>
    
    <content type="html"><![CDATA[<p>根据首地址和尾地址来赋值：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ForwardIterator</span>, <span class="title">class</span> <span class="title">Generator</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">generate</span>(</span></span><br><span class="line"><span class="class"><span class="title">ForwardIterator</span> _<span class="title">First</span>,</span></span><br><span class="line"><span class="class"><span class="title">ForwardIterator</span> _<span class="title">Last</span>,</span></span><br><span class="line"><span class="class"><span class="title">Generator</span> _<span class="title">Gen</span></span></span><br><span class="line"><span class="class">);</span></span><br></pre></td></tr></tbody></table></figure><p>每次调用该对象，函数为范围的每个元素调用，且不需要返回相同的值。例如，从文件读取或引用和修改本地状态。 生成器的结果类型必须可转换为可用于向前迭代器类型的值范围的。</p><a id="more"></a><p>示例：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; v1 ( <span class="number">5</span> );</span><br><span class="line"><span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt;::iterator Iter1;</span><br><span class="line"></span><br><span class="line">generate ( v1.begin ( ), v1.end ( ) , rand );</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ( Iter1 = v1.begin( ) ; Iter1 != v1.end( ) ; Iter1++ )</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *Iter1 &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>// 根据首地址和元素数量来赋值</p><p><code>template&lt;class OutputIterator, class Diff, class Generator&gt;</code></p><p><code>void generate_n( OutputIterator First, Diff Count, Generator Gen);</code></p><p>参见：VS2015<br><a href="https://msdn.microsoft.com/zh-cn/library/46h7chx6.aspx" target="_blank" rel="noopener">https://msdn.microsoft.com/zh-cn/library/46h7chx6.aspx</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;根据首地址和尾地址来赋值：&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ForwardIterator&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Generator&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;title&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;generate&lt;/span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;	&lt;span class=&quot;title&quot;&gt;ForwardIterator&lt;/span&gt; _&lt;span class=&quot;title&quot;&gt;First&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;	&lt;span class=&quot;title&quot;&gt;ForwardIterator&lt;/span&gt; _&lt;span class=&quot;title&quot;&gt;Last&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;	&lt;span class=&quot;title&quot;&gt;Generator&lt;/span&gt; _&lt;span class=&quot;title&quot;&gt;Gen&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;每次调用该对象，函数为范围的每个元素调用，且不需要返回相同的值。例如，从文件读取或引用和修改本地状态。 生成器的结果类型必须可转换为可用于向前迭代器类型的值范围的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C++" scheme="http://blog.iwxyi.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET文件操作</title>
    <link href="http://blog.iwxyi.com/2019/01/24/ASP-NET%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    <id>http://blog.iwxyi.com/2019/01/24/ASP-NET文件操作/</id>
    <published>2019-01-24T13:09:00.000Z</published>
    <updated>2019-10-12T13:11:05.049Z</updated>
    
    <content type="html"><![CDATA[<p>以文件为例,如果对文件夹操作,基本上将File换为Directory即可<br>(例:<code>FileInfo file = new FileInfo(Path);</code>与<code>DirectoryInfo directory = new DirectoryInfo (Path);</code>)</p><a id="more"></a><p><strong>1获取文件信息</strong></p><p>在知道文件相对路径的情形,下面代码可以获取文件的详细信息</p><figure class="highlight c#"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fileinfo</span>(<span class="params"><span class="keyword">string</span> Path</span>)</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    Path = Server.MapPath(Path);<span class="comment">//获取文件的物理路径</span></span><br><span class="line">    FileInfo file = <span class="keyword">new</span> FileInfo(Path);<span class="comment">//实例该路径文件信息</span></span><br><span class="line">    <span class="keyword">var</span> length=file.Length;<span class="comment">//文件大小,字节</span></span><br><span class="line">    <span class="keyword">var</span> name = file.Name;<span class="comment">//文件名</span></span><br><span class="line">    <span class="keyword">var</span> fullname = file.FullName;<span class="comment">//文件路径</span></span><br><span class="line">    <span class="keyword">var</span> extension = file.Extension;<span class="comment">//文件后缀名</span></span><br><span class="line">    ......</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>获取的信息还有创建时间,最后访问时间等等,可以自行研究</p><p><strong>2新建文件</strong></p><p>新建一个文件。（Create 后会一直占用，最好加上 Dispose）</p><figure class="highlight c#"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">NewFile</span>(<span class="params"><span class="keyword">string</span> filePath</span>)</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    filePath=Server.MapPath(filePath);<span class="comment">//获取想创建文件的物理路径</span></span><br><span class="line">    <span class="keyword">if</span> (System.IO.File.Exists(newfilepath))</span><br><span class="line">    {</span><br><span class="line">        <span class="comment">//判断新建的文件是否已经存在</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"文件已经存在"</span>)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    System.IO.File.Create(newfilepath);<span class="comment">//创建</span></span><br><span class="line">    ......</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>3复制文件,移动(剪切)文件,重命名文件</strong></p><p>复制文件:</p><figure class="highlight c#"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Copy</span>(<span class="params"><span class="keyword">string</span> Path,<span class="keyword">string</span> targetPath</span>)</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    Path = Server.MapPath(Path);<span class="comment">//原文件的物理路径</span></span><br><span class="line">    targetPath = Server.MapPath(targetPath);<span class="comment">//复制到的新位置物理路径</span></span><br><span class="line">    <span class="comment">//判断到的新地址是否存在重命名文件</span></span><br><span class="line">    <span class="keyword">if</span> (System.IO.File.Exists(targetPath))</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"存在同名文件"</span>);<span class="comment">//抛出异常</span></span><br><span class="line">    }        </span><br><span class="line">     System.IO.File.Copy(Path,targetPath);<span class="comment">//复制到新位置,不允许覆盖现有文件</span></span><br><span class="line">    .......</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>移动文件,重命名:</p><figure class="highlight c#"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">MoveOrRename</span>(<span class="params"><span class="keyword">string</span> Path,<span class="keyword">string</span> targetPath</span>)</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    Path = Server.MapPath(Path);<span class="comment">//原文件的物理路径</span></span><br><span class="line">    targetPath = Server.MapPath(targetPath);<span class="comment">//移动到的新位置的物理路径(如果还是当前文件夹,则会重命名文件)</span></span><br><span class="line">    <span class="comment">//判断到的新地址是否存在重命名文件</span></span><br><span class="line">    <span class="keyword">if</span> (System.IO.File.Exists(targetPath))</span><br><span class="line">    {</span><br><span class="line">        <span class="comment">//判断是新位置是否存在同名(判断重命名是狗和其他文件冲突)</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"已经存在同名文件"</span>);</span><br><span class="line">    }</span><br><span class="line">    System.IO.File.Move(Path,targetPath);<span class="comment">//2个文件在不同目录则是移动,如果在相同目录下则是重命名</span></span><br><span class="line">    ......</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>复制文件不会删除,移动或者重命名(方法相同,就是目标位置不同)会删除原文件.</p><p> <strong>4上传文件</strong></p><figure class="highlight c#"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">HttpPost</span>]<span class="comment">//通过Post请求接收前台传来的文件数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ActionResult <span class="title">UploadFile</span>(<span class="params"><span class="keyword">string</span> dirPath</span>)</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">var</span> filepath = Server.MapPath(Path);<span class="comment">//获取上传的文件存入目录的物理路径</span></span><br><span class="line">    <span class="keyword">var</span> file = Request.Files[<span class="string">"file"</span>];<span class="comment">//获取文件内容</span></span><br><span class="line">    <span class="keyword">if</span> (file == <span class="literal">null</span> || file.ContentLength == <span class="number">0</span>)</span><br><span class="line">    {</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"文件不存在"</span>);<span class="comment">//简单判断下文件</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">var</span> newfilepath = Server.MapPath(dirPath + <span class="string">"\\"</span> + file.FileName);<span class="comment">//获取文件名的物理路径</span></span><br><span class="line">    <span class="comment">//判断要上传的文件是否与目录中的文件重命名</span></span><br><span class="line">    <span class="keyword">if</span> (System.IO.File.Exists(newfilepath))</span><br><span class="line">    {</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"文件不存在"</span>);<span class="comment">//简单判断下文件是否存在</span></span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//文件存放到指定的文件中 ;</span></span><br><span class="line">    file.SaveAs(newfilepath);</span><br><span class="line">    ......</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>会自动创建存有该类容和命名的文件,不用多此一举去创建一个新文件再放入内容.</p><p> <strong>5遍历当前目录和其子目录所有文件</strong></p><figure class="highlight c#"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">string</span>[] <span class="title">GetFiles</span>(<span class="params"><span class="keyword">string</span> dir, <span class="keyword">string</span> regexPattern = <span class="literal">null</span>, <span class="keyword">bool</span> recurse = <span class="literal">true</span>, <span class="keyword">bool</span> throwEx = <span class="literal">false</span></span>)</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="comment">//recurse:是否递归</span></span><br><span class="line">    <span class="comment">//throwEx:是否报出异常</span></span><br><span class="line">    List&lt;<span class="keyword">string</span>&gt; lst = <span class="keyword">new</span> List&lt;<span class="keyword">string</span>&gt;();</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">string</span> item <span class="keyword">in</span> Directory.GetFileSystemEntries(dir))</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">bool</span> isFile = (System.IO.File.GetAttributes(item) &amp; FileAttributes.Directory) != FileAttributes.Directory;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (isFile &amp;&amp; (regexPattern == <span class="literal">null</span> || Regex.IsMatch(Path.GetFileName(item), regexPattern, RegexOptions.IgnoreCase | RegexOptions.Multiline)))</span><br><span class="line">                {</span><br><span class="line">                    lst.Add(item);</span><br><span class="line">                }</span><br><span class="line"></span><br><span class="line">                <span class="comment">//递归</span></span><br><span class="line">                <span class="keyword">if</span> (recurse &amp;&amp; !isFile)</span><br><span class="line">                {</span><br><span class="line">                    lst.AddRange(GetFiles(item, regexPattern, <span class="literal">true</span>));</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">catch</span> { <span class="keyword">if</span> (throwEx) { <span class="keyword">throw</span>; } }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">catch</span> { <span class="keyword">if</span> (throwEx) { <span class="keyword">throw</span>; } }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> lst.ToArray();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p> 这个不多说,网上找到的代码,亲测有效</p><h3 id="System-IO-File-Create-不会自动释放，一定要Dispose"><a href="#System-IO-File-Create-不会自动释放，一定要Dispose" class="headerlink" title="System.IO.File.Create 不会自动释放，一定要Dispose"></a><a href="https://www.cnblogs.com/LCX/p/4307845.html" target="_blank" rel="noopener">System.IO.File.Create 不会自动释放，一定要Dispose</a></h3><p>这样会导致W3P进程一直占用这个文件</p><p><code>System.IO.File.Create(HttpContext.Current.Server.MapPath(strName));</code></p><p>最好加上<code>Dispose()</code></p><p><code>System.IO.File.Create(HttpContext.Current.Server.MapPath(strName)).Dispose();</code></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以文件为例,如果对文件夹操作,基本上将File换为Directory即可&lt;br&gt;(例:&lt;code&gt;FileInfo file = new FileInfo(Path);&lt;/code&gt;与&lt;code&gt;DirectoryInfo directory = new DirectoryInfo (Path);&lt;/code&gt;)&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="ASP.NET" scheme="http://blog.iwxyi.com/tags/ASP-NET/"/>
    
      <category term="文件" scheme="http://blog.iwxyi.com/tags/%E6%96%87%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET-学习笔记</title>
    <link href="http://blog.iwxyi.com/2019/01/15/ASP-NET-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://blog.iwxyi.com/2019/01/15/ASP-NET-学习笔记/</id>
    <published>2019-01-15T13:11:00.000Z</published>
    <updated>2019-10-12T23:17:36.838Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ASP-NET-简介"><a href="#ASP-NET-简介" class="headerlink" title="ASP.NET 简介"></a>ASP.NET 简介</h1><p>ASP.NET 是新一代的 ASP。它无法兼容经典 ASP，但 ASP.NET 可以引用 ASP。</p><a id="more"></a><p>ASP.NET 页面需要编译，因此比经典 ASP 更快。</p><p>ASP.NET 拥有更好的语言支持，大量用户控件，基于 XML 的组件，以及对用户认证的整合。</p><p>ASP.NET 页面的扩展名是 .aspx，通常由 VB (Visual Basic) 或 C# (C sharp) 编写。</p><p>ASP.NET 中的用户控件可以通过不同的语言进行编写，包括 C++ 和 Java。</p><p>当浏览器请求 ASP.NET 文件时，ASP.NET 引擎读取该文件，编译并执行文件中的脚本，然后以纯 HTML 向浏览器返回结果。</p><p>扩展名</p><ul><li>ASP 文件的文件扩展名是 .asp</li><li>ASP.NET 文件的文件扩展名是 .aspx</li><li>ASP.NET 文件使用 C# 语法的文件扩展名是 .cshtml</li><li>ASP.NET 文件使用 Razor VB 语法的文件扩展名是 .vbhtml</li></ul><h1 id="WP-教程"><a href="#WP-教程" class="headerlink" title="WP 教程"></a>WP 教程</h1><p>Web Pages 是三种 ASP.NET 编程模型中的一种，用于创建 ASP.NET 网站和 web 应用程序。</p><p>其他两种编程模型是 Web Forms 和 MVC (Model, View, Controller)。</p><p>Web Pages 是最简单的 ASP.NET 网页开发编程模型。它提供了一种简单的方法将 HTML、CSS、JavaScript 以及服务器代码结合起来。</p><h2 id="WP-Razor"><a href="#WP-Razor" class="headerlink" title="WP Razor"></a>WP Razor</h2><ul><li>Razor 是一种向网页添加基于服务器的代码的标记语法</li><li>Razor 拥有传统 ASP.NET 标记的能力，但是更易学习，更易使用</li><li>Razor 是一种类似 ASP 和 PHP 的服务器端标记语法</li><li>Razor 支持 C# 和 Visual Basic 编程语言</li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;The time is @DateTime.Now&lt;/p&gt;</span><br></pre></td></tr></tbody></table></figure><p>包含常规的 HTML 标记，此外还包含：由 @ 标记的 Razor 代码。</p><hr><p><strong>C# 的主要 Razor 语法规则</strong></p><ul><li>Razor 代码块由 @{ … } 包围</li><li>行内表达式（变量和函数）以 @ 开始</li><li>代码语句以分号结束</li><li>变量通过 var 关键词进行声明</li><li>字符串用引用来包围</li><li>C# 代码对大小写敏感</li><li>C# 文件的扩展名是 .cshtml</li></ul><p><strong>实例</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 单行代码块 --&gt;</span><br><span class="line">@{ var myMessage = "Hello World"; }</span><br><span class="line"></span><br><span class="line">&lt;!-- 行内表达式或变量 --&gt;</span><br><span class="line">&lt;p&gt;The value of myMessage is: @myMessage&lt;/p&gt; </span><br><span class="line"></span><br><span class="line">&lt;!-- 多行代码块 --&gt;</span><br><span class="line">@{</span><br><span class="line">var greeting = "Welcome to our site!";</span><br><span class="line">var weekDay = DateTime.Now.DayOfWeek;</span><br><span class="line">var greetingMessage = greeting + " Today is: " + weekDay;</span><br><span class="line">}</span><br><span class="line">&lt;p&gt;The greeting is: @greetingMessage&lt;/p&gt;</span><br></pre></td></tr></tbody></table></figure><hr><p><strong>VB 的主要 Razor 语法规则</strong></p><ul><li>Razor 代码块由 @Code … End 包围</li><li>行内表达式（变量和函数）以 @ 开始</li><li>变量通过 Dim 关键词进行声明</li><li>字符串用引用来包围</li><li>C# 代码对大小写不敏感</li><li>C# 文件的扩展名是 .vbhtml</li></ul><p><strong>实例</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 单行代码块 --&gt;</span><br><span class="line">@Code dim myMessage = "Hello World" End Code</span><br><span class="line"> </span><br><span class="line">&lt;!-- 行内表达式或变量 --&gt;</span><br><span class="line">&lt;p&gt;The value of myMessage is: @myMessage&lt;/p&gt; </span><br><span class="line"> </span><br><span class="line">&lt;!-- 多行代码块 --&gt;</span><br><span class="line">@Code</span><br><span class="line">dim greeting = "Welcome to our site!" </span><br><span class="line">dim weekDay = DateTime.Now.DayOfWeek </span><br><span class="line">dim greetingMessage = greeting &amp; " Today is: " &amp; weekDay</span><br><span class="line">End Code </span><br><span class="line"></span><br><span class="line">&lt;p&gt;The greeting is: @greetingMessage&lt;/p&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="WP-布局"><a href="#WP-布局" class="headerlink" title="WP 布局"></a>WP 布局</h2><p>###内容快</p><p>使用 <code>@RenderPage()</code> 方法从不同的文件导入内容。</p><p>内容块（来自另一个文件）能够被输入网页中的任意位置，并可包含文本、标记和代码，就像任何常规的网页那样。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    @RenderPage("header.cshtml")</span><br><span class="line">    &lt;h1&gt;Hello Web Pages&lt;/h1&gt; </span><br><span class="line">    &lt;p&gt;This is a paragraph&lt;/p&gt;</span><br><span class="line">    @RenderPage("footer.cshtml")</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="布局页面"><a href="#布局页面" class="headerlink" title="布局页面"></a>布局页面</h3><p>创建一致外观的另一种方法是使用布局网页。布局网页包含网页的结构，而不是内容。当网页（内容页）链接到布局页时，它会根据布局页（模板）来显示。</p><p>布局页类似普通的网页，但是会<strong>在引用内容页的位置调用 <code>@RenderBody()</code> 方法</strong>。</p><p>每个内容页必须以 <code>Layout</code> 指令开头。</p><p>布局网页：Layout.cshtml</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;p&gt;This is header text&lt;/p&gt;</span><br><span class="line">    @RenderBody()</span><br><span class="line">    &lt;p&gt;© 2012 W3School. All rights reserved.&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p>任意网页：（被包含在布局网页中）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@{Layout="Layout.cshtml";}</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;Welcome to W3Schools&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;</span><br><span class="line">Lorem ipsum dolor sit amet, consectetur adipisicing elit,sed do eiusmod tempor </span><br><span class="line">incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud </span><br><span class="line">exercitation ullamco laborisnisi ut aliquip ex ea commodo consequat.</span><br><span class="line">&lt;/p&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="防止代码泄露"><a href="#防止代码泄露" class="headerlink" title="防止代码泄露"></a>防止代码泄露</h3><p>名称以下划线开头的文件无法通过 web 来浏览。</p><p>隐藏敏感信息（数据库密码、电邮密码等）的常用方法是把这些信息保存在名为 “_AppStart” 的独立文件中</p><h4 id="AppStart-cshtml"><a href="#AppStart-cshtml" class="headerlink" title="_AppStart.cshtml"></a>_AppStart.cshtml</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@{</span><br><span class="line">    WebMail.SmtpServer = "mailserver.example.com";</span><br><span class="line">    WebMail.EnableSsl = true;</span><br><span class="line">    WebMail.UserName = "username@example.com";</span><br><span class="line">    WebMail.Password = "your-password";</span><br><span class="line">    WebMail.From = "your-name-here@example.com";</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="WP-文件夹"><a href="#WP-文件夹" class="headerlink" title="WP 文件夹"></a>WP 文件夹</h2><p>ASP.NET 网页的典型文件夹结构：</p><ul><li>“Account” 文件夹包含登录和安全文件</li><li>“App_Data” 文件包含数据库和数据文件</li><li>“Images” 文件夹包含图片</li><li>“Scripts” 文件夹包含浏览器脚本</li><li>“Shared” 文件夹包含通用文件（比如布局和样式文件）</li></ul><h3 id="物理文件结构"><a href="#物理文件结构" class="headerlink" title="物理文件结构"></a>物理文件结构</h3><p>类似：<code>C:\Johnny\Documents\MyWebSites\Demo\Images</code></p><h3 id="URL-和路径"><a href="#URL-和路径" class="headerlink" title="URL 和路径"></a>URL 和路径</h3><p>URL 用于从 web 访问文件：</p><p><code>http://www.w3school.com.cn/html5/html5_intro.asp</code></p><p>URL 在服务器上对应的文件是：</p><p><code>C:\MyWebSites\htm5\html5_intro.asp</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">URL       http://www.w3school.com.cn/html/html5_intro.asp</span><br><span class="line">服务器名w3school</span><br><span class="line">虚拟路径/html/html5_intro.asp</span><br><span class="line">物理路径C:\MyWebSites\w3school\/html/html5_intro.asp</span><br></pre></td></tr></tbody></table></figure><h3 id="操作符"><a href="#操作符" class="headerlink" title="~ 操作符"></a>~ 操作符</h3><p>如需在编程代码中规定虚拟根目录，请使用 ~ 操作符。</p><p>如果您使用 ~ 操作符，而不是路径，就能够在不改变任何代码的情况下，将网站移动到不同的文件夹或位置：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var myImagesFolder = "~/images";</span><br><span class="line">var myStyleSheet = "~/styles/StyleSheet.css";</span><br></pre></td></tr></tbody></table></figure><h3 id="Server-MapPath-方法"><a href="#Server-MapPath-方法" class="headerlink" title="Server.MapPath 方法"></a>Server.MapPath 方法</h3><p>Server.MapPath 方法将虚拟路径 (/default.cshtml) 转换为服务器能够理解的物理路径 (C:\Johnny\MyWebSited\Demo\default.cshtml)。</p><p>当需要打开位于服务器上的数据文件时，您就会用到该方法（数据文件只能通过完整的物理路径来访问）：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var pathName = "~/dataFile.txt";</span><br><span class="line">var fileName = Server.MapPath(pathName);</span><br></pre></td></tr></tbody></table></figure><h3 id="Href-方法"><a href="#Href-方法" class="headerlink" title="Href 方法"></a>Href 方法</h3><p>Href 方法把代码中的路径转换为浏览器能够理解的路径（浏览器无法理解 ~ 操作符）。</p><p>您使用 Href 方法来创建指向资源（比如图片和 CSS 文件）的路径。</p><p>您会经常在 HTML 、&lt;a&gt;、&lt;img&gt; 以及 &lt;link&gt; 元素中用到该方法：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@{var myStyleSheet = "~/Shared/Site.css";}</span><br><span class="line"></span><br><span class="line">&lt;!-- 创建指向 CSS 文件的链接 --&gt;</span><br><span class="line">&lt;link rel="stylesheet" type="text/css" href="@Href(myStyleSheet)" /&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 同上 : --&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="WP-全局"><a href="#WP-全局" class="headerlink" title="WP 全局"></a>WP 全局</h2><h3 id="Web-启动之前：-AppStart"><a href="#Web-启动之前：-AppStart" class="headerlink" title="Web 启动之前：_AppStart"></a>Web 启动之前：_AppStart</h3><p>假如站点根目录中名为 _AppStart 的页面存在，ASP.NET 会在站点内的任何页面被请求之前首先运行这个页面。</p><p>通常 _AppStart 用于启动代码和全局值的初始化，比如计数器和全局名称。</p><p>注释 1：_AppStart 的文件扩展名应与网页相同，比如 _AppStart.cshtml。</p><p>注释 2：_AppStart 有下划线前缀。正因如此，用户才无法直接查看该文件</p><h3 id="每张页面之前：-PageStart"><a href="#每张页面之前：-PageStart" class="headerlink" title="每张页面之前：_PageStart"></a>每张页面之前：_PageStart</h3><p>就像在站点启动前运行 _AppStart 那样，您能够在每个文件夹中的任意页面之前运行代码。</p><p>对于 web 中的每个文件夹，您能够添加名为 _PageStart 的文件。</p><p>通常 _PageStart 用于设置文件夹中所有页面的布局文件，或者在运行页面之前检查用户登录。</p><blockquote><p>当请求到来时，ASP.NET 检查 _AppStart 是否存在。如果存在，并且这是对站点的第一次请求，则运行 _AppStart。</p><p>然后 ASP.NET 检查 _PageStart 是否存在。如果存在，则运行 _PageStart，在被请求的页面之前。</p><p>如果您在 _PageStart 内部引用了对 RunPage() 的调用，那么您可以规定在何处运行被请求的页面。否则，_PageStart 在被请求页面之前运行。</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ASP-NET-简介&quot;&gt;&lt;a href=&quot;#ASP-NET-简介&quot; class=&quot;headerlink&quot; title=&quot;ASP.NET 简介&quot;&gt;&lt;/a&gt;ASP.NET 简介&lt;/h1&gt;&lt;p&gt;ASP.NET 是新一代的 ASP。它无法兼容经典 ASP，但 ASP.NET 可以引用 ASP。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="ASP.NET" scheme="http://blog.iwxyi.com/tags/ASP-NET/"/>
    
      <category term="学习笔记" scheme="http://blog.iwxyi.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>C语言CRC校验算法</title>
    <link href="http://blog.iwxyi.com/2018/12/20/C%E8%AF%AD%E8%A8%80CRC%E6%A0%A1%E9%AA%8C%E7%AE%97%E6%B3%95/"/>
    <id>http://blog.iwxyi.com/2018/12/20/C语言CRC校验算法/</id>
    <published>2018-12-20T00:20:00.000Z</published>
    <updated>2019-10-13T00:22:28.838Z</updated>
    
    <content type="html"><![CDATA[<p><code>CRC32</code> C语言版</p><a id="more"></a><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> crc32tab[] = {</span><br><span class="line"> <span class="number">0x00000000</span>L, <span class="number">0x77073096</span>L, <span class="number">0xee0e612c</span>L, <span class="number">0x990951ba</span>L,</span><br><span class="line"> <span class="number">0x076dc419</span>L, <span class="number">0x706af48f</span>L, <span class="number">0xe963a535</span>L, <span class="number">0x9e6495a3</span>L,</span><br><span class="line"> <span class="number">0x0edb8832</span>L, <span class="number">0x79dcb8a4</span>L, <span class="number">0xe0d5e91e</span>L, <span class="number">0x97d2d988</span>L,</span><br><span class="line"> <span class="number">0x09b64c2b</span>L, <span class="number">0x7eb17cbd</span>L, <span class="number">0xe7b82d07</span>L, <span class="number">0x90bf1d91</span>L,</span><br><span class="line"> <span class="number">0x1db71064</span>L, <span class="number">0x6ab020f2</span>L, <span class="number">0xf3b97148</span>L, <span class="number">0x84be41de</span>L,</span><br><span class="line"> <span class="number">0x1adad47d</span>L, <span class="number">0x6ddde4eb</span>L, <span class="number">0xf4d4b551</span>L, <span class="number">0x83d385c7</span>L,</span><br><span class="line"> <span class="number">0x136c9856</span>L, <span class="number">0x646ba8c0</span>L, <span class="number">0xfd62f97a</span>L, <span class="number">0x8a65c9ec</span>L,</span><br><span class="line"> <span class="number">0x14015c4f</span>L, <span class="number">0x63066cd9</span>L, <span class="number">0xfa0f3d63</span>L, <span class="number">0x8d080df5</span>L,</span><br><span class="line"> <span class="number">0x3b6e20c8</span>L, <span class="number">0x4c69105e</span>L, <span class="number">0xd56041e4</span>L, <span class="number">0xa2677172</span>L,</span><br><span class="line"> <span class="number">0x3c03e4d1</span>L, <span class="number">0x4b04d447</span>L, <span class="number">0xd20d85fd</span>L, <span class="number">0xa50ab56b</span>L,</span><br><span class="line"> <span class="number">0x35b5a8fa</span>L, <span class="number">0x42b2986c</span>L, <span class="number">0xdbbbc9d6</span>L, <span class="number">0xacbcf940</span>L,</span><br><span class="line"> <span class="number">0x32d86ce3</span>L, <span class="number">0x45df5c75</span>L, <span class="number">0xdcd60dcf</span>L, <span class="number">0xabd13d59</span>L,</span><br><span class="line"> <span class="number">0x26d930ac</span>L, <span class="number">0x51de003a</span>L, <span class="number">0xc8d75180</span>L, <span class="number">0xbfd06116</span>L,</span><br><span class="line"> <span class="number">0x21b4f4b5</span>L, <span class="number">0x56b3c423</span>L, <span class="number">0xcfba9599</span>L, <span class="number">0xb8bda50f</span>L,</span><br><span class="line"> <span class="number">0x2802b89e</span>L, <span class="number">0x5f058808</span>L, <span class="number">0xc60cd9b2</span>L, <span class="number">0xb10be924</span>L,</span><br><span class="line"> <span class="number">0x2f6f7c87</span>L, <span class="number">0x58684c11</span>L, <span class="number">0xc1611dab</span>L, <span class="number">0xb6662d3d</span>L,</span><br><span class="line"> <span class="number">0x76dc4190</span>L, <span class="number">0x01db7106</span>L, <span class="number">0x98d220bc</span>L, <span class="number">0xefd5102a</span>L,</span><br><span class="line"> <span class="number">0x71b18589</span>L, <span class="number">0x06b6b51f</span>L, <span class="number">0x9fbfe4a5</span>L, <span class="number">0xe8b8d433</span>L,</span><br><span class="line"> <span class="number">0x7807c9a2</span>L, <span class="number">0x0f00f934</span>L, <span class="number">0x9609a88e</span>L, <span class="number">0xe10e9818</span>L,</span><br><span class="line"> <span class="number">0x7f6a0dbb</span>L, <span class="number">0x086d3d2d</span>L, <span class="number">0x91646c97</span>L, <span class="number">0xe6635c01</span>L,</span><br><span class="line"> <span class="number">0x6b6b51f4</span>L, <span class="number">0x1c6c6162</span>L, <span class="number">0x856530d8</span>L, <span class="number">0xf262004e</span>L,</span><br><span class="line"> <span class="number">0x6c0695ed</span>L, <span class="number">0x1b01a57b</span>L, <span class="number">0x8208f4c1</span>L, <span class="number">0xf50fc457</span>L,</span><br><span class="line"> <span class="number">0x65b0d9c6</span>L, <span class="number">0x12b7e950</span>L, <span class="number">0x8bbeb8ea</span>L, <span class="number">0xfcb9887c</span>L,</span><br><span class="line"> <span class="number">0x62dd1ddf</span>L, <span class="number">0x15da2d49</span>L, <span class="number">0x8cd37cf3</span>L, <span class="number">0xfbd44c65</span>L,</span><br><span class="line"> <span class="number">0x4db26158</span>L, <span class="number">0x3ab551ce</span>L, <span class="number">0xa3bc0074</span>L, <span class="number">0xd4bb30e2</span>L,</span><br><span class="line"> <span class="number">0x4adfa541</span>L, <span class="number">0x3dd895d7</span>L, <span class="number">0xa4d1c46d</span>L, <span class="number">0xd3d6f4fb</span>L,</span><br><span class="line"> <span class="number">0x4369e96a</span>L, <span class="number">0x346ed9fc</span>L, <span class="number">0xad678846</span>L, <span class="number">0xda60b8d0</span>L,</span><br><span class="line"> <span class="number">0x44042d73</span>L, <span class="number">0x33031de5</span>L, <span class="number">0xaa0a4c5f</span>L, <span class="number">0xdd0d7cc9</span>L,</span><br><span class="line"> <span class="number">0x5005713c</span>L, <span class="number">0x270241aa</span>L, <span class="number">0xbe0b1010</span>L, <span class="number">0xc90c2086</span>L,</span><br><span class="line"> <span class="number">0x5768b525</span>L, <span class="number">0x206f85b3</span>L, <span class="number">0xb966d409</span>L, <span class="number">0xce61e49f</span>L,</span><br><span class="line"> <span class="number">0x5edef90e</span>L, <span class="number">0x29d9c998</span>L, <span class="number">0xb0d09822</span>L, <span class="number">0xc7d7a8b4</span>L,</span><br><span class="line"> <span class="number">0x59b33d17</span>L, <span class="number">0x2eb40d81</span>L, <span class="number">0xb7bd5c3b</span>L, <span class="number">0xc0ba6cad</span>L,</span><br><span class="line"> <span class="number">0xedb88320</span>L, <span class="number">0x9abfb3b6</span>L, <span class="number">0x03b6e20c</span>L, <span class="number">0x74b1d29a</span>L,</span><br><span class="line"> <span class="number">0xead54739</span>L, <span class="number">0x9dd277af</span>L, <span class="number">0x04db2615</span>L, <span class="number">0x73dc1683</span>L,</span><br><span class="line"> <span class="number">0xe3630b12</span>L, <span class="number">0x94643b84</span>L, <span class="number">0x0d6d6a3e</span>L, <span class="number">0x7a6a5aa8</span>L,</span><br><span class="line"> <span class="number">0xe40ecf0b</span>L, <span class="number">0x9309ff9d</span>L, <span class="number">0x0a00ae27</span>L, <span class="number">0x7d079eb1</span>L,</span><br><span class="line"> <span class="number">0xf00f9344</span>L, <span class="number">0x8708a3d2</span>L, <span class="number">0x1e01f268</span>L, <span class="number">0x6906c2fe</span>L,</span><br><span class="line"> <span class="number">0xf762575d</span>L, <span class="number">0x806567cb</span>L, <span class="number">0x196c3671</span>L, <span class="number">0x6e6b06e7</span>L,</span><br><span class="line"> <span class="number">0xfed41b76</span>L, <span class="number">0x89d32be0</span>L, <span class="number">0x10da7a5a</span>L, <span class="number">0x67dd4acc</span>L,</span><br><span class="line"> <span class="number">0xf9b9df6f</span>L, <span class="number">0x8ebeeff9</span>L, <span class="number">0x17b7be43</span>L, <span class="number">0x60b08ed5</span>L,</span><br><span class="line"> <span class="number">0xd6d6a3e8</span>L, <span class="number">0xa1d1937e</span>L, <span class="number">0x38d8c2c4</span>L, <span class="number">0x4fdff252</span>L,</span><br><span class="line"> <span class="number">0xd1bb67f1</span>L, <span class="number">0xa6bc5767</span>L, <span class="number">0x3fb506dd</span>L, <span class="number">0x48b2364b</span>L,</span><br><span class="line"> <span class="number">0xd80d2bda</span>L, <span class="number">0xaf0a1b4c</span>L, <span class="number">0x36034af6</span>L, <span class="number">0x41047a60</span>L,</span><br><span class="line"> <span class="number">0xdf60efc3</span>L, <span class="number">0xa867df55</span>L, <span class="number">0x316e8eef</span>L, <span class="number">0x4669be79</span>L,</span><br><span class="line"> <span class="number">0xcb61b38c</span>L, <span class="number">0xbc66831a</span>L, <span class="number">0x256fd2a0</span>L, <span class="number">0x5268e236</span>L,</span><br><span class="line"> <span class="number">0xcc0c7795</span>L, <span class="number">0xbb0b4703</span>L, <span class="number">0x220216b9</span>L, <span class="number">0x5505262f</span>L,</span><br><span class="line"> <span class="number">0xc5ba3bbe</span>L, <span class="number">0xb2bd0b28</span>L, <span class="number">0x2bb45a92</span>L, <span class="number">0x5cb36a04</span>L,</span><br><span class="line"> <span class="number">0xc2d7ffa7</span>L, <span class="number">0xb5d0cf31</span>L, <span class="number">0x2cd99e8b</span>L, <span class="number">0x5bdeae1d</span>L,</span><br><span class="line"> <span class="number">0x9b64c2b0</span>L, <span class="number">0xec63f226</span>L, <span class="number">0x756aa39c</span>L, <span class="number">0x026d930a</span>L,</span><br><span class="line"> <span class="number">0x9c0906a9</span>L, <span class="number">0xeb0e363f</span>L, <span class="number">0x72076785</span>L, <span class="number">0x05005713</span>L,</span><br><span class="line"> <span class="number">0x95bf4a82</span>L, <span class="number">0xe2b87a14</span>L, <span class="number">0x7bb12bae</span>L, <span class="number">0x0cb61b38</span>L,</span><br><span class="line"> <span class="number">0x92d28e9b</span>L, <span class="number">0xe5d5be0d</span>L, <span class="number">0x7cdcefb7</span>L, <span class="number">0x0bdbdf21</span>L,</span><br><span class="line"> <span class="number">0x86d3d2d4</span>L, <span class="number">0xf1d4e242</span>L, <span class="number">0x68ddb3f8</span>L, <span class="number">0x1fda836e</span>L,</span><br><span class="line"> <span class="number">0x81be16cd</span>L, <span class="number">0xf6b9265b</span>L, <span class="number">0x6fb077e1</span>L, <span class="number">0x18b74777</span>L,</span><br><span class="line"> <span class="number">0x88085ae6</span>L, <span class="number">0xff0f6a70</span>L, <span class="number">0x66063bca</span>L, <span class="number">0x11010b5c</span>L,</span><br><span class="line"> <span class="number">0x8f659eff</span>L, <span class="number">0xf862ae69</span>L, <span class="number">0x616bffd3</span>L, <span class="number">0x166ccf45</span>L,</span><br><span class="line"> <span class="number">0xa00ae278</span>L, <span class="number">0xd70dd2ee</span>L, <span class="number">0x4e048354</span>L, <span class="number">0x3903b3c2</span>L,</span><br><span class="line"> <span class="number">0xa7672661</span>L, <span class="number">0xd06016f7</span>L, <span class="number">0x4969474d</span>L, <span class="number">0x3e6e77db</span>L,</span><br><span class="line"> <span class="number">0xaed16a4a</span>L, <span class="number">0xd9d65adc</span>L, <span class="number">0x40df0b66</span>L, <span class="number">0x37d83bf0</span>L,</span><br><span class="line"> <span class="number">0xa9bcae53</span>L, <span class="number">0xdebb9ec5</span>L, <span class="number">0x47b2cf7f</span>L, <span class="number">0x30b5ffe9</span>L,</span><br><span class="line"> <span class="number">0xbdbdf21c</span>L, <span class="number">0xcabac28a</span>L, <span class="number">0x53b39330</span>L, <span class="number">0x24b4a3a6</span>L,</span><br><span class="line"> <span class="number">0xbad03605</span>L, <span class="number">0xcdd70693</span>L, <span class="number">0x54de5729</span>L, <span class="number">0x23d967bf</span>L,</span><br><span class="line"> <span class="number">0xb3667a2e</span>L, <span class="number">0xc4614ab8</span>L, <span class="number">0x5d681b02</span>L, <span class="number">0x2a6f2b94</span>L,</span><br><span class="line"> <span class="number">0xb40bbe37</span>L, <span class="number">0xc30c8ea1</span>L, <span class="number">0x5a05df1b</span>L, <span class="number">0x2d02ef8d</span>L</span><br><span class="line">};</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">crc32</span><span class="params">( <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> *buf, <span class="keyword">unsigned</span> <span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">     <span class="keyword">unsigned</span> <span class="keyword">int</span> i, crc;</span><br><span class="line">     crc = <span class="number">0xFFFFFFFF</span>;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">     <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">      crc = crc32tab[(crc ^ buf[i]) &amp; <span class="number">0xff</span>] ^ (crc &gt;&gt; <span class="number">8</span>);</span><br><span class="line"> </span><br><span class="line">     <span class="keyword">return</span> crc^<span class="number">0xFFFFFFFF</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><blockquote><p>参考：<a href="https://blog.csdn.net/gongmin856/article/details/77101397" target="_blank" rel="noopener">https://blog.csdn.net/gongmin856/article/details/77101397</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;CRC32&lt;/code&gt; C语言版&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C" scheme="http://blog.iwxyi.com/tags/C/"/>
    
      <category term="密码学" scheme="http://blog.iwxyi.com/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>Markdown-讲解</title>
    <link href="http://blog.iwxyi.com/2018/12/07/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F-%E8%AE%B2%E8%A7%A3/"/>
    <id>http://blog.iwxyi.com/2018/12/07/正则表达式-讲解/</id>
    <published>2018-12-07T13:05:00.000Z</published>
    <updated>2019-10-12T23:18:41.803Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Markdown-简介"><a href="#Markdown-简介" class="headerlink" title="Markdown 简介"></a>Markdown 简介</h2><p>Markdown 是一种轻量级的「<strong>标记语言</strong>」，通常为程序员群体所用，适用于泡技术论坛、写博客日志、技术文稿、记录代码片段、起草邮件等场景。 </p><p>可以通过简单、易读易写的<strong>文本格式</strong>生成结构化的 HTML 网页，以及 Word 和 pdf 文档。目前 知乎、简书、github、Stackoverflow、以及绝大多数博客论坛 均支持这种格式。 </p><a id="more"></a><h3 id="为什么要学-Markdown？"><a href="#为什么要学-Markdown？" class="headerlink" title="为什么要学 Markdown？"></a>为什么要学 Markdown？</h3><p>因为简单；因为好用；因为这篇教程就是用 Markdown 写的。</p><p>让“码字的归码字，排版的归排版”，专注写作，效率快速提升；</p><p>除此之外基础的任务管理、项目管理、逻辑梳理、公式协作等等，都可以用基本的Markdown来完成……</p><h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h3><p>简单符号排版，15 分钟上手。</p><p>纯键盘操作，写作时少调用鼠标，效率能提升很多。</p><p>使用 Markdown 的 h1、h2、h3 标题，列表、分列表，结构和逻辑都很清晰。排版成同样的效果，md 与 word 比起来简直毫不费力气。另外，还有插入图片、链接、粗体、斜体等功能。</p><p>纯文本编辑，轻量级。纯文本有很多好处，例如占用空间小、移植方便快捷、可以用 git 比较版本、编辑时不需要软件支持等。</p><p>目前支持将 md 转换为多种格式，包括 html、tex、pdf 等。</p><h3 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h3><ul><li>语法不是很统一，不同的编辑器语法有区别</li><li>不能对文档进行精细调整，或者个性化调整。</li><li>据说过于程序员友好。</li></ul><h3 id="对话式红楼梦"><a href="#对话式红楼梦" class="headerlink" title="对话式红楼梦"></a>对话式红楼梦</h3><h4 id="曹雪芹写的效果如下："><a href="#曹雪芹写的效果如下：" class="headerlink" title="曹雪芹写的效果如下："></a>曹雪芹写的效果如下：</h4><p>贾芸听声音像是熟人，仔细一看，原来是紧邻倪二。这倪二是个泼皮，专放重利债，在赌博场吃饭，专爱喝酒打架。此时正从欠钱人家索债归来，已在醉乡，不料贾芸碰了他，就要动手。贾芸叫道：“老二！住手！是我冲撞了你。”倪二一听他的语音，将醉眼睁开一看，见是贾芸，忙松了手，趔趄著笑道：“原来是贾二爷。这会子那里去？”贾芸道：“告诉不得你，平白的又讨了个没趣儿！”倪二道：“不妨。有什么不平的事，告诉我，我替你出气。这三街六巷，凭他是谁，若得罪了我醉金刚倪二的街坊，管叫他人离家散！”贾芸道：“老二，你别生气，听我告诉你这缘故。”便把卜世仁一段事告诉了倪二。倪二听了，大怒道：“要不是二爷的亲戚，我就骂出来，真真把人气死！－－也罢，你也不必愁，我这里现有几两银子，你要用只管拿去。我们好街坊，这银子是不要利钱的。”一头说，一头从搭包内掏出一包银子来。</p><hr><h4 id="Markdown-的效果"><a href="#Markdown-的效果" class="headerlink" title="Markdown 的效果"></a>Markdown 的效果</h4><p> <strong>用Markdown简单处理一下的话，这段的排版就变了：</strong></p><p>贾芸听声音像是熟人，仔细一看，原来是紧邻倪二。这倪二是个泼皮，专放重利债，在赌博场吃饭，专爱喝酒打架。此时正从欠钱人家索债归来，已在醉乡，不料贾芸碰了他，就要动手。贾芸叫道：</p><blockquote><p>“老二！住手！是我冲撞了你。”</p></blockquote><p>倪二一听他的语音，将醉眼睁开一看，见是贾芸，忙松了手，趔趄著笑道：</p><blockquote><p>“原来是贾二爷。这会子那里去？”</p></blockquote><p>贾芸道：</p><blockquote><p>“告诉不得你，平白的又讨了个没趣儿！”</p></blockquote><p>倪二道：</p><blockquote><p>“不妨。有什么不平的事，告诉我，我替你出气。这三街六巷，凭他是谁，若得罪了我醉金刚倪二的街坊，管叫他人离家散！”</p></blockquote><p>贾芸道：</p><blockquote><p>“老二，你别生气，听我告诉你这缘故。”</p></blockquote><p>便把卜世仁一段事告诉了倪二。倪二听了，大怒道：</p><blockquote><p>“要不是二爷的亲戚，我就骂出来，真真把人气死！－－也罢，你也不必愁，我这里现有几两银子，你要用只管拿去。我们好街坊，这银子是不要利钱的。”</p></blockquote><p>一头说，一头从搭包内掏出一包银子来。</p><hr><h2 id="开始撰写-Markdown"><a href="#开始撰写-Markdown" class="headerlink" title="开始撰写 Markdown"></a>开始撰写 Markdown</h2><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>Markdown 支持两种标题的语法，类 Setext 和类 atx 形式。（部分编辑器不支持）</p><p>类 Setext 形式是用底线的形式，利用 = （最高阶标题）和 - （第二阶标题），例如：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">This is an H1</span><br><span class="line">=============</span><br><span class="line"></span><br><span class="line">This is an H2</span><br><span class="line">-------------</span><br></pre></td></tr></tbody></table></figure><p>类 Atx 形式则是在行首插入 1 到 6 个 # ，对应到标题 1 到 6 阶，例如：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 这是 H1</span><br><span class="line"></span><br><span class="line">## 这是 H2</span><br><span class="line"></span><br><span class="line">###### 这是 H6</span><br></pre></td></tr></tbody></table></figure><p>你可以选择性地「闭合」类 atx 样式的标题，这纯粹只是美观用的，若是觉得这样看起来比较舒适，你就可以在行尾加上 #，而行尾的 # 数量也不用和开头一样（行首的井字符数量决定标题的阶数）：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 这是 H1 #</span><br><span class="line"></span><br><span class="line">## 这是 H2 ##</span><br><span class="line"></span><br><span class="line">### 这是 H3 ######</span><br></pre></td></tr></tbody></table></figure><h3 id="区块引用Blockquotes"><a href="#区块引用Blockquotes" class="headerlink" title="区块引用Blockquotes"></a>区块引用Blockquotes</h3><p>Markdown 标记区块引用是使用类似 email 中用 &gt; 的引用方式。如果你还熟悉在 email 信件中的引言部分，你就知道怎么在 Markdown 文件中建立一个区块引用，那会看起来像是你自己先断好行，然后在每行的最前面加上 &gt; ：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,</span><br><span class="line">&gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.</span><br><span class="line">&gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</span><br><span class="line">&gt; </span><br><span class="line">&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse</span><br><span class="line">&gt; id sem consectetuer libero luctus adipiscing.</span><br></pre></td></tr></tbody></table></figure><p>Markdown 也允许你偷懒只在整个段落的第一行最前面加上 &gt; ：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,</span><br><span class="line">consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.</span><br><span class="line">Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</span><br><span class="line"></span><br><span class="line">&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse</span><br><span class="line">id sem consectetuer libero luctus adipiscing.</span><br></pre></td></tr></tbody></table></figure><p>区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 &gt; ：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> This is the first level of quoting.</span><br><span class="line">&gt;</span><br><span class="line">&gt; &gt; This is nested blockquote.</span><br><span class="line">&gt;</span><br><span class="line">&gt; Back to the first level.</span><br></pre></td></tr></tbody></table></figure><p>引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; ## 这是一个标题。</span><br><span class="line">&gt; </span><br><span class="line">&gt; 1.   这是第一行列表项。</span><br><span class="line">&gt; 2.   这是第二行列表项。</span><br><span class="line">&gt; </span><br><span class="line">&gt; 给出一些例子代码：</span><br><span class="line">&gt; </span><br><span class="line">&gt;     return shell_exec("echo $input | $markdown_script");</span><br></pre></td></tr></tbody></table></figure><p>任何像样的文本编辑器都能轻松地建立 email 型的引用。例如在 BBEdit 中，你可以选取文字后然后从选单中选择增加引用阶层。</p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>Markdown 支持有序列表和无序列表。</p><p>无序列表使用星号、加号或是减号作为列表标记：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*   Red</span><br><span class="line">*   Green</span><br><span class="line">*   Blue</span><br></pre></td></tr></tbody></table></figure><p>等同于：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">+   Red</span><br><span class="line">+   Green</span><br><span class="line">+   Blue</span><br></pre></td></tr></tbody></table></figure><p>也等同于：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-   Red</span><br><span class="line">-   Green</span><br><span class="line">-   Blue</span><br></pre></td></tr></tbody></table></figure><p>有序列表则使用数字接着一个英文句点（word里面也是这样）：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. Bird</span><br><span class="line">2. McHale</span><br><span class="line">3. Parish</span><br></pre></td></tr></tbody></table></figure><p>列表项目标记通常是放在最左边，但是其实也可以缩进，最多 3 个空格，项目标记后面则一定要接着至少一个空格或制表符。</p><p>要让列表看起来更漂亮，你可以把内容用固定的缩进整理好：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.</span><br><span class="line">    Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,</span><br><span class="line">    viverra nec, fringilla in, laoreet vitae, risus.</span><br><span class="line">*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.</span><br><span class="line">    Suspendisse id sem consectetuer libero luctus adipiscing.</span><br></pre></td></tr></tbody></table></figure><p>但是如果你懒，那也行：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.</span><br><span class="line">Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,</span><br><span class="line">viverra nec, fringilla in, laoreet vitae, risus.</span><br><span class="line">*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.</span><br><span class="line">Suspendisse id sem consectetuer libero luctus adipiscing.</span><br></pre></td></tr></tbody></table></figure><p>列表项目可以包含多个段落，每个项目下的段落都必须缩进 4 个空格或是 1 个制表符：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.  This is a list item with two paragraphs. Lorem ipsum dolor</span><br><span class="line">    sit amet, consectetuer adipiscing elit. Aliquam hendrerit</span><br><span class="line">    mi posuere lectus.</span><br><span class="line"></span><br><span class="line">    Vestibulum enim wisi, viverra nec, fringilla in, laoreet</span><br><span class="line">    vitae, risus. Donec sit amet nisl. Aliquam semper ipsum</span><br><span class="line">    sit amet velit.</span><br><span class="line"></span><br><span class="line">2.  Suspendisse id sem consectetuer libero luctus adipiscing.</span><br></pre></td></tr></tbody></table></figure><p>如果你每行都有缩进，看起来会看好很多，当然，再次地，如果你很懒惰，Markdown 也允许：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">*   This is a list item with two paragraphs.</span><br><span class="line"></span><br><span class="line">    This is the second paragraph in the list item. You're</span><br><span class="line">only required to indent the first line. Lorem ipsum dolor</span><br><span class="line">sit amet, consectetuer adipiscing elit.</span><br><span class="line"></span><br><span class="line">*   Another item in the same list.</span><br></pre></td></tr></tbody></table></figure><p>如果要在列表项目内放进引用，那 &gt; 就需要缩进：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*   A list item with a blockquote:</span><br><span class="line"></span><br><span class="line">    &gt; This is a blockquote</span><br><span class="line">    &gt; inside a list item.</span><br></pre></td></tr></tbody></table></figure><p>如果要放代码区块的话，该区块就需要缩进两次，也就是 8 个空格或是 2 个制表符：（有些编辑器不支持）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*   一列表项包含一个列表区块：</span><br><span class="line"></span><br><span class="line">        &lt;代码写在这&gt;</span><br></pre></td></tr></tbody></table></figure><p>当然，项目列表很可能会不小心产生，像是下面这样的写法</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1986. What a great season.</span><br></pre></td></tr></tbody></table></figure><p>换句话说，也就是在行首出现数字-句点-空白，要避免这样的状况，你可以在句点前面加上反斜杠。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1986\. What a great season.</span><br></pre></td></tr></tbody></table></figure><h3 id="待办事项"><a href="#待办事项" class="headerlink" title="待办事项"></a>待办事项</h3><p>用 <code>- [ ]</code> 来表示一个待办事项列表（注意有三个空格）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- [ ] 未完成列表</span><br><span class="line">- [x] 已完成列表</span><br></pre></td></tr></tbody></table></figure><h3 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h3><p>和程序相关的写作或是标签语言原始码通常会有已经排版好的代码区块，通常这些区块我们并不希望它以一般段落文件的方式去排版，而是照原来的样子显示，Markdown 会用 <code>&lt;pre&gt;</code> 和 <code>&lt;code&gt;</code> 标签来把代码区块包起来。</p><p>要在 Markdown 中建立代码区块很简单，只要用一对</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">~~~C++</span><br><span class="line">```C++</span><br><span class="line">    for (int i = 0; i &lt; 10; i++)</span><br><span class="line">        printf("%d\n", i);</span><br></pre></td></tr></tbody></table></figure><p></p><p><del>~</del></p><p>上面的</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 分隔线</span><br><span class="line"></span><br><span class="line">你可以在一行中用三个以上的短横杠来建立一个分隔线，行内不能有其他东西。</span><br></pre></td></tr></tbody></table></figure><p></p><hr><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 链接</span><br><span class="line"></span><br><span class="line">链接文字用 [方括号] 来标记，要建立一个行内的链接，只要在方块括号后面紧接着圆括号并插入网址链接即可，例如：</span><br></pre></td></tr></tbody></table></figure><p>This is <a href="http://example.com/" target="_blank" rel="noopener">an example</a> inline link.</p><p><a href="http://example.net/" target="_blank" rel="noopener">This link</a> has no title attribute.</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">如果你是要链接到同样主机的资源，你可以使用相对路径：</span><br></pre></td></tr></tbody></table></figure><p>See my <a href="/about/">About</a> page for details.</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 强调</span><br><span class="line"></span><br><span class="line">Markdown 使用星号（*）和底线（_）作为标记强调字词的符号 。一对是斜体，两对是粗体。</span><br></pre></td></tr></tbody></table></figure><p><em>single asterisks</em></p><p><em>single underscores</em></p><p><strong>double asterisks</strong></p><p><strong>double underscores</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*single asterisks*</span><br><span class="line"></span><br><span class="line">_single underscores_</span><br><span class="line"></span><br><span class="line">**double asterisks**</span><br><span class="line"></span><br><span class="line">__double underscores__</span><br><span class="line"></span><br><span class="line">你可以随便用你喜欢的样式，唯一的限制是，你用什么符号开启标签，就要用什么符号结束。</span><br><span class="line"></span><br><span class="line">强调也可以直接插在文字中间：</span><br></pre></td></tr></tbody></table></figure><p>un<em>frigging</em>believable</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">但是**如果你的 \* 和 _ 两边都有空白的话，它们就只会被当成普通的符号。**</span><br><span class="line"></span><br><span class="line">如果要在文字前后直接插入普通的星号或底线，你可以用反斜线：</span><br></pre></td></tr></tbody></table></figure><p>*this text is surrounded by literal asterisks*</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 删除线</span><br><span class="line"></span><br><span class="line">使用两对波浪线 ~~ 来给文字加上~~删除线~~。注意波浪线和文字之间不能有空格。</span><br></pre></td></tr></tbody></table></figure><p><del>删除线</del></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 代码</span><br><span class="line"></span><br><span class="line">如果要标记一小段行内代码，你可以用反引号把它包起来（`），例如：</span><br></pre></td></tr></tbody></table></figure><p>Use the <code>printf()</code> function.</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">如果要在代码区段内插入反引号，你可以用多个反引号来开启和结束代码区段：</span><br></pre></td></tr></tbody></table></figure><p><code>There is a literal backtick (`) here.</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 图片</span><br><span class="line"></span><br><span class="line">很明显地，要在纯文字应用中设计一个「自然」的语法来插入图片是有一定难度的。</span><br><span class="line"></span><br><span class="line">Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： 行内式和参考式。</span><br><span class="line"></span><br><span class="line">行内式的图片语法看起来像是：</span><br></pre></td></tr></tbody></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/path/to/img.jpg" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">详细叙述如下：</span><br><span class="line"></span><br><span class="line">- 一个惊叹号 !</span><br><span class="line">- 接着一个方括号，里面放上图片的替代文字</span><br><span class="line">- 接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上 选择性的 'title' 文字。</span><br><span class="line"></span><br><span class="line">到目前为止， Markdown 还没有办法指定图片的宽高，如果你需要的话，你可以使用普通的 `&lt;img&gt;` 标签。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 反斜杠</span><br><span class="line"></span><br><span class="line">Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文字旁边的方式来做出强调效果，你可以在星号的前面加上反斜杠：</span><br></pre></td></tr></tbody></table></figure><p>*literal asterisks*</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</span><br></pre></td></tr></tbody></table></figure><p>\   反斜线<br>`   反引号</p><ul><li>星号<br>_   底线<br>{}  花括号<br>[]  方括号<br>()  括弧<h1 id="井字号"><a href="#井字号" class="headerlink" title="井字号"></a>井字号</h1></li></ul><ul><li>加号</li></ul><ul><li>减号<br>.   英文句点<br>!   惊叹号<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 自动链接</span><br><span class="line"></span><br><span class="line">Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用方括号包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如：</span><br></pre></td></tr></tbody></table></figure></li></ul><p><a href="http://example.com/" target="_blank" rel="noopener">http://example.com/</a></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">邮址的自动链接也很类似，只是 Markdown 会先做一个编码转换的过程，把文字字符转成 16 进位码的 HTML 实体，这样的格式可以糊弄一些不好的邮址收集机器人，例如：</span><br></pre></td></tr></tbody></table></figure><p><a href="mailto:address@example.com" target="_blank" rel="noopener">address@example.com</a></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 表格</span><br><span class="line"></span><br><span class="line">表格是Markdown语法中比较复杂的一个，其语法如下：</span><br></pre></td></tr></tbody></table></figure><table><thead><tr><th align="center">表头</th><th align="center">条目一</th><th align="center">条目二</th></tr></thead><tbody><tr><td align="center">项目</td><td align="center">项目一</td><td align="center">项目二</td></tr><tr><td align="center">```</td><td align="center"></td><td align="center"></td></tr></tbody></table><p>以上标记显示效果如下：</p><table><thead><tr><th>表头</th><th>条目一</th><th>条目二</th></tr></thead><tbody><tr><td>项目</td><td>项目一</td><td>项目二</td></tr></tbody></table><blockquote><p>注：三个短斜杠左右的冒号用于控制对齐方式，只放置左边冒号表示文字居左，只放置右边冒号表示文字居右，如果两边都放置冒号表示文字居中。不加冒号默认左对齐。</p></blockquote><h3 id="文字上色"><a href="#文字上色" class="headerlink" title="文字上色"></a>文字上色</h3><p>使用Markdown的同学最郁闷的地方恐怕就是不能给文字添加颜色了。事实上，Markdown的最初目标就是为纯写作而生的。因此，它并没有考虑文字颜色这一点。所以，单纯使用Markdown设置文字颜色已经做不到了。但你可以这样做：</p><ol><li>先用Markdown编辑完成</li><li>导出为html，在需要上色的部分手动添加标签<code>&lt;font color='#ff0000'&gt;  &lt;/font&gt;</code>保存即可。</li></ol><h3 id="Latex数学公式"><a href="#Latex数学公式" class="headerlink" title="Latex数学公式"></a>Latex数学公式</h3><p>1.行内公式：使用两个”$”符号引用公式:</p><p><code>$公式$</code></p><p>2.行间公式：使用两对“$$”符号引用公式：</p><p><code>$$公式$$</code></p><p>输例如$\sqrt{x^{2}}$ </p><h3 id="上标下标"><a href="#上标下标" class="headerlink" title="上标下标"></a>上标下标</h3><p>在<code>$ $</code> 公式中，用 <code>^p</code> 表示上标。若有多个，用 <code>{ }</code> 括起来。</p><p>下标符号为 <code>_</code>，用法同上标。</p><blockquote><p>Typora 的扩展语法中，可以用<code>^上标^</code>与<code>~下标~</code>来表示（需要先到设置中开启）</p></blockquote><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>在文档中，内容远远比工具和格式重要。但适当的格式和工具也会增强文字的渲染力。</p><p>Markdown 是纯文本和富文本之间最恰当的选择。</p><hr><blockquote><p>博客来源：整理，网络，主要是 <a href="http://www.markdown.cn/" target="_blank" rel="noopener">http://www.markdown.cn/</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Markdown-简介&quot;&gt;&lt;a href=&quot;#Markdown-简介&quot; class=&quot;headerlink&quot; title=&quot;Markdown 简介&quot;&gt;&lt;/a&gt;Markdown 简介&lt;/h2&gt;&lt;p&gt;Markdown 是一种轻量级的「&lt;strong&gt;标记语言&lt;/strong&gt;」，通常为程序员群体所用，适用于泡技术论坛、写博客日志、技术文稿、记录代码片段、起草邮件等场景。 &lt;/p&gt;
&lt;p&gt;可以通过简单、易读易写的&lt;strong&gt;文本格式&lt;/strong&gt;生成结构化的 HTML 网页，以及 Word 和 pdf 文档。目前 知乎、简书、github、Stackoverflow、以及绝大多数博客论坛 均支持这种格式。 &lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="语法" scheme="http://blog.iwxyi.com/tags/%E8%AF%AD%E6%B3%95/"/>
    
      <category term="讲解" scheme="http://blog.iwxyi.com/tags/%E8%AE%B2%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>栈与队列-讲解</title>
    <link href="http://blog.iwxyi.com/2018/12/07/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97-%E8%AE%B2%E8%A7%A3/"/>
    <id>http://blog.iwxyi.com/2018/12/07/栈与队列-讲解/</id>
    <published>2018-12-07T12:50:00.000Z</published>
    <updated>2019-10-12T23:18:50.455Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><p>栈是一种特殊的线性表。其特殊性在于限定插入和删除数据元素的操作只能在线性表的一端进行。如下所示：</p><a id="more"></a><p><img src="/images/pasted-1.png" alt="栈"></p><p>结论：先进后出 &amp;&amp; 后进先出（Last In First Out），简称为LIFO线性表。</p><p>例子：手机任务的返回栈、食堂餐盘从下到上叠起来，送给洗盘子的人，从上到下洗</p><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><p>队列(Queue)也是一种运算受限的线性表，它的运算限制与栈不同，是两头都有限制，插入只能在表的一端进行(只进不出)，而删除只能在表的另一端进行(只出不进)，允许删除的一端称为队尾(rear)，允许插入的一端称为队头 (Front),如图所示：</p><p><img src="%5Cimages%5Cpasted-2.png" alt="队列"></p><p>结论：队列的操作原则是先进先出的，所以队列又称作FIFO表(First In First Out)</p><p>例子：各种排队</p><h2 id="纯-C-用法（函数）"><a href="#纯-C-用法（函数）" class="headerlink" title="纯 C 用法（函数）"></a>纯 C 用法（函数）</h2><h3 id="栈-1"><a href="#栈-1" class="headerlink" title="栈"></a>栈</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_SIZE 1000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> _data[MAX_SIZE], _size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> _size != <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (_size &lt; MAX_SIZE<span class="number">-1</span>) {</span><br><span class="line">        _data[_size++] = x;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (_size) {</span><br><span class="line">        _data[--_size] = <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> _size;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">front</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> _size ? _data[<span class="number">0</span>] : <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">back</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> _size ? _data[_size<span class="number">-1</span>] : <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"></span><br><span class="line">    push(<span class="number">100</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, back());</span><br><span class="line">    push(<span class="number">20</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, back());</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>数组转指针：</p><p><code>_data\[([^M].*)\]</code>替换<code>*(_data + \1)</code></p><h2 id="纯C用法（结构体）"><a href="#纯C用法（结构体）" class="headerlink" title="纯C用法（结构体）"></a>纯C用法（结构体）</h2><h3 id="栈-2"><a href="#栈-2" class="headerlink" title="栈"></a>栈</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stack</span> {</span></span><br><span class="line">    <span class="keyword">int</span> _data[<span class="number">1000</span>];</span><br><span class="line">    <span class="keyword">int</span> _size;</span><br><span class="line"></span><br><span class="line">    Stack() {          <span class="comment">// 初始化</span></span><br><span class="line">        _size = <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    Stack(Stack&amp; q) {  <span class="comment">// 拷贝（引用）</span></span><br><span class="line">        _size = q.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; _size; i++)</span><br><span class="line">            _data[i] = q.at(i);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> </span>{     <span class="comment">// 是否为空</span></span><br><span class="line">        <span class="keyword">return</span> !_size;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>{       <span class="comment">// 尺寸</span></span><br><span class="line">        <span class="keyword">return</span> _size;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">at</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{    <span class="comment">// 数据</span></span><br><span class="line">        <span class="keyword">return</span> (x&gt;=<span class="number">0</span> &amp;&amp; x &lt; _size) ? _data[x] : <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{ <span class="comment">// 放入一个</span></span><br><span class="line">        <span class="keyword">if</span> (_size &lt; <span class="number">1000</span>)</span><br><span class="line">            _data[_size++] = x;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>{       <span class="comment">// 取出一个</span></span><br><span class="line">        <span class="keyword">if</span> (_size) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; _size<span class="number">-1</span>; i++)</span><br><span class="line">                _data[i] = _data[i+<span class="number">1</span>];</span><br><span class="line">            --_size;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">front</span><span class="params">()</span> </span>{      <span class="comment">// 获取最新进入的</span></span><br><span class="line">        <span class="keyword">return</span> _size?_data[<span class="number">0</span>] : <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">back</span><span class="params">()</span> </span>{       <span class="comment">// 获取最后进入的</span></span><br><span class="line">        <span class="keyword">return</span> _size?_data[_size<span class="number">-1</span>] : <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>{</span><br><span class="line">        _size = <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    Stack s;</span><br><span class="line"></span><br><span class="line">    s.push(<span class="number">100</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, s.back());</span><br><span class="line">    s.push(<span class="number">20</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, s.back());</span><br><span class="line"></span><br><span class="line">    <span class="function">Stack <span class="title">s2</span><span class="params">(s)</span></span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, s.back());</span><br><span class="line">    s2.clear();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="C-用法"><a href="#C-用法" class="headerlink" title="C++ 用法"></a>C++ 用法</h2><h3 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br></pre></td></tr></tbody></table></figure><h3 id="定义方式"><a href="#定义方式" class="headerlink" title="定义方式"></a>定义方式</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">statck&lt;<span class="keyword">int</span>&gt; q;</span><br></pre></td></tr></tbody></table></figure><h3 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h3><h4 id="栈-3"><a href="#栈-3" class="headerlink" title="栈"></a>栈</h4><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s.empty() <span class="comment">//如果栈为空返回true，否则返回false  </span></span><br><span class="line">s.size()  <span class="comment">//返回栈中元素的个数  </span></span><br><span class="line">s.pop()   <span class="comment">//删除栈顶元素但不返回其值  </span></span><br><span class="line">s.top()   <span class="comment">//返回栈顶的元素，但不删除该元素  </span></span><br><span class="line">s.push(x) <span class="comment">//在栈顶压入新元素 ，参数X为要压入的元素</span></span><br></pre></td></tr></tbody></table></figure><h4 id="队列-1"><a href="#队列-1" class="headerlink" title="队列"></a>队列</h4><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">q.empty() <span class="comment">// 如果队列为空返回true，否则返回false  </span></span><br><span class="line">q.size()  <span class="comment">// 返回队列中元素的个数  </span></span><br><span class="line">q.pop()   <span class="comment">//删除队列首元素但不返回其值  </span></span><br><span class="line">q.front() <span class="comment">// 返回队首元素的值，但不删除该元素  </span></span><br><span class="line">q.push(x) <span class="comment">//在队尾压入新元素 ，X为要压入的元素</span></span><br><span class="line">q.back()  <span class="comment">//返回队列尾元素的值，但不删除该元素</span></span><br></pre></td></tr></tbody></table></figure><h4 id="智能指针"><a href="#智能指针" class="headerlink" title="智能指针"></a>智能指针</h4><p>迭代器 <code>iterator</code></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt;::iterator i;</span><br><span class="line"><span class="keyword">for</span> (i = s.begin(); i != s.end(); ++i)</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *i &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></tbody></table></figure><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; s;</span><br><span class="line">    <span class="keyword">char</span> a = <span class="string">'a'</span>, b = <span class="string">'b'</span>;</span><br><span class="line">    </span><br><span class="line">    q.push(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"push 1"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"empty:"</span> &lt;&lt; q.empty() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"push 2"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    q.push(<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"front:"</span> &lt;&lt; q.front() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    q.pop();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"pop"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"front:"</span> &lt;&lt; q.front() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    q.pop();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"pop"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"empty:"</span> &lt;&lt; q.empty() &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"-----"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    s.push(a);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"push "</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"size:"</span> &lt;&lt; s.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"top:"</span> &lt;&lt; s.top() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    s.push(b);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"push "</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"top:"</span> &lt;&lt; s.top() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    s.pop();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"pop"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"top:"</span> &lt;&lt; s.top() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;h3 id=&quot;栈&quot;&gt;&lt;a href=&quot;#栈&quot; class=&quot;headerlink&quot; title=&quot;栈&quot;&gt;&lt;/a&gt;栈&lt;/h3&gt;&lt;p&gt;栈是一种特殊的线性表。其特殊性在于限定插入和删除数据元素的操作只能在线性表的一端进行。如下所示：&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="算法" scheme="http://blog.iwxyi.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="讲解" scheme="http://blog.iwxyi.com/tags/%E8%AE%B2%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式-讲解</title>
    <link href="http://blog.iwxyi.com/2018/12/06/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%95%99%E7%A8%8B/"/>
    <id>http://blog.iwxyi.com/2018/12/06/正则表达式教程/</id>
    <published>2018-12-06T12:56:00.000Z</published>
    <updated>2019-10-12T23:15:13.211Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>正则表达式(Regular Expression，简称 RegExp)是一种<strong>文本模式</strong>，包括普通字符（例如，a 到 z 之间的字母）和特殊字符（称为”元字符”）。它使用<strong>单个字符串</strong>来描述、匹配<strong>一系列</strong>匹配某个句法规则的字符串。</p><a id="more"></a><h2 id="为什么使用正则表达式？"><a href="#为什么使用正则表达式？" class="headerlink" title="为什么使用正则表达式？"></a>为什么使用正则表达式？</h2><p>典型的搜索和替换操作要求您提供与预期的搜索结果<strong>匹配</strong>的确切文本。虽然这种技术对于对静态文本执行简单搜索和替换任务可能已经足够了，但它缺乏灵活性，若采用这种方法搜索<strong>动态文本</strong>，即使不是不可能，至少也会变得很困难。</p><h2 id="例1：文件匹配"><a href="#例1：文件匹配" class="headerlink" title="例1：文件匹配"></a>例1：文件匹配</h2><p><code>data(\w)?\.dat</code> 匹配下列所有文件</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data.dat</span><br><span class="line">data1.dat</span><br><span class="line">data2.dat</span><br><span class="line">datax.dat</span><br><span class="line">dataN.dat</span><br></pre></td></tr></tbody></table></figure><p>使用 <code>*</code> 字符代替 <code>?</code> 字符扩大了找到的文件的数量。<code>data.*\.dat</code> 匹配下列所有文件：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data.dat</span><br><span class="line">data1.dat</span><br><span class="line">data2.dat</span><br><span class="line">data12.dat</span><br><span class="line">datax.dat</span><br><span class="line">dataXYZ.dat</span><br></pre></td></tr></tbody></table></figure><h2 id="例2：colou-r"><a href="#例2：colou-r" class="headerlink" title="例2：colou?r"></a>例2：colou?r</h2><p>同时匹配 <code>color</code>与<code>colour</code></p><h2 id="例3：特定格式"><a href="#例3：特定格式" class="headerlink" title="例3：特定格式"></a>例3：特定格式</h2><p><code>^[0-9]+abc$</code></p><ul><li><code>^</code> 为匹配输入字符串的开始位置</li><li><code>[0-9]+</code>匹配多个数字， <code>[0-9]</code> 匹配单个数字，+ 匹配一个或者多个。</li><li><code>abc$</code>匹配字母 <code>abc</code> 并以 <code>abc</code> 结尾，<code>$</code> 为匹配输入字符串的结束位置。</li></ul><p>我们在写用户注册表单时，只允许用户名包含字符、数字、下划线和连接字符(-)，并设置用户名的长度，我们就可以使用这一类正则表达式来设定。</p><h2 id=""><a href="#" class="headerlink" title="()"></a>()</h2><p><code>()</code> 标记一个子表达式的<strong>开始和结束</strong>位置。子表达式可以获取供以后使用。要匹配这些字符，请使用 <code>\(</code> 和 <code>\)</code>。</p><h2 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h2><p>所谓特殊字符，就是一些有<strong>特殊含义</strong>的字符。</p><p>许多元字符要求在试图匹配它们时特别对待。若要匹配这些特殊字符，必须首先使字符”转义”，即，将反斜杠字符\ 放在它们前面。下表列出了正则表达式中的特殊字符：</p><table><thead><tr><th>特别字符</th><th>描述</th></tr></thead><tbody><tr><td>$</td><td>匹配输入字符串的结尾位置。如果设置了 RegExp 对象的 Multiline 属性，则 <code>$</code> 也匹配 ‘\n’ 或 ‘\r’。要匹配 <code>$</code> 字符本身，请使用 <code>\$</code>。</td></tr><tr><td>( )</td><td>标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用 ( 和 )。</td></tr><tr><td>*</td><td>匹配前面的子表达式零次或多次。要匹配 * 字符，请使用 *。</td></tr><tr><td>+</td><td>匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 +。</td></tr><tr><td>.</td><td>匹配除换行符 \n 之外的任何单字符。要匹配 . ，请使用 . 。</td></tr><tr><td>[</td><td>标记一个中括号表达式的开始。要匹配 [，请使用 [。</td></tr><tr><td>?</td><td>匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配 ? 字符，请使用 ?。</td></tr><tr><td>\</td><td>将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。例如， ‘n’ 匹配字符 ‘n’。’\n’ 匹配换行符。序列 ‘\‘ 匹配 “"，而 ‘(‘ 则匹配 “(“。</td></tr><tr><td>^</td><td>匹配输入字符串的开始位置，除非在方括号表达式中使用，此时它表示不接受该字符集合。要匹配 ^ 字符本身，请使用 ^。</td></tr><tr><td>{</td><td>标记限定符表达式的开始。要匹配 {，请使用 {。</td></tr><tr><td>|</td><td>指明两项之间的一个选择。要匹配 |，请使用 |。</td></tr></tbody></table><h2 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h2><p>限定符用来指定正则表达式的一个给定组件必须要<strong>出现多少次</strong>才能满足匹配。有 * 或 + 或 ? 或 {n} 或 {n,} 或 {n,m} 共6种。</p><p>正则表达式的限定符有：</p><table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td>*</td><td>匹配前面的子表达式零次或多次。例如，zo* 能匹配 “z” 以及 “zoo”。* 等价于{0,}。</td></tr><tr><td>+</td><td>匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。</td></tr><tr><td>?</td><td>匹配前面的子表达式零次或一次。例如，”do(es)?” 可以匹配 “do” 、 “does” 中的 “does” 、 “doxy” 中的 “do” 。? 等价于 {0,1}。</td></tr><tr><td>{n}</td><td>n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。</td></tr><tr><td>{n,}</td><td>n 是一个非负整数。至少匹配n 次。例如，’o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。’o{1,}’ 等价于 ‘o+’。’o{0,}’ 则等价于 ‘o*’。</td></tr><tr><td>{n,m}</td><td>m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。例如，”o{1,3}” 将匹配 “fooooood” 中的前三个 o。’o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。</td></tr></tbody></table><h2 id="定位符"><a href="#定位符" class="headerlink" title="定位符"></a>定位符</h2><p>定位符使您能够将正则表达式固定到<strong>行首或行尾</strong>。它们还使您能够创建这样的正则表达式，这些正则表达式出现在一个单词内、在一个单词的开头或者一个单词的结尾。</p><p>定位符用来描述字符串或单词的边界，^ 和 $ 分别指字符串的开始与结束，\b 描述单词的前或后边界，\B 表示非单词边界。</p><p>正则表达式的定位符有：</p><table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td>^</td><td>匹配输入字符串开始的位置。如果设置了 RegExp 对象的 Multiline 属性，^ 还会与 \n 或 \r 之后的位置匹配。</td></tr><tr><td>$</td><td>匹配输入字符串结尾的位置。如果设置了 RegExp 对象的 Multiline 属性，$ 还会与 \n 或 \r 之前的位置匹配。</td></tr><tr><td>\b</td><td>匹配一个单词边界，即字与空格间的位置。</td></tr><tr><td>\B</td><td>非单词边界匹配。</td></tr></tbody></table><blockquote><p><strong>注意</strong>：不能将限定符与定位符一起使用。</p></blockquote><h2 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h2><p>用圆括号将所有选择项括起来，相邻的选择项之间用|分隔。但用圆括号会有一个副作用，使相关的匹配会被缓存，此时可用?:放在第一个选项前来消除这种副作用。</p><p>其中 <code>?:</code> 是<strong>非捕获元</strong>之一，还有两个非捕获元是 <code>?=</code> 和 <code>?!</code>，这两个还有更多的含义，前者为正向预查，在任何<strong>开始匹配圆括号</strong>内的正则表达式模式的位置来匹配搜索字符串，后者为负向预查，在任何开始不匹配该正则表达式模式的位置来匹配搜索字符串。</p><h2 id="反向引用"><a href="#反向引用" class="headerlink" title="反向引用"></a>反向引用</h2><p>对一个正则表达式模式或部分模式两边添加圆括号将导致相关匹配存储到一个临时缓冲区中，所捕获的每个子匹配都按照在正则表达式模式中从左到右出现的顺序存储。缓冲区编号从 1 开始，最多可存储 99 个捕获的子表达式。每个缓冲区都可以使用 <code>\n</code> 访问，其中 <code>n</code> 为一个标识特定缓冲区的一位或两位十进制数。</p><p>可以使用非捕获元字符 <code>?:</code>、<code>?=</code> 或 <code>?!</code> 来重写捕获，忽略对相关匹配的保存。</p><p>反向引用的最简单的、最有用的应用之一，是提供查找文本中两个相同的相邻单词的匹配项的能力。</p><p>例如：<code>(asd)\1</code>能匹配<code>asdasd</code></p><h2 id="所有元字符"><a href="#所有元字符" class="headerlink" title="所有元字符"></a>所有元字符</h2><table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td>\</td><td>将下一个字符标记为一个特殊字符、或一个原义字符、或一个 向后引用、或一个八进制转义符。例如，’n’ 匹配字符 “n”。’\n’ 匹配一个换行符。序列 ‘\‘ 匹配 “" 而 “(“ 则匹配 “(“。</td></tr><tr><td>^</td><td>匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 ‘\n’ 或 ‘\r’ 之后的位置。</td></tr><tr><td>$</td><td>匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性，$ 也匹配 ‘\n’ 或 ‘\r’ 之前的位置。</td></tr><tr><td>*</td><td>匹配前面的子表达式零次或多次。例如，zo* 能匹配 “z” 以及 “zoo”。* 等价于{0,}。</td></tr><tr><td>+</td><td>匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。</td></tr><tr><td>?</td><td>匹配前面的子表达式零次或一次。例如，”do(es)?” 可以匹配 “do” 或 “does” 。? 等价于 {0,1}。</td></tr><tr><td>{n}</td><td>n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。</td></tr><tr><td>{n,}</td><td>n 是一个非负整数。至少匹配n 次。例如，’o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。’o{1,}’ 等价于 ‘o+’。’o{0,}’ 则等价于 ‘o*’。</td></tr><tr><td>{n,m}</td><td>m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。例如，”o{1,3}” 将匹配 “fooooood” 中的前三个 o。’o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。</td></tr><tr><td>?</td><td>当该字符紧跟在任何一个其他限制符 (*, +, ?, {n}, {n,}, {n,m}) 后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串 “oooo”，’o+?’ 将匹配单个 “o”，而 ‘o+’ 将匹配所有 ‘o’。</td></tr><tr><td>.</td><td>匹配除换行符（\n、\r）之外的任何单个字符。要匹配包括 ‘\n’ 在内的任何字符，请使用像”<strong>(.|\n)</strong>“的模式。</td></tr><tr><td>(pattern)</td><td>匹配 pattern 并获取这一匹配。所获取的匹配可以从产生的 Matches 集合得到，在VBScript 中使用 SubMatches 集合，在JScript 中则使用 $0…$9 属性。要匹配圆括号字符，请使用 ‘(‘ 或 ‘)‘。</td></tr><tr><td>(?:pattern)</td><td>匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用 “或” 字符 (|) 来组合一个模式的各个部分是很有用。例如， ‘industr(?:y|ies) 就是一个比 ‘industry|industries’ 更简略的表达式。</td></tr><tr><td>(?=pattern)</td><td>正向肯定预查（look ahead positive assert），在任何匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，”Windows(?=95|98|NT|2000)”能匹配”Windows2000”中的”Windows”，但不能匹配”Windows3.1”中的”Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td></tr><tr><td>(?!pattern)</td><td>正向否定预查(negative assert)，在任何不匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如”Windows(?!95|98|NT|2000)”能匹配”Windows3.1”中的”Windows”，但不能匹配”Windows2000”中的”Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td></tr><tr><td>(?&lt;=pattern)</td><td>反向(look behind)肯定预查，与正向肯定预查类似，只是方向相反。例如，”`(?&lt;=95</td></tr><tr><td>(?&lt;!pattern)</td><td>反向否定预查，与正向否定预查类似，只是方向相反。例如”`(?&lt;!95</td></tr><tr><td>x|y</td><td>匹配 x 或 y。例如，’z|food’ 能匹配 “z” 或 “food”。’(z|f)ood’ 则匹配 “zood” 或 “food”。</td></tr><tr><td>[xyz]</td><td>字符集合。匹配所包含的任意一个字符。例如， ‘[abc]’ 可以匹配 “plain” 中的 ‘a’。</td></tr><tr><td>[^xyz]</td><td>负值字符集合。匹配未包含的任意字符。例如， <code>'[^abc]'</code> 可以匹配 “plain” 中的’p’、’l’、’i’、’n’。</td></tr><tr><td>[a-z]</td><td>字符范围。匹配指定范围内的任意字符。例如，’[a-z]’ 可以匹配 ‘a’ 到 ‘z’ 范围内的任意小写字母字符。</td></tr><tr><td>[^a-z]</td><td>负值字符范围。匹配任何不在指定范围内的任意字符。例如，’[^a-z]’ 可以匹配任何不在 ‘a’ 到 ‘z’ 范围内的任意字符。</td></tr><tr><td>\b</td><td>匹配一个单词边界，也就是指单词和空格间的位置。例如， ‘er\b’ 可以匹配”never” 中的 ‘er’，但不能匹配 “verb” 中的 ‘er’。</td></tr><tr><td>\B</td><td>匹配非单词边界。’er\B’ 能匹配 “verb” 中的 ‘er’，但不能匹配 “never” 中的 ‘er’。</td></tr><tr><td>\cx</td><td>匹配由 x 指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 ‘c’ 字符。</td></tr><tr><td>\d</td><td>匹配一个数字字符。等价于 [0-9]。</td></tr><tr><td>\D</td><td>匹配一个非数字字符。等价于 <code>[^0-9]</code>。</td></tr><tr><td>\f</td><td>匹配一个换页符。等价于 \x0c 和 \cL。</td></tr><tr><td>\n</td><td>匹配一个换行符。等价于 \x0a 和 \cJ。</td></tr><tr><td>\r</td><td>匹配一个回车符。等价于 \x0d 和 \cM。</td></tr><tr><td>\s</td><td>匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。</td></tr><tr><td>\S</td><td>匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。</td></tr><tr><td>\t</td><td>匹配一个制表符。等价于 \x09 和 \cI。</td></tr><tr><td>\v</td><td>匹配一个垂直制表符。等价于 \x0b 和 \cK。</td></tr><tr><td>\w</td><td>匹配字母、数字、下划线。等价于’[A-Za-z0-9_]’。</td></tr><tr><td>\W</td><td>匹配非字母、数字、下划线。等价于 ‘[^A-Za-z0-9_]’。</td></tr><tr><td>\xn</td><td>匹配 n，其中 n 为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，’\x41’ 匹配 “A”。’\x041’ 则等价于 ‘\x04’ &amp; “1”。正则表达式中可以使用 ASCII 编码。</td></tr><tr><td>\num</td><td>匹配 num，其中 num 是一个正整数。对所获取的匹配的引用。例如，’(.)\1’ 匹配两个连续的相同字符。</td></tr><tr><td>\n</td><td>标识一个八进制转义值或一个向后引用。如果 \n 之前至少 n 个获取的子表达式，则 n 为向后引用。否则，如果 n 为八进制数字 (0-7)，则 n 为一个八进制转义值。</td></tr><tr><td>\nm</td><td>标识一个八进制转义值或一个向后引用。如果 \nm 之前至少有 nm 个获得子表达式，则 nm 为向后引用。如果 \nm 之前至少有 n 个获取，则 n 为一个后跟文字 m 的向后引用。如果前面的条件都不满足，若 n 和 m 均为八进制数字 (0-7)，则 \nm 将匹配八进制转义值 nm。</td></tr><tr><td>\nml</td><td>如果 n 为八进制数字 (0-3)，且 m 和 l 均为八进制数字 (0-7)，则匹配八进制转义值 nml。</td></tr><tr><td>\un</td><td>匹配 n，其中 n 是一个用四个十六进制数字表示的 Unicode 字符。例如， \u00A9 匹配版权符号 (?)。</td></tr></tbody></table><h2 id="等价字符"><a href="#等价字符" class="headerlink" title="等价字符"></a>等价字符</h2><p><code>?</code>, <code>*</code>, <code>+</code>, <code>\d</code>, <code>\w</code> 都是等价字符<br><code>?</code>等价于匹配长度{0,1}<br><code>*</code>等价于匹配长度{0,}<br><code>+</code>等价于匹配长度{1,}<br><code>\d</code>等价于[0-9]<br><code>\w</code>等价于[A-Za-z_0-9]</p><h2 id="常用运算符与表达式"><a href="#常用运算符与表达式" class="headerlink" title="常用运算符与表达式"></a>常用运算符与表达式</h2><p><code>^</code> 开始<br><code>()</code> 域段<br><code>[]</code> 包含,默认是一个字符长度<br><code>[^]</code> 不包含,默认是一个字符长度<br><code>{n,m}</code> 匹配长度<br><code>.</code> 任何单个字符(. 字符点)<br><code>|</code> 或<br><code>\</code> 转义<br><code>$</code> 结尾<br><code>[A-Z]</code> 26个大写字母<br><code>[a-z]</code> 26个小写字母<br><code>[0-9]</code> 0至9数字<br><code>[A-Za-z0-9]</code> 26个大写字母、26个小写字母和0至9数字</p><h2 id="贪婪模式"><a href="#贪婪模式" class="headerlink" title="贪婪模式"></a>贪婪模式</h2><p><strong>*、+限定符都是贪婪的，因为它们会尽可能多的匹配文字，只有在它们的后面加上一个?就可以实现非贪婪或最小匹配。</strong></p><h2 id="字符簇"><a href="#字符簇" class="headerlink" title="字符簇"></a>字符簇</h2><p>略吧，目前作用不大</p><h2 id="实例应用"><a href="#实例应用" class="headerlink" title="实例应用"></a>实例应用</h2><ol><li><p>验证用户名和密码：（”<code>^[a-zA-Z]\w{5,15}$</code>“）正确格式：”<code>[A-Z][a-z]_[0-9]</code>“组成,并且第一个字必须为字母6~16位；</p></li><li><p>验证电话号码：（”<code>^(\\d{3,4}-)\\d{7,8}$</code>“）正确格式：xxx/xxxx-xxxxxxx/xxxxxxxx；</p></li><li><p>验证手机号码：”<code>^1[3|4|5|7|8][0-9]\\d{8}$</code>“；</p></li><li><p>验证身份证号（15位或18位数字）：”<code>\\d{14}[[0-9],0-9xX]</code>“；</p></li><li><p>验证Email地址：(“<code>^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\.\\w+([-.]\\w+)*$</code>“)；</p></li><li><p>只能输入由数字和26个英文字母组成的字符串：(“<code>^[A-Za-z0-9]+$</code>“) ;</p></li><li><p>整数或者小数：<code>^[0-9]+([.]{0,1}[0-9]+){0,1}$</code></p></li><li><p>只能输入数字：”<code>^[0-9]*$</code>“。</p></li><li><p>只能输入n位的数字：”<code>^\\d{n}$</code>“。</p></li><li><p>只能输入至少n位的数字：”<code>^\\d{n,}$</code>“。</p></li><li><p>只能输入m~n位的数字：”<code>^\\d{m,n}$</code>“。</p></li><li><p>只能输入零和非零开头的数字：”<code>^(0|[1-9][0-9]*)$</code>“。</p></li><li><p>只能输入有两位小数的正实数：”<code>^[0-9]+(.[0-9]{2})?$</code>“。</p></li><li><p>只能输入有1~3位小数的正实数：”<code>^[0-9]+(\.[0-9]{1,3})?$</code>“。</p></li><li><p>只能输入非零的正整数：<code>"^\+?[1-9][0-9]*$"</code>。</p></li><li><p>只能输入非零的负整数：<code>"^\-[1-9][0-9]*$"</code>。</p></li><li><p>只能输入长度为3的字符：”<code>^.{3}$</code>“。</p></li><li><p>只能输入由26个英文字母组成的字符串：”<code>^[A-Za-z]+$</code>“。</p></li><li><p>只能输入由26个大写英文字母组成的字符串：”<code>^[A-Z]+$</code>“。</p></li><li><p>只能输入由26个小写英文字母组成的字符串：”<code>^[a-z]+$</code>“。</p></li><li><p>验证是否含有<code>^%&amp;',;=?$\"</code>等字符：<code>"[^%&amp;',;=?$\x22]+"</code>。</p></li><li><p>只能输入汉字：”<code>^[\u4e00-\u9fa5]{0,}$</code>“。</p></li><li><p>验证URL：”<code>^http://([\\w-]+\.)+[\\w-]+(/[\\w-./?%&amp;=]*)?$</code>“。</p></li><li><p>验证一年的12个月：”<code>^(0?[1-9]|1[0-2])$</code>“正确格式为：”01”～”09”和”10”～”12”。</p></li><li><p>验证一个月的31天：”<code>^((0?[1-9])|((1|2)[0-9])|30|31)$</code>“正确格式为；”01”～”09”、”10”～”29”和“30”~“31”。</p></li><li><p>获取日期正则表达式：<code>\d{4}[年|\-|\.]\d{1-12}[月|\-|\.]\d{1-31}日?</code></p><p>评注：可用来匹配大多数年月日信息。</p></li><li><p>匹配双字节字符(包括汉字在内)：<code>[^\x00-\xff]</code></p><p>评注：可以用来计算字符串的长度（一个双字节字符长度计2，ASCII字符计1）</p></li><li><p>匹配空白行的正则表达式：<code>\n\s*\r</code></p><p>评注：可以用来删除空白行</p></li><li><p>匹配HTML标记的正则表达式：<code>&lt;(\S*?)[^&gt;]*&gt;.*?&lt;/&gt;|&lt;.*? /&gt;</code></p><p>评注：网上流传的版本太糟糕，上面这个也仅仅能匹配部分，对于复杂的嵌套标记依旧无能为力</p></li><li><p>匹配首尾空白字符的正则表达式：<code>^\s*|\s*$</code></p><p>评注：可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式</p></li><li><p>匹配网址URL的正则表达式：<code>[a-zA-z]+://[^\s]*</code></p><p>评注：网上流传的版本功能很有限，上面这个基本可以满足需求</p></li><li><p>匹配帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：<code>^[a-zA-Z][a-zA-Z0-9_]{4,15}$</code></p><p>评注：表单验证时很实用</p></li><li><p>匹配腾讯QQ号：<code>[1-9][0-9]\{4,\}</code></p><p>评注：腾讯QQ号从10 000 开始</p></li><li><p>匹配中国邮政编码：<code>[1-9]\\d{5}(?!\d)</code></p><p>评注：中国邮政编码为6位数字</p></li><li><p>匹配ip地址：<code>((2[0-4]\\d|25[0-5]|[01]?\\d\\d?)\.){3}(2[0-4]\\d|25[0-5]|[01]?\\d\\d?)</code>。</p></li></ol><h2 id="C-示例"><a href="#C-示例" class="headerlink" title="C++示例"></a>C++示例</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;regex.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> status ,i;</span><br><span class="line"><span class="keyword">int</span> cflags = REG_EXTENDED;</span><br><span class="line"><span class="keyword">regmatch_t</span> pmatch[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">size_t</span> nmatch = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">regex_t</span> reg;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> * pattern = <span class="string">"^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*.\\w+([-.]\\w+)*$"</span>;</span><br><span class="line"><span class="keyword">char</span> * buf = <span class="string">"chenjiayi@126.com"</span>;</span><br><span class="line">regcomp(&amp;reg,pattern,cflags);<span class="comment">//编译正则模式</span></span><br><span class="line">status = regexec(&amp;reg,buf,nmatch,<span class="number">0</span>);<span class="comment">//执行正则表达式和缓存的比较</span></span><br><span class="line"><span class="keyword">if</span>(status == REG_NOMATCH)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"No match\n"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">0</span> == status)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"比较成功:"</span>);</span><br><span class="line"><span class="keyword">for</span>(i = pmatch[<span class="number">0</span>].rm_so;i&lt;pmatch[<span class="number">0</span>].rm_eo;++i)<span class="built_in">putchar</span>(buf[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">}</span><br><span class="line">regfree(&amp;reg);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>博客来源：<a href="https://blog.csdn.net/chenjiayi_yun/article/details/43375201" target="_blank" rel="noopener">https://blog.csdn.net/chenjiayi_yun/article/details/43375201</a></p></blockquote><blockquote><p>菜鸟教程：<a href="http://www.runoob.com/regexp/regexp-tutorial.html" target="_blank" rel="noopener">http://www.runoob.com/regexp/regexp-tutorial.html</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;正则表达式(Regular Expression，简称 RegExp)是一种&lt;strong&gt;文本模式&lt;/strong&gt;，包括普通字符（例如，a 到 z 之间的字母）和特殊字符（称为”元字符”）。它使用&lt;strong&gt;单个字符串&lt;/strong&gt;来描述、匹配&lt;strong&gt;一系列&lt;/strong&gt;匹配某个句法规则的字符串。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="讲解" scheme="http://blog.iwxyi.com/tags/%E8%AE%B2%E8%A7%A3/"/>
    
      <category term="RegExp" scheme="http://blog.iwxyi.com/tags/RegExp/"/>
    
  </entry>
  
  <entry>
    <title>汇编MASM-学习笔记</title>
    <link href="http://blog.iwxyi.com/2018/11/19/%E6%B1%87%E7%BC%96MASM-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://blog.iwxyi.com/2018/11/19/汇编MASM-学习笔记/</id>
    <published>2018-11-19T12:18:00.000Z</published>
    <updated>2019-10-12T23:14:32.479Z</updated>
    
    <content type="html"><![CDATA[<h1 id="运行-DOSBox"><a href="#运行-DOSBox" class="headerlink" title="运行 DOSBox"></a>运行 DOSBox</h1><ol><li><code>mount c: d:\masm</code></li><li><code>C:</code></li><li><code>masm test.asm</code> 回车3次</li><li><code>link test.obj</code> 回车4次</li><li><code>debug test.exe</code></li></ol><a id="more"></a><ul><li><code>-r</code> 运行</li><li><code>-t</code> 继续</li><li><code>-t 10</code> 运行10条指令</li><li><code>-d</code> 内存</li><li><code>-u</code> 源码</li><li><code>-p</code> 跳过（尤其是库函数）</li><li><code>-q</code> 退出</li></ul><h1 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h1><ul><li><code>assume</code> 声明</li><li><code>mov</code> 复制内存 <code>mov ax, [bx]</code></li><li><code>inc</code> 加一 <code>inc ax</code></li><li><code>dec</code> 减一</li><li><code>jmp</code> 跳转 <code>jmp loop1</code></li><li><code>cmp</code> 比较大小 <code>cmp ax, bx</code></li><li><code>add</code> 增加某数 <code>add ax, 10</code></li></ul><h2 id="其他指令"><a href="#其他指令" class="headerlink" title="其他指令"></a>其他指令</h2><ul><li><code>ADC</code> 带进位加法</li><li><code>LEA dx, [0000]</code>  相当于<code>MOV</code>字符串</li></ul><p>?                               比较大小</p><p><code>cmp cx, 0</code> 比较结果执行下面的语句</p><ul><li><code>ja</code> &gt;    above</li><li><code>jb</code> &lt;    blow</li><li><code>jbe</code> &lt;=</li><li><code>jae</code> &gt;=</li><li><code>jz</code>   == （相减为 zero）</li><li><code>jnz</code> !=</li></ul><h1 id="库函数"><a href="#库函数" class="headerlink" title="库函数"></a>库函数</h1><ul><li><code>INT 21</code> <ul><li><code>MOV AH 0A</code> 时：接收一个用户输入到 <code>ds[dx]</code></li><li><code>MOV AH 4C</code> 时：退出程序，返回操作系统</li></ul></li></ul><h2 id="寄存器拆开"><a href="#寄存器拆开" class="headerlink" title="寄存器拆开"></a>寄存器拆开</h2><p>AX = AH + AL<br>只有 AX BX CX DX 这四个可以拆开用</p><h1 id="常用代码块"><a href="#常用代码块" class="headerlink" title="常用代码块"></a>常用代码块</h1><h2 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code, ds:data1</span><br><span class="line">mov ax, data1</span><br></pre></td></tr></tbody></table></figure><h2 id="变量加一"><a href="#变量加一" class="headerlink" title="变量加一"></a>变量加一</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov al, [bx] ; 数据段寄存器DS 到 寄存器</span><br><span class="line">inc al       ; 增加 1</span><br><span class="line">mov [bx], al ; 寄存器 到 DS</span><br></pre></td></tr></tbody></table></figure><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mov cx, 0</span><br><span class="line"></span><br><span class="line">loop1:</span><br><span class="line">    inc cx</span><br><span class="line">    cmp cx, 10</span><br><span class="line">    jb loop1</span><br></pre></td></tr></tbody></table></figure><h3 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">while</span> (i &gt;= <span class="number">0</span>) {</span><br><span class="line">    <span class="comment">// P1</span></span><br><span class="line">    i--;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mov ax, 10</span><br><span class="line"></span><br><span class="line">loop1:</span><br><span class="line">cmp ax, 0</span><br><span class="line">jb next</span><br><span class="line">;P1</span><br><span class="line">dec ax</span><br><span class="line">jmp loop1</span><br><span class="line"></span><br><span class="line">next:</span><br></pre></td></tr></tbody></table></figure><h2 id="接收用户输入"><a href="#接收用户输入" class="headerlink" title="接收用户输入"></a>接收用户输入</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MOV AX, 076A</span><br><span class="line">MOV DS, AX</span><br><span class="line">MOV DX, 0000</span><br><span class="line">MOV AH, 0A</span><br><span class="line">INT 21</span><br></pre></td></tr></tbody></table></figure><h2 id="清屏"><a href="#清屏" class="headerlink" title="清屏"></a>清屏</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">    mov ax,cs</span><br><span class="line">    mov ss,ax</span><br><span class="line">    mov sp,0x7c00  ;set stack and sp</span><br><span class="line"></span><br><span class="line">    mov ah,0x06</span><br><span class="line">    mov al,0   ; 准备清窗口</span><br><span class="line"></span><br><span class="line">    mov ch,0   ; 左上角的行号</span><br><span class="line">    mov cl,0   ; 左上角的列号</span><br><span class="line">    mov dh,25  ; 右下角的行号</span><br><span class="line">    mov dl,80  ; 右下角的行号</span><br><span class="line">    mov bh,0x07; 属性为蓝底白字</span><br><span class="line">    int 0x10   ; 执行清空操作</span><br><span class="line"></span><br><span class="line">@1:  </span><br><span class="line">    jmp @1</span><br><span class="line"></span><br><span class="line">    times 510-($-$$) db 0</span><br><span class="line">    db 0x55,0xaa</span><br></pre></td></tr></tbody></table></figure><h2 id="画白线"><a href="#画白线" class="headerlink" title="画白线"></a>画白线</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">mov al, 0x13    ; VGA320×200×8bit 显示模式</span><br><span class="line">mov ah, 0x00</span><br><span class="line">int 0x10</span><br><span class="line"></span><br><span class="line">mov ax, 0x0a000 ; 往显存中放入点数据</span><br><span class="line">mov ds, ax</span><br><span class="line">mov dl, 30</span><br><span class="line">mov ax, 0</span><br><span class="line"></span><br><span class="line">f:</span><br><span class="line">mov bx, ax</span><br><span class="line">mov [ds:bx], dl</span><br><span class="line">inc ax</span><br><span class="line">cmp ax, 50</span><br><span class="line">ja io</span><br><span class="line">jmp f</span><br><span class="line"></span><br><span class="line">io:</span><br></pre></td></tr></tbody></table></figure><h2 id="画线函数"><a href="#画线函数" class="headerlink" title="画线函数"></a>画线函数</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">org 0x7c00</span><br><span class="line"></span><br><span class="line">mov ax, 80; y</span><br><span class="line">mov bx, 50; x1</span><br><span class="line">mov cx, 150; x2</span><br><span class="line"></span><br><span class="line">call drawline; 运行画线</span><br><span class="line"></span><br><span class="line">; y:ax, x1:bx, x2:cx</span><br><span class="line">drawline:</span><br><span class="line">mov dx, 320; 屏幕宽是320</span><br><span class="line">mul dx; dx *= ax 16位中AX为被乘数，8位中AL为被乘数</span><br><span class="line">sub cx, bx; cx = x2-x1 线的宽度</span><br><span class="line">add bx, ax; 横偏移量+横纵偏移量 = 偏移位置</span><br><span class="line">mov dl, 1; 色号</span><br><span class="line">loop0:</span><br><span class="line">mov [ds:bx], dl ; 填充颜色</span><br><span class="line">inc bx; 偏移位置+1</span><br><span class="line">dec cx; 循环次数-1</span><br><span class="line">jnz loop0; 受到上面的DEC的ZF标志位</span><br><span class="line">RET</span><br></pre></td></tr></tbody></table></figure><h2 id="画竖线"><a href="#画竖线" class="headerlink" title="画竖线"></a>画竖线</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">;****************************************</span><br><span class="line">;y1-&gt;ax, y2-&gt;cx, x-&gt;bx</span><br><span class="line">;****************************************</span><br><span class="line">DrawVerticalLine:</span><br><span class="line">mov dx, 320 ; w = 320</span><br><span class="line">mov bp, dx</span><br><span class="line">sub cx, ax  ; y1 = y2-y1  循环次数</span><br><span class="line">mul dx; ax = w * y1 纵偏移量</span><br><span class="line">add bx, ax  ; 横纵偏移量</span><br><span class="line">mov dl, 1</span><br><span class="line">x1: mov [ds:bx], dl</span><br><span class="line">add bx, bp</span><br><span class="line">dec cx</span><br><span class="line">jnz x1</span><br><span class="line">ret</span><br></pre></td></tr></tbody></table></figure><h2 id="设置颜色"><a href="#设置颜色" class="headerlink" title="设置颜色"></a>设置颜色</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mov al, 1      ; 颜色号</span><br><span class="line">mov dx, 0x3c8</span><br><span class="line">out dx, al</span><br><span class="line"></span><br><span class="line">mov al, 100    ; R / 4 = 25</span><br><span class="line">mov dx, 0x3c9</span><br><span class="line">out dx, al</span><br><span class="line"></span><br><span class="line">mov al, 0      ; G</span><br><span class="line">out dx, al</span><br><span class="line"></span><br><span class="line">mov al, 0      ; B</span><br><span class="line">out dx, al</span><br></pre></td></tr></tbody></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">;rgb db 100, 0, 0,  0, 100, 0,  0, 0, 100</span><br><span class="line">rgb db 100, 0, 0,</span><br><span class="line">    db 0, 100, 0,</span><br><span class="line">    db 0, 0, 100</span><br><span class="line"></span><br><span class="line">mov ax, 0</span><br><span class="line">mov ds, ax</span><br><span class="line">mov si, rgb</span><br><span class="line">mov [ds:si], ... ; 偏移地址，si为下标</span><br></pre></td></tr></tbody></table></figure><h2 id="进栈出栈保存变量"><a href="#进栈出栈保存变量" class="headerlink" title="进栈出栈保存变量"></a>进栈出栈保存变量</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">push ax</span><br><span class="line">mov  ax, 0</span><br><span class="line">pop  ax</span><br></pre></td></tr></tbody></table></figure><h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><p>每隔18分之一秒运行一次，多个任务的话会被覆盖掉</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mov word [ds:0x20],int_timer0</span><br></pre></td></tr></tbody></table></figure><h2 id="打印字符"><a href="#打印字符" class="headerlink" title="打印字符"></a>打印字符</h2><p>函数：在 <code>ex:bx</code> 的位置显示一个 ‘A’</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">int_timer0:</span><br><span class="line">mov byte [es:bx],'A'</span><br><span class="line">mov byte [es:bx+1],0x0a</span><br><span class="line">inc bx   ; 自增两次到下次打印的字符</span><br><span class="line">inc bx</span><br><span class="line"></span><br><span class="line">mov al,0x20</span><br><span class="line">mov dx,0x20</span><br><span class="line">out dx,al;EOI=0 中断</span><br><span class="line">iret</span><br></pre></td></tr></tbody></table></figure><h2 id="获取按键输入"><a href="#获取按键输入" class="headerlink" title="获取按键输入"></a>获取按键输入</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">int_key:</span><br><span class="line">mov dx, 0x20  ; 下一个键值可以进来了（没有这一段就只能输入一次按键了）</span><br><span class="line">mov al, 0x61</span><br><span class="line">out dx, al</span><br><span class="line"></span><br><span class="line">mov dx, 0x60  ; 读取一次按键</span><br><span class="line">in al, dx</span><br><span class="line"></span><br><span class="line">cmp al, 0x9e</span><br><span class="line">jz func0</span><br><span class="line"></span><br><span class="line">func0:</span><br></pre></td></tr></tbody></table></figure><h2 id="显示一个数字"><a href="#显示一个数字" class="headerlink" title="显示一个数字"></a>显示一个数字</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;运行-DOSBox&quot;&gt;&lt;a href=&quot;#运行-DOSBox&quot; class=&quot;headerlink&quot; title=&quot;运行 DOSBox&quot;&gt;&lt;/a&gt;运行 DOSBox&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;mount c: d:\masm&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C:&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;masm test.asm&lt;/code&gt; 回车3次&lt;/li&gt;
&lt;li&gt;&lt;code&gt;link test.obj&lt;/code&gt; 回车4次&lt;/li&gt;
&lt;li&gt;&lt;code&gt;debug test.exe&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="学习笔记" scheme="http://blog.iwxyi.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="汇编" scheme="http://blog.iwxyi.com/tags/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>C简单小知识整理</title>
    <link href="http://blog.iwxyi.com/2018/11/13/C%E7%AE%80%E5%8D%95%E5%B0%8F%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/"/>
    <id>http://blog.iwxyi.com/2018/11/13/C简单小知识整理/</id>
    <published>2018-11-13T00:18:00.000Z</published>
    <updated>2019-10-13T00:20:29.934Z</updated>
    
    <content type="html"><![CDATA[<p>C 与 C++相关内容，<br>一部分从网上摘录。<br>个人能力水平有限，<br>不能保证没有错误。</p><p>——王心意，2018.11.13</p><a id="more"></a><h1 id="必知"><a href="#必知" class="headerlink" title="必知"></a>必知</h1><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">【必知】整数/整数 = 整数，向下取整。</span><br><span class="line"><span class="number">3</span>/<span class="number">5</span> == <span class="number">0</span>, 需要改成：<span class="number">3.0</span>/<span class="number">5</span> == <span class="number">0.6</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span>, a += a *= <span class="number">4</span>; <span class="comment">// 40 + 40 = 80</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a == b &lt; c;  <span class="comment">// a == (b &lt; c) // 判断</span></span><br><span class="line">a = b &lt; c;   <span class="comment">// a = (b &lt; c)  // 0 或 1</span></span><br><span class="line">b &lt; c == a;  <span class="comment">// 0 或 1 == a</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (; ; i++) { <span class="comment">/*...*/</span>} 中的 <span class="keyword">break</span> 不会执行 i++ 语句，<span class="keyword">continue</span> 会执行 i++</span><br></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串复制：<span class="keyword">while</span> (*p1++ = *p2++); <span class="comment">// 谭浩强的书上有</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*p++;     <span class="comment">/* 地址++ */</span></span><br><span class="line">(*p)++;   <span class="comment">/*  值++  */</span></span><br></pre></td></tr></tbody></table></figure><p>读入回车解决方案</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">getchar(); <span class="comment">// 会读入上一个scanf的回车</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;c); <span class="comment">// 这是想要的字符</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">" %c"</span>, &amp;c) != EOF)；  <span class="comment">// 避免读取回车</span></span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%c%*c"</span>, &amp;c) != EOF); <span class="comment">// 强行去掉回车</span></span><br></pre></td></tr></tbody></table></figure><p>计算机的浮点值计算有个”不确定尾数“的现象：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.1</span>+<span class="number">0.2</span> != <span class="number">0.3</span> <span class="comment">// 0.30000000000000004</span></span><br><span class="line"><span class="number">0.1</span>+<span class="number">0.5</span> == <span class="number">0.6</span></span><br></pre></td></tr></tbody></table></figure><p>原因看 <a href="https://0.30000000000000004.com/" target="_blank" rel="noopener">https://0.30000000000000004.com</a></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> a[] = <span class="string">"hello"</span>; <span class="built_in">strcpy</span>(a, <span class="string">"hehe"</span>); <span class="comment">// 正确，字符串常量能当做临时的指针常量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> *p = <span class="string">"hello"</span>; p[<span class="number">2</span>] = <span class="string">'a'</span>;         <span class="comment">// 错误，常量不能改</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">5</span>], (*p)[<span class="number">5</span>]; <span class="comment">// 指向数组的指针，下标必须明确</span></span><br><span class="line">p = &amp;a;</span><br><span class="line">(*p)[i] == a[i];</span><br></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">puts</span>(str[<span class="number">2</span>])、<span class="built_in">strlen</span>(&amp;str[<span class="number">2</span>])、gets(str+<span class="number">2</span>); <span class="comment">//都是从第二个位置开始。输入后末尾自动加上 '\0' （即 ASCII码的 0）</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">3</span>; <span class="keyword">int</span> &amp;b = a; <span class="comment">// 引用类型：对b操作就是对a操作，printf("%d", b)就是3</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">( <span class="keyword">int</span> &amp;a, <span class="keyword">int</span> &amp;b)</span></span>; <span class="comment">//引用，比指针方便</span></span><br></pre></td></tr></tbody></table></figure><p>取 <code>int</code> 或者 <code>long long</code> 变量的某个数字，如：<code>125 / 10 % 10; //倒数第二位</code></p><p>函数 <code>floor( f )</code> 对浮点数取整，但是因为浮点数误差，一般用：<code>floor( f + 0.5);</code><br>浮点数陷阱：<code>for (double i = 0; i != 10; i++); // 死循环</code></p><h1 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h1><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d %d"</span>, a, a++, a++); <span class="comment">//在有些编译器上（实测如VC，不包括VS），从右到左执行，从左到右输出，a=10时会输出：12， 11， 10</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = b = <span class="number">3</span>; <span class="comment">// 是从右到左开始运算，而非从左到右</span></span><br></pre></td></tr></tbody></table></figure><p>不使用临时变量交换两个整数</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = a + b</span><br><span class="line">b = a - b</span><br><span class="line">a = a - b</span><br></pre></td></tr></tbody></table></figure><p>输出”\r”字符串，光标位置回调到行首，并逐字覆盖这一行的文字（可用于做表格）</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i1, i2; <span class="comment">// 分配空间（例子）：i1:10008，i2:10004  逆序添加</span></span><br></pre></td></tr></tbody></table></figure><p><code>static int m;</code> 可以让其他文件不能调用变量或者函数，作用域只限于本模块<br>头文件不要定义全局变量（多次调用会报告已声明），可以用 <code>extern</code></p><p>很大的数组比如几百亿的，开到全局（main函数外面，太大了也必须全局），会全部自动初始化成 0</p><p><code>(2^32) - 1</code> = <code>4294967295</code>，<code>unsigned</code> 的大小<br>-n 的内部表示是：<code>(2 ^ 32) - n</code>;</p><p>判断素数：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (n &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i * i &lt;= n; i++)</span><br><span class="line"><span class="keyword">if</span> (n % i == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br></pre></td></tr></tbody></table></figure><p>也可以素数筛按照倍数打表（多次用到或数字很大时）</p><p><code>int q = 0;</code>  !q 的值在 0 和 非零 之间变换</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">"%*s"</span>); <span class="comment">// 可以跳过输入一个字符串，其他类型同理</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> t[] = <span class="string">"hello\0world"</span>;</span><br><span class="line"><span class="keyword">sizeof</span>(t) == <span class="number">12</span>;</span><br><span class="line"><span class="built_in">strlen</span>(t) == <span class="number">5</span>;</span><br></pre></td></tr></tbody></table></figure><p>数字转换成字符串：<code>sprintf(str, "%d", num);</code><br>字符串转换成数字：<code>sscanf(str, "%d", &amp;num);</code></p><p>清空queue等STL的数据：<code>que.swap( queue&lt;T&gt;() ) ;</code> //消亡值语义</p><p>void指针（仅用于代表地址）：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">zero</span><span class="params">(<span class="keyword">void</span> * data, <span class="keyword">int</span> bytesize)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">char</span> * p = (<span class="keyword">char</span> *)data;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bytesize; i++)</span><br><span class="line">*ptr++ = <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> nums[<span class="number">30</span>]; zero(nums, <span class="keyword">sizeof</span>(nums)); <span class="comment">//不管什么类型，都能按照字符（字节）来清零，因为字节总长度不变</span></span><br><span class="line"></span><br><span class="line">Person p1; zero(p1, <span class="keyword">sizeof</span>(p1)); <span class="comment">//Person 为 struct 结构体，也能用同一个函数来清零 或者 复制数据</span></span><br></pre></td></tr></tbody></table></figure><p><code>strncat</code>、<code>strncpy</code>：比较安全的函数，第三个参数是数量，比如：<code>sizeof(num)/sizeof(int)</code></p><p>指向函数的指针：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(* intFunc)</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line">test1(<span class="keyword">int</span> a) { <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a); }  <span class="comment">// intFunc 就是一个指向函数test1的指针了</span></span><br><span class="line">intFunc func = test1;  func(<span class="number">3</span>);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">( a * <span class="number">2</span> + <span class="number">1</span> ) == ( a &lt;&lt; <span class="number">1</span> | <span class="number">1</span> )； <span class="comment">// 位运算速度快很多很多</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);  <span class="comment">// 禁用 cin 和 stdin 的同步，大大加快C艹的cin速度，与scanf相差无几（约为三倍）</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a / b % m ==  a % (m * b) / b <span class="comment">// 取模</span></span><br></pre></td></tr></tbody></table></figure><p>字符串常量[下标]，例如：<code>"qwerty"[4] == 'r'</code></p><p>C语言只有一维数组，但数组元素可以是另一个数组，仿真出多维数组</p><p>16进制用<code>0x</code>开头，八进制用<code>0</code>开头；小数常量默认<code>double</code>，末尾可加<code>f</code>表示为<code>float</code>；整数常量默认<code>int</code>，末尾可加<code>l</code>表示是<code>long</code>；其他格式同理（然而没必要的，有隐式转换）</p><p>随机数（例如<code>rand()</code>函数）并不是真的随机（但有些新设备可以实现真随机）</p><h1 id="叨唠"><a href="#叨唠" class="headerlink" title="叨唠"></a>叨唠</h1><p>// C语言的爸爸是B语言没错</p><p>// 即使从面向过程的C语言转到面向对象的C++，你也不一定能找到对象。</p><p>// 计算机的减法乘法都是通过加法器来实现的（最终都可以分解为与或非逻辑门组合运算）</p><p>// 大部分程序员不用关注二进制是啥（但考试要考到）</p><p>// 你写程序的大部分时间不是在写代码</p><p>// 看到这句话将会很开心： <code>0 error,0 warning</code></p><p>// 项目中适当的注释往往比代码本身还重要</p><p>// 仅用顺序结构，分支结构和循环结果能写出所有的可计算函数。</p><p>// 可以用多个不同的编辑器看看这段注释的颜色：<code>/*/zhushi/*/</code></p><hr><h1 id="偏僻知识点（来自网络）"><a href="#偏僻知识点（来自网络）" class="headerlink" title="偏僻知识点（来自网络）"></a>偏僻知识点（来自网络）</h1><h2 id="无符号int自动转换"><a href="#无符号int自动转换" class="headerlink" title="无符号int自动转换"></a>无符号int自动转换</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> a = <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">-20</span>;</span><br><span class="line">    (a+b &gt; <span class="number">6</span>)?<span class="built_in">puts</span>(<span class="string">"&gt; 6"</span>) : <span class="built_in">puts</span>(<span class="string">"&lt;= 6"</span>); <span class="comment">//输出  &gt;6</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    原因是当表达式中存在有符号类型和无符号类型时所有的操作数都自动转换为无符号类型，因此-20变成了一个非常大的</span></span><br><span class="line"><span class="comment">    正整数，所以该表达式计算出的结果大于 6</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="数组共同体"><a href="#数组共同体" class="headerlink" title="数组共同体"></a>数组共同体</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">union</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">char</span> x[<span class="number">2</span>];</span><br><span class="line">}a;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    a.x[<span class="number">0</span>] = <span class="number">10</span>;</span><br><span class="line">    a.x[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d-%d-%d\n"</span>,a.i,a.x[<span class="number">0</span>],a.x[<span class="number">1</span>]);<span class="comment">//522-10-2  :说明a.x[0]与a.x[1]互无影响，所以它们的地址是不同的。a.i=a.x[0]+a.x[1]*256(2的8次方);</span></span><br><span class="line">    a.i=<span class="number">1027</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d-%d-%d\n"</span>,a.i,a.x[<span class="number">0</span>],a.x[<span class="number">1</span>]);<span class="comment">//1027-3-4    1027=(4)*256+(3)</span></span><br><span class="line">    a.x[<span class="number">0</span>] = <span class="number">300</span>;</span><br><span class="line">    a.x[<span class="number">1</span>] = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d-%d-%d\n"</span>,a.i,a.x[<span class="number">0</span>],a.x[<span class="number">1</span>]);<span class="comment">//2604-44-10, a.x[0]=300-256=44;a.i=a.x[0]+a.x[1]*256;</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>union</strong>这种类型，就是内部的变量共同使用一块空间，按照size大的分配，int i 占<em>4</em>个字节，char x[2] 占<em>2</em>个，所以一共分配了4个字节。<br>一共4个字节的内存，对应x来说相当于占用了低2个字节，而给x赋值的1，和10，就存在个位和十位上了（十六进制）</p><p> 公用体公用一个内存区域sizeof(a)为共用体成员中长度最长的成员的size。即i</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>:             (|_|_|_|_|_|_|_|_|)(|_|_|_|_|_|_|_|_|)(|_|_|_|_|_|_|_|_|)(|_|_|_|_|_|_|_|_|)</span><br><span class="line"><span class="keyword">char</span> x[<span class="number">2</span>] :                                            (|_|_|_|_|_|_|_|_|)(|_|_|_|_|_|_|_|_|)</span><br><span class="line">                 ^                                                                         ^</span><br><span class="line">               高地址                                                                   低地址</span><br></pre></td></tr></tbody></table></figure><p>分析：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a.x[<span class="number">0</span>] = <span class="number">10</span>  ============&gt;(|<span class="number">0</span>|<span class="number">0</span>|<span class="number">0</span>|<span class="number">0</span>|<span class="number">1</span>|<span class="number">0</span>|<span class="number">1</span>|<span class="number">0</span>|)</span><br><span class="line">a.x[<span class="number">1</span>] = <span class="number">2</span>   ============&gt;(|<span class="number">0</span>|<span class="number">0</span>|<span class="number">0</span>|<span class="number">0</span>|<span class="number">0</span>|<span class="number">0</span>|<span class="number">1</span>|<span class="number">0</span>|)</span><br></pre></td></tr></tbody></table></figure><p>公用体公用sizeof(int)长度即4字节32为，则赋值后共用体内存为</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a:               (|<span class="number">0</span>|<span class="number">0</span>|<span class="number">0</span>|<span class="number">0</span>|<span class="number">0</span>|<span class="number">0</span>|<span class="number">0</span>|<span class="number">0</span>|)(|<span class="number">0</span>|<span class="number">0</span>|<span class="number">0</span>|<span class="number">0</span>|<span class="number">0</span>|<span class="number">0</span>|<span class="number">0</span>|<span class="number">0</span>|)(|<span class="number">0</span>|<span class="number">0</span>|<span class="number">0</span>|<span class="number">0</span>|<span class="number">0</span>|<span class="number">0</span>|<span class="number">1</span>|<span class="number">0</span>|)(|<span class="number">0</span>|<span class="number">0</span>|<span class="number">0</span>|<span class="number">0</span>|<span class="number">1</span>|<span class="number">0</span>|<span class="number">1</span>|<span class="number">0</span>|)</span><br></pre></td></tr></tbody></table></figure><p> a.i 为4字节整型，则 i = 2^9 + 2^3 + 2^1 = 256 + 8 + 2 = 522</p><h2 id="宏定义运算"><a href="#宏定义运算" class="headerlink" title="宏定义运算"></a>宏定义运算</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SQR(X) X*X</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">10</span>,j=<span class="number">5</span>,n=<span class="number">10</span>;</span><br><span class="line">    n*=i+j;<span class="comment">//n=n*(i+j)</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;n&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//150</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>,k = <span class="number">2</span>, m=<span class="number">1</span>;</span><br><span class="line">    a /= SQR(k+m)/SQR(k+m); <span class="comment">// 等效于 a /= (k+m*k+m/k+m*k+m)</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>宏定义运算尽量添加小括号</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SQR(X) (X*X)</span></span><br></pre></td></tr></tbody></table></figure><h2 id="sizeof-union"><a href="#sizeof-union" class="headerlink" title="sizeof(union)"></a>sizeof(union)</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">union</span> A {<span class="keyword">int</span> a_int1;<span class="keyword">double</span> a_double;<span class="keyword">int</span> a_int2;};</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>{</span>A a1;<span class="keyword">char</span> y;} B;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>{</span><span class="keyword">double</span> c_double;B b1;A a2;};</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="keyword">sizeof</span>(A)&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//8</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="keyword">sizeof</span>(B)&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//16</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="keyword">sizeof</span>(C)&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//32</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="数组内存分配"><a href="#数组内存分配" class="headerlink" title="数组内存分配"></a>数组内存分配</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> str1[] = <span class="string">"abc"</span>;</span><br><span class="line"><span class="keyword">char</span> str2[] = <span class="string">"abc"</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> str3[] = <span class="string">"abc"</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> str4[] = <span class="string">"abc"</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *str5 = <span class="string">"abc"</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *str6 = <span class="string">"abc"</span>;</span><br><span class="line"><span class="keyword">char</span> *str7 = <span class="string">"abc"</span>;</span><br><span class="line"><span class="keyword">char</span> *str8 = <span class="string">"abc"</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ( str1 == str2 ) &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ( str3 == str4 ) &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ( str5 == str6 ) &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ( str7 == str8 ) &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">// 1</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>解答：str1,str2,str3,str4是数组变量，它们有各自的内存空间;<br>而str5,str6,str7,str8是指针，它们指向相同的常量区域。</p></blockquote><h2 id="char-lt-gt-int"><a href="#char-lt-gt-int" class="headerlink" title="char <==> int"></a>char &lt;==&gt; int</h2><p>应该不算偏僻，ACM刷题经常会用到（刷题之外就用到的不多了）</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一位整数 to  char</span></span><br><span class="line">    <span class="keyword">char</span> x=<span class="number">5</span>+<span class="string">'0'</span>; <span class="comment">//'5'</span></span><br><span class="line"><span class="comment">//一位整数的char to  int</span></span><br><span class="line">    <span class="keyword">int</span> y=<span class="string">'5'</span>-<span class="string">'0'</span>;  <span class="comment">//5</span></span><br><span class="line"><span class="comment">//获取'a'后面的'd'</span></span><br><span class="line">    <span class="keyword">char</span> z=<span class="string">'a'</span>+<span class="number">3</span>;<span class="comment">//'d'</span></span><br></pre></td></tr></tbody></table></figure><h2 id="自增"><a href="#自增" class="headerlink" title="自增"></a>自增</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testplusplus</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> a=<span class="number">4</span>;</span><br><span class="line">        a += (a++);<span class="comment">//==&gt;&gt; a=a+(a++);</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//9</span></span><br><span class="line">    }</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> a=<span class="number">4</span>;</span><br><span class="line">        a += (++a);<span class="comment">//==&gt;&gt; a = a+(++a);</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//10</span></span><br><span class="line">    }</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> a=<span class="number">4</span>;</span><br><span class="line">        <span class="comment">//(a++) += a;//error，"+="左操作数必须为左值</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    }</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> a=<span class="number">4</span>;</span><br><span class="line">        (++a) += (a++);</span><br><span class="line">        <span class="comment">//A=(++a);</span></span><br><span class="line">        <span class="comment">//A=A+(a++)</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//11</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>总结：(a++),在整个表达式执行完后，才+1;<br>(++a),在整个表达式执行前就+1;  </p></blockquote><h2 id="连接下一行"><a href="#连接下一行" class="headerlink" title="连接下一行"></a>连接下一行</h2><p>行尾添加反斜杠 <code>\</code></p><p>如果在宏定义中使用，则真正代码也会包括换行。可用来做接口宏。</p><p>多行字符串也能用这个来拼接。</p><h2 id="数组下标为0"><a href="#数组下标为0" class="headerlink" title="数组下标为0"></a>数组下标为0</h2><p>数组下标为0时，指针p不分配空间</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Struct MutableLenArray </span><br><span class="line">{ </span><br><span class="line">    <span class="keyword">int</span> count; </span><br><span class="line">    <span class="keyword">char</span> p[<span class="number">0</span>]; </span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><h2 id="任意字符串"><a href="#任意字符串" class="headerlink" title="任意字符串"></a>任意字符串</h2><p>使用 # 符号</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TO_STRING(x) #x</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *str = TO_STRING( test );</span><br></pre></td></tr></tbody></table></figure><p><code>str</code>的内容就是<code>" test "</code>，也就是说#会把其后的符号 直接加上双引号。 </p><h2 id="符号连接"><a href="#符号连接" class="headerlink" title="符号连接"></a>符号连接</h2><p><code>##</code>符号会连接两个符号，从而产生新的符号(词法层次)，例如：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SIGN( x ) INT_##x</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SIGN</span><span class="params">( <span class="number">1</span> )</span></span>;</span><br></pre></td></tr></tbody></table></figure><p>宏被展开后将成为：<code>int INT_1;</code></p><h2 id="变参宏"><a href="#变参宏" class="headerlink" title="变参宏"></a>变参宏</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOG( format, ... ) printf( format, VA_ARGS )</span></span><br><span class="line">LOG( <span class="string">"%s %d"</span>, str, count );</span><br></pre></td></tr></tbody></table></figure><p>VA_ARGS是系统预定义宏，被自动替换为参数列表。 </p><h2 id="宏例外"><a href="#宏例外" class="headerlink" title="宏例外"></a>宏例外</h2><p>当一个宏参数被放进宏体时，如果宏体（外部的宏）参数有#，则宏体的参数不会展开。若要展开，则需要借助第三个宏</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PARAM(x) PARAM1(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PARAM1( x ) #x </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ADDPARAM( x ) INT_##x</span></span><br></pre></td></tr></tbody></table></figure><h2 id="函数参数指针与引用"><a href="#函数参数指针与引用" class="headerlink" title="函数参数指针与引用"></a>函数参数指针与引用</h2><p>函数参数指针和引用的区别：引用必须已经初始化，且不能为空；指针可以</p><h2 id="const-引用常量"><a href="#const-引用常量" class="headerlink" title="const 引用常量"></a>const 引用常量</h2><p>const 引用能引用常量：<code>const double &amp;PI = 3.14</code></p><p>非const不能引用常量</p><hr><h1 id="C语言主要关键词"><a href="#C语言主要关键词" class="headerlink" title="C语言主要关键词"></a>C语言主要关键词</h1><p>基本类型：<code>int</code>, <code>short</code>,<code>long</code>, <code>signed</code>, <code>unsigned</code>,<code>char</code>,<code>float</code>, <code>double</code>,<code>void</code></p><p>控制：<code>if...else</code>, <code>switch...case...default</code>, <code>for</code> , <code>while</code>, <code>do...while</code>,<code>return</code>, <code>break</code>, <code>continue</code>,<code>goto</code></p><p>自定义类型：<code>enum</code>, <code>struct</code>, <code>union</code>, <code>typedef</code></p><p>修饰词：<code>const</code>, <code>static</code>, <code>extern</code>, <code>inline</code>, <code>restrict</code>, <code>volatile</code></p><p>运算符：<code>+</code>, <code>-</code>, <code>*</code>,<code>/</code>, <code>%</code>,<code>++</code>,<code>--</code>,<code>&amp;</code>,<code>|</code> ,<code>~</code>, <code>^</code>,<code>&amp;&amp;</code>,<code>||</code>,<code>!</code>,<code>&lt;</code>,<code>&gt;</code>,<code>&lt;=</code>,<code>&gt;=</code>,<code>==</code>,<code>!=</code>,  <code>&lt;&lt;</code>,<code>&gt;&gt;</code>, <code>.</code>, <code>-&gt;</code>,<code>?:</code>,<code>sizeof</code>及复合运算符</p><p>预处理器：<code>#include</code>, <code>#define</code>, <code>#undef</code>, <code>#if/#ifdef/#ifndef...#elif...#else...#endif</code>,  <code>defined</code>, <code>#pragma</code>,<code>#error</code></p><p>有极少数关键字有多种语义，例如<code>static</code>、<code>void</code></p><p>掌握上面这些就算入门了。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;C 与 C++相关内容，&lt;br&gt;一部分从网上摘录。&lt;br&gt;个人能力水平有限，&lt;br&gt;不能保证没有错误。&lt;/p&gt;
&lt;p&gt;——王心意，2018.11.13&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C" scheme="http://blog.iwxyi.com/tags/C/"/>
    
      <category term="整理" scheme="http://blog.iwxyi.com/tags/%E6%95%B4%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>C++多个文件共用全局变量</title>
    <link href="http://blog.iwxyi.com/2018/11/06/C-%E5%A4%9A%E4%B8%AA%E6%96%87%E4%BB%B6%E5%85%B1%E7%94%A8%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F/"/>
    <id>http://blog.iwxyi.com/2018/11/06/C-多个文件共用全局变量/</id>
    <published>2018-11-06T00:01:00.000Z</published>
    <updated>2019-10-13T00:04:29.220Z</updated>
    
    <content type="html"><![CDATA[<p>示例：</p><p>头文件：<strong>state.h</strong>   源文件：<strong>state.cpp</strong><br>其它源文件：t1.cpp  t2.cpp  t3.cpp, 这些源文件都包含头文件state.h。</p><p>需要定义一个全局变量供这些源文件中使用：方法如下</p><p>1、在<code>state.h</code>中<strong>声明</strong>全局变量： <code>extern int a;</code></p><p>2、在<code>state.cpp</code>中<strong>定义</strong>该全局变量：<code>int a =10;</code></p><p>这样其它源文件就可以使用该变量啦，只需要 include 一下 <strong>state.cpp</strong></p><a id="more"></a><p>这里需要的是“声明”，不是“定义”！根据C++标准的规定，一个变量声明必须同时满足两个条件，否则就是定义：<br> (1)声明必须使用<strong>extern关键字</strong>；(2)<strong>不能给变量赋初值</strong></p><ul><li><code>extern  int  a;  //声明</code></li><li><code>int  a;   //定义</code></li><li><code>int  a  =  0; //定义</code></li><li><code>extern  int  a  =0;   //定义</code></li></ul><p>头文件中应使用extern关键字声明全局变量（不定义），如果这个变量有多个文件用到，可以<strong>新建一个cpp</strong>，在其中定义，把这个cpp加入工程即可。<strong>头文件请不要定义任何变量</strong>，那是非常业余的行为……</p><blockquote><p>定义专用的 <code>.cpp</code> 文件不需要 include</p></blockquote><p>一般<strong>在头文件中声明，用extern；在cpp中定义</strong>。 如果在头文件中定义，如果这个头文件被多个cpp引用，会造成重复定义的链接错误。</p><p>头文件只能申明全局变量（extern），不可定义（不推荐使用）<br>.cpp里，在最外层定义即可（int gi），直接引用</p><p>如果在.cpp里使用static定义，则该变量只在当前cpp文件中有效，在别的文件中无效<br>在.h里使用static定义，不会进行编译（.h文件不编译），只会在其每个include的cpp文件中包含编译，相当于在.cpp里使用static定义。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;示例：&lt;/p&gt;
&lt;p&gt;头文件：&lt;strong&gt;state.h&lt;/strong&gt;   源文件：&lt;strong&gt;state.cpp&lt;/strong&gt;&lt;br&gt;其它源文件：t1.cpp  t2.cpp  t3.cpp, 这些源文件都包含头文件state.h。&lt;/p&gt;
&lt;p&gt;需要定义一个全局变量供这些源文件中使用：方法如下&lt;/p&gt;
&lt;p&gt;1、在&lt;code&gt;state.h&lt;/code&gt;中&lt;strong&gt;声明&lt;/strong&gt;全局变量： &lt;code&gt;extern int a;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;2、在&lt;code&gt;state.cpp&lt;/code&gt;中&lt;strong&gt;定义&lt;/strong&gt;该全局变量：&lt;code&gt;int a =10;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这样其它源文件就可以使用该变量啦，只需要 include 一下 &lt;strong&gt;state.cpp&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C++" scheme="http://blog.iwxyi.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>贪心算法-讲解</title>
    <link href="http://blog.iwxyi.com/2018/11/04/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
    <id>http://blog.iwxyi.com/2018/11/04/贪心算法/</id>
    <published>2018-11-04T12:46:00.000Z</published>
    <updated>2019-10-12T23:14:42.108Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ACM-贪心算法"><a href="#ACM-贪心算法" class="headerlink" title="ACM 贪心算法"></a>ACM 贪心算法</h1><p>贪心算法（又称贪婪算法）是指，在对问题求解时，总是做出在<strong>当前看来是最好的选择</strong>。也就是说，不从整体最优上加以考虑，他所做出的是在某种意义上的<strong>局部最优解</strong>。</p><a id="more"></a><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="钱币找零问题"><a href="#钱币找零问题" class="headerlink" title="钱币找零问题"></a>钱币找零问题</h3><p>假设1元、2元、5元、10元、20元、50元、100元的纸币分别有c0, c1, c2, c3, c4, c5, c6张。现在要用这些钱来支付K元，至少要用多少张纸币？</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> Count[N]={<span class="number">3</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">5</span>};</span><br><span class="line"><span class="keyword">int</span> Value[N]={<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">20</span>,<span class="number">50</span>,<span class="number">100</span>};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> money;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;money);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=N<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> c=min(money/Value[i],Count[i]);</span><br><span class="line">money=money-c*Value[i];</span><br><span class="line">num+=c;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(num!=<span class="number">-1</span>) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, num);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="可分割背包问题"><a href="#可分割背包问题" class="headerlink" title="可分割背包问题"></a>可分割背包问题</h3><p>有一个背包，背包容量是M，有N个物品，要求尽可能让装入背包中的物品总价值最大，但不能超过总容量，物品可以只取一部分。</p><p><strong>输入</strong><br>第一行输入一个正整数n（1&lt;=n&lt;=5）,表示有n组测试数据；<br>随后有n测试数据，每组测试数据的第一行有两个正整数s，m（1&lt;=s&lt;=10）;s表示有s个物品。接下来的s行每行有两个正整数v，w，分别表示物品的单位价值和总质量。<br><strong>输出</strong><br>输出每组测试数据中背包内的物品的价值和，每次输出占一行。<br><strong>样例输入</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">3 15</span><br><span class="line">5 10</span><br><span class="line">2 8</span><br><span class="line">3 9</span><br></pre></td></tr></tbody></table></figure><p><strong>样例输出</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">65</span><br></pre></td></tr></tbody></table></figure><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 10000</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> n, m;</span><br><span class="line">        <span class="keyword">int</span> v[MAXN], w[MAXN];</span><br><span class="line"></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;v[i], &amp;w[i]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n - i - <span class="number">1</span>; j++)</span><br><span class="line">                <span class="keyword">if</span> (v[j] &lt; v[j + <span class="number">1</span>])</span><br><span class="line">                {</span><br><span class="line">                    <span class="keyword">int</span> temp = v[j];</span><br><span class="line">                    v[j] = v[j + <span class="number">1</span>];</span><br><span class="line">                    v[j + <span class="number">1</span>] = temp;</span><br><span class="line"></span><br><span class="line">                    temp = w[j];</span><br><span class="line">                    w[j] = w[j + <span class="number">1</span>];</span><br><span class="line">                    w[j + <span class="number">1</span>] = temp;</span><br><span class="line">                }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        {</span><br><span class="line">        <span class="keyword">if</span> (w[i] &gt;= m)</span><br><span class="line">        {</span><br><span class="line">        ans += m * v[i];</span><br><span class="line">        m = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        {</span><br><span class="line">        ans += w[i] * v[i];</span><br><span class="line">        m -= w[i];</span><br><span class="line">        }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; j++)</span><br><span class="line">        <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>])</span><br><span class="line">        {</span><br><span class="line">            temp = arr[j];</span><br><span class="line">            arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">            arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">        }</span><br></pre></td></tr></tbody></table></figure><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n<span class="number">-1</span>; i++)</span><br><span class="line">{</span><br><span class="line">    min = i;<span class="comment">//查找最小值</span></span><br><span class="line">    <span class="keyword">for</span>(j = i+<span class="number">1</span>; j&lt;n; j++)</span><br><span class="line">        <span class="keyword">if</span>(A[min] &gt; A[j])</span><br><span class="line">            min = j;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(min != i)</span><br><span class="line">        swap(&amp;A[min], &amp;A[i]);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="其他排序"><a href="#其他排序" class="headerlink" title="其他排序"></a>其他排序</h3><p>已经帮你们百度好的<a href="https://www.cnblogs.com/maluning/p/7944809.html" target="_blank" rel="noopener">链接</a></p><p>建议用C++的 algorithm 头文件中的 sort 函数，也是ACM中最常用的排序算法。</p><hr><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>贪心算法不是对所有问题都能得到整体最优解，关键是贪心策略的选择，选择的贪心策略必须具备无后效性，即某个状态以前的过程<strong>不会影响以后的状态</strong>，只与当前状态有关。</p><h3 id="⑴贪心策略：总价值最大"><a href="#⑴贪心策略：总价值最大" class="headerlink" title="⑴贪心策略：总价值最大"></a>⑴贪心策略：总价值最大</h3><p>反例：</p><p>W=30<br>物品：A B C<br>重量：28 12 12<br>价值：30 20 20</p><p>根据策略，首先选取物品A，接下来就无法再选取了，可是，选取B、C则更好。</p><h3 id="⑵贪心策略：重量最小"><a href="#⑵贪心策略：重量最小" class="headerlink" title="⑵贪心策略：重量最小"></a>⑵贪心策略：重量最小</h3><p>它的反例与第一种策略的反例差不多。</p><h3 id="⑶贪心策略：单位量价值最大"><a href="#⑶贪心策略：单位量价值最大" class="headerlink" title="⑶贪心策略：单位量价值最大"></a>⑶贪心策略：单位量价值最大</h3><p>反例：</p><p>W=30<br>物品：A B C<br>重量：28 20 10<br>价值：28 20 10</p><p>根据策略，三种物品单位重量价值一样，程序无法依据现有策略作出判断，如果选择A，则答案错误。</p><blockquote><p>【注意：如果物品可以分割为任意大小，那么策略3可得最优解】</p></blockquote><h3 id="4-DP问题（动态规划）"><a href="#4-DP问题（动态规划）" class="headerlink" title="(4)DP问题（动态规划）"></a>(4)DP问题（动态规划）</h3><p>W=40<br>物品：A B C<br>重量：25 20 15<br>价值：25 20 15</p><p>这需要DP。</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="今年暑假不AC（节目表）"><a href="#今年暑假不AC（节目表）" class="headerlink" title="今年暑假不AC（节目表）"></a>今年暑假不AC（节目表）</h3><p>“今年暑假不AC？”<br>“是的。”<br>“那你干什么呢？”<br>“看世界杯呀，笨蛋！”<br>“@#$%^&amp;*%…”</p><p>确实如此，世界杯来了，球迷的节日也来了，估计很多ACMer也会抛开电脑，奔向电视了。<br>作为球迷，一定想看尽量多的完整的比赛，当然，作为新时代的好青年，你一定还会看一些其它的节目，比如新闻联播（永远不要忘记关心国家大事）、非常6+7、超级女生，以及王小丫的《开心辞典》等等，假设你已经知道了所有你喜欢看的电视节目的转播时间表，你会合理安排吗？（目标是能看尽量多的完整节目）</p><p><strong>Input</strong></p><p>输入数据包含多个测试实例，每个测试实例的第一行只有一个整数n(n&lt;=100)，表示你喜欢看的节目的总数，然后是n行数据，每行包括两个数据Ti_s,Ti_e (1&lt;=i&lt;=n)，分别表示第i个节目的开始和结束时间，为了简化问题，每个时间都用一个正整数表示。n=0表示输入结束，不做处理。</p><p><strong>Output</strong></p><p>对于每个测试实例，输出能完整看到的电视节目的个数，每个测试实例的输出占一行。</p><p><strong>Sample Input</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">12 </span><br><span class="line">1 3 </span><br><span class="line">3 4 </span><br><span class="line">0 7 </span><br><span class="line">3 8 </span><br><span class="line">15 19 </span><br><span class="line">15 20 </span><br><span class="line">10 15 </span><br><span class="line">8 18 </span><br><span class="line">6 12 </span><br><span class="line">5 10 </span><br><span class="line">4 14 </span><br><span class="line">2 9 </span><br><span class="line">0</span><br></pre></td></tr></tbody></table></figure><p><strong>Sample Output</strong> </p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></tbody></table></figure><h4 id="代码（HDU-2037）"><a href="#代码（HDU-2037）" class="headerlink" title="代码（HDU 2037）"></a>代码（HDU 2037）</h4><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i, n, j, tmp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) != EOF &amp;&amp; n != <span class="number">0</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">1</span>, a[<span class="number">100</span>] = {<span class="number">0</span>}, b[<span class="number">100</span>] = {<span class="number">0</span>};</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;a[i], &amp;b[i]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; (n - <span class="number">1</span>); i++)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; (n - <span class="number">1</span> - i); j++)</span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">if</span> (b[j] &gt; b[j + <span class="number">1</span>])</span><br><span class="line">                {</span><br><span class="line">                    tmp = a[j];</span><br><span class="line">                    a[j] = a[j + <span class="number">1</span>];</span><br><span class="line">                    a[j + <span class="number">1</span>] = tmp;</span><br><span class="line"></span><br><span class="line">                    tmp = b[j];</span><br><span class="line">                    b[j] = b[j + <span class="number">1</span>];</span><br><span class="line">                    b[j + <span class="number">1</span>] = tmp;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> time = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">if</span> (a[i] &gt;= b [time])</span><br><span class="line">            {</span><br><span class="line">                time = i;</span><br><span class="line">                count++;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, count);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="阶乘之和"><a href="#阶乘之和" class="headerlink" title="阶乘之和"></a>阶乘之和</h3><p><strong>描述</strong><br>给你一个非负数整数n，判断n是不是一些数（这些数不允许重复使用，且为正数）的阶乘之和，如9=1！+2!+3!，如果是，则输出Yes，否则输出No；</p><p><strong>输入</strong><br>第一行有一个整数0&lt;m&lt;100,表示有m组测试数据；<br>每组测试数据有一个正整数n&lt;1000000;<br><strong>输出</strong><br>如果符合条件，输出Yes，否则输出No;<br><strong>样例输入</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">29</span><br><span class="line">10</span><br></pre></td></tr></tbody></table></figure><p><strong>样例输出</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Yes</span><br><span class="line">No</span><br></pre></td></tr></tbody></table></figure><h3 id="喷水装置（一）"><a href="#喷水装置（一）" class="headerlink" title="喷水装置（一）"></a>喷水装置（一）</h3><p><strong>描述</strong><br>现有一块草坪，长为20米，宽为2米，要在横中心线上放置半径为Ri的喷水装置，每个喷水装置的效果都会让以它为中心的半径为实数Ri(0&lt;Ri&lt;15)的圆被湿润，这有充足的喷水装置i（1&lt;i&lt;600)个，并且一定能把草坪全部湿润，你要做的是：选择尽量少的喷水装置，把整个草坪的全部湿润。</p><p><strong>输入</strong><br>第一行m表示有m组测试数据<br>每一组测试数据的第一行有一个整数数n，n表示共有n个喷水装置，随后的一行，有n个实数ri，ri表示该喷水装置能覆盖的圆的半径。</p><p><strong>输出</strong><br>输出所用装置的个数</p><p><strong>样例输入</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">5</span><br><span class="line">2 3.2 4 4.5 6 </span><br><span class="line">10</span><br><span class="line">1 2 3 1 2 1.2 3 1.1 1 2</span><br></pre></td></tr></tbody></table></figure><p><strong>样例输出</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">5</span><br></pre></td></tr></tbody></table></figure><h3 id="gt-喷水装置（二）"><a href="#gt-喷水装置（二）" class="headerlink" title="> 喷水装置（二）"></a>&gt; 喷水装置（二）</h3><p>改成二维，输入装置个数n、草坪宽 w、高 h（实数），以及每个喷水装置的横坐标和半径。其余题意同上一题。</p><h3 id="过河问题"><a href="#过河问题" class="headerlink" title="过河问题"></a>过河问题</h3><p><strong>描述</strong><br>在漆黑的夜里，N位旅行者来到了一座狭窄而且没有护栏的桥边。如果不借助手电筒的话，大家是无论如何也不敢过桥去的。不幸的是，N个人一共只带了一只手电筒，而桥窄得只够让两个人同时过。如果各自单独过桥的话，N人所需要的时间已知；而如果两人同时过桥，所需要的时间就是走得比较慢的那个人单独行动时所需的时间。问题是，如何设计一个方案，让这N人尽快过桥。 </p><p><strong>输入</strong><br>第一行是一个整数T(1&lt;=T&lt;=20)表示测试数据的组数<br>每组测试数据的第一行是一个整数N(1&lt;=N&lt;=1000)表示共有N个人要过河<br>每组测试数据的第二行是N个整数Si,表示此人过河所需要花时间。(0&lt;Si&lt;=100)<br><strong>输出</strong><br>输出所有人都过河需要用的最少时间<br><strong>样例输入</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">4</span><br><span class="line">1 2 5 10</span><br></pre></td></tr></tbody></table></figure><p><strong>样例输出</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">17</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ACM-贪心算法&quot;&gt;&lt;a href=&quot;#ACM-贪心算法&quot; class=&quot;headerlink&quot; title=&quot;ACM 贪心算法&quot;&gt;&lt;/a&gt;ACM 贪心算法&lt;/h1&gt;&lt;p&gt;贪心算法（又称贪婪算法）是指，在对问题求解时，总是做出在&lt;strong&gt;当前看来是最好的选择&lt;/strong&gt;。也就是说，不从整体最优上加以考虑，他所做出的是在某种意义上的&lt;strong&gt;局部最优解&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="算法" scheme="http://blog.iwxyi.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="讲解" scheme="http://blog.iwxyi.com/tags/%E8%AE%B2%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>VC++连接外部DLL</title>
    <link href="http://blog.iwxyi.com/2018/11/01/VC-%E8%BF%9E%E6%8E%A5%E5%A4%96%E9%83%A8DLL/"/>
    <id>http://blog.iwxyi.com/2018/11/01/VC-连接外部DLL/</id>
    <published>2018-11-01T01:38:00.000Z</published>
    <updated>2019-10-13T01:39:13.174Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、隐式的加载时链接"><a href="#1、隐式的加载时链接" class="headerlink" title="1、隐式的加载时链接"></a>1、隐式的加载时链接</h2><p>这种方法需要<strong>DLL工程经编译产生的LIB文件</strong>，此文件中包含了DLL允许应用程序调用的所有函数的列表，当链接器发现应用程序调用了LIB文件列出的某个函数，就会在应用程序的可执行文件的文件映像中加入一些信息，这些信息指出了包含这个函数的DLL文件的名字。当这个应用程序运行时，也就是它的可执行文件被操作系统产生映像文件时，系统会查看这个映像文件中关于DLL的信息，然后将这个DLL文件映像到进程的地址空间。</p><p>系统通过DLL文件的名称，试图加载这个文件到进程地址空间时，它寻找DLL 文件的路径按照先后顺序如下：</p><ul><li>程序运行时的目录，即可执行文件所在的目录；</li><li>当前程序工作目录</li><li>系统目录：对于Windows95/98来说，可以调用GetSystemDirectory函数来得到，对于WindowsNT/2000 来说，指的是32位Windows的系统目录，也可以调用GetSystemDirectory函数来得到，得到的值为SYSTEM32。</li><li>Windows目录</li><li>列在PATH环境变量中的所有目录</li></ul><p>VC中加载DLL的LIB文件的方法有以下三种：</p><ul><li>①LIB文件直接加入到工程文件列表中<br>在VC中打开File View一页，选中工程名，单击鼠标右键，然后选中“Add Files to Project”菜单，在弹出的文件对话框中选中要加入DLL的LIB文件即可。</li><li>②设置工程的 Project Settings来加载DLL的LIB文件<br>打开工程的 Project Settings菜单，选中Link，然后在Object/library modules下的文本框中输入DLL的LIB文件。</li><li>③通过程序代码的方式<br>加入预编译指令#pragma comment (lib,”<em>.lib”)，这种方法优点是可以利用条件预编译指令链接不同版本的LIB文件。因为，在Debug方式下，产生的LIB文件是Debug 版本，如Regd.lib；在Release方式下，产生的LIB文件是Release版本，如Regr.lib。<br>当应用程序对DLL的LIB文件加载后，还需要把DLL对应的头文件（</em>.h）包含到其中，在这个头文件中给出了DLL中定义的函数原型，然后声明。</li></ul><h2 id="2、显式的运行时链接"><a href="#2、显式的运行时链接" class="headerlink" title="2、显式的运行时链接"></a>2、显式的运行时链接</h2><p>  隐式链接虽然实现较简单，但除了必须的<em>.dll文件外还需要DLL的</em>.h文件和<em>.lib文件，在那些只提供</em>.dll文件的场合就无法使用，而只能采用显式链接的方式。这种方式通过调用API函数来完成对DLL的加载与卸载，其能更加有效地使用内存，在编写大型应用程序时往往采用此方式。这种方法编程具体实现步骤如下：</p><ul><li>①使用Windows API函数Load Library或者MFC提供的AfxLoadLibrary将DLL模块映像到进程的内存空间，对DLL模块进行动态加载。</li><li>②使用GetProcAddress函数得到要调用DLL中的函数的指针。</li><li>③不用DLL时，用Free Library函数或者AfxFreeLibrary函数从进程的地址空间显式卸载DLL。</li></ul><hr><blockquote><p>参考：<a href="https://blog.csdn.net/yu444/article/details/4728068" target="_blank" rel="noopener">https://blog.csdn.net/yu444/article/details/4728068</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1、隐式的加载时链接&quot;&gt;&lt;a href=&quot;#1、隐式的加载时链接&quot; class=&quot;headerlink&quot; title=&quot;1、隐式的加载时链接&quot;&gt;&lt;/a&gt;1、隐式的加载时链接&lt;/h2&gt;&lt;p&gt;这种方法需要&lt;strong&gt;DLL工程经编译产生的LIB文件&lt;/strong
      
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="VC++" scheme="http://blog.iwxyi.com/tags/VC/"/>
    
  </entry>
  
  <entry>
    <title>修电脑</title>
    <link href="http://blog.iwxyi.com/2018/09/24/%E4%BF%AE%E7%94%B5%E8%84%91/"/>
    <id>http://blog.iwxyi.com/2018/09/24/修电脑/</id>
    <published>2018-09-24T12:39:00.000Z</published>
    <updated>2019-10-13T00:25:03.212Z</updated>
    
    <content type="html"><![CDATA[<h2 id="WIN无操作自动休眠"><a href="#WIN无操作自动休眠" class="headerlink" title="WIN无操作自动休眠"></a>WIN无操作自动休眠</h2><p>这是系统<strong>无人值守时睡眠时间</strong>的设定，默认是两分钟。</p><a id="more"></a><p>解决方法：</p><p><code>regedit</code>进入注册表管理器，定位到<code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Power\PowerSettings\238C9FA8-0AAD-41ED-83F4-97BE242C8F20\7bc4a2f9-d8fc-4469-b07b-33eb785aaca0</code>，修改<code>attributes</code>的值为2。</p><p>进入高级电源设置，在睡眠选项中会出现“无人参与系统睡眠超时”，将默认的2分钟修改成你想要的时间。</p><h2 id="开关操作中心"><a href="#开关操作中心" class="headerlink" title="开关操作中心"></a>开关操作中心</h2><p><code>regedit</code>进入注册表编辑器，<code>计算机\HKEY_CURRENT_USER\Software\Policies\Microsoft\Windows\Explorer</code>新建项<code>DisableNotificationCenter</code>，值为1时关闭操作中心。重启电脑生效。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;WIN无操作自动休眠&quot;&gt;&lt;a href=&quot;#WIN无操作自动休眠&quot; class=&quot;headerlink&quot; title=&quot;WIN无操作自动休眠&quot;&gt;&lt;/a&gt;WIN无操作自动休眠&lt;/h2&gt;&lt;p&gt;这是系统&lt;strong&gt;无人值守时睡眠时间&lt;/strong&gt;的设定，默认是两分钟。&lt;/p&gt;
    
    </summary>
    
    
      <category term="修电脑" scheme="http://blog.iwxyi.com/categories/%E4%BF%AE%E7%94%B5%E8%84%91/"/>
    
    
      <category term="Windows" scheme="http://blog.iwxyi.com/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Bat常用脚本命令</title>
    <link href="http://blog.iwxyi.com/2018/09/01/Bat%E5%B8%B8%E7%94%A8%E8%84%9A%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
    <id>http://blog.iwxyi.com/2018/09/01/Bat常用脚本命令/</id>
    <published>2018-09-01T12:40:00.000Z</published>
    <updated>2019-10-12T12:41:10.078Z</updated>
    
    <content type="html"><![CDATA[<p><strong>run.bat—打开百度</strong></p><figure class="highlight bat"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">path</span>=<span class="variable">%path%</span>; C:\Program Files (x86)\Internet Explorer\</span><br><span class="line"><span class="built_in">start</span> iexplore http://www.baidu.com</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><p><strong>将c盘下所有文件名输出到a.txt中，如果没有a文件，则在bat同一目录下创建一个</strong></p><figure class="highlight bat"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dir</span> c:\*.* &gt;a.txt</span><br></pre></td></tr></tbody></table></figure><p><strong>执行另一个批处理文件</strong></p><figure class="highlight bat"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> c:\code\run.bat</span><br></pre></td></tr></tbody></table></figure><p><strong>echo回显</strong></p><figure class="highlight bat"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off      表示在此语句后所有运行的命令都不显示命令行本身 </span><br><span class="line"><span class="built_in">cd</span> code          进入code文件夹</span><br><span class="line"><span class="built_in">echo</span> enter code directory     显示enter code directory</span><br><span class="line"><span class="keyword">call</span> run.bat</span><br></pre></td></tr></tbody></table></figure><p><strong>增加入参</strong></p><figure class="highlight bat"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"> <span class="built_in">type</span> %<span class="number">1</span> </span><br><span class="line"> <span class="built_in">type</span> %<span class="number">2</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>cmd为 run.bat a.txt b.txt<br>控制台会显示出a和b的文件内容</p></blockquote><p><strong>for循环的使用</strong></p><figure class="highlight bat"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bat脚本</span><br><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="keyword">for</span> <span class="variable">%%t</span> <span class="keyword">in</span> (*.bat *.txt) <span class="keyword">do</span> <span class="built_in">type</span> <span class="variable">%%t</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>注意1，打印的是bat和txt文件的内容<br>注意2，此bat放在需打印文件内容的文件一个目录层级下</p></blockquote><figure class="highlight bat"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="keyword">FOR</span> /L <span class="variable">%%i</span> <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">20</span>) <span class="keyword">DO</span> <span class="built_in">echo</span> <span class="variable">%%i</span></span><br></pre></td></tr></tbody></table></figure><p><strong>if/else判断语句的使用</strong></p><figure class="highlight bat"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">bat脚本</span><br><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="keyword">if</span> {<span class="variable">%1}=={%</span><span class="number">2</span>} (</span><br><span class="line"><span class="built_in">echo</span> eq l.</span><br><span class="line">) <span class="keyword">else</span> (</span><br><span class="line"><span class="built_in">echo</span> <span class="keyword">not</span> eq l.</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><p>cmd输入run.bat 1 2<br>结果为 not eq 1</p><p><strong>在一个批处理文件内最多可以使用10个替换参数(%0到%9)</strong></p><figure class="highlight bat"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">exist</span> a.txt (</span><br><span class="line">    <span class="built_in">echo</span> This is a.txt</span><br><span class="line">    <span class="built_in">type</span> a.txt</span><br><span class="line">)<span class="keyword">else</span> (</span><br><span class="line">    <span class="built_in">echo</span> a.txt missing.</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><p><strong>判断当前目录下是否有a.txt</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@ECHO OFF</span><br><span class="line">IF EXIST D:\*.XLS () else (GOTO fail)</span><br><span class="line">PAUSE </span><br><span class="line">:fail</span><br><span class="line">ECHO 没找到文件</span><br></pre></td></tr></tbody></table></figure><p><strong>删除文件</strong></p><figure class="highlight bat"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">del</span> a.txt</span><br></pre></td></tr></tbody></table></figure><blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; 注意：指定路径会删除该路径下所有文件</span><br><span class="line">&gt;</span><br></pre></td></tr></tbody></table></figure></blockquote><p><strong>移动、拷贝文件、文件夹</strong></p><figure class="highlight bat"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">move</span> c:\a.txt c:\code\a.txt </span><br><span class="line"></span><br><span class="line"><span class="built_in">copy</span> c:\code\a.txt c:\a.txt </span><br><span class="line"></span><br><span class="line"><span class="built_in">rd</span> c:\code\abc\abc   <span class="built_in">REM</span> 删除非空文件夹</span><br></pre></td></tr></tbody></table></figure><p><strong>GOTO语句</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@ECHO OFF</span><br><span class="line">GOTO SECOND</span><br><span class="line">:FIRST</span><br><span class="line">echo I AM FIRST</span><br><span class="line">:SECOND</span><br><span class="line">echo I AM SECOND</span><br></pre></td></tr></tbody></table></figure><p><strong>choice/errorlevel的用法</strong></p><figure class="highlight bat"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off </span><br><span class="line">choice /C <span class="number">123</span> /M "RUN1,RUN2,RUN3"</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">errorlevel</span> <span class="number">3</span> <span class="keyword">goto</span> RUN3</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">errorlevel</span> <span class="number">2</span> <span class="keyword">goto</span> RUN2 </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">errorlevel</span> <span class="number">1</span> <span class="keyword">goto</span> RUN1 </span><br><span class="line"></span><br><span class="line">:RUN1  </span><br><span class="line"><span class="function">c:\<span class="title">code</span>\<span class="title">RUN1</span> </span></span><br><span class="line"><span class="function"><span class="title">goto</span> <span class="title">RUN3</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">:<span class="title">RUN2</span></span></span><br><span class="line"><span class="function"><span class="title">c</span>:\<span class="title">code</span>\<span class="title">RUN2</span></span></span><br><span class="line"><span class="function"><span class="title">goto</span> <span class="title">RUN3</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">:<span class="title">RUN3</span></span></span><br><span class="line"><span class="function"><span class="title">echo</span> <span class="title">good</span> <span class="title">bye</span></span></span><br></pre></td></tr></tbody></table></figure><p><strong>set</strong></p><figure class="highlight bat"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">set</span> a=aa1bb1aa2bb2</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">%a%</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> b=<span class="number">12</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">%b%</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> /a c=<span class="number">39</span>/<span class="number">10</span>           </span><br><span class="line"><span class="built_in">echo</span> <span class="variable">%c%</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight bat"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">set</span> p=aaa</span><br><span class="line"><span class="keyword">if</span> <span class="variable">%p%</span>==aaa (</span><br><span class="line">      <span class="built_in">echo</span> <span class="variable">%p%</span></span><br><span class="line">      <span class="built_in">set</span> p=bbb</span><br><span class="line">      <span class="built_in">echo</span> <span class="variable">%p%</span></span><br><span class="line">      )</span><br></pre></td></tr></tbody></table></figure><p>输出 aaa aaa</p><figure class="highlight bat"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">set</span> p=aaa</span><br><span class="line"><span class="keyword">if</span> <span class="variable">%p%</span>==aaa (</span><br><span class="line">      <span class="built_in">echo</span> <span class="variable">%p%</span></span><br><span class="line">      <span class="built_in">set</span> /p p=bbb</span><br><span class="line">      <span class="built_in">echo</span> <span class="variable">%p%</span></span><br><span class="line">      )</span><br></pre></td></tr></tbody></table></figure><p>输出 aaa bbb</p><figure class="highlight bat"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">%CD%</span>                    #代表当前目录的字符串</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">%DATE%</span>                  #当前日期</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">%TIME%</span>                  #当前时间</span><br></pre></td></tr></tbody></table></figure><p><strong>从FTP下载文件</strong></p><figure class="highlight bat"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> open <span class="number">10</span>.<span class="number">86</span>.<span class="number">56</span>.<span class="number">6</span> &gt;ftp.txt      <span class="built_in">rem</span> ftp server ip</span><br><span class="line"></span><br><span class="line">@<span class="built_in">echo</span> user mos&gt;&gt;ftp.txt             <span class="built_in">rem</span> 用户名</span><br><span class="line"></span><br><span class="line">@<span class="built_in">echo</span> mos&gt;&gt;ftp.txt                  <span class="built_in">rem</span> 密码</span><br><span class="line"></span><br><span class="line">@<span class="built_in">echo</span> <span class="built_in">cd</span> test&gt;&gt;ftp.txt              <span class="built_in">rem</span> 文件路径</span><br><span class="line"></span><br><span class="line">@<span class="built_in">echo</span> get mw-license-switch-conffile.xml&gt;&gt;ftp.txt <span class="built_in">rem</span> 文件名</span><br><span class="line"></span><br><span class="line">@<span class="built_in">echo</span> bye&gt;&gt;ftp.txt</span><br><span class="line"></span><br><span class="line">ftp -i -n -s:ftp.txt                <span class="built_in">rem</span> 文件存放在脚本所在路径下</span><br></pre></td></tr></tbody></table></figure><p><strong>切换盘符</strong></p><figure class="highlight bat"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> current_dir=C:\Program Files\HaoZip    </span><br><span class="line"><span class="built_in">pushd</span> <span class="variable">%current_dir%</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="variable">%cd%</span></span><br></pre></td></tr></tbody></table></figure><hr><blockquote><p>博客来源：<a href="https://www.cnblogs.com/laislabonita/p/7145731.html" target="_blank" rel="noopener">https://www.cnblogs.com/laislabonita/p/7145731.html</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;run.bat—打开百度&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bat&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;path&lt;/span&gt;=&lt;span class=&quot;variable&quot;&gt;%path%&lt;/span&gt;; C:\Program Files (x86)\Internet Explorer\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;start&lt;/span&gt; iexplore http://www.baidu.com&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="Bat" scheme="http://blog.iwxyi.com/tags/Bat/"/>
    
  </entry>
  
  <entry>
    <title>IIS允许下载APK安装包</title>
    <link href="http://blog.iwxyi.com/2018/08/10/IIS%E5%85%81%E8%AE%B8%E4%B8%8B%E8%BD%BDAPK%E5%AE%89%E8%A3%85%E5%8C%85/"/>
    <id>http://blog.iwxyi.com/2018/08/10/IIS允许下载APK安装包/</id>
    <published>2018-08-10T12:41:00.000Z</published>
    <updated>2019-10-12T23:20:33.150Z</updated>
    
    <content type="html"><![CDATA[<h2 id="IIS允许下载APK安装包（MIME类型配置）"><a href="#IIS允许下载APK安装包（MIME类型配置）" class="headerlink" title="IIS允许下载APK安装包（MIME类型配置）"></a>IIS允许下载APK安装包（MIME类型配置）</h2><p>IIS7MIME配置过程：</p><p>打开IIS信息服务管理器，找到要添加配置的网站；</p><p>在该网站的功能视图中单击”MIME类型“按钮（如果在功能视图中没有MIME按钮，则需要通过服务器管理器中角色管理进行添加），打开MIME类型设置窗口；</p><a id="more"></a><p>在操作栏里点击”添加“按钮；</p><p>单机”确定“保存设置；</p><p>重启IIS，使设置生效。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;IIS允许下载APK安装包（MIME类型配置）&quot;&gt;&lt;a href=&quot;#IIS允许下载APK安装包（MIME类型配置）&quot; class=&quot;headerlink&quot; title=&quot;IIS允许下载APK安装包（MIME类型配置）&quot;&gt;&lt;/a&gt;IIS允许下载APK安装包（MIME类型配置）&lt;/h2&gt;&lt;p&gt;IIS7MIME配置过程：&lt;/p&gt;
&lt;p&gt;打开IIS信息服务管理器，找到要添加配置的网站；&lt;/p&gt;
&lt;p&gt;在该网站的功能视图中单击”MIME类型“按钮（如果在功能视图中没有MIME按钮，则需要通过服务器管理器中角色管理进行添加），打开MIME类型设置窗口；&lt;/p&gt;
    
    </summary>
    
    
      <category term="运维" scheme="http://blog.iwxyi.com/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="服务器" scheme="http://blog.iwxyi.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>fread和fwrite转移文件数据</title>
    <link href="http://blog.iwxyi.com/2018/08/04/fread%E5%92%8Cfwrite%E8%BD%AC%E7%A7%BB%E6%96%87%E4%BB%B6%E6%95%B0%E6%8D%AE/"/>
    <id>http://blog.iwxyi.com/2018/08/04/fread和fwrite转移文件数据/</id>
    <published>2018-08-04T12:18:00.000Z</published>
    <updated>2019-10-12T12:15:15.046Z</updated>
    
    <content type="html"><![CDATA[<p>读取文件，再写入到另一个文件里面：</p><p><strong>1、获取文件大小</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FILE* fp_size = fopen(<span class="string">"T:/img.jpg"</span>, <span class="string">"rb"</span>);</span><br><span class="line">fseek(fp_size, <span class="number">0</span>, SEEK_END);</span><br><span class="line"><span class="keyword">int</span> size = ftell(fp_size);</span><br><span class="line">fclose(fp_size);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"文件大小(指针偏移计算):"</span> &lt;&lt; size; <span class="comment">// 字节大小</span></span><br></pre></td></tr></tbody></table></figure><a id="more"></a><p><strong>2、读取文件</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FILE* fp_read = fopen(<span class="string">"T:/img.jpg"</span>, <span class="string">"rb"</span>);</span><br><span class="line"><span class="keyword">int</span>* buffer = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(size+<span class="number">4</span>); <span class="comment">// 可以改成其他类型也没事，比如 char*</span></span><br><span class="line">fread(buffer, size, <span class="number">1</span>, fp_read);</span><br><span class="line">fclose(fp_read);</span><br></pre></td></tr></tbody></table></figure><p><strong>3、写入到另一个文件</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FILE* fp_write = fopen(<span class="string">"T:/img1.png"</span>, <span class="string">"wb"</span>);</span><br><span class="line">fwrite(buffer,size, <span class="number">1</span>, fp_write);</span><br><span class="line">fclose(fp_write);</span><br></pre></td></tr></tbody></table></figure><p><code>fread</code>和<code>write</code>的<code>size</code>可以更大，不影响结果（表示上限）</p><hr><p>实测一张jpg图片：</p><ul><li>size超过体积，保存的会是size的大小</li><li>1/10时：图片只有一半显示，体积也只有1/10</li><li>1/4时：上方5/6的部分清晰，剩下的模糊</li><li>1/2时：虽然体积只有一半，但是好像一样清晰……</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;读取文件，再写入到另一个文件里面：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、获取文件大小&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;FILE* fp_size = fopen(&lt;span class=&quot;string&quot;&gt;&quot;T:/img.jpg&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;rb&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fseek(fp_size, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, SEEK_END);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; size = ftell(fp_size);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fclose(fp_size);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;文件大小(指针偏移计算):&quot;&lt;/span&gt; &amp;lt;&amp;lt; size; &lt;span class=&quot;comment&quot;&gt;// 字节大小&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C" scheme="http://blog.iwxyi.com/tags/C/"/>
    
      <category term="文件" scheme="http://blog.iwxyi.com/tags/%E6%96%87%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>C#-学习笔记</title>
    <link href="http://blog.iwxyi.com/2018/06/23/C-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://blog.iwxyi.com/2018/06/23/C-学习笔记/</id>
    <published>2018-06-22T23:21:00.000Z</published>
    <updated>2019-10-12T23:22:41.743Z</updated>
    
    <content type="html"><![CDATA[<h1 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h1><blockquote><p>需要C++基础</p></blockquote><a id="more"></a><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><figure class="highlight c#"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">HelloWorldApplication</span></span><br><span class="line">{</span><br><span class="line">   <span class="keyword">class</span> <span class="title">HelloWorld</span></span><br><span class="line">   {</span><br><span class="line">      <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>      {</span><br><span class="line">         <span class="comment">/* 我的第一个 C# 程序*/</span></span><br><span class="line">         Console.WriteLine(<span class="string">"Hello World"</span>);</span><br><span class="line">         Console.ReadKey();</span><br><span class="line">      }</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>上面程序的各个部分： </p><ul><li>程序的第一行 <strong>using System;</strong> - <strong>using</strong> 关键字用于在程序中包含 <strong>System</strong> 命名空间。 一个程序一般有多个 <strong>using</strong> 语句。</li><li>下一行是 <strong>namespace</strong> 声明。一个 namespace 是一系列的类。<strong>HelloWorldApplication</strong> 命名空间包含了类 HelloWorld。</li></ul><p>几个注意点：</p><ul><li>C# 是大小写敏感的。</li><li>所有的语句和表达式必须以分号（;）结尾。</li><li>程序的执行从 Main 方法开始。</li><li>与 Java 不同的是，文件名可以不同于类的名称。</li></ul><hr><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h3 id="数据类型：引用类型"><a href="#数据类型：引用类型" class="headerlink" title="数据类型：引用类型"></a>数据类型：引用类型</h3><p>引用类型不包含存储在变量中的实际数据，但它们包含对变量的引用。换句话说，它们指的是一个内存位置。</p><p>内置的引用类型有：<strong>object</strong>、<strong>dynamic</strong> 和 <strong>string</strong>。</p><h4 id="对象（Object）类型"><a href="#对象（Object）类型" class="headerlink" title="对象（Object）类型"></a>对象（Object）类型</h4><p><strong>对象（Object）类型</strong> 是 C# 通用类型系统（Common Type System - CTS）中所有数据类型的终极基类。Object 是 System.Object 类的别名。所以对象（Object）类型可以被分配任何其他类型（值类型、引用类型、预定义类型或用户自定义类型）的值。但是，在分配值之前，需要先进行类型转换。</p><p>当一个值类型转换为对象类型时，则被称为 <strong>装箱</strong>；另一方面，当一个对象类型转换为值类型时，则被称为 <strong>拆箱</strong>。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">object obj;</span><br><span class="line">obj = 100; // 这是装箱</span><br></pre></td></tr></tbody></table></figure><h4 id="动态（Dynamic）类型"><a href="#动态（Dynamic）类型" class="headerlink" title="动态（Dynamic）类型"></a>动态（Dynamic）类型</h4><p>存储任何类型的值在动态数据类型变量中。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dynamic &lt;variable_name&gt; = value;</span><br></pre></td></tr></tbody></table></figure><p>例如：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dynamic d = 20;</span><br></pre></td></tr></tbody></table></figure><p>动态类型与对象类型相似，但是<strong>对象类型变量的类型检查是在编译时发生的，而动态类型变量的类型检查是在运行时发生的</strong>。</p><h4 id="字符串（String）类型"><a href="#字符串（String）类型" class="headerlink" title="字符串（String）类型"></a>字符串（String）类型</h4><p><strong>字符串（String）类型</strong> 允许您给变量分配任何字符串值。字符串（String）类型是 System.String 类的别名。它是从对象（Object）类型派生的。字符串（String）类型的值可以通过两种形式进行分配：引号和 @引号。</p><p>例如：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String str = "runoob.com";</span><br></pre></td></tr></tbody></table></figure><p>一个 @引号字符串：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@"runoob.com";</span><br></pre></td></tr></tbody></table></figure><p>C# string 字符串的前面可以加 @（称作”逐字字符串”）将转义字符（\）当作普通字符对待，比如：</p><p><code>string str = @"C:\Windows";</code>   等价于   <code>string str = "C:\\Windows";</code></p><p>@ 字符串中可以任意换行，换行符及缩进空格都计算在字符串长度之内。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string str = @"&lt;script type=""text/javascript""&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">    --&gt;</span><br><span class="line">&lt;/script&gt;";</span><br></pre></td></tr></tbody></table></figure><p>用户自定义引用类型有：class、interface 或 delegate。</p><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>C# 提供了下列内置的类型转换方法：</p><table><thead><tr><th>序号</th><th>方法 &amp; 描述</th></tr></thead><tbody><tr><td>1</td><td><strong>ToBoolean</strong> 如果可能的话，把类型转换为布尔型。</td></tr><tr><td>2</td><td><strong>ToByte</strong> 把类型转换为字节类型。</td></tr><tr><td>3</td><td><strong>ToChar</strong> 如果可能的话，把类型转换为单个 Unicode 字符类型。</td></tr><tr><td>4</td><td><strong>ToDateTime</strong> 把类型（整数或字符串类型）转换为 日期-时间 结构。</td></tr><tr><td>5</td><td><strong>ToDecimal</strong> 把浮点型或整数类型转换为十进制类型。</td></tr><tr><td>6</td><td><strong>ToDouble</strong> 把类型转换为双精度浮点型。</td></tr><tr><td>7</td><td><strong>ToInt16</strong> 把类型转换为 16 位整数类型。</td></tr><tr><td>8</td><td><strong>ToInt32</strong> 把类型转换为 32 位整数类型。</td></tr><tr><td>9</td><td><strong>ToInt64</strong> 把类型转换为 64 位整数类型。</td></tr><tr><td>10</td><td><strong>ToSbyte</strong> 把类型转换为有符号字节类型。</td></tr><tr><td>11</td><td><strong>ToSingle</strong> 把类型转换为小浮点数类型。</td></tr><tr><td>12</td><td><strong>ToString</strong> 把类型转换为字符串类型。</td></tr><tr><td>13</td><td><strong>ToType</strong> 把类型转换为指定类型。</td></tr><tr><td>14</td><td><strong>ToUInt16</strong> 把类型转换为 16 位无符号整数类型。</td></tr><tr><td>15</td><td><strong>ToUInt32</strong> 把类型转换为 32 位无符号整数类型。</td></tr><tr><td>16</td><td><strong>ToUInt64</strong> 把类型转换为 64 位无符号整数类型。</td></tr></tbody></table><p>例如：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.ToString()</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;入门&quot;&gt;&lt;a href=&quot;#入门&quot; class=&quot;headerlink&quot; title=&quot;入门&quot;&gt;&lt;/a&gt;入门&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;需要C++基础&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="学习笔记" scheme="http://blog.iwxyi.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="C#" scheme="http://blog.iwxyi.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Win32 SDK绘制字体及透明文字</title>
    <link href="http://blog.iwxyi.com/2018/06/19/VC-%E7%BB%98%E5%88%B6%E5%AD%97%E4%BD%93%E5%8F%8A%E9%80%8F%E6%98%8E%E6%96%87%E5%AD%97/"/>
    <id>http://blog.iwxyi.com/2018/06/19/VC-绘制字体及透明文字/</id>
    <published>2018-06-19T01:40:00.000Z</published>
    <updated>2019-10-13T01:51:47.667Z</updated>
    
    <content type="html"><![CDATA[<p>在hdc上绘制文字：<code>CreateFont</code></p><a id="more"></a><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">HDC hdc;</span><br><span class="line">HFONT hf;</span><br><span class="line">TEXTMETRIC tm;</span><br><span class="line"><span class="keyword">double</span> len;</span><br><span class="line"><span class="keyword">int</span> left;</span><br><span class="line"></span><br><span class="line">hdc = GetDC(hWnd);</span><br><span class="line">hf = CreateFont(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY, DEFAULT_PITCH, <span class="string">"楷体"</span>); <span class="comment">// (HFONT) GetStockObject(0)</span></span><br><span class="line">SelectObject(hdc, hf); <span class="comment">// 绑定画笔</span></span><br><span class="line">SetTextColor(hdc, <span class="number">0x0000FF</span><span class="comment">/*BGR*/</span>); <span class="comment">// 绑定颜色</span></span><br><span class="line">GetTextMetrics(hdc, &amp;tm); <span class="comment">// 绑定大小</span></span><br><span class="line">len = <span class="built_in">strlen</span>(str) * tm.tmAveCharWidth; <span class="comment">// 要画的文字总长度</span></span><br><span class="line">left = R - len / <span class="number">2</span>; <span class="comment">// 居中对齐</span></span><br><span class="line">TextOut(hdc, left, <span class="number">0</span>, str, <span class="built_in">strlen</span>(str));</span><br><span class="line">DeleteObject(hf);</span><br><span class="line">cheight += tm.tmHeight; <span class="comment">// 下一行的高度</span></span><br></pre></td></tr></tbody></table></figure><p>设置文字背景透明</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SetBkMode(mdc, TRANSPARENT);</span><br></pre></td></tr></tbody></table></figure><p>还有两句额外的设置颜色的</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SetTextColor(mdc, RGB(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">SetBkColor(mdc, RGB(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在hdc上绘制文字：&lt;code&gt;CreateFont&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="Win32 SDK" scheme="http://blog.iwxyi.com/tags/Win32-SDK/"/>
    
  </entry>
  
  <entry>
    <title>SQL查询及删除重复记录</title>
    <link href="http://blog.iwxyi.com/2018/06/15/SQL%E6%9F%A5%E8%AF%A2%E5%8F%8A%E5%88%A0%E9%99%A4%E9%87%8D%E5%A4%8D%E8%AE%B0%E5%BD%95/"/>
    <id>http://blog.iwxyi.com/2018/06/15/SQL查询及删除重复记录/</id>
    <published>2018-06-15T10:38:00.000Z</published>
    <updated>2019-10-12T12:33:16.357Z</updated>
    
    <content type="html"><![CDATA[<p>1、查找表中多余的重复记录，重复记录是根据单个字段（peopleId）来判断</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> people</span><br><span class="line"><span class="keyword">where</span> peopleId <span class="keyword">in</span> (<span class="keyword">select</span> peopleId <span class="keyword">from</span> people <span class="keyword">group</span> <span class="keyword">by</span> peopleId <span class="keyword">having</span> <span class="keyword">count</span>(peopleId) &gt; <span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><p>2、删除表中多余的重复记录，重复记录是根据单个字段（peopleId）来判断，只留有rowid最小的记录</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> people</span><br><span class="line"><span class="keyword">where</span> peopleId <span class="keyword">in</span> (<span class="keyword">select</span> peopleId <span class="keyword">from</span> people <span class="keyword">group</span> <span class="keyword">by</span> peopleId <span class="keyword">having</span> <span class="keyword">count</span>(peopleId) &gt; <span class="number">1</span>)</span><br><span class="line"><span class="keyword">and</span> <span class="keyword">rowid</span> <span class="keyword">not</span> <span class="keyword">in</span> (<span class="keyword">select</span> <span class="keyword">min</span>(<span class="keyword">rowid</span>) <span class="keyword">from</span> people <span class="keyword">group</span> <span class="keyword">by</span> peopleId <span class="keyword">having</span> <span class="keyword">count</span>(peopleId )&gt;<span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure><p>3、查找表中多余的重复记录（多个字段）</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> vitae a</span><br><span class="line"><span class="keyword">where</span> (a.peopleId,a.seq) <span class="keyword">in</span> (<span class="keyword">select</span> peopleId,seq <span class="keyword">from</span> vitae <span class="keyword">group</span> <span class="keyword">by</span> peopleId,seq <span class="keyword">having</span> <span class="keyword">count</span>(*) &gt; <span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure><p>4、删除表中多余的重复记录（多个字段），只留有rowid最小的记录</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> vitae a</span><br><span class="line"><span class="keyword">where</span> (a.peopleId,a.seq) <span class="keyword">in</span> (<span class="keyword">select</span> peopleId,seq <span class="keyword">from</span> vitae <span class="keyword">group</span> <span class="keyword">by</span> peopleId,seq <span class="keyword">having</span> <span class="keyword">count</span>(*) &gt; <span class="number">1</span>)</span><br><span class="line"><span class="keyword">and</span> <span class="keyword">rowid</span> <span class="keyword">not</span> <span class="keyword">in</span> (<span class="keyword">select</span> <span class="keyword">min</span>(<span class="keyword">rowid</span>) <span class="keyword">from</span> vitae <span class="keyword">group</span> <span class="keyword">by</span> peopleId,seq <span class="keyword">having</span> <span class="keyword">count</span>(*)&gt;<span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure><p>5、查找表中多余的重复记录（多个字段），不包含rowid最小的记录</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> vitae a</span><br><span class="line"><span class="keyword">where</span> (a.peopleId,a.seq) <span class="keyword">in</span> (<span class="keyword">select</span> peopleId,seq <span class="keyword">from</span> vitae <span class="keyword">group</span> <span class="keyword">by</span> peopleId,seq <span class="keyword">having</span> <span class="keyword">count</span>(*) &gt; <span class="number">1</span>)</span><br><span class="line"><span class="keyword">and</span> <span class="keyword">rowid</span> <span class="keyword">not</span> <span class="keyword">in</span> (<span class="keyword">select</span> <span class="keyword">min</span>(<span class="keyword">rowid</span>) <span class="keyword">from</span> vitae <span class="keyword">group</span> <span class="keyword">by</span> peopleId,seq <span class="keyword">having</span> <span class="keyword">count</span>(*)&gt;<span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1、查找表中多余的重复记录，重复记录是根据单个字段（peopleId）来判断&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; * &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; people&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt; peopleId &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; peopleId &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; people &lt;span class=&quot;keyword&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;by&lt;/span&gt; peopleId &lt;span class=&quot;keyword&quot;&gt;having&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;count&lt;/span&gt;(peopleId) &amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="SQL" scheme="http://blog.iwxyi.com/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>Win32 SDK绘图函数</title>
    <link href="http://blog.iwxyi.com/2018/06/09/Win32-SDK%E7%BB%98%E5%9B%BE%E5%87%BD%E6%95%B0/"/>
    <id>http://blog.iwxyi.com/2018/06/09/Win32-SDK绘图函数/</id>
    <published>2018-06-09T02:16:00.000Z</published>
    <updated>2019-10-13T02:21:48.265Z</updated>
    
    <content type="html"><![CDATA[<h2 id="获取HDC"><a href="#获取HDC" class="headerlink" title="获取HDC"></a>获取HDC</h2><a id="more"></a><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">switch</span>(message)</span><br><span class="line">    {</span><br><span class="line">    <span class="keyword">case</span> WM_PAINT :</span><br><span class="line">        PAINTSTRUCT ps;</span><br><span class="line">        HDC hdc;</span><br><span class="line">        hdc = BeginPaint(hWnd, &amp;ps);</span><br><span class="line"></span><br><span class="line">        RECT rect;</span><br><span class="line">        GetClientRect (hWnd, &amp;rect);</span><br><span class="line"></span><br><span class="line">        paintOperator(hdc, rect.left, rect.top, rect.right, rect.bottom);</span><br><span class="line"></span><br><span class="line">        EndPaint(hWnd, &amp;ps);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_DESTROY :</span><br><span class="line">        PostQuitMessage(<span class="number">0</span>); <span class="comment">// 发出 WM_QUIT 消息，没有这句话则只是关闭窗口但进程不会停止</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span> :</span><br><span class="line">        <span class="keyword">return</span> DefWindowProc(hWnd, message, wParam, lParam); <span class="comment">// 默认时采用系统消息默认处理函数</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="画笔"><a href="#画笔" class="headerlink" title="画笔"></a>画笔</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">HPEN hp;</span><br><span class="line">hp = (HPEN) GetStockObject(BLACK_PEN); <span class="comment">// 默认画笔</span></span><br><span class="line">SelectObject(hdc, hp);</span><br><span class="line"></span><br><span class="line">MoveToEx(hdc,x,y,<span class="literal">NULL</span>);</span><br><span class="line">LineTo(hdc,x,y); <span class="comment">// 画直线，需要先移动点的位置</span></span><br><span class="line"></span><br><span class="line">Ellipse(hdc, L, T, R, B); <span class="comment">// 画椭圆</span></span><br><span class="line"></span><br><span class="line">hp = (HPEN) CreatePen(PS_SOLID, <span class="number">3</span>, RGB(<span class="number">0xFF</span>, <span class="number">0</span>, <span class="number">0</span>)); <span class="comment">// 自定义画笔</span></span><br><span class="line">SelectObject(hdc, hp);</span><br><span class="line">POINT lpPoints[<span class="number">4</span>] = { {L, B}, {R, B}, {(L+R)/<span class="number">2</span>, T}, {L, B} }; <span class="comment">// 三角形的点</span></span><br><span class="line">Polyline(hdc, lpPoints, <span class="number">4</span>); <span class="comment">// 画点数组</span></span><br><span class="line"></span><br><span class="line">DeleteObject(hp); <span class="comment">// 别忘了CreatePen后要手动删除</span></span><br></pre></td></tr></tbody></table></figure><h2 id="画刷"><a href="#画刷" class="headerlink" title="画刷"></a>画刷</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HBRUSH hbr = (HBRUSH) CreateSolidBrush(RGB(color[pos][<span class="number">0</span>], color[pos][<span class="number">1</span>], color[pos][<span class="number">2</span>]));</span><br><span class="line">SelectObject(hdc, hbr);</span><br><span class="line">Rectangle(hdc, L, T, R, B);</span><br><span class="line">DeleteObject(hbr);</span><br></pre></td></tr></tbody></table></figure><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">HFONT hf;</span><br><span class="line">TEXTMETRIC tm;</span><br><span class="line"><span class="keyword">char</span> * str[<span class="number">5</span>] = {<span class="string">"HELLO WORLD!"</span>, <span class="string">""</span>, <span class="string">""</span>};</span><br><span class="line"></span><br><span class="line">hf = CreateFont(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY, DEFAULT_PITCH, <span class="string">"楷体"</span>); <span class="comment">// (HFONT) GetStockObject(0) // 创建字体</span></span><br><span class="line">SelectObject(hdc, hf);</span><br><span class="line">SetTextColor(hdc, <span class="number">0x0000FF</span><span class="comment">/*BGR*/</span>); <span class="comment">// 选择颜色</span></span><br><span class="line">GetTextMetrics(hdc, &amp;tm); <span class="comment">// 获取字体属性：宽高</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> len = <span class="built_in">strlen</span>(str[<span class="number">0</span>]) * tm.tmAveCharWidth; <span class="comment">// 字体长度</span></span><br><span class="line"><span class="keyword">int</span> left = (R-W/<span class="number">2</span>) - len/<span class="number">2</span>; <span class="comment">// 居中靠上显示，获取左边坐标</span></span><br><span class="line">TextOut(hdc, left, <span class="number">0</span>, str[<span class="number">0</span>], <span class="built_in">strlen</span>(str[<span class="number">0</span>])); <span class="comment">// 输出</span></span><br><span class="line"></span><br><span class="line">DeleteObject(hf);</span><br><span class="line"><span class="keyword">double</span> cheight += tm.tmHeight; <span class="comment">// 当前字体的高度，以便于下一行</span></span><br><span class="line"><span class="keyword">double</span> cwidth = tm.tmAveCharWidth;</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;获取HDC&quot;&gt;&lt;a href=&quot;#获取HDC&quot; class=&quot;headerlink&quot; title=&quot;获取HDC&quot;&gt;&lt;/a&gt;获取HDC&lt;/h2&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="Win32 SDK" scheme="http://blog.iwxyi.com/tags/Win32-SDK/"/>
    
  </entry>
  
  <entry>
    <title>C++不能重载的符号</title>
    <link href="http://blog.iwxyi.com/2018/06/08/C-%E4%B8%8D%E8%83%BD%E9%87%8D%E8%BD%BD%E7%9A%84%E7%AC%A6%E5%8F%B7/"/>
    <id>http://blog.iwxyi.com/2018/06/08/C-不能重载的符号/</id>
    <published>2018-06-07T23:30:00.000Z</published>
    <updated>2019-10-13T00:09:36.094Z</updated>
    
    <content type="html"><![CDATA[<p>半边括号<code>( ) [ ]</code>、<code>{}</code>、<code>&lt;&gt;</code>、<code>!</code>、<code>.</code>、<code>"</code>、<code>'</code>、<code>?</code>、<code>:</code>、<code>;</code>、<code>~</code>、<code>::</code>、<code>...</code>、<code>//</code>、<code>/* */</code></p><a id="more"></a><p>可以重载：<code>,</code></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;半边括号&lt;code&gt;( ) [ ]&lt;/code&gt;、&lt;code&gt;{}&lt;/code&gt;、&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;、&lt;code&gt;!&lt;/code&gt;、&lt;code&gt;.&lt;/code&gt;、&lt;code&gt;&quot;&lt;/code&gt;、&lt;code&gt;&#39;&lt;/code&gt;、&lt;code&gt;?&lt;/code&gt;、&lt;code&gt;:&lt;/code&gt;、&lt;code&gt;;&lt;/code&gt;、&lt;code&gt;~&lt;/code&gt;、&lt;code&gt;::&lt;/code&gt;、&lt;code&gt;...&lt;/code&gt;、&lt;code&gt;//&lt;/code&gt;、&lt;code&gt;/* */&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C++" scheme="http://blog.iwxyi.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Win32 SDK双缓冲模板</title>
    <link href="http://blog.iwxyi.com/2018/06/04/Win32-SDK%E5%8F%8C%E7%BC%93%E5%86%B2%E6%A8%A1%E6%9D%BF/"/>
    <id>http://blog.iwxyi.com/2018/06/04/Win32-SDK双缓冲模板/</id>
    <published>2018-06-04T02:19:00.000Z</published>
    <updated>2019-10-13T02:23:17.789Z</updated>
    
    <content type="html"><![CDATA[<p>游戏窗口双缓冲模板，可直接使用</p><a id="more"></a><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tchar.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"StdAfx.h"</span></span></span><br><span class="line"></span><br><span class="line">HINSTANCE hInst;</span><br><span class="line">HWND hWnd;</span><br><span class="line">DWORD tPre, tNow;</span><br><span class="line"><span class="keyword">int</span> TOP, RIGHT, WIDTH = <span class="number">1000</span>, HEIGHT = <span class="number">571</span>;</span><br><span class="line"><span class="keyword">int</span> MX, MY; <span class="comment">// 鼠标位置</span></span><br><span class="line"></span><br><span class="line">HDC hdc, mdc, bufdc;</span><br><span class="line">PAINTSTRUCT ps;</span><br><span class="line">RECT rect;</span><br><span class="line">HBITMAP fullmap, hBgBmp;</span><br><span class="line"></span><br><span class="line"><span class="function">ATOM                <span class="title">MyRegisterClass</span><span class="params">(HINSTANCE hInstance)</span></span>;</span><br><span class="line"><span class="function">BOOL                <span class="title">InitInstance</span><span class="params">(HINSTANCE, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function">LRESULT CALLBACK    <span class="title">WndProc</span><span class="params">(HWND, UINT, WPARAM, LPARAM)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span>                <span class="title">MyPaint</span><span class="params">(HDC hdc)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//***WinMain函数，程序入口点函数**************************************</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> APIENTRY <span class="title">WinMain</span><span class="params">(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, <span class="keyword">int</span> nCmdShow)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    MSG msg;</span><br><span class="line">    MyRegisterClass(hInstance);</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">if</span> (!InitInstance (hInstance, nCmdShow))</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//消息循环</span></span><br><span class="line">    GetMessage(&amp;msg, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>); <span class="comment">//初始化msg</span></span><br><span class="line">    <span class="keyword">while</span>( msg.message != WM_QUIT )</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span>( PeekMessage( &amp;msg, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="number">0</span> , PM_REMOVE) )</span><br><span class="line">        {</span><br><span class="line">            TranslateMessage( &amp;msg );</span><br><span class="line">            DispatchMessage( &amp;msg );</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        {</span><br><span class="line">            tNow = GetTickCount();</span><br><span class="line">            <span class="keyword">if</span>(tNow - tPre &gt;= <span class="number">40</span>)</span><br><span class="line">                MyPaint(hdc);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> msg.wParam;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//****设计一个窗口类，类似填空题，使用窗口结构体*************************</span></span><br><span class="line"><span class="function">ATOM <span class="title">MyRegisterClass</span><span class="params">(HINSTANCE hInstance)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    WNDCLASSEX wcex;</span><br><span class="line"></span><br><span class="line">    wcex.cbSize = <span class="keyword">sizeof</span>(WNDCLASSEX);</span><br><span class="line">    wcex.style          = CS_HREDRAW | CS_VREDRAW;</span><br><span class="line">    wcex.lpfnWndProc    = (WNDPROC)WndProc;</span><br><span class="line">    wcex.cbClsExtra     = <span class="number">0</span>;</span><br><span class="line">    wcex.cbWndExtra     = <span class="number">0</span>;</span><br><span class="line">    wcex.hInstance      = hInstance;</span><br><span class="line">    wcex.hIcon          = <span class="literal">NULL</span>;</span><br><span class="line">    wcex.hCursor        = <span class="literal">NULL</span>;</span><br><span class="line">    wcex.hCursor        = LoadCursor(<span class="literal">NULL</span>, IDC_ARROW);</span><br><span class="line">    wcex.hbrBackground  = (HBRUSH)(COLOR_WINDOW + <span class="number">1</span>);</span><br><span class="line">    wcex.lpszMenuName   = <span class="literal">NULL</span>;</span><br><span class="line">    wcex.lpszClassName  = <span class="string">"canvas"</span>;</span><br><span class="line">    wcex.hIconSm        = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> RegisterClassEx(&amp;wcex);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//****初始化函数*************************************</span></span><br><span class="line"><span class="comment">// 加载位图并设定各对象的初始值</span></span><br><span class="line"><span class="function">BOOL <span class="title">InitInstance</span><span class="params">(HINSTANCE hInstance, <span class="keyword">int</span> nCmdShow)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    hInst = hInstance;</span><br><span class="line">    hWnd = CreateWindow(<span class="string">"canvas"</span>, <span class="string">"演示"</span> , WS_OVERLAPPEDWINDOW, CW_USEDEFAULT, CW_USEDEFAULT, WIDTH, HEIGHT, <span class="literal">NULL</span>, <span class="literal">NULL</span>, hInstance, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!hWnd)</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// MoveWindow(hWnd, 10, 10, WIDTH, HEIGHT, true);</span></span><br><span class="line">    ShowWindow(hWnd, nCmdShow);</span><br><span class="line">    UpdateWindow(hWnd);</span><br><span class="line"></span><br><span class="line">    hdc = GetDC(hWnd);</span><br><span class="line">    mdc = CreateCompatibleDC(hdc);</span><br><span class="line">    bufdc = CreateCompatibleDC(hdc);</span><br><span class="line">    fullmap = CreateCompatibleBitmap(hdc, WIDTH, HEIGHT);</span><br><span class="line">    SelectObject(mdc, fullmap);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* ... 初始化各值 ... */</span></span><br><span class="line"></span><br><span class="line">    MyPaint(hdc);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MyPaint</span><span class="params">(HDC hdc)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="comment">/* ... 画图操作，可以生成动画 ... */</span></span><br><span class="line">    </span><br><span class="line">    tPre = GetTickCount();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//****消息处理函数***********************************</span></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">switch</span> (message)</span><br><span class="line">    {</span><br><span class="line">    <span class="keyword">case</span> WM_PAINT :</span><br><span class="line">        hdc = BeginPaint(hWnd, &amp;ps);</span><br><span class="line">        GetClientRect(hWnd, &amp;rect);</span><br><span class="line">        MyPaint(hdc);</span><br><span class="line">        EndPaint(hWnd, &amp;ps);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_MOUSEMOVE :</span><br><span class="line">        MX = LOWORD(lParam) - roleFlyBmp[action][actionFrame].bmWidth / <span class="number">2</span>;</span><br><span class="line">        MY = HIWORD(lParam) - roleFlyBmp[action][actionFrame].bmHeight / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_LBUTTONDOWN :</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_KEYDOWN :</span><br><span class="line">        <span class="keyword">switch</span> (wParam)</span><br><span class="line">        {</span><br><span class="line">        <span class="keyword">case</span> VK_UP :</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_CHAR :</span><br><span class="line">        <span class="keyword">switch</span> (wParam)</span><br><span class="line">        {</span><br><span class="line">        <span class="keyword">case</span> <span class="string">' '</span> :</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_DESTROY:                    <span class="comment">//窗口结束消息，撤销各种DC</span></span><br><span class="line">        DeleteDC(mdc);</span><br><span class="line">        DeleteDC(bufdc);</span><br><span class="line">        DeleteObject(fullmap);</span><br><span class="line">        ReleaseDC(hWnd, hdc);</span><br><span class="line">        PostQuitMessage(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:                            <span class="comment">//其他消息</span></span><br><span class="line">        <span class="keyword">return</span> DefWindowProc(hWnd, message, wParam, lParam);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="游戏模板"><a href="#游戏模板" class="headerlink" title="游戏模板"></a>游戏模板</h1><p>参照上面的双缓冲模板。</p><p>之前做的一个作业样例。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tchar.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"StdAfx.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"testOutput.h"</span></span></span><br><span class="line"><span class="comment">//using namespace std;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LIMIT_RECT 1      <span class="comment">// 矩形限制区域</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LIMIT_CIRC 2      <span class="comment">// 圆形限制区域</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ACTION_STARTFLY 0 <span class="comment">// 开始飞行</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ACTION_FLY 1      <span class="comment">// 向右飞</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ACTION_FLY2 2     <span class="comment">// 向左飞</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ACTION_ATTACK 3   <span class="comment">// 向右攻击</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ACTION_ATTACK2 4  <span class="comment">// 向左攻击</span></span></span><br><span class="line"></span><br><span class="line">HINSTANCE hInst;</span><br><span class="line">HWND hWnd;</span><br><span class="line">DWORD tPre, tNow;</span><br><span class="line"><span class="keyword">int</span> TOP, RIGHT, WIDTH = <span class="number">1000</span>, HEIGHT = <span class="number">571</span>;</span><br><span class="line"><span class="keyword">int</span> OX = <span class="number">370</span>, OY = <span class="number">180</span>, MX, MY; <span class="comment">// 实例位置</span></span><br><span class="line"><span class="keyword">int</span> SX = <span class="number">10</span>, SY = <span class="number">10</span>;           <span class="comment">// 每步移动的距离</span></span><br><span class="line"><span class="keyword">int</span> EX = <span class="number">0</span>, EY = <span class="number">0</span>;             <span class="comment">// 目标位置</span></span><br><span class="line"></span><br><span class="line">HDC hdc, mdc, bufdc;</span><br><span class="line">PAINTSTRUCT ps;</span><br><span class="line">RECT rect;</span><br><span class="line">HBITMAP fullmap, hBgBmp, hRoleBmp[<span class="number">10</span>][<span class="number">100</span>], _hRoleBmp[<span class="number">10</span>][<span class="number">100</span>];</span><br><span class="line">BITMAP bgBmp, roleFlyBmp[<span class="number">10</span>][<span class="number">100</span>], _roleFlyBmp[<span class="number">10</span>][<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> action = ACTION_STARTFLY <span class="comment">/*0 normal, 1 2 fly*/</span>, actionFrame = <span class="number">0</span>, actionFrameContrler = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> limitsMap[][<span class="number">5</span>] =</span><br><span class="line">{</span><br><span class="line">    { <span class="number">0</span>, <span class="number">0</span>, <span class="number">1000</span>, <span class="number">55</span>, LIMIT_RECT },</span><br><span class="line">    { <span class="number">258</span>, <span class="number">0</span>, <span class="number">850</span>, <span class="number">55</span>, LIMIT_RECT },</span><br><span class="line">    { <span class="number">342</span>, <span class="number">0</span>, <span class="number">500</span>, <span class="number">70</span>, LIMIT_RECT },</span><br><span class="line">    { <span class="number">0</span>, <span class="number">225</span>, <span class="number">170</span>, <span class="number">50</span>, LIMIT_RECT },</span><br><span class="line">    { <span class="number">0</span>, <span class="number">275</span>, <span class="number">54</span>, <span class="number">72</span>, LIMIT_RECT },</span><br><span class="line">    { <span class="number">0</span>, <span class="number">455</span>, <span class="number">72</span>, <span class="number">119</span>, LIMIT_RECT },</span><br><span class="line">    { <span class="number">310</span>, <span class="number">360</span>, <span class="number">324</span>, <span class="number">80</span>, LIMIT_RECT },</span><br><span class="line">    { <span class="number">404</span>, <span class="number">300</span>, <span class="number">200</span>, <span class="number">237</span>, LIMIT_RECT },</span><br><span class="line">    { <span class="number">504</span>, <span class="number">468</span>, <span class="number">522</span>, <span class="number">115</span>, LIMIT_RECT },</span><br><span class="line">    { <span class="number">0</span>, <span class="number">0</span>, <span class="number">43</span>, <span class="number">306</span>, LIMIT_RECT },</span><br><span class="line">    { <span class="number">940</span>, <span class="number">0</span>, <span class="number">42</span>, <span class="number">187</span>, LIMIT_RECT }</span><br><span class="line">}, limitsMapNum = <span class="number">11</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">ATOM                <span class="title">MyRegisterClass</span><span class="params">(HINSTANCE hInstance)</span></span>;</span><br><span class="line"><span class="function">BOOL                <span class="title">InitInstance</span><span class="params">(HINSTANCE, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function">LRESULT CALLBACK    <span class="title">WndProc</span><span class="params">(HWND, UINT, WPARAM, LPARAM)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span>                <span class="title">MyPaint</span><span class="params">(HDC hdc)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//***WinMain函数，程序入口点函数**************************************</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> APIENTRY <span class="title">WinMain</span><span class="params">(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, <span class="keyword">int</span> nCmdShow)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    MSG msg;</span><br><span class="line">    MyRegisterClass(hInstance);</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">if</span> (!InitInstance (hInstance, nCmdShow))</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//消息循环</span></span><br><span class="line">    GetMessage(&amp;msg, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>); <span class="comment">//初始化msg</span></span><br><span class="line">    <span class="keyword">while</span>( msg.message != WM_QUIT )</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span>( PeekMessage( &amp;msg, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="number">0</span> , PM_REMOVE) )</span><br><span class="line">        {</span><br><span class="line">            TranslateMessage( &amp;msg );</span><br><span class="line">            DispatchMessage( &amp;msg );</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        {</span><br><span class="line">            tNow = GetTickCount();</span><br><span class="line">            <span class="keyword">if</span>(tNow - tPre &gt;= <span class="number">40</span>)</span><br><span class="line">                MyPaint(hdc);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> msg.wParam;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//****设计一个窗口类，类似填空题，使用窗口结构体*************************</span></span><br><span class="line"><span class="function">ATOM <span class="title">MyRegisterClass</span><span class="params">(HINSTANCE hInstance)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    WNDCLASSEX wcex;</span><br><span class="line"></span><br><span class="line">    wcex.cbSize = <span class="keyword">sizeof</span>(WNDCLASSEX);</span><br><span class="line">    wcex.style          = CS_HREDRAW | CS_VREDRAW;</span><br><span class="line">    wcex.lpfnWndProc    = (WNDPROC)WndProc;</span><br><span class="line">    wcex.cbClsExtra     = <span class="number">0</span>;</span><br><span class="line">    wcex.cbWndExtra     = <span class="number">0</span>;</span><br><span class="line">    wcex.hInstance      = hInstance;</span><br><span class="line">    wcex.hIcon          = <span class="literal">NULL</span>;</span><br><span class="line">    wcex.hCursor        = <span class="literal">NULL</span>;</span><br><span class="line">    wcex.hCursor        = LoadCursor(<span class="literal">NULL</span>, IDC_ARROW);</span><br><span class="line">    wcex.hbrBackground  = (HBRUSH)(COLOR_WINDOW + <span class="number">1</span>);</span><br><span class="line">    wcex.lpszMenuName   = <span class="literal">NULL</span>;</span><br><span class="line">    wcex.lpszClassName  = <span class="string">"canvas"</span>;</span><br><span class="line">    wcex.hIconSm        = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> RegisterClassEx(&amp;wcex);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//****初始化函数*************************************</span></span><br><span class="line"><span class="comment">// 加载位图并设定各对象的初始值</span></span><br><span class="line"><span class="function">BOOL <span class="title">InitInstance</span><span class="params">(HINSTANCE hInstance, <span class="keyword">int</span> nCmdShow)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    hInst = hInstance;</span><br><span class="line">    hWnd = CreateWindow(<span class="string">"canvas"</span>, <span class="string">"动画演示"</span> , WS_OVERLAPPEDWINDOW, CW_USEDEFAULT, CW_USEDEFAULT, WIDTH, HEIGHT, <span class="literal">NULL</span>, <span class="literal">NULL</span>, hInstance, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!hWnd)</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// MoveWindow(hWnd, 10, 10, WIDTH, HEIGHT, true);</span></span><br><span class="line">    ShowWindow(hWnd, nCmdShow);</span><br><span class="line">    UpdateWindow(hWnd);</span><br><span class="line"></span><br><span class="line">    hdc = GetDC(hWnd);</span><br><span class="line">    mdc = CreateCompatibleDC(hdc);</span><br><span class="line">    bufdc = CreateCompatibleDC(hdc);</span><br><span class="line">    fullmap = CreateCompatibleBitmap(hdc, WIDTH, HEIGHT);</span><br><span class="line">    SelectObject(mdc, fullmap);</span><br><span class="line"></span><br><span class="line">    hBgBmp = (HBITMAP)LoadImage(<span class="literal">NULL</span>, <span class="string">"bg.bmp"</span>, IMAGE_BITMAP, <span class="number">0</span>, <span class="number">0</span>, LR_LOADFROMFILE);</span><br><span class="line">    GetObject(hBgBmp, <span class="keyword">sizeof</span>(BITMAP), &amp;bgBmp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">char</span> actionName[<span class="number">10</span>][<span class="number">20</span>] = { <span class="string">"startfly"</span>, <span class="string">"fly"</span>, <span class="string">"fly2"</span>, <span class="string">"attack"</span>, <span class="string">"attack2"</span> };</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">char</span> fullName[<span class="number">100</span>];</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)</span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">sprintf</span>(fullName, <span class="string">"%s%d.bmp"</span>, actionName[i], j);</span><br><span class="line">            hRoleBmp[i][j] = (HBITMAP)LoadImage(<span class="literal">NULL</span>, fullName, IMAGE_BITMAP, <span class="number">0</span>, <span class="number">0</span>, LR_LOADFROMFILE);</span><br><span class="line">            <span class="built_in">sprintf</span>(fullName, <span class="string">"_%s%d.bmp"</span>, actionName[i], j);</span><br><span class="line">            _hRoleBmp[i][j] = (HBITMAP)LoadImage(<span class="literal">NULL</span>, fullName, IMAGE_BITMAP, <span class="number">0</span>, <span class="number">0</span>, LR_LOADFROMFILE);</span><br><span class="line">            GetObject(hRoleBmp[i][j], <span class="keyword">sizeof</span>(BITMAP), &amp;roleFlyBmp[i][j]);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    MyPaint(hdc);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">limitXY</span><span class="params">(<span class="keyword">int</span> nOX, <span class="keyword">int</span> nOY)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> lix, liy, liw, lih;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; limitsMapNum; i++)</span><br><span class="line">    {</span><br><span class="line">        lix = limitsMap[i][<span class="number">0</span>];</span><br><span class="line">        liy = limitsMap[i][<span class="number">1</span>];</span><br><span class="line">        liw = limitsMap[i][<span class="number">2</span>];</span><br><span class="line">        lih = limitsMap[i][<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 画限制区域和人物的范围，调试用</span></span><br><span class="line">        <span class="comment">/*HBRUSH hb;</span></span><br><span class="line"><span class="comment">        hb = (HBRUSH) CreateSolidBrush(RGB(0xFF, 0xFF, 0xFF));</span></span><br><span class="line"><span class="comment">        SelectObject(hdc, hb);</span></span><br><span class="line"><span class="comment">        Rectangle(hdc, lix, liy, lix + liw, liy + lih);</span></span><br><span class="line"><span class="comment">        Ellipse(hdc, OX, OY, OX + roleFlyBmp[action][actionFrame].bmWidth, OY + roleFlyBmp[action][actionFrame].bmHeight);</span></span><br><span class="line"><span class="comment">        DeleteObject(hb);*/</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (OX &gt; lix + liw || OX + roleFlyBmp[action][actionFrame].bmWidth &lt; lix</span><br><span class="line">                || OY &gt; liy + lih || OY + roleFlyBmp[action][actionFrame].bmHeight &lt; liy</span><br><span class="line">                || (OX - lix - liw / <span class="number">2</span>) * (OX - lix - liw / <span class="number">2</span>) + (OY - liy - lih / <span class="number">2</span>) * (OY - liy - lih / <span class="number">2</span>) &gt; (max(liw , lih) * max(liw , lih)) &gt;&gt; <span class="number">1</span>) ; <span class="comment">// 边角处理</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">if</span> (OX &gt; lix + liw || OX + roleFlyBmp[action][actionFrame].bmWidth &lt; lix) ;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                OX = nOX;</span><br><span class="line">            <span class="keyword">if</span> (OY &gt; liy + lih || OY + roleFlyBmp[action][actionFrame].bmHeight &lt; liy) ;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                OY = nOY;</span><br><span class="line">            <span class="keyword">if</span> (OX == nOX &amp;&amp; OY == nOY)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MyPaint</span><span class="params">(HDC hdc)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="comment">// 运动</span></span><br><span class="line">    <span class="keyword">int</span> nOX = OX, nOY = OY;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (EX || EY)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> fflag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">abs</span>(EX - OX) &gt; SX)</span><br><span class="line">        {</span><br><span class="line">            fflag = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (EX &gt; OX) OX += SX;</span><br><span class="line">            <span class="keyword">else</span> OX -= SX;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">abs</span>(EY - OY) &gt; SY)</span><br><span class="line">        {</span><br><span class="line">            fflag = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (EY &gt; OY) OY += SY;</span><br><span class="line">            <span class="keyword">else</span> OY -= SY;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (!fflag)</span><br><span class="line">            EX = EY = <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    limitXY(nOX, nOY);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 画背景</span></span><br><span class="line"></span><br><span class="line">    SelectObject(bufdc, hBgBmp);</span><br><span class="line">    BitBlt(mdc, rect.left, rect.top, rect.right - rect.left, rect.bottom - rect.top, bufdc, <span class="number">0</span>, <span class="number">0</span>, SRCCOPY); <span class="comment">// 画背景</span></span><br><span class="line"></span><br><span class="line">    SelectObject(bufdc, _hRoleBmp[action][actionFrame]);</span><br><span class="line">    BitBlt(mdc, OX, OY, roleFlyBmp[action][actionFrame].bmWidth, roleFlyBmp[action][actionFrame].bmHeight, bufdc, <span class="number">0</span>, <span class="number">0</span>, SRCAND); <span class="comment">// 画人物</span></span><br><span class="line">    SelectObject(bufdc, hRoleBmp[action][actionFrame]);</span><br><span class="line">    BitBlt(mdc, OX, OY, roleFlyBmp[action][actionFrame].bmWidth, roleFlyBmp[action][actionFrame].bmHeight, bufdc, <span class="number">0</span>, <span class="number">0</span>, SRCPAINT); <span class="comment">// 画人物</span></span><br><span class="line"></span><br><span class="line">    BitBlt(hdc, <span class="number">0</span>, <span class="number">0</span>, WIDTH, HEIGHT, mdc, <span class="number">0</span>, <span class="number">0</span>, SRCCOPY);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 动画</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (action)</span><br><span class="line">    {</span><br><span class="line">    <span class="keyword">case</span> ACTION_STARTFLY:</span><br><span class="line">        <span class="keyword">if</span> (!EX &amp;&amp; !EY &amp;&amp; OX==<span class="number">370</span> &amp;&amp; OY==<span class="number">180</span>) <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">if</span> (actionFrameContrler &gt;= <span class="number">4</span>)</span><br><span class="line">        {</span><br><span class="line">            actionFrameContrler = <span class="number">0</span>;</span><br><span class="line">            action = <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        actionFrame = actionFrameContrler;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> ACTION_FLY:</span><br><span class="line">    <span class="keyword">case</span> ACTION_FLY2:</span><br><span class="line">        <span class="keyword">if</span> (actionFrameContrler &gt;= <span class="number">8</span>) actionFrameContrler = <span class="number">0</span>;</span><br><span class="line">        actionFrame = actionFrameContrler / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> ACTION_ATTACK:</span><br><span class="line">    <span class="keyword">case</span> ACTION_ATTACK2:</span><br><span class="line">        <span class="keyword">if</span> (actionFrameContrler &gt;= <span class="number">15</span>)</span><br><span class="line">        {</span><br><span class="line">            actionFrameContrler = <span class="number">0</span>;</span><br><span class="line">            action -= (ACTION_ATTACK - ACTION_FLY);</span><br><span class="line">        }</span><br><span class="line">        actionFrame = actionFrameContrler / <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line">    actionFrameContrler++;</span><br><span class="line"></span><br><span class="line">    tPre = GetTickCount();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//****消息处理函数***********************************</span></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">switch</span> (message)</span><br><span class="line">    {</span><br><span class="line">    <span class="keyword">case</span> WM_PAINT :</span><br><span class="line">        hdc = BeginPaint(hWnd, &amp;ps);</span><br><span class="line">        GetClientRect(hWnd, &amp;rect);</span><br><span class="line">        MyPaint(hdc);</span><br><span class="line">        EndPaint(hWnd, &amp;ps);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_MOUSEMOVE :</span><br><span class="line">        MX = LOWORD(lParam) - roleFlyBmp[action][actionFrame].bmWidth / <span class="number">2</span>;</span><br><span class="line">        MY = HIWORD(lParam) - roleFlyBmp[action][actionFrame].bmHeight / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_LBUTTONDOWN :</span><br><span class="line">        EX = MX;</span><br><span class="line">        EY = MY;</span><br><span class="line">        <span class="keyword">if</span> (EX &lt; OX) action = ACTION_FLY2;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (action != ACTION_STARTFLY) action = ACTION_FLY;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_KEYDOWN :</span><br><span class="line">        <span class="keyword">switch</span> (wParam)</span><br><span class="line">        {</span><br><span class="line">        <span class="keyword">case</span> VK_UP :</span><br><span class="line">            OY -= <span class="number">20</span>;</span><br><span class="line">            limitXY(OX, OY + <span class="number">20</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> VK_DOWN :</span><br><span class="line">            OY += <span class="number">20</span>;</span><br><span class="line">            limitXY(OX, OY - <span class="number">20</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> VK_LEFT :</span><br><span class="line">            OX -= <span class="number">20</span>;</span><br><span class="line">            limitXY(OX + <span class="number">20</span>, OY);</span><br><span class="line">            action = <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> VK_RIGHT :</span><br><span class="line">            OX += <span class="number">20</span>;</span><br><span class="line">            limitXY(OX - <span class="number">20</span>, OY);</span><br><span class="line">            action = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_CHAR :</span><br><span class="line">        <span class="keyword">switch</span> (wParam)</span><br><span class="line">        {</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'w'</span> :</span><br><span class="line">            OY -= <span class="number">20</span>;</span><br><span class="line">            limitXY(OX, OY + <span class="number">20</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'s'</span> :</span><br><span class="line">            OY += <span class="number">20</span>;</span><br><span class="line">            limitXY(OX, OY - <span class="number">20</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'a'</span> :</span><br><span class="line">            OX -= <span class="number">20</span>;</span><br><span class="line">            limitXY(OX + <span class="number">20</span>, OY);</span><br><span class="line">            action = <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'d'</span> :</span><br><span class="line">            OX += <span class="number">20</span>;</span><br><span class="line">            limitXY(OX - <span class="number">20</span>, OY);</span><br><span class="line">            action = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">' '</span> :</span><br><span class="line">            <span class="keyword">if</span> (action != <span class="number">3</span> &amp;&amp; action != <span class="number">4</span>)</span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">if</span> (action == <span class="number">1</span> || action == <span class="number">2</span>)</span><br><span class="line">                    action += <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">else</span> action = <span class="number">3</span>;</span><br><span class="line">                actionFrameContrler = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_DESTROY:                    <span class="comment">//窗口结束消息，撤销各种DC</span></span><br><span class="line">        DeleteDC(mdc);</span><br><span class="line">        DeleteDC(bufdc);</span><br><span class="line">        DeleteObject(fullmap);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)</span><br><span class="line">            {</span><br><span class="line">                DeleteObject(hRoleBmp[i][j]);</span><br><span class="line">                DeleteObject(_hRoleBmp[i][j]);</span><br><span class="line">            }</span><br><span class="line">        ReleaseDC(hWnd, hdc);</span><br><span class="line">        PostQuitMessage(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:                            <span class="comment">//其他消息</span></span><br><span class="line">        <span class="keyword">return</span> DefWindowProc(hWnd, message, wParam, lParam);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;游戏窗口双缓冲模板，可直接使用&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="Win32 SDK" scheme="http://blog.iwxyi.com/tags/Win32-SDK/"/>
    
      <category term="模板" scheme="http://blog.iwxyi.com/tags/%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>Win32 SDK双缓冲</title>
    <link href="http://blog.iwxyi.com/2018/06/04/Win32-SDK%E5%8F%8C%E7%BC%93%E5%86%B2/"/>
    <id>http://blog.iwxyi.com/2018/06/04/Win32-SDK双缓冲/</id>
    <published>2018-06-04T02:00:00.000Z</published>
    <updated>2019-10-13T02:01:08.728Z</updated>
    
    <content type="html"><![CDATA[<h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HDC hdc, mdc, bufdc;</span><br><span class="line">HBITMAP fullmap, hBgBmp, hRoleBmp[<span class="number">10</span>][<span class="number">100</span>], _hRoleBmp[<span class="number">10</span>][<span class="number">100</span>];</span><br><span class="line">BITMAP bgBmp, roleFlyBmp[<span class="number">10</span>][<span class="number">100</span>], _roleFlyBmp[<span class="number">10</span>][<span class="number">100</span>];</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">hdc = GetDC(hWnd);</span><br><span class="line">mdc = CreateCompatibleDC(hdc);</span><br><span class="line">bufdc = CreateCompatibleDC(hdc);</span><br><span class="line">fullmap = CreateCompatibleBitmap(hdc, WIDTH, HEIGHT);</span><br><span class="line">SelectObject(mdc, fullmap);</span><br><span class="line"></span><br><span class="line">hBgBmp = (HBITMAP)LoadImage(<span class="literal">NULL</span>, <span class="string">"bg.bmp"</span>, IMAGE_BITMAP, <span class="number">0</span>, <span class="number">0</span>, LR_LOADFROMFILE);</span><br><span class="line">GetObject(hBgBmp, <span class="keyword">sizeof</span>(BITMAP), &amp;bgBmp);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环加载所有图片</span></span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"><span class="keyword">char</span> actionName[<span class="number">10</span>][<span class="number">20</span>] = { <span class="string">"startfly"</span>, <span class="string">"fly"</span>, <span class="string">"fly2"</span>, <span class="string">"attack"</span>, <span class="string">"attack2"</span> };</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">{</span><br><span class="line">    <span class="keyword">char</span> fullName[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">sprintf</span>(fullName, <span class="string">"%s%d.bmp"</span>, actionName[i], j);</span><br><span class="line">        hRoleBmp[i][j] = (HBITMAP)LoadImage(<span class="literal">NULL</span>, fullName, IMAGE_BITMAP, <span class="number">0</span>, <span class="number">0</span>, LR_LOADFROMFILE); <span class="comment">// 原图</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">sprintf</span>(fullName, <span class="string">"_%s%d.bmp"</span>, actionName[i], j);</span><br><span class="line">        _hRoleBmp[i][j] = (HBITMAP)LoadImage(<span class="literal">NULL</span>, fullName, IMAGE_BITMAP, <span class="number">0</span>, <span class="number">0</span>, LR_LOADFROMFILE); <span class="comment">// 掩图</span></span><br><span class="line"></span><br><span class="line">        GetObject(hRoleBmp[i][j], <span class="keyword">sizeof</span>(BITMAP), &amp;roleFlyBmp[i][j]);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="绘图"><a href="#绘图" class="headerlink" title="绘图"></a>绘图</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SelectObject(bufdc, hBgBmp);</span><br><span class="line">BitBlt(mdc, rect.left, rect.top, rect.right - rect.left, rect.bottom - rect.top, bufdc, <span class="number">0</span>, <span class="number">0</span>, SRCCOPY); <span class="comment">// 画背景到mdc</span></span><br><span class="line"></span><br><span class="line">SelectObject(bufdc, _hRoleBmp[action][actionFrame]);</span><br><span class="line">BitBlt(mdc, OX, OY, roleFlyBmp[action][actionFrame].bmWidth, roleFlyBmp[action][actionFrame].bmHeight, bufdc, <span class="number">0</span>, <span class="number">0</span>, SRCAND); <span class="comment">// 画人物[掩图]到mdc</span></span><br><span class="line"></span><br><span class="line">SelectObject(bufdc, hRoleBmp[action][actionFrame]);</span><br><span class="line">BitBlt(mdc, OX, OY, roleFlyBmp[action][actionFrame].bmWidth, roleFlyBmp[action][actionFrame].bmHeight, bufdc, <span class="number">0</span>, <span class="number">0</span>, SRCPAINT);</span><br><span class="line"></span><br><span class="line">BitBlt(hdc, <span class="number">0</span>, <span class="number">0</span>, WIDTH, HEIGHT, mdc, <span class="number">0</span>, <span class="number">0</span>, SRCCOPY); <span class="comment">// 画mdc到hdc</span></span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;声明&quot;&gt;&lt;a href=&quot;#声明&quot; class=&quot;headerlink&quot; title=&quot;声明&quot;&gt;&lt;/a&gt;声明&lt;/h2&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;HDC hdc, mdc, bufdc;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;HBITMAP fullmap, hBgBmp, hRoleBmp[&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;], _hRoleBmp[&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BITMAP bgBmp, roleFlyBmp[&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;], _roleFlyBmp[&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="Win32 SDK" scheme="http://blog.iwxyi.com/tags/Win32-SDK/"/>
    
  </entry>
  
  <entry>
    <title>C++取数组长度函数</title>
    <link href="http://blog.iwxyi.com/2018/06/03/C-%E5%8F%96%E6%95%B0%E7%BB%84%E9%95%BF%E5%BA%A6%E5%87%BD%E6%95%B0/"/>
    <id>http://blog.iwxyi.com/2018/06/03/C-取数组长度函数/</id>
    <published>2018-06-03T00:17:00.000Z</published>
    <updated>2019-10-13T00:18:02.795Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">size_t</span> N&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> size_t <span class="title">GetArrayLength</span><span class="params">(<span class="keyword">const</span> Type(&amp;)[N])</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">return</span> N;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C++" scheme="http://blog.iwxyi.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++11 Lambda示例</title>
    <link href="http://blog.iwxyi.com/2018/06/03/C-11-Lambda%E7%A4%BA%E4%BE%8B/"/>
    <id>http://blog.iwxyi.com/2018/06/03/C-11-Lambda示例/</id>
    <published>2018-06-03T00:04:00.000Z</published>
    <updated>2019-10-13T00:07:38.836Z</updated>
    
    <content type="html"><![CDATA[<h2 id="声明-Lambda-表达式"><a href="#声明-Lambda-表达式" class="headerlink" title="声明 Lambda 表达式"></a>声明 Lambda 表达式</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> f1 = [](<span class="keyword">int</span> x, <span class="keyword">int</span> y) { <span class="keyword">return</span> x + y; };</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; f1(<span class="number">2</span>, <span class="number">3</span>) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 输出 5</span></span><br><span class="line"></span><br><span class="line">function&lt;<span class="keyword">int</span>(<span class="keyword">int</span>, <span class="keyword">int</span>)&gt; f2 = [](<span class="keyword">int</span> x, <span class="keyword">int</span> y) { <span class="keyword">return</span> x + y; };</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; f2(<span class="number">3</span>, <span class="number">4</span>) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 输出 7</span></span><br></pre></td></tr></tbody></table></figure><a id="more"></a><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">3</span>, j = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">function&lt;<span class="keyword">int</span> (<span class="keyword">void</span>)&gt; f = [i, &amp;j] { <span class="keyword">return</span> i + j; };</span><br><span class="line"></span><br><span class="line">i = <span class="number">22</span>;</span><br><span class="line">j = <span class="number">44</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; f() &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 3 + j = 47，输出 47</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="调用-Lambda-表达式"><a href="#调用-Lambda-表达式" class="headerlink" title="调用 Lambda 表达式"></a>调用 Lambda 表达式</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n = [] (<span class="keyword">int</span> x, <span class="keyword">int</span> y) { <span class="keyword">return</span> x + y; }(<span class="number">5</span>, <span class="number">4</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; n &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 输出 9</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// STL+Lambda 用法</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; numbers;</span><br><span class="line">numbers.push_back(<span class="number">13</span>);</span><br><span class="line">numbers.push_back(<span class="number">17</span>);</span><br><span class="line">numbers.push_back(<span class="number">42</span>);</span><br><span class="line">numbers.push_back(<span class="number">46</span>);</span><br><span class="line">numbers.push_back(<span class="number">99</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;::const_iterator result =</span><br><span class="line">find_if(numbers.begin(), numbers.end(),[](<span class="keyword">int</span> n) { <span class="keyword">return</span> (n % <span class="number">2</span>) == <span class="number">0</span>; });</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (result != numbers.end()) {</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"The first even number in the list is "</span> &lt;&lt; *result &lt;&lt; <span class="string">"."</span> &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 第一个偶数是 42</span></span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"The list contains no even numbers."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="嵌套-Lambda-表达式"><a href="#嵌套-Lambda-表达式" class="headerlink" title="嵌套 Lambda 表达式"></a>嵌套 Lambda 表达式</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The following lambda expression contains a nested lambda</span></span><br><span class="line"><span class="comment">// expression.</span></span><br><span class="line"><span class="keyword">int</span> timestwoplusthree = [](<span class="keyword">int</span> x) { <span class="keyword">return</span> [](<span class="keyword">int</span> y) { <span class="keyword">return</span> y * <span class="number">2</span>; }(x) + <span class="number">3</span>; }(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Print the result.</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; timestwoplusthree &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="高阶Lambda函数"><a href="#高阶Lambda函数" class="headerlink" title="高阶Lambda函数"></a>高阶Lambda函数</h2><p><a href="https://msdn.microsoft.com/zh-cn/library/dd293599.aspx" target="_blank" rel="noopener">https://msdn.microsoft.com/zh-cn/library/dd293599.aspx</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;声明-Lambda-表达式&quot;&gt;&lt;a href=&quot;#声明-Lambda-表达式&quot; class=&quot;headerlink&quot; title=&quot;声明 Lambda 表达式&quot;&gt;&lt;/a&gt;声明 Lambda 表达式&lt;/h2&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; f1 = [](&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; x, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; y) { &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x + y; };&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; f1(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// 输出 5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;function&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)&amp;gt; f2 = [](&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; x, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; y) { &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x + y; };&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; f2(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// 输出 7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C++11" scheme="http://blog.iwxyi.com/tags/C-11/"/>
    
      <category term="Lambda" scheme="http://blog.iwxyi.com/tags/Lambda/"/>
    
  </entry>
  
  <entry>
    <title>C++11 auto类型与引用</title>
    <link href="http://blog.iwxyi.com/2018/06/03/C-11-auto%E7%B1%BB%E5%9E%8B%E4%B8%8E%E5%BC%95%E7%94%A8/"/>
    <id>http://blog.iwxyi.com/2018/06/03/C-11-auto类型与引用/</id>
    <published>2018-06-02T23:50:00.000Z</published>
    <updated>2019-10-12T23:50:32.756Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> count = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span>&amp; countRef = count;</span><br><span class="line"><span class="keyword">auto</span> myAuto = countRef; <span class="comment">// 普通的int，非引用</span></span><br></pre></td></tr></tbody></table></figure><p>您可能会认为 myAuto 是一个 int 引用，但它不是。</p><a id="more"></a><p>验证：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">countRef = <span class="number">11</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; count &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"></span><br><span class="line">myAuto = <span class="number">12</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; count &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></tbody></table></figure><p>它<strong>只是一个 int</strong>。因为输出为 11 11，而不是 11 12；</p><p>如果 auto 尚未删除此引用，则会出现此情况。</p><hr><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="built_in">list</span>&lt;<span class="built_in">string</span>&gt;&gt;::iterator i = m.begin();</span><br><span class="line"><span class="keyword">auto</span> i = m.begin(); <span class="comment">// 就是如此简单……</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">double</span>&gt; dqDoubleData(<span class="number">10</span>, <span class="number">0.1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> iter = dqDoubleData.begin(); iter != dqDoubleData.end(); ++iter) <span class="comment">// 注意是 ++iter</span></span><br><span class="line">{ <span class="comment">/* ... */</span> }</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> elem : dqDoubleData)</span><br><span class="line">{ <span class="comment">/* ... */</span> }</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; elem : dqDoubleData)</span><br><span class="line">{ <span class="comment">/* ... */</span> }</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; elem : dqDoubleData)</span><br><span class="line">{ <span class="comment">/* ... */</span> }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> x = <span class="number">12.34</span>;</span><br><span class="line"><span class="keyword">auto</span> *y = <span class="keyword">new</span> <span class="keyword">auto</span>(x), **z = <span class="keyword">new</span> <span class="keyword">auto</span>(&amp;x);</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> x = <span class="number">1</span>, *y = &amp;x, **z = &amp;y; <span class="comment">// Resolves to int.</span></span><br><span class="line">auto a(2.01), *b (&amp;a); // Resolves to double.</span><br><span class="line"><span class="keyword">auto</span> c = <span class="string">'a'</span>, *d(&amp;c); <span class="comment">// Resolves to char.</span></span><br><span class="line"><span class="keyword">auto</span> m = <span class="number">1</span>, &amp;n = m; <span class="comment">// Resolves to int.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{ <span class="keyword">return</span> x; }</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">auto</span> x = f(<span class="number">0</span>); <span class="comment">// int x</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">auto</span> &amp; y = f(<span class="number">1</span>); <span class="comment">// const int &amp; y 引用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> (*p)(<span class="keyword">int</span> x);</span><br><span class="line">p = f;</span><br><span class="line"><span class="keyword">auto</span> fp = p; <span class="comment">// 返回值为 int 类型的函数的指针</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; count = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;amp; countRef = count;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; myAuto = countRef; &lt;span class=&quot;comment&quot;&gt;// 普通的int，非引用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;您可能会认为 myAuto 是一个 int 引用，但它不是。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C++11" scheme="http://blog.iwxyi.com/tags/C-11/"/>
    
  </entry>
  
  <entry>
    <title>C++重载()仿构造函数</title>
    <link href="http://blog.iwxyi.com/2018/06/03/C-%E9%87%8D%E8%BD%BD-%E4%BB%BF%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
    <id>http://blog.iwxyi.com/2018/06/03/C-重载-仿构造函数/</id>
    <published>2018-06-02T23:46:00.000Z</published>
    <updated>2019-10-12T23:46:32.992Z</updated>
    
    <content type="html"><![CDATA[<p>坑同事技巧+1</p><a id="more"></a><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Point() { _x = _y = <span class="number">0</span>; }</span><br><span class="line"></span><br><span class="line"><span class="function">Point &amp;<span class="title">operator</span><span class="params">()</span><span class="params">( <span class="keyword">int</span> dx, <span class="keyword">int</span> dy )</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">_x += dx; _y += dy;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> _x, _y;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">Point pt;   <span class="comment">// 初始化为 (0, 0)</span></span><br><span class="line">pt( <span class="number">3</span>, <span class="number">2</span> ); <span class="comment">// 这他妈不是函数……</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;坑同事技巧+1&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C++" scheme="http://blog.iwxyi.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++异常规范</title>
    <link href="http://blog.iwxyi.com/2018/06/03/C-%E5%BC%82%E5%B8%B8%E8%A7%84%E8%8C%83/"/>
    <id>http://blog.iwxyi.com/2018/06/03/C-异常规范/</id>
    <published>2018-06-02T23:43:00.000Z</published>
    <updated>2019-10-13T00:41:05.464Z</updated>
    
    <content type="html"><![CDATA[<p>throw、try、catch</p><a id="more"></a><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handler</span><span class="params">()</span> </span>{</span><br><span class="line">printf_s(<span class="string">"in handler\n"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f1</span><span class="params">(<span class="keyword">void</span>)</span> <span class="title">throw</span><span class="params">(<span class="keyword">int</span>)</span> </span>{</span><br><span class="line">printf_s(<span class="string">"About to throw 1\n"</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="number">1</span>)</span><br><span class="line"><span class="keyword">throw</span> <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f5</span><span class="params">(<span class="keyword">void</span>)</span> <span class="title">throw</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="keyword">try</span> {</span><br><span class="line">f1();</span><br><span class="line">}</span><br><span class="line"><span class="keyword">catch</span>(...) {</span><br><span class="line">handler();</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//invalid, doesn't handle the int exception thrown from f1()</span></span><br><span class="line"><span class="comment">/*void f3(void) throw() {</span></span><br><span class="line"><span class="comment">f1();</span></span><br><span class="line"><span class="comment">}*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> __declspec(nothrow) f2(<span class="keyword">void</span>) {</span><br><span class="line"><span class="keyword">try</span> {</span><br><span class="line">f1();</span><br><span class="line">}</span><br><span class="line"><span class="keyword">catch</span>(<span class="keyword">int</span>) {</span><br><span class="line">handler();</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="function"><span class="keyword">void</span> <span class="title">f4</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f4</span><span class="params">(<span class="keyword">void</span>)</span> </span>{</span><br><span class="line">f1();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">f2();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> {</span><br><span class="line">f4();</span><br><span class="line">}</span><br><span class="line"><span class="keyword">catch</span>(...) {</span><br><span class="line">printf_s(<span class="string">"Caught exception from f4\n"</span>);</span><br><span class="line">}</span><br><span class="line">f5();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;throw、try、catch&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C++" scheme="http://blog.iwxyi.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++线程函数</title>
    <link href="http://blog.iwxyi.com/2018/06/03/C-%E7%BA%BF%E7%A8%8B%E5%87%BD%E6%95%B0/"/>
    <id>http://blog.iwxyi.com/2018/06/03/C-线程函数/</id>
    <published>2018-06-02T23:42:00.000Z</published>
    <updated>2019-10-12T23:43:27.749Z</updated>
    
    <content type="html"><![CDATA[<p><strong>线程随着 std::thread 类型实例的创建而创建</strong></p><p>从 C++ 11 开始，推荐使用<strong>列表初始化</strong>的方式，构造类类型的变量。</p><p>当函数的名字被当做一个值来使用的时候，实际上使用的是<strong>函数的指针</strong>。</p><a id="more"></a><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt; // 1</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">greeting</span><span class="params">()</span> </span>{ <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello multithread!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="built_in">std</span>::thread t{greeting}; <span class="comment">// 3</span></span><br><span class="line">t.join(); <span class="comment">// 4</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>std::thread wk_thread(ThreadTask());</code> // 1</p><p><code>std::thread wk_thread{ThreadTask{}};</code> // 2</p><p>在 (1) 处，作者的本意，是想构造一个 <code>ThreadTask</code> 实例，作为可调用对象作为 <code>wk_thread</code> 线程的线程函数。但实际上，<code>ThreadTask()</code> 是一个函数指针的类型——这个函数没有参数 (void)，返回值的类型是 <code>ThreadTask</code>。因此，整个 (1) 会被 C++ <strong>理解为一个函数声明</strong>：参数是一个函数指针（前述），返回类型是 <code>std::thread</code>。</p><p>构造函数和普通的函数是有一些不同的。构造函数执行完毕之后，就产生了一个可用的实例。产生这样误解的本质原因，是 <code>std::thread</code> 的<strong>构造函数也是函数</strong>，因而采用 <code>()</code> 接受参数列表；这样一来，从形式上构造函数就没有任何特殊性了。C++ 11 引入了列表初始化的概念，允许程序员以花括号代替圆括号，将参数传递给构造函数。这样一来，(2) 就没有歧义了。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;线程随着 std::thread 类型实例的创建而创建&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;从 C++ 11 开始，推荐使用&lt;strong&gt;列表初始化&lt;/strong&gt;的方式，构造类类型的变量。&lt;/p&gt;
&lt;p&gt;当函数的名字被当做一个值来使用的时候，实际上使用的是&lt;strong&gt;函数的指针&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C++" scheme="http://blog.iwxyi.com/tags/C/"/>
    
      <category term="多线程" scheme="http://blog.iwxyi.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>C++11 Lambda表达式</title>
    <link href="http://blog.iwxyi.com/2018/06/03/C-11-Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://blog.iwxyi.com/2018/06/03/C-11-Lambda表达式/</id>
    <published>2018-06-02T23:27:00.000Z</published>
    <updated>2019-10-12T23:33:26.965Z</updated>
    
    <content type="html"><![CDATA[<p>Lambda 可在其主体中引入新的变量（用 C++14），它还可以访问（或“捕获”）周边范围内的变量。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">abssort</span><span class="params">(<span class="keyword">float</span>* x, <span class="keyword">unsigned</span> n)</span> </span>{</span><br><span class="line"><span class="built_in">std</span>::sort(x, x + n,</span><br><span class="line">[](<span class="keyword">float</span> a, <span class="keyword">float</span> b) {</span><br><span class="line"><span class="keyword">return</span> (<span class="built_in">std</span>::<span class="built_in">abs</span>(a) &lt; <span class="built_in">std</span>::<span class="built_in">abs</span>(b));</span><br><span class="line">}</span><br><span class="line">);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><p>指定要捕获的变量以及是通过值还是引用进行捕获。 有<strong>与号 (&amp;)</strong> 前缀的变量通过<strong>引用</strong>访问，没有该前缀的变量通过<strong>值</strong>访问。</p><p>以使用默认捕获模式（标准语法中的 capture-default）来指示如何捕获 lambda 中引用的任何外部变量：<code>[&amp;]</code> 表示通过引用捕获引用的所有变量，而 <code>[=]</code> 表示通过值捕获它们。 可以使用默认捕获模式，然后为特定变量显式指定相反的模式。 （引用和值，效果同函数形参）</p><p>例如，如果 lambda 体通过引用访问外部变量 total 并通过值访问外部变量 factor，则以下 capture 子句等效：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[&amp;total, factor]</span><br><span class="line">[factor, &amp;total]</span><br><span class="line">[&amp;, factor]</span><br><span class="line">[factor, &amp;]</span><br><span class="line">[=, &amp;total]</span><br><span class="line">[&amp;total, =]</span><br></pre></td></tr></tbody></table></figure><p><code>identifier(&amp;/=)</code> 或 <code>this</code> 在 capture 子句中出现的次数不能超过一次。示例：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span> {</span> <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> i)</span></span>; };</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> S::f(<span class="keyword">int</span> i) {</span><br><span class="line">[&amp;, i]{}; <span class="comment">// OK</span></span><br><span class="line">[&amp;, &amp;i]{}; <span class="comment">// ERROR: i preceded by &amp; when &amp; is the default</span></span><br><span class="line">[=, <span class="keyword">this</span>]{}; <span class="comment">// ERROR: this when = is the default</span></span><br><span class="line">[i, i]{}; <span class="comment">// ERROR: i repeated</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>包扩展：capture 后跟省略号<br>可变参数模板</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span>... <span class="title">Args</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">f</span>(<span class="title">Args</span>... <span class="title">args</span>) {</span></span><br><span class="line"><span class="keyword">auto</span> x = [args...] { <span class="keyword">return</span> g(args...); };</span><br><span class="line">x();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>参数列表</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> y = [] (<span class="keyword">int</span> first, <span class="keyword">int</span> second)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">return</span> first + second;</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C++14，创建模板</span></span><br><span class="line"><span class="keyword">auto</span> y = [] (<span class="keyword">auto</span> first, <span class="keyword">auto</span> second)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">return</span> first + second;</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>在 C++14 中，如果参数类型是泛型，则可以使用 <code>auto</code> 关键字作为类型说明符。 这将告知编译器将函数调用运算符创建为模板。 参数列表中的每个 <code>auto</code> 实例等效于一个不同的类型参数。</p><p>异常规范</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> <span class="comment">// C4297 expected</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">[]() <span class="keyword">throw</span>() { <span class="keyword">throw</span> <span class="number">5</span>; }();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>返回类型</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> x1 = [](<span class="keyword">int</span> i){ <span class="keyword">return</span> i; }; <span class="comment">// OK: return type is int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> x2 = []{ <span class="keyword">return</span>{ <span class="number">1</span>, <span class="number">2</span> }; }; <span class="comment">// ERROR: return type is void, deducing</span></span><br><span class="line"><span class="comment">// return type from braced-init-list is not valid</span></span><br></pre></td></tr></tbody></table></figure><p>lambda 表达式可以生成另一个 lambda 表达式作为其返回值。</p><p>通过值显式捕获变量 n 并通过引用隐式捕获变量 m 的 lambda 表达式：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">[&amp;, n] (<span class="keyword">int</span> a) <span class="keyword">mutable</span> { m = ++n + a; }(<span class="number">4</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; m &lt;&lt; <span class="string">" "</span> &lt;&lt; n &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 输出：5 0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>mutable</code> 规范允许在 lambda 中修改 n。</p><p>示例：使用 <code>generate</code> 函数和 lambda 表达式为 <code>vector</code> 对象中的每个元素赋值。 lambda 表达式将修改静态变量以生成下一个元素的值。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fillVector</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; v)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> nextValue = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">generate(v.begin(), v.end(), [] { <span class="keyword">return</span> nextValue++; }); <span class="comment">// generate 函数见：生成 ‎</span></span><br><span class="line"><span class="comment">//WARNING: not thread-safe and …</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> C&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; s, <span class="keyword">const</span> C&amp; c)</span> </span>{</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; e : c) {</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; e &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> elementCount = <span class="number">9</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v(elementCount, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">1</span>, y = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//斐波那契：每个等于前两个的和</span></span><br><span class="line">generate_n(v.begin() + <span class="number">2</span>, elementCount - <span class="number">2</span>,</span><br><span class="line">[=]() <span class="keyword">mutable</span> <span class="keyword">throw</span>() -&gt; <span class="keyword">int</span> {</span><br><span class="line"><span class="keyword">int</span> n = x + y;</span><br><span class="line">x = y; y = n;</span><br><span class="line"><span class="keyword">return</span> n;</span><br><span class="line">});</span><br><span class="line">print(<span class="string">"vector v after call to generate_n() with lambda: "</span>, v);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"x: "</span> &lt;&lt; x &lt;&lt; <span class="string">" y: "</span> &lt;&lt; y &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// x y 仍为1</span></span><br><span class="line"></span><br><span class="line">fillVector(v);</span><br><span class="line">print(<span class="string">"vector v after 1st call to fillVector(): "</span>, v);</span><br><span class="line"></span><br><span class="line">fillVector(v);</span><br><span class="line">print(<span class="string">"vector v after 2nd call to fillVector(): "</span>, v);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>输出：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vector v after call to generate_n() with lambda: 1 1 2 3 5 8 13 21 34</span><br><span class="line">x: 1 y: 1</span><br><span class="line">vector v after 1st call to fillVector(): 1 2 3 4 5 6 7 8 9</span><br><span class="line">vector v after 2nd call to fillVector(): 10 11 12 13 14 15 16 17 18</span><br></pre></td></tr></tbody></table></figure><blockquote><p>参考：<a href="https://msdn.microsoft.com/zh-cn/library/dd293608.aspx" target="_blank" rel="noopener">https://msdn.microsoft.com/zh-cn/library/dd293608.aspx</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Lambda 可在其主体中引入新的变量（用 C++14），它还可以访问（或“捕获”）周边范围内的变量。&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;cmath&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;abssort&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt;* x, &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; n)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::sort(x, x + n,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		[](&lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; a, &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; b) {&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;abs&lt;/span&gt;(a) &amp;lt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;abs&lt;/span&gt;(b));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C++11" scheme="http://blog.iwxyi.com/tags/C-11/"/>
    
      <category term="Lambda" scheme="http://blog.iwxyi.com/tags/Lambda/"/>
    
  </entry>
  
  <entry>
    <title>VC++ ATL对象的COM组件</title>
    <link href="http://blog.iwxyi.com/2018/06/01/VC-ATL%E5%AF%B9%E8%B1%A1%E7%9A%84COM%E7%BB%84%E4%BB%B6/"/>
    <id>http://blog.iwxyi.com/2018/06/01/VC-ATL对象的COM组件/</id>
    <published>2018-06-01T02:05:00.000Z</published>
    <updated>2019-10-13T02:07:41.455Z</updated>
    
    <content type="html"><![CDATA[<p>使用 ATL 开发和调用 COM 组件</p><a id="more"></a><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdafx.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ATL1.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ATL1_i.c"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">ITest * pITest;</span><br><span class="line">HRESULT hResult;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (CoInitialize(<span class="literal">NULL</span>) != S_OK) </span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Initialize COM library failed!n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">GUID ATL1CLSID;</span><br><span class="line">hResult = ::CLSIDFromProgID(<span class="string">L"ATL1.Test"</span>, &amp;ATL1CLSID);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (hResult != S_OK) </span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Can't find the ATL1 CLSID!n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">hResult = CoCreateInstance(ATL1CLSID, <span class="literal">NULL</span>, CLSCTX_INPROC_SERVER, IID_ITest, (<span class="keyword">void</span> **)&amp;pITest);</span><br><span class="line"><span class="keyword">if</span> (hResult != S_OK) </span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Create object failed!n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Call ITest interface's functions...n"</span>);</span><br><span class="line"><span class="keyword">double</span> k;</span><br><span class="line"><span class="keyword">double</span> *ans = &amp;k;</span><br><span class="line">pITest-&gt;getArea(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, ans);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"3,4,5=%.2lfn"</span>,*ans);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Test over...n"</span>);</span><br><span class="line"></span><br><span class="line">pITest-&gt;Release();</span><br><span class="line">CoUninitialize();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用 ATL 开发和调用 COM 组件&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="VC++" scheme="http://blog.iwxyi.com/tags/VC/"/>
    
  </entry>
  
  <entry>
    <title>嵌套循环优化</title>
    <link href="http://blog.iwxyi.com/2018/05/20/%E5%B5%8C%E5%A5%97%E5%BE%AA%E7%8E%AF%E4%BC%98%E5%8C%96/"/>
    <id>http://blog.iwxyi.com/2018/05/20/嵌套循环优化/</id>
    <published>2018-05-20T11:50:00.000Z</published>
    <updated>2019-10-12T12:14:07.126Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>请对以下的代码进行优化：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++)  </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">100</span>; j++)  </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">10</span>; k++)  </span><br><span class="line">            testFunction (i, j, k);</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>从给出的代码可知，不论如何优化，testFunction执行的次数都是相同的，该部分不存在优化的可能。那么，代码的优化只能从循环变量i、j、k的实例化、初始化、比较、自增等方面的耗时上进行分析。</p><p>首先，我们先分析原题代码循环变量在实例化、初始化、比较、自增等方面的耗时情况： </p><table><thead><tr><th>变量</th><th>实例化(次数)</th><th>初始化(次数)</th><th>比较(次数)</th><th>自增(次数)</th></tr></thead><tbody><tr><td>i</td><td>1</td><td>1</td><td>1000</td><td>1000</td></tr><tr><td>j</td><td>1000</td><td>1000</td><td>1000 * 100</td><td>1000 * 100</td></tr><tr><td>k</td><td>1000 * 100</td><td>1000 * 100</td><td>1000 * 100 * 10</td><td>1000 * 100 * 10</td></tr></tbody></table><p>该代码的性能优化就是尽可能减少循环变量i、j、k的实例化、初始化、比较、自增的次数，同时，不能引进其它可能的运算耗时。 </p><h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)  </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">100</span>; j++)  </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">1000</span>; k++)  </span><br><span class="line">            testFunction (k, j, i);</span><br></pre></td></tr></tbody></table></figure><p>该方案主要是将循环次数最少的放到外面，循环次数最多的放里面，这样可以最大程度的（注：3个不同次数的循环变量共有6种排列组合情况，此种组合为最优）减少相关循环变量的实例化次数、初始化次数、比较次数、自增次数，方案耗时情况如下： </p><table><thead><tr><th>变量</th><th>实例化(次数)</th><th>初始化(次数)</th><th>比较(次数)</th><th>自增(次数)</th></tr></thead><tbody><tr><td>i</td><td>1</td><td>1</td><td>10</td><td>10</td></tr><tr><td>j</td><td>10</td><td>10</td><td>10 * 100</td><td>10 * 100</td></tr><tr><td>k</td><td>10 * 100</td><td>10 * 100</td><td>10 * 100 * 1000</td><td>10 * 100 * 1000</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;请对以下的代码进行优化：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;; i++)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j &amp;lt; &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;; j++)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; k = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; k &amp;lt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;; k++)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            testFunction (i, j, k);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C" scheme="http://blog.iwxyi.com/tags/C/"/>
    
      <category term="优化" scheme="http://blog.iwxyi.com/tags/%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>MFC常用控件</title>
    <link href="http://blog.iwxyi.com/2018/05/15/MFC%E5%B8%B8%E7%94%A8%E6%8E%A7%E4%BB%B6/"/>
    <id>http://blog.iwxyi.com/2018/05/15/MFC常用控件/</id>
    <published>2018-05-15T02:10:00.000Z</published>
    <updated>2019-10-13T02:14:00.079Z</updated>
    
    <content type="html"><![CDATA[<h2 id="静态文本框"><a href="#静态文本框" class="headerlink" title="静态文本框"></a>静态文本框</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m_stext.SetWindowTextW(TEXT(<span class="string">"Hello"</span>));</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><h2 id="编辑框"><a href="#编辑框" class="headerlink" title="编辑框"></a>编辑框</h2><h3 id="基本函数"><a href="#基本函数" class="headerlink" title="基本函数"></a>基本函数</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">m_Edit1.SetSel(<span class="number">0</span>,<span class="number">-1</span>);<span class="comment">//表示选中编辑框IDC_EDIT1中的全部内容。</span></span><br><span class="line">m_Edit1.ReplaceSel(<span class="string">""</span>);<span class="comment">//用空字符串代替所选中的文本，即把所选的文本删除掉</span></span><br><span class="line">m_Edit1.Copy();<span class="comment">//将m_Editl编辑框中所选的内容拷贝到剪贴板上</span></span><br><span class="line">m_Edit2.Paste();<span class="comment">//将剪贴板中的内容粘贴到m_Edit2编辑框中</span></span><br><span class="line">m_Edit1.Undo();<span class="comment">// Undo（）函数是CEdit类中的成员函数，表示取消编辑框中上一次操作</span></span><br><span class="line">m_Edit1.GetWindowText(str, <span class="number">10</span>); <span class="comment">// 将内容放到字符串上，参数2是长度（包括\0）</span></span><br></pre></td></tr></tbody></table></figure><h3 id="数值与控件转换"><a href="#数值与控件转换" class="headerlink" title="数值与控件转换"></a>数值与控件转换</h3><p>IDC_EDIT1 绑定 int 变量 m_A</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">UpdateData(TRUE); <span class="comment">// 刷新成数值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i=m_A*m_B;</span><br><span class="line">m_Result.Format(<span class="string">"%d"</span>, i);</span><br><span class="line"></span><br><span class="line">UpdateData(FALSE); <span class="comment">// 刷新回控件</span></span><br></pre></td></tr></tbody></table></figure><h2 id="图像框"><a href="#图像框" class="headerlink" title="图像框"></a>图像框</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="组框-Group-Box"><a href="#组框-Group-Box" class="headerlink" title="组框 Group Box"></a>组框 Group Box</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h2><p>按下按钮</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m_btn1.SetWindowText(<span class="string">"你已按下了按钮！"</span>);</span><br></pre></td></tr></tbody></table></figure><h2 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(m_chk1.GetCheck()&gt;<span class="number">0</span>)</span><br><span class="line">    m_chk1.SetCheck(<span class="number">0</span>);</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line">    m_chk1.SetCheck(<span class="number">1</span>);</span><br></pre></td></tr></tbody></table></figure><h2 id="单选框"><a href="#单选框" class="headerlink" title="单选框"></a>单选框</h2><h3 id="按下单选框"><a href="#按下单选框" class="headerlink" title="按下单选框"></a>按下单选框</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m_rad1.SetCheck(<span class="number">1</span>);</span><br></pre></td></tr></tbody></table></figure><h3 id="初始化选中"><a href="#初始化选中" class="headerlink" title="初始化选中"></a>初始化选中</h3><p>给一组单选按钮中的一个指定按钮加上选中标志，并且清除组中其他按钮的选中标志。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">CheckRadioButton</span><span class="params">([HWND hDlg,] <span class="keyword">int</span> nlDFirstButton, <span class="keyword">int</span> nlDLastBUtton, <span class="keyword">int</span> nlDCheckButton)</span></span></span><br></pre></td></tr></tbody></table></figure><h3 id="获取状态"><a href="#获取状态" class="headerlink" title="获取状态"></a>获取状态</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> iSexRADIO = GetCheckedRadioButton(IDC_BOY_RADIO, IDC_GIRL_RADIO); <span class="comment">// 参数是第一个和最后一个</span></span><br><span class="line"><span class="keyword">if</span> (iSexRADIO == IDC_BOY_RADIO)</span><br><span class="line">;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">;</span><br></pre></td></tr></tbody></table></figure><h2 id="组合框"><a href="#组合框" class="headerlink" title="组合框"></a>组合框</h2><h3 id="初始化时添加下拉列表框项目"><a href="#初始化时添加下拉列表框项目" class="headerlink" title="初始化时添加下拉列表框项目"></a>初始化时添加下拉列表框项目</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m_cb.AddString(<span class="string">"Monday"</span>); <span class="comment">// 添加项目</span></span><br></pre></td></tr></tbody></table></figure><h3 id="初始化时选中字符串"><a href="#初始化时选中字符串" class="headerlink" title="初始化时选中字符串"></a>初始化时选中字符串</h3><p><code>SelectString</code>：搜索在组合框的列表框中的字符串，如果找到该字符串，选择列表框和复制的字符串到编辑控件。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m_Combo.SelectString(<span class="number">-1</span>, <span class="string">"a"</span>); <span class="comment">// 参数1：从0开始的索引，-1为全部；参数2：搜索词，区分大小写</span></span><br></pre></td></tr></tbody></table></figure><h3 id="获取并弹出选中项目"><a href="#获取并弹出选中项目" class="headerlink" title="获取并弹出选中项目"></a>获取并弹出选中项目</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CString msg;</span><br><span class="line">m_cb.GetLBText(m_cb.GetCurSel(), msg);</span><br><span class="line">AfxMessageBox(msg);</span><br></pre></td></tr></tbody></table></figure><h2 id="列表框"><a href="#列表框" class="headerlink" title="列表框"></a>列表框</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="水平滚动条"><a href="#水平滚动条" class="headerlink" title="水平滚动条"></a>水平滚动条</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="垂直滚动条"><a href="#垂直滚动条" class="headerlink" title="垂直滚动条"></a>垂直滚动条</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="旋转-Spin"><a href="#旋转-Spin" class="headerlink" title="旋转 Spin"></a>旋转 Spin</h2><p>滑块的滚动事件在对话框的事件里，与其他控件不同。<br>为什么？它就是这样设计的。</p><p>初始化</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CSpinButtonCtrl* pSpin =(CSpinButtonCtrl*) GetDlgItem(IDC_SPIN1);</span><br><span class="line">pSpin-&gt;SetRange(<span class="number">0</span>, <span class="number">100</span>);</span><br></pre></td></tr></tbody></table></figure><p>滚动事件</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> CTestDlg::OnVScroll(UINT nSBCode, UINT nPos, CScrollBar* pScrollBar) </span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (pScrollBar-&gt;GetDlgCtrlID() == IDC_SPIN1)</span><br><span class="line">{</span><br><span class="line">CString strValue;</span><br><span class="line">strValue.Format(<span class="string">"%3.1f"</span>, (<span class="keyword">double</span>) nPos / <span class="number">10.0</span>); <span class="comment">// 共3位，小数点后1位</span></span><br><span class="line">( (CSpinButtonCtrl*) pScrollBar )-&gt;GetBuddy()-&gt;SetWindowText(strValue);</span><br><span class="line">}</span><br><span class="line">CDialog::OnVScroll(nSBCode, nPos, pScrollBar);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="进度条-Progress"><a href="#进度条-Progress" class="headerlink" title="进度条 Progress"></a>进度条 Progress</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CProgressCtrl* pProg = (CProgressCtrl*) GetDlgItem(IDC_PROGRESS1);</span><br><span class="line">pSlide1-&gt;SetRange(<span class="number">0</span>, <span class="number">100</span>); <span class="comment">// 范围</span></span><br><span class="line">pProg-&gt;SetPos(<span class="number">0</span>); <span class="comment">// 进度=0</span></span><br><span class="line">pProg-&gt;SetPos( pProg-&gt;GetPos()+<span class="number">1</span> ); <span class="comment">// 获取进度并+1</span></span><br></pre></td></tr></tbody></table></figure><h2 id="滑块"><a href="#滑块" class="headerlink" title="滑块"></a>滑块</h2><p>滑块事件也是在对话框滚动事件里面。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> CTestDlg::OnHScroll(UINT nSBCode, UINT nPos, CScrollBar* pScrollBar) </span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(pScrollBar-&gt;GetDlgCtrlID() == IDC_SLIDER1) </span><br><span class="line">{</span><br><span class="line">CSliderCtrl* pSlide = (CSliderCtrl*) pScrollBar;</span><br><span class="line">CString strText;</span><br><span class="line">strText.Format(<span class="string">"%d"</span>, pSlide-&gt;GetPos());</span><br><span class="line">SetDlgItemText(IDC_STATIC_SLIDER, strText);<span class="comment">// 滑块位置显示到编辑框里</span></span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="热键"><a href="#热键" class="headerlink" title="热键"></a>热键</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="列表控件"><a href="#列表控件" class="headerlink" title="列表控件"></a>列表控件</h2><p>初始化</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> * color[] = {<span class="string">"white"</span>,<span class="string">"black"</span>,<span class="string">"red"</span>,<span class="string">"blue"</span>,<span class="string">"yellow"</span>,<span class="string">"cyan"</span>,<span class="string">"purple"</span>,<span class="string">"green"</span>};</span><br><span class="line">HICON hIcon[<span class="number">8</span>];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">m_imageList.Create(<span class="number">16</span>,<span class="number">16</span>,<span class="number">0</span>,<span class="number">8</span>,<span class="number">8</span>); </span><br><span class="line">hIcon[<span class="number">0</span>] = AfxGetApp()-&gt;LoadIcon(IDI_ICON_WHITE);</span><br><span class="line">hIcon[<span class="number">1</span>] = ...略...</span><br><span class="line"><span class="keyword">for</span> (n=<span class="number">0</span>;n&lt;<span class="number">8</span>;n++)</span><br><span class="line">m_imageList.Add(hIcon[n]);</span><br><span class="line"></span><br><span class="line">CListCtrl* pList = (CListCtrl*) GetDlgItem(IDC_LIST1);    <span class="comment">// 获得控件对象</span></span><br><span class="line">pList-&gt;SetImageList(&amp;m_imageList, LVSIL_SMALL);    <span class="comment">// 设置小图标图片列表</span></span><br><span class="line"><span class="keyword">for</span> (n = <span class="number">0</span>; n &lt; <span class="number">8</span>; n++) </span><br><span class="line">pList-&gt;InsertItem(n, color[n], n);<span class="comment">// 第一个参数为项id，第二个为标签文字，第三个为对应图片列表id</span></span><br><span class="line">pList-&gt;SetBkColor(RGB(<span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>));<span class="comment">// 设置背景色</span></span><br><span class="line">pList-&gt;SetTextBkColor(RGB(<span class="number">255</span>, <span class="number">0</span>, <span class="number">255</span>));    <span class="comment">//设置文字的背景色</span></span><br></pre></td></tr></tbody></table></figure><p>事件</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> CTestDlg::OnItemchangedList1(NMHDR* pNMHDR, LRESULT* pResult) <span class="comment">// 选中，修改用来显示的标签</span></span><br><span class="line">{</span><br><span class="line">NM_LISTVIEW* pNMListView = (NM_LISTVIEW*)pNMHDR;</span><br><span class="line">CListCtrl* pList = (CListCtrl*) GetDlgItem(IDC_LIST1);</span><br><span class="line"><span class="keyword">int</span> nSelected = pNMListView-&gt;iItem;</span><br><span class="line"><span class="keyword">if</span> (nSelected &gt;= <span class="number">0</span>) </span><br><span class="line">{</span><br><span class="line">CString strItem = pList-&gt;GetItemText(nSelected, <span class="number">0</span>);</span><br><span class="line">SetDlgItemText(IDC_STATIC_LIST, strItem);</span><br><span class="line">}</span><br><span class="line">*pResult = <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CTestDlg::OnRclickList1(NMHDR* pNMHDR, LRESULT* pResult) <span class="comment">// 右键修改成输入文本</span></span><br><span class="line">{</span><br><span class="line">NM_LISTVIEW* pNMListView = (NM_LISTVIEW*)pNMHDR;</span><br><span class="line">CListCtrl* pList = (CListCtrl*) GetDlgItem(IDC_LIST1);</span><br><span class="line"><span class="keyword">int</span> nSelected = pNMListView-&gt;iItem;</span><br><span class="line"><span class="keyword">if</span> (nSelected &gt;= <span class="number">0</span>) </span><br><span class="line">pList-&gt;EditLabel(nSelected);</span><br><span class="line">*pResult = <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CTestDlg::OnEndlabeleditList1(NMHDR* pNMHDR, LRESULT* pResult) <span class="comment">// 选中后并单击编辑</span></span><br><span class="line">{</span><br><span class="line">LV_DISPINFO* pDispInfo = (LV_DISPINFO*)pNMHDR;</span><br><span class="line">LVITEMA item = pDispInfo-&gt;item;</span><br><span class="line">CString str =item.pszText;</span><br><span class="line">str.TrimLeft();</span><br><span class="line">str.TrimRight();</span><br><span class="line"><span class="keyword">if</span>(str.GetLength() &gt; <span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line">CListCtrl* pList = (CListCtrl*) GetDlgItem(IDC_LIST1);</span><br><span class="line">pList-&gt;SetItemText(item.iItem, item.iSubItem, item.pszText);</span><br><span class="line">}</span><br><span class="line">*pResult = <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="树状控件"><a href="#树状控件" class="headerlink" title="树状控件"></a>树状控件</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">CTreeCtrl* pTree =(CTreeCtrl*) GetDlgItem(IDC_TREE1);</span><br><span class="line">pTree-&gt;SetImageList(&amp;m_imageList, TVSIL_NORMAL); <span class="comment">// 设置图片列表</span></span><br><span class="line"></span><br><span class="line">TV_INSERTSTRUCT tvinsert;           <span class="comment">// 创建待插入的TV_INSERTSTRUCT结构</span></span><br><span class="line">tvinsert.hParent = <span class="literal">NULL</span>;<span class="comment">// 无父结点</span></span><br><span class="line">tvinsert.hInsertAfter = TVI_LAST;<span class="comment">// 插入到本层最后</span></span><br><span class="line">tvinsert.item.mask = TVIF_IMAGE | TVIF_SELECTEDIMAGE| TVIF_TEXT;</span><br><span class="line"><span class="comment">// 掩码包括   图标         选中图标            文字</span></span><br><span class="line">tvinsert.item.hItem = <span class="literal">NULL</span>;<span class="comment">// 句柄为空</span></span><br><span class="line">tvinsert.item.state = <span class="number">0</span>;<span class="comment">// 状态</span></span><br><span class="line">tvinsert.item.stateMask = <span class="number">0</span>;<span class="comment">// 状态掩码，不使用这两项</span></span><br><span class="line">tvinsert.item.cchTextMax = <span class="number">6</span>;<span class="comment">// 最大文字长度，忽略</span></span><br><span class="line">tvinsert.item.iSelectedImage = <span class="number">1</span>;<span class="comment">// 选中图标索引</span></span><br><span class="line">tvinsert.item.cChildren = <span class="number">0</span>;<span class="comment">// 没有子节点</span></span><br><span class="line">tvinsert.item.lParam = <span class="number">0</span>;<span class="comment">// 自定义数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一层</span></span><br><span class="line">tvinsert.item.iImage = <span class="number">2</span>;<span class="comment">// 一般图标</span></span><br><span class="line"></span><br><span class="line">tvinsert.item.pszText = <span class="string">"father"</span>;   <span class="comment">// 插入第一层第一个节点"father"</span></span><br><span class="line">HTREEITEM hDad = pTree -&gt;InsertItem(&amp;tvinsert);</span><br><span class="line"></span><br><span class="line">tvinsert.item.pszText = <span class="string">"mother"</span>;   <span class="comment">// 插入第一层第二个节点"mother"</span></span><br><span class="line">HTREEITEM hMom = pTree-&gt;InsertItem(&amp;tvinsert);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建第二层</span></span><br><span class="line">tvinsert.hParent = hDad;<span class="comment">// 父节点为"father"</span></span><br><span class="line">tvinsert.item.iImage = <span class="number">3</span>;<span class="comment">// 一般图标</span></span><br><span class="line"></span><br><span class="line">tvinsert.item.pszText = <span class="string">"son"</span>;      <span class="comment">// 插入第二层"father"的第一个节点"son"</span></span><br><span class="line">pTree-&gt;InsertItem(&amp;tvinsert);</span><br><span class="line"></span><br><span class="line">tvinsert.item.pszText = <span class="string">"daughter"</span>;  <span class="comment">// 插入第二层"father"的第二个节点"daughter"</span></span><br><span class="line">pTree-&gt;InsertItem(&amp;tvinsert);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 还是创建第二层，但是父节点变成 Mom</span></span><br><span class="line">tvinsert.hParent = hMom;<span class="comment">// 父结点为"mother"</span></span><br><span class="line">tvinsert.item.iImage = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">tvinsert.item.pszText = <span class="string">"cartoon"</span>;  <span class="comment">// 插入第二层"mother"的节点"cartoon"</span></span><br><span class="line">HTREEITEM hOther = pTree-&gt;InsertItem(&amp;tvinsert);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建第三层</span></span><br><span class="line">tvinsert.hParent = hOther; <span class="comment">// 连续不断地创建</span></span><br></pre></td></tr></tbody></table></figure><p>事件</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> CTestDlg::OnSelchangedTree1(NMHDR* pNMHDR, LRESULT* pResult) <span class="comment">// 被选中，修改选中项的图标</span></span><br><span class="line">{</span><br><span class="line">NM_TREEVIEW* pNMTreeView = (NM_TREEVIEW*)pNMHDR;</span><br><span class="line">CTreeCtrl* pTree =(CTreeCtrl*) GetDlgItem(IDC_TREE1);</span><br><span class="line">HTREEITEM hSelected = pNMTreeView-&gt;itemNew.hItem;</span><br><span class="line"><span class="keyword">if</span> (hSelected != <span class="literal">NULL</span>) {</span><br><span class="line"><span class="keyword">char</span> text[<span class="number">31</span>];</span><br><span class="line">TV_ITEM item;</span><br><span class="line">item.mask = TVIF_HANDLE | TVIF_TEXT;</span><br><span class="line">item.hItem = hSelected;</span><br><span class="line">item.pszText = text;</span><br><span class="line">item.cchTextMax = <span class="number">30</span>;</span><br><span class="line">VERIFY(pTree-&gt;GetItem(&amp;item));</span><br><span class="line">SetDlgItemText(IDC_STATIC_TREE, text);</span><br><span class="line">}</span><br><span class="line">*pResult = <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CTestDlg::OnEndlabeleditTree1(NMHDR* pNMHDR, LRESULT* pResult) <span class="comment">// 选中后并单击编辑</span></span><br><span class="line">{</span><br><span class="line">TV_DISPINFO* pTVDispInfo = (TV_DISPINFO*)pNMHDR;</span><br><span class="line">TVITEMA item = pTVDispInfo-&gt;item;</span><br><span class="line">CString str =item.pszText;</span><br><span class="line">str.TrimLeft();</span><br><span class="line">str.TrimRight();</span><br><span class="line"><span class="keyword">if</span>(str.GetLength() &gt; <span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line">CTreeCtrl* pTree =(CTreeCtrl*) GetDlgItem(IDC_TREE1);</span><br><span class="line">pTree-&gt;SetItemText(item.hItem,item.pszText);</span><br><span class="line">}</span><br><span class="line">*pResult = <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="Tab控件"><a href="#Tab控件" class="headerlink" title="Tab控件"></a>Tab控件</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="富文本-Rich-Edit"><a href="#富文本-Rich-Edit" class="headerlink" title="富文本 Rich Edit"></a>富文本 Rich Edit</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="月历"><a href="#月历" class="headerlink" title="月历"></a>月历</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="日期时间选择器"><a href="#日期时间选择器" class="headerlink" title="日期时间选择器"></a>日期时间选择器</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CDateTimeCtrl* pDT =(CDateTimeCtrl*) GetDlgItem(IDC_DATETIMEPICKER1);</span><br><span class="line">CString formatStr= _T(<span class="string">"'今天是: 'yy'/'MM'/'dd"</span>);</span><br><span class="line">pDT-&gt;SetFormat(formatStr); <span class="comment">// 设置控件内容的格式</span></span><br><span class="line"></span><br><span class="line">CTime t;</span><br><span class="line">pDT-&gt;GetTime(t);</span><br><span class="line">CString s = t.Format( <span class="string">"%A, %B %d, %Y %H:%M:%S"</span> );</span><br><span class="line">AfxMessageBox(s);</span><br></pre></td></tr></tbody></table></figure><h2 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="自定义控件"><a href="#自定义控件" class="headerlink" title="自定义控件"></a>自定义控件</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="扩展组合框"><a href="#扩展组合框" class="headerlink" title="扩展组合框"></a>扩展组合框</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;静态文本框&quot;&gt;&lt;a href=&quot;#静态文本框&quot; class=&quot;headerlink&quot; title=&quot;静态文本框&quot;&gt;&lt;/a&gt;静态文本框&lt;/h2&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;m_stext.SetWindowTextW(TEXT(&lt;span class=&quot;string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="MFC" scheme="http://blog.iwxyi.com/tags/MFC/"/>
    
  </entry>
  
  <entry>
    <title>VC++复制控件</title>
    <link href="http://blog.iwxyi.com/2018/05/15/VC-%E5%A4%8D%E5%88%B6%E6%8E%A7%E4%BB%B6/"/>
    <id>http://blog.iwxyi.com/2018/05/15/VC-复制控件/</id>
    <published>2018-05-15T01:35:00.000Z</published>
    <updated>2019-10-13T01:37:04.165Z</updated>
    
    <content type="html"><![CDATA[<p>vc中如何拷贝一个工程的对话框资源到另一个工程中?</p><p>方法一：在你的工程中添加另一个工程的rc文件，这时资源视图中就会出现两个rc,从后加的rc中拷贝资源到你自己工程的rc中就可以了。</p><a id="more"></a><hr><p>在VC6环境下，选择Class视图，选中想要克隆的对话框所对应的类，例如CAboutDlg，点击鼠标右键，选择Add to gallery。在新工程中选择Project菜单，选择Add Component and ActivX，你会看到多了一个文件夹（与上一个工程同名），进入该文件夹，选择*.ogx。选择Insert，你会发现原来的对话框被加入到新的工程中了！</p><p>补充：</p><p>.net下更简单，将原来的工程加到新的工程中，直接将对话框拷贝过去就行了！</p><hr><p>VC++中如何复制对话框资源</p><p>第一步：用记事本打开原工程的.rc文件，找到想复制的对话框的信息，如下所示</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">IDD_UGMS_DIALOGDIALOGEX 0, 0, 320, 230</span><br><span class="line">STYLE WS_CHILD | WS_VISIBLE</span><br><span class="line">EXSTYLE WS_EX_APPWINDOW</span><br><span class="line">FONT 9, "宋体"</span><br><span class="line">BEGIN</span><br><span class="line">  GROUPBOX      "学生信息",IDC_STATIC,10,8,290,200</span><br><span class="line">  GROUPBOX      "",IDC_STATIC,25,55,205,120</span><br><span class="line">  PUSHBUTTON    "最前(&amp;F)",IDC_BUTTON_FIRST,30,30,35,15</span><br><span class="line">  PUSHBUTTON    "向前(&amp;B)",IDC_BUTTON_PRE,82,30,35,15</span><br><span class="line">  PUSHBUTTON    "向后(&amp;N)",IDC_BUTTON_NEXT,134,30,35,15</span><br><span class="line">  PUSHBUTTON    "最后(&amp;L)",IDC_BUTTON_LAST,186,30,35,15</span><br><span class="line">  PUSHBUTTON    "查询(&amp;Q)",IDC_BUTTON_QUERY,246,70,40,15</span><br><span class="line">  PUSHBUTTON    "增加(&amp;A)",IDC_BUTTON_ADD,246,96,40,15</span><br><span class="line">  PUSHBUTTON    "修改(&amp;M)",IDC_BUTTON_MODIFY,246,122,40,15</span><br><span class="line">  PUSHBUTTON    "删除(&amp;D)",IDC_BUTTON_DELETE,246,148,40,15</span><br><span class="line">  PUSHBUTTON    "确定(&amp;O)",IDC_BUTTON_OK,58,183,40,15</span><br><span class="line">  PUSHBUTTON    "取消(&amp;C)",IDC_BUTTON_CANCEL,150,183,40,15</span><br><span class="line">  LTEXT          "学号：",IDC_STATIC,52,75,25,8</span><br><span class="line">  LTEXT          "姓名：",IDC_STATIC,52,100,25,8</span><br><span class="line">  LTEXT          "性别：",IDC_STATIC,52,125,25,8</span><br><span class="line">  LTEXT          "入学时间：",IDC_STATIC,44,151,41,8</span><br><span class="line">  EDITTEXT      IDC_EDIT_SID,91,72,95,15,ES_AUTOHSCROLL</span><br><span class="line">  EDITTEXT      IDC_EDIT_SNAME,91,96,95,15,ES_AUTOHSCROLL</span><br><span class="line">  EDITTEXT      IDC_EDIT_SSEX,91,120,95,15,ES_AUTOHSCROLL</span><br><span class="line">  CONTROL        "DateTimePicker1",IDC_DATETIMEPICKER_SCOMEDATE, "SysDateTimePick32",DTS_RIGHTALIGN | WS_TABSTOP,91,144, 95,15</span><br><span class="line">  GROUPBOX      "",IDC_STATIC,25,19,205,35</span><br><span class="line">END</span><br></pre></td></tr></tbody></table></figure><p>上面代码中绿色背景代表的是要复制的对话框资源的ID，此段代码也就是.rc文件中记录的此对话框的信息，黄色背景中间的代码就是</p><p>相应对话框中添加的控件信息，只需将相应代码拷到新工程的相应.rc文件相应的ID对话框资源的BEGIN 和END之间即可；</p><p>第二步：打开原工程的FileView视图下的Header Files 下的resource.h文件，将其中相应ID的信息复制到新工程的resource.h中即可；</p><p>例如：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//复制的资源ID</span><br><span class="line">#define IDC_BUTTON_FIRST              1000</span><br><span class="line">#define IDC_BUTTON_PRE                1001</span><br><span class="line">#define IDC_BUTTON_NEXT              1002</span><br><span class="line">#define IDC_BUTTON_LAST              1003</span><br><span class="line">#define IDC_BUTTON_QUERY              1004</span><br><span class="line">#define IDC_BUTTON_ADD                1005</span><br><span class="line">#define IDC_BUTTON_MODIFY              1006</span><br><span class="line">#define IDC_BUTTON_DELETE              1007</span><br><span class="line">#define IDC_BUTTON_OK                1008</span><br><span class="line">#define IDC_BUTTON_CANCEL              1009</span><br><span class="line">#define IDC_EDIT_SID                  1010</span><br><span class="line">#define IDC_EDIT_SNAME                1011</span><br><span class="line">#define IDC_EDIT_SSEX                1012</span><br><span class="line">#define IDC_DATETIMEPICKER_SCOMEDATE    1013</span><br></pre></td></tr></tbody></table></figure><p>第三步：记得不要遗漏啊，如有ID重复，可以更改一下即可！</p><p>法4：</p><p>今天碰到模块移植问题了,自己做的对话框类(继承于CDialog)要移植到目标工程中.在网上搜了几个帖子发现都说的很生涩.问了我们的技术总监之后总算解决这个问题了.</p><p>   问题:把一个MFC SDI工程中的一个对话框资源和类拷贝到另一个MFC SDI中.</p><p>   1.在VC6中打开老的工程,在工作区Resource标签页中选中Dialog文件夹下的资源文件(就是双击后会出现编辑窗口界面的那个东西),按Ctrl+C(Edit-&gt;Copy也一样).</p><p>   2.关闭当前工程,注意不要关闭VC6,打开目标工程(File-&gt;OpenWorkspace),然后选中工作区的Resource标签页中的Dialog文件夹,然后按Ctrl+V(Edit-&gt;Paste也一样).好了,对话框拷贝过来了.</p><p>   3.将对话框类的cpp h文件拷贝到目标工程中(不详细说了,往当前工程添加文件)</p><p>   4.打开复制过来的类cpp和h文件,删除没用的头文件(老工程相关的),并且在.h文件中添加文件包含</p><p>#include “Resource.h”</p><p>第四步很关键,老工程中根本就没有这个文件包含,可是移植之后必须手动添加头文件包含.因为这个问题卡了10几分钟…</p><p>当你用资源ID时（通常资源编辑器编辑的资源ID都在resource.h中），如果没有包含CWinApp的派生类所在的头文件就会出错，你看一下它的头文件里，包含了这个文件， 而向导生成的类，它的实现文件都有包含CWinApp派生类所在的头文件的</p><p>然后在新工程中就可以使用这个类了,主要就是这个类的对话框中的资源复制头一次遇到.不敢独享,拿出来跟新手们一起学习.</p><p>于是，当有已经创建好的对话框资源要添加到新工程中时：</p><p>（1）右键单击新工程所在的解决方案添加“现有项目”把旧工程添加进来；</p><p>（2）切换到“资源视图”并在旧工程对话框资源上右键“复制”；</p><p>（3）在新工程对话框资源上右键“粘贴”；</p><p>（4）现在就可以为新对话框添加类了，顺便把旧工程的响应函数拷贝过来；</p><p>（5）切换回“解决方案资源管理器”，右键旧工程“移除”。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;vc中如何拷贝一个工程的对话框资源到另一个工程中?&lt;/p&gt;
&lt;p&gt;方法一：在你的工程中添加另一个工程的rc文件，这时资源视图中就会出现两个rc,从后加的rc中拷贝资源到你自己工程的rc中就可以了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="VC++" scheme="http://blog.iwxyi.com/tags/VC/"/>
    
  </entry>
  
  <entry>
    <title>VC++动态链接库DLL</title>
    <link href="http://blog.iwxyi.com/2018/05/15/VC-%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93DLL/"/>
    <id>http://blog.iwxyi.com/2018/05/15/VC-动态链接库DLL/</id>
    <published>2018-05-15T01:32:00.000Z</published>
    <updated>2019-10-13T01:35:01.482Z</updated>
    
    <content type="html"><![CDATA[<h2 id="隐式链接"><a href="#隐式链接" class="headerlink" title="隐式链接"></a>隐式链接</h2><ol><li>用特殊声明 <code>_declspec(dllexport)</code> 定义一个导出函数</li></ol><a id="more"></a><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdafx.h"</span></span></span><br><span class="line"></span><br><span class="line">_declspec(dllexport) <span class="function"><span class="keyword">long</span> <span class="title">square</span> <span class="params">(<span class="keyword">long</span> x)</span> <span class="comment">// 导出标记</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">return</span> x * x;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL APIENTRY <span class="title">DllMain</span><span class="params">(HANDLE hModule, DWORD  ul_reason_for_call, LPVOID lpReserved)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li><p>编译、链接, 生成.Dll文件和.Lib文件，并拷贝到客户端目录</p></li><li><p>工程设置里，exe 关联 .Lib 文件</p><blockquote><p>注：是源文件所在目录，而不是Debug文件夹</p></blockquote></li><li><p>使用特殊声明 <code>_declspec(dllimport)</code> 声明导出函数并调用</p></li></ol><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdafx.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line">_declspec(dllimport) <span class="function"><span class="keyword">long</span> <span class="title">square</span><span class="params">(<span class="keyword">long</span> x)</span></span>; <span class="comment">// 导入标记</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; square(x) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="显示链接"><a href="#显示链接" class="headerlink" title="显示链接"></a>显示链接</h2><ol><li>定义一个函数：<code>bool __stdcall square(long x);</code></li></ol><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdafx.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> _<span class="function">stdcall <span class="title">square</span> <span class="params">(<span class="keyword">long</span> x)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">return</span> x * x;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL APIENTRY <span class="title">DllMain</span><span class="params">(HANDLE hModule, DWORD  ul_reason_for_call, LPVOID lpReserved)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>通过 <code>.def</code> 文件导出函数并防止函数名被修饰。</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">LIBRARY"dll1"</span><br><span class="line"></span><br><span class="line">EXPORTS</span><br><span class="line">square @1</span><br><span class="line">;函数  [@序号]</span><br></pre></td></tr></tbody></table></figure><blockquote><p>dll 文件放在 exe 运行目录下（例如：Debug）</p></blockquote><ol start="3"><li>通过3个API函数直接调用.DLL中的导出函数。<ul><li>HMODULE LoadLibrary(LPCTSTR lpFileName); // 获取 dll 句柄</li><li>FARPROC GetProcAddress(HMODULE hModule, LPSCTR lpProcName); // 加载 dll 函数</li><li>BOOL FreeLibrary(HMODULE hModule); // 释放 dll 空间</li></ul></li></ol><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdafx.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">long</span> <span class="params">(_stdcall * LF)</span> <span class="params">(<span class="keyword">long</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"></span><br><span class="line">HMODULE hModule = LoadLibrary(<span class="string">"dll1"</span>);</span><br><span class="line"><span class="keyword">if</span> (!hModule)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"NONE HMODULE"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">LF lf = (LF) GetProcAddress(hModule, <span class="string">"square"</span>);</span><br><span class="line"><span class="keyword">if</span> (!lf)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"NONE FUNCTION"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; lf(x) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">FreeLibrary(hModule);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;隐式链接&quot;&gt;&lt;a href=&quot;#隐式链接&quot; class=&quot;headerlink&quot; title=&quot;隐式链接&quot;&gt;&lt;/a&gt;隐式链接&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;用特殊声明 &lt;code&gt;_declspec(dllexport)&lt;/code&gt; 定义一个导出函数&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="VC++" scheme="http://blog.iwxyi.com/tags/VC/"/>
    
  </entry>
  
  <entry>
    <title>MFC画图</title>
    <link href="http://blog.iwxyi.com/2018/05/08/MFC%E7%94%BB%E5%9B%BE/"/>
    <id>http://blog.iwxyi.com/2018/05/08/MFC画图/</id>
    <published>2018-05-08T02:14:00.000Z</published>
    <updated>2019-10-13T02:18:32.898Z</updated>
    
    <content type="html"><![CDATA[<p>MFC在控件上画图</p><a id="more"></a><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">CStatic* p;</span><br><span class="line">p = (CStatic*)GetDlgItem(IDC_STATIC);</span><br><span class="line">CRect rcStatic;</span><br><span class="line">p-&gt;GetClientRect(&amp;rcStatic);</span><br><span class="line">HDC hdc = ::GetDC(*p);</span><br><span class="line"></span><br><span class="line">HPEN hPen;</span><br><span class="line">OLE_COLOR m_colOLE;</span><br><span class="line">COLORREF m_colRREF;</span><br><span class="line">m_colOLE = RGB(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">OleTranslateColor(m_colOLE, <span class="literal">NULL</span>, &amp;m_colRREF);</span><br><span class="line">hPen = CreatePen(PS_SOLID, <span class="number">3</span>, m_colRREF);</span><br><span class="line">SelectObject(hdc, hPen);</span><br><span class="line">Rectangle(hdc, rcStatic.left, rcStatic.top, rcStatic.right, rcStatic.bottom);</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MFC在控件上画图&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="MFC" scheme="http://blog.iwxyi.com/tags/MFC/"/>
    
  </entry>
  
  <entry>
    <title>MFC常用函数</title>
    <link href="http://blog.iwxyi.com/2018/05/08/MFC%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/"/>
    <id>http://blog.iwxyi.com/2018/05/08/MFC常用函数/</id>
    <published>2018-05-08T02:09:00.000Z</published>
    <updated>2019-10-13T02:10:01.855Z</updated>
    
    <content type="html"><![CDATA[<h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">OnOK(); <span class="comment">// 确定</span></span><br><span class="line">onCancel(); <span class="comment">// 取消</span></span><br></pre></td></tr></tbody></table></figure><a id="more"></a><h2 id="通过ID获取控件对象"><a href="#通过ID获取控件对象" class="headerlink" title="通过ID获取控件对象"></a>通过ID获取控件对象</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GetDlgItem(IDC_DATE)-&gt;EnableWindow(FALSE);</span><br><span class="line">m_Date.EnableWindow(TRUE);</span><br></pre></td></tr></tbody></table></figure><h2 id="可视与可用"><a href="#可视与可用" class="headerlink" title="可视与可用"></a>可视与可用</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">EnableWindow(TRUE); <span class="comment">// TRUE可用 / FALSE不可用</span></span><br><span class="line">EnableWindow(FALSW); <span class="comment">// 变灰，不可操作</span></span><br><span class="line"></span><br><span class="line">ShowWindow(SW_HIDE); <span class="comment">// 不可视，SW_HIDE=0</span></span><br><span class="line">ShowWindow(SW_SHOW); <span class="comment">// 可视，SW_SHOW=5</span></span><br></pre></td></tr></tbody></table></figure><h2 id="弹出信息框"><a href="#弹出信息框" class="headerlink" title="弹出信息框"></a>弹出信息框</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">AfxMessageBox(<span class="string">"Hello World!"</span>);</span><br><span class="line"></span><br><span class="line">CString msg;</span><br><span class="line">m_cb.GetLBText(m_cb.GetCurSel(), msg);</span><br><span class="line">AfxMessageBox(msg);</span><br></pre></td></tr></tbody></table></figure><h2 id="获取现行日期时间"><a href="#获取现行日期时间" class="headerlink" title="获取现行日期时间"></a>获取现行日期时间</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CTime tNow = CTime::GetCurrentTime();</span><br><span class="line">CString date = tNow.Format(<span class="string">"%y.%m.%d"</span>); <span class="comment">// 日期</span></span><br><span class="line">CString time = tNow.Format(<span class="string">"%I:%M:%S"</span>); <span class="comment">// 时间（小时是I而不是H）</span></span><br></pre></td></tr></tbody></table></figure><h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SetTimer(<span class="number">1</span>,<span class="number">100</span>,<span class="literal">NULL</span>); <span class="comment">// 参数1：定时器ID，参数2：间隔</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CEx9_9Dlg::OnTimer(UINT nIDEvent) </span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(nIDEvent == <span class="number">1</span>){ <span class="comment">// 定时器的ID</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span>(...) KillTimer(nIDEvent); <span class="comment">// 结束进程</span></span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;流程控制&quot;&gt;&lt;a href=&quot;#流程控制&quot; class=&quot;headerlink&quot; title=&quot;流程控制&quot;&gt;&lt;/a&gt;流程控制&lt;/h2&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;OnOK(); &lt;span class=&quot;comment&quot;&gt;// 确定&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;onCancel(); &lt;span class=&quot;comment&quot;&gt;// 取消&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="MFC" scheme="http://blog.iwxyi.com/tags/MFC/"/>
    
  </entry>
  
  <entry>
    <title>Win32 SDK游戏循环</title>
    <link href="http://blog.iwxyi.com/2018/05/08/Win32-SDK%E6%B8%B8%E6%88%8F%E5%BE%AA%E7%8E%AF/"/>
    <id>http://blog.iwxyi.com/2018/05/08/Win32-SDK游戏循环/</id>
    <published>2018-05-08T02:02:00.000Z</published>
    <updated>2019-10-13T02:03:09.721Z</updated>
    
    <content type="html"><![CDATA[<p>其实就是 Windows 消息循环</p><a id="more"></a><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//消息循环</span></span><br><span class="line">GetMessage(&amp;msg, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>); <span class="comment">//初始化msg</span></span><br><span class="line"><span class="keyword">while</span>( msg.message != WM_QUIT )</span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span>( PeekMessage( &amp;msg, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="number">0</span> , PM_REMOVE) )</span><br><span class="line">    {</span><br><span class="line">        TranslateMessage( &amp;msg );</span><br><span class="line">        DispatchMessage( &amp;msg );</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">        tNow = GetTickCount();</span><br><span class="line">        <span class="keyword">if</span>(tNow - tPre &gt;= <span class="number">40</span>)</span><br><span class="line">            MyPaint(hdc);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tPre = GetTickCount();</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;其实就是 Windows 消息循环&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="Win32 SDK" scheme="http://blog.iwxyi.com/tags/Win32-SDK/"/>
    
  </entry>
  
  <entry>
    <title>Win32 SDK加载位图</title>
    <link href="http://blog.iwxyi.com/2018/05/08/Win32-SDK%E5%8A%A0%E8%BD%BD%E4%BD%8D%E5%9B%BE/"/>
    <id>http://blog.iwxyi.com/2018/05/08/Win32-SDK加载位图/</id>
    <published>2018-05-08T01:52:00.000Z</published>
    <updated>2019-10-13T01:54:43.485Z</updated>
    
    <content type="html"><![CDATA[<p>初始化位图</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hMemDC = CreateCompatibleDC(hdc);</span><br><span class="line">hBitmap = LoadBitmap(hInst, <span class="string">"mybmp"</span>);</span><br><span class="line">SelectObject(hMemDC, hBitmap);</span><br><span class="line">GetObject(hBitmap, <span class="keyword">sizeof</span>(BITMAP), &amp;bitmap);</span><br></pre></td></tr></tbody></table></figure><p>绘制位图</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BitBlt(hdc, bmx, bmy, bitmap.bmWidth, bitmap.bmHeight, hMemDC, <span class="number">0</span>, <span class="number">0</span>, SRCCOPY);</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><hr><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    HDC hdc;</span><br><span class="line">    PAINTSTRUCT ps;</span><br><span class="line">    RECT rect;</span><br><span class="line">    <span class="keyword">static</span> HDC hMemDC;</span><br><span class="line">    <span class="keyword">static</span> HBITMAP hBitmap;</span><br><span class="line">    <span class="keyword">static</span> BITMAP bitmap;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span>(message)</span><br><span class="line">    {</span><br><span class="line">    <span class="keyword">case</span> WM_CREATE : <span class="comment">// 初始化</span></span><br><span class="line">        hdc = GetDC(hWnd);</span><br><span class="line">        hMemDC = CreateCompatibleDC(hdc);</span><br><span class="line">        hBitmap = LoadBitmap(hInst, <span class="string">"mybmp"</span>);</span><br><span class="line">        SelectObject(hMemDC, hBitmap);</span><br><span class="line">        GetObject(hBitmap, <span class="keyword">sizeof</span>(BITMAP), &amp;bitmap);</span><br><span class="line">        ReleaseDC(hWnd, hdc);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_PAINT : <span class="comment">// 重绘</span></span><br><span class="line">        hdc = BeginPaint(hWnd, &amp;ps);</span><br><span class="line">        GetClientRect(hWnd, &amp;rect);</span><br><span class="line">        BitBlt(hdc, bmx, bmy, bitmap.bmWidth, bitmap.bmHeight, hMemDC, <span class="number">0</span>, <span class="number">0</span>, SRCCOPY);</span><br><span class="line">        EndPaint(hWnd, &amp;ps);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_DESTROY : <span class="comment">// 析构</span></span><br><span class="line">        DeleteObject(hBitmap);</span><br><span class="line">        ReleaseDC(hWnd, hMemDC);</span><br><span class="line">        PostQuitMessage(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>两张/多张位图</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hBitmap = (HBITMAP)LoadImage(<span class="literal">NULL</span>,<span class="string">"mybmp.bmp"</span>,IMAGE_BITMAP,<span class="number">800</span>,<span class="number">800</span>,LR_LOADFROMFILE);</span><br><span class="line">hBitmap2 = (HBITMAP)LoadImage(<span class="literal">NULL</span>,<span class="string">"mybmp2.bmp"</span>,IMAGE_BITMAP,<span class="number">50</span>,<span class="number">50</span>,LR_LOADFROMFILE);</span><br><span class="line">SelectObject(hMemDC, hBitmap);</span><br><span class="line">GetObject(hBitmap, <span class="keyword">sizeof</span>(BITMAP), &amp;bitmap);</span><br><span class="line">GetObject(hBitmap2, <span class="keyword">sizeof</span>(BITMAP), &amp;bitmap2);</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;初始化位图&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hMemDC = CreateCompatibleDC(hdc);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hBitmap = LoadBitmap(hInst, &lt;span class=&quot;string&quot;&gt;&quot;mybmp&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SelectObject(hMemDC, hBitmap);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;GetObject(hBitmap, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(BITMAP), &amp;amp;bitmap);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;绘制位图&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;BitBlt(hdc, bmx, bmy, bitmap.bmWidth, bitmap.bmHeight, hMemDC, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, SRCCOPY);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="Win32 SDK" scheme="http://blog.iwxyi.com/tags/Win32-SDK/"/>
    
  </entry>
  
  <entry>
    <title>VC++工具使用</title>
    <link href="http://blog.iwxyi.com/2018/05/08/VC-%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    <id>http://blog.iwxyi.com/2018/05/08/VC-工具使用/</id>
    <published>2018-05-08T01:37:00.000Z</published>
    <updated>2019-10-13T01:38:05.758Z</updated>
    
    <content type="html"><![CDATA[<ul><li>快捷键：在Button标题处使用&amp;，例如：<code>&amp;Enable</code>快捷键为<code>alt+E</code>，<code>Enable &amp;Again</code>快捷键为<code>alt+A</code></li><li>单选框：按照创建顺序会有一个默认的编号，然后每组第一个radio属性的<code>组</code>设为<code>True</code>，其余radio不做变动。<br>有组的radio显示在类向导里面，并且可以关联int变量，直接初始化成其他值</li></ul><a id="more"></a><ul><li>复制控件：看另外一篇</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;快捷键：在Button标题处使用&amp;amp;，例如：&lt;code&gt;&amp;amp;Enable&lt;/code&gt;快捷键为&lt;code&gt;alt+E&lt;/code&gt;，&lt;code&gt;Enable &amp;amp;Again&lt;/code&gt;快捷键为&lt;code&gt;alt+A&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;单选框：按照创建顺序会有一个默认的编号，然后每组第一个radio属性的&lt;code&gt;组&lt;/code&gt;设为&lt;code&gt;True&lt;/code&gt;，其余radio不做变动。&lt;br&gt;有组的radio显示在类向导里面，并且可以关联int变量，直接初始化成其他值&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="VC++" scheme="http://blog.iwxyi.com/tags/VC/"/>
    
  </entry>
  
  <entry>
    <title>VC++菜单操作</title>
    <link href="http://blog.iwxyi.com/2018/05/08/VC-%E8%8F%9C%E5%8D%95%E6%93%8D%E4%BD%9C/"/>
    <id>http://blog.iwxyi.com/2018/05/08/VC-菜单操作/</id>
    <published>2018-05-08T01:16:00.000Z</published>
    <updated>2019-10-13T01:20:06.251Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hmenu = GetMenu(hWnd);</span><br><span class="line">haddmenu = CreateMenu();</span><br><span class="line">AppendMenu(haddmenu, MF_ENABLED, 4, "求和");</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    HMENU hmenu, haddmenu<span class="comment">/*添加的菜单句柄*/</span>;</span><br><span class="line">    <span class="keyword">switch</span>(message)</span><br><span class="line">    {</span><br><span class="line">    <span class="keyword">case</span> WM_COMMAND :</span><br><span class="line">        <span class="keyword">switch</span> (LOWORD(wParam))</span><br><span class="line">        {</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span> : <span class="comment">// 添加菜单项</span></span><br><span class="line">            hmenu = GetMenu(hWnd);</span><br><span class="line">            haddmenu = CreateMenu();</span><br><span class="line">            AppendMenu(haddmenu, MF_ENABLED, <span class="number">4</span>, <span class="string">"求和"</span>);</span><br><span class="line">            AppendMenu(haddmenu, MF_ENABLED, <span class="number">5</span>, <span class="string">"求差"</span>);</span><br><span class="line">            InsertMenu(hmenu, <span class="number">2</span>, MF_POPUP | MF_BYPOSITION, (UINT)haddmenu, <span class="string">"统计计算"</span>);</span><br><span class="line">            EnableMenuItem(hmenu, <span class="number">1</span>, MF_GRAYED);</span><br><span class="line">            EnableMenuItem(hmenu, <span class="number">2</span>, MF_ENABLED);</span><br><span class="line">            DrawMenuBar(hWnd);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span> : <span class="comment">// 删除菜单项</span></span><br><span class="line">            hmenu = GetMenu(hWnd);</span><br><span class="line">            DeleteMenu(hmenu, <span class="number">2</span>, MF_BYPOSITION);</span><br><span class="line">            EnableMenuItem(hmenu, <span class="number">1</span>, MF_ENABLED);</span><br><span class="line">            EnableMenuItem(hmenu, <span class="number">2</span>, MF_GRAYED);</span><br><span class="line">            DrawMenuBar(hWnd);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hmenu = GetMenu(hWnd);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;haddmenu = CreateMenu();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;AppendMenu(haddmenu, MF_ENABLED, 4, &quot;求和&quot;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="VC++" scheme="http://blog.iwxyi.com/tags/VC/"/>
    
  </entry>
  
  <entry>
    <title>Win32 SDK事件响应</title>
    <link href="http://blog.iwxyi.com/2018/05/07/Win32-SDK%E4%BA%8B%E4%BB%B6%E5%93%8D%E5%BA%94/"/>
    <id>http://blog.iwxyi.com/2018/05/07/Win32-SDK事件响应/</id>
    <published>2018-05-07T02:17:00.000Z</published>
    <updated>2019-10-13T02:18:10.208Z</updated>
    
    <content type="html"><![CDATA[<h2 id="按键响应"><a href="#按键响应" class="headerlink" title="按键响应"></a>按键响应</h2><a id="more"></a><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">switch</span>(message)</span><br><span class="line">    {</span><br><span class="line">    <span class="keyword">case</span> WM_CHAR :</span><br><span class="line">        <span class="keyword">if</span> (wParam == <span class="string">'r'</span>) <span class="comment">// r</span></span><br><span class="line">        {</span><br><span class="line">            ;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (wParam == <span class="string">'r'</span><span class="number">-96</span>) <span class="comment">// ctrl+r</span></span><br><span class="line">        {</span><br><span class="line">            ;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (wParam == <span class="string">'B'</span>) <span class="comment">// shift+b</span></span><br><span class="line">        {</span><br><span class="line">            ;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_KEYDOWN :</span><br><span class="line">        <span class="keyword">if</span> (wParam == VK_UP) <span class="comment">// UP键</span></span><br><span class="line">        {</span><br><span class="line">            ;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (wParam == VK_CONTROL) <span class="comment">// Ctrl键</span></span><br><span class="line">        {</span><br><span class="line">            ;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_KEYUP : <span class="comment">// 按键弹起</span></span><br><span class="line">;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="鼠标响应"><a href="#鼠标响应" class="headerlink" title="鼠标响应"></a>鼠标响应</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">switch</span>(message)</span><br><span class="line">    {</span><br><span class="line">    <span class="keyword">case</span> WM_MOUSEMOVE : <span class="comment">// 鼠标移动</span></span><br><span class="line">        x = LOWORD(lParam);</span><br><span class="line">        y = HIWORD(lParam);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_LBUTTONDBLCLK : <span class="comment">// 左键单击</span></span><br><span class="line">        ;</span><br><span class="line">    <span class="keyword">case</span> WM_LBUTTONDOWN : <span class="comment">// 左键按下</span></span><br><span class="line">        ;</span><br><span class="line">    <span class="keyword">case</span> WM_LBUTTONUP : <span class="comment">// 左键弹起</span></span><br><span class="line">        ;</span><br><span class="line">    <span class="keyword">case</span> WM_RBUTTONDOWN : <span class="comment">// 右键按下</span></span><br><span class="line">        ;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;按键响应&quot;&gt;&lt;a href=&quot;#按键响应&quot; class=&quot;headerlink&quot; title=&quot;按键响应&quot;&gt;&lt;/a&gt;按键响应&lt;/h2&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="Win32 SDK" scheme="http://blog.iwxyi.com/tags/Win32-SDK/"/>
    
  </entry>
  
  <entry>
    <title>MFC编辑框</title>
    <link href="http://blog.iwxyi.com/2018/05/07/MFC%E7%BC%96%E8%BE%91%E6%A1%86/"/>
    <id>http://blog.iwxyi.com/2018/05/07/MFC编辑框/</id>
    <published>2018-05-07T02:08:00.000Z</published>
    <updated>2019-10-13T02:08:53.030Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">m_Edit1.SetSel(<span class="number">0</span>,<span class="number">-1</span>);<span class="comment">//表示选中编辑框IDC_EDIT1中的全部内容。</span></span><br><span class="line">m_Edit1.ReplaceSel(<span class="string">""</span>);<span class="comment">//用空字符串代替所选中的文本，即把所选的文本删除掉</span></span><br><span class="line">m_Edit1.Copy();<span class="comment">//将m_Editl编辑框中所选的内容拷贝到剪贴板上</span></span><br><span class="line">m_Edit2.Paste();<span class="comment">//将剪贴板中的内容粘贴到m_Edit2编辑框中</span></span><br><span class="line">m_Edit1.Undo();<span class="comment">// Undo（）函数是CEdit类中的成员函数，表示取消编辑框中上一次操作</span></span><br></pre></td></tr></tbody></table></figure><a id="more"></a><p>数值与控件转换<br>IDC_EDIT1 绑定int变量 m_A</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">UpdateData(TRUE); <span class="comment">// 刷新成数值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i=m_A*m_B;</span><br><span class="line">m_Result.Format(<span class="string">"%d"</span>, i);</span><br><span class="line"></span><br><span class="line">UpdateData(FALSE); <span class="comment">// 刷新回控件</span></span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;m_Edit1.SetSel(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;);	&lt;span class=&quot;comment&quot;&gt;//表示选中编辑框IDC_EDIT1中的全部内容。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;m_Edit1.ReplaceSel(&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;);	&lt;span class=&quot;comment&quot;&gt;//用空字符串代替所选中的文本，即把所选的文本删除掉&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;m_Edit1.Copy();		&lt;span class=&quot;comment&quot;&gt;//将m_Editl编辑框中所选的内容拷贝到剪贴板上&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;m_Edit2.Paste();	&lt;span class=&quot;comment&quot;&gt;//将剪贴板中的内容粘贴到m_Edit2编辑框中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;m_Edit1.Undo();	&lt;span class=&quot;comment&quot;&gt;// Undo（）函数是CEdit类中的成员函数，表示取消编辑框中上一次操作&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="MFC" scheme="http://blog.iwxyi.com/tags/MFC/"/>
    
  </entry>
  
  <entry>
    <title>VC++使用RC文件</title>
    <link href="http://blog.iwxyi.com/2018/05/07/VC-%E4%BD%BF%E7%94%A8RC%E6%96%87%E4%BB%B6/"/>
    <id>http://blog.iwxyi.com/2018/05/07/VC-使用RC文件/</id>
    <published>2018-05-07T01:56:00.000Z</published>
    <updated>2019-10-13T01:59:19.167Z</updated>
    
    <content type="html"><![CDATA[## 文件导入的资源（BITMAP， ICON， HTML， FONT， CURSOR）<p>举例：</p><h3 id="rc文件"><a href="#rc文件" class="headerlink" title=".rc文件 :"></a>.rc文件 :</h3><p>#include&lt;windows.h&gt;</p><p><strong>#include”resource.h”</strong></p><p><strong>IDI_ICON1 ICON “dlgapp.ico”</strong> //ICON RESOURCE</p><a id="more"></a><hr><h3 id="Resource-h文件"><a href="#Resource-h文件" class="headerlink" title="Resource.h文件:"></a>Resource.h文件:</h3><p><strong>#define IDI_ICON1 1001</strong></p><hr><h3 id="注册窗口类"><a href="#注册窗口类" class="headerlink" title="注册窗口类:"></a>注册窗口类:</h3><p>wcs.hIcon = LoadIcon(g_hInstance, MAKEINTRESOURCE(<strong>IDI_ICON1</strong>));</p><h2 id="对话框资源"><a href="#对话框资源" class="headerlink" title="对话框资源"></a>对话框资源</h2><p>见图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdn.net/20150811234230887?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><h3 id="对应的-rc文件："><a href="#对应的-rc文件：" class="headerlink" title="对应的.rc文件："></a>对应的.rc文件：</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">IDD_DIALOG1 DIALOG DISCARDABLE  0, 0, 187, 94</span><br><span class="line"></span><br><span class="line">STYLE DS_MODALFRAME | WS_POPUP | WS_CAPTION | WS_SYSMENU</span><br><span class="line"></span><br><span class="line">CAPTION "对话"</span><br><span class="line"></span><br><span class="line">FONT 10, "System"</span><br><span class="line"></span><br><span class="line">_BEGIN_</span><br><span class="line">DEFPUSHBUTTON   "确定",IDOK,130,7,50,14</span><br><span class="line">   PUSHBUTTON      "取消",IDCANCEL,130,24,50,14</span><br><span class="line">_END_</span><br></pre></td></tr></tbody></table></figure><hr><h3 id="对应resource-h"><a href="#对应resource-h" class="headerlink" title="对应resource.h:"></a>对应resource.h:</h3><p>#define IDD_DIALOG1 102</p><hr><h3 id="对应的-cpp文件："><a href="#对应的-cpp文件：" class="headerlink" title="对应的.cpp文件："></a>对应的.cpp文件：</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">voidOnNoModel(HWND hWnd)</span><br><span class="line">{</span><br><span class="line">    HWND hDlg = CreateDialog(g_hInstance,<span class="comment">//根据资源创建对话框</span></span><br><span class="line">       MAKEINTRESOURCE(IDD_DIALOG1),hWnd, MyDialogProc);</span><br><span class="line">    ShowWindow(hDlg,<span class="number">1</span>);<span class="comment">//需要显示对话框</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="菜单资源："><a href="#菜单资源：" class="headerlink" title="菜单资源："></a>菜单资源：</h2><p>(当然，菜单不使用资源也可以创建的～用命令创建的感觉和QT用命令创建很相似，本文不涉及)</p><h3 id="对应的-rc文件：-1"><a href="#对应的-rc文件：-1" class="headerlink" title="对应的.rc文件："></a>对应的.rc文件：</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#include"resource.h"</span><br><span class="line">#include&lt;windows.h&gt;</span><br><span class="line"></span><br><span class="line">IDR_MENU1 _MENU_       //MENU RESOURCE</span><br><span class="line">_BEGIN_                                                                       </span><br><span class="line">    POPUP "File"        // POPUP RESOURCE</span><br><span class="line">    _BEGIN_ </span><br><span class="line">        MENUITEM "&amp;Open",        ID_FILE_OPEN    // MENUITEM  STATEMENT</span><br><span class="line">        MENUITEM "&amp;Save",        ID_FILE_SAVE    // MENUITEM  STATEMENT    </span><br><span class="line">        MENUITEM SEPARATOR           // MENUITEM  STATEMENT                </span><br><span class="line">        MENUITEM "E&amp;xit",         ID_FILE_EXIT  // MENUITEM  STATEMENT      </span><br><span class="line">    _END_</span><br><span class="line">_END_</span><br></pre></td></tr></tbody></table></figure><hr><h3 id="对应的resource-h文件："><a href="#对应的resource-h文件：" class="headerlink" title="对应的resource.h文件："></a>对应的resource.h文件：</h3><p>#define IDR_MENU1 1001</p><p>#define ID_FILE_OPEN 1003</p><p>#define ID_FILE_SAVE 1004</p><p>#define ID_FILE_EXIT 1005</p><hr><h3 id="对应的-cpp文件：-1"><a href="#对应的-cpp文件：-1" class="headerlink" title="对应的.cpp文件："></a>对应的.cpp文件：</h3><p>wcs.lpszMenuName = MAKEINTRESOURCE(<strong>IDR_MENU1</strong>);</p><p> <img src="https://img-blog.csdn.net/20150811234303372?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      ## 文件导入的资源（BITMAP， ICON， HTML， FONT， CURSOR）

&lt;p&gt;举例：&lt;/p&gt;
&lt;h3 id=&quot;rc文件&quot;&gt;&lt;a href=&quot;#rc文件&quot; class=&quot;headerlink&quot; title=&quot;.rc文件 :&quot;&gt;&lt;/a&gt;.rc文件 :&lt;/h3&gt;&lt;p&gt;#include&amp;lt;windows.h&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;#include”resource.h”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IDI_ICON1 ICON “dlgapp.ico”&lt;/strong&gt; //ICON RESOURCE&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="VC++" scheme="http://blog.iwxyi.com/tags/VC/"/>
    
  </entry>
  
  <entry>
    <title>Win32 SDK列出目录下子文件</title>
    <link href="http://blog.iwxyi.com/2018/05/07/Win32-SDK%E5%88%97%E5%87%BA%E7%9B%AE%E5%BD%95%E4%B8%8B%E5%AD%90%E6%96%87%E4%BB%B6/"/>
    <id>http://blog.iwxyi.com/2018/05/07/Win32-SDK列出目录下子文件/</id>
    <published>2018-05-07T01:55:00.000Z</published>
    <updated>2019-10-13T01:56:36.925Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DWORD cchCurDir = MAX_PATH; <span class="comment">// long类型，最大目录字符长度</span></span><br><span class="line">LPTSTR lpszCurDir; <span class="comment">// 指针类型</span></span><br><span class="line">CHAR tchBuffer[MAX_PATH]; <span class="comment">// char类型</span></span><br><span class="line">lpszCurDir = tchBuffer; </span><br><span class="line">GetCurrentDirectory(cchCurDir, lpszCurDir); <span class="comment">// 获取运行目录</span></span><br><span class="line">DlgDirList(lpszCurDir, IDC_LIST_DIR, IDC_STATIC_DIR, <span class="number">0</span>); <span class="comment">// 将目录展示到List</span></span><br></pre></td></tr></tbody></table></figure><a id="more"></a><p>显示List的Item并删除</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = m_list.GetCurSel();</span><br><span class="line">CString str;</span><br><span class="line">m_list.GetText(i, str); <span class="comment">// 获取文字</span></span><br><span class="line">m_list.DeleteString(i); <span class="comment">// 删除列表</span></span><br><span class="line">CString msg = <span class="string">"Item "</span>+str+<span class="string">" deleted!"</span>;</span><br><span class="line">AfxMessageBox(msg);</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;DWORD cchCurDir = MAX_PATH; &lt;span class=&quot;comment&quot;&gt;// long类型，最大目录字符长度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LPTSTR lpszCurDir; &lt;span class=&quot;comment&quot;&gt;// 指针类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CHAR tchBuffer[MAX_PATH]; &lt;span class=&quot;comment&quot;&gt;// char类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;lpszCurDir = tchBuffer; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;GetCurrentDirectory(cchCurDir, lpszCurDir); &lt;span class=&quot;comment&quot;&gt;// 获取运行目录&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DlgDirList(lpszCurDir, IDC_LIST_DIR, IDC_STATIC_DIR, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// 将目录展示到List&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="Win32 SDK" scheme="http://blog.iwxyi.com/tags/Win32-SDK/"/>
    
  </entry>
  
  <entry>
    <title>MFC函数总结</title>
    <link href="http://blog.iwxyi.com/2018/05/07/MFC%E5%87%BD%E6%95%B0%E6%80%BB%E7%BB%93/"/>
    <id>http://blog.iwxyi.com/2018/05/07/MFC函数总结/</id>
    <published>2018-05-07T00:43:00.000Z</published>
    <updated>2019-10-13T01:05:57.916Z</updated>
    
    <content type="html"><![CDATA[<p><strong>1、MFC编辑框、静态文本框相关的常用函数</strong></p><p>《1》<code>GetDlgItemText(ID ,str)</code></p><p>作用：从对话框中获取文本</p><p>第一个参数为要获取的编辑框(或者静态文本框、单选按钮等可以显示内容的控件)的ID，第二个参数为字符串(Cstring 类型)的变量，获取的文本存储在str中。</p><a id="more"></a><p>《2》<code>SetDlgItemText(ID,str)</code></p><p>作用：将字符串显示在控件中</p><p>第一个参数为要显示的编辑框(或者静态文本框、单选按钮、组合框等可以显示内容的控件)的ID，第二个参数为字符串(Cstring 类型)的变量，显示的文本存储在str中。如果要显示的变量的类型不是Cstring，则通过Format函数强制转换。</p><p>通常还要加一个<code>UpDateData(FALSE)</code>。</p><p>《3》<code>UINT nID=GetCheckedRadioButton(IDC1, IDC2);</code></p><p>作用：获取单选框的选项的ID</p><p>第一个参数为该组合框中第一个单选按钮的ID，第二个参数为该组合框中最后一个按钮的ID。</p><p>《4》<code>CheckRadioButton(IDC1, IDC2, IDC3);</code></p><p>作用：初始化单选按钮</p><p>第一个参数为该组合框中第一个单选按钮的ID，第二个参数为该组合框中最后一个按钮的ID，第三个参数为为缺省选项的ID。</p><p>《5》<code>m_scrollBar.SetScrollRange(0, 500) ;</code></p><p>作用：设置水平滚动条的取值范围，m_scrollBar为水平滚动条的控制类型的变量，0为设置最小值，500为设置的最大值。</p><p>《6》<code>m_nAmount = m_slider.GetPos() ;</code></p><p>作用：获取滑块的当前位置。</p><p>《7》<code>m_slider.SetRange(0,1000) ;</code></p><p>作用：设置滑块取值范围</p><p>第一个参数为设置的最小值，第二个参数为设置的最大值。</p><p>《8》<code>double Volum = atof(strCtrl);</code></p><p>作用：将字符串strCtl转换成浮点型的Volum</p><p>《9》<code>int Volum = atof(strCtrl);</code></p><p>作用：将字符串strCtl转换成整型的Volum</p><p>《10》<code>MessageBox(str) ;</code>（局部函数）</p><p>作用：输出字符串str</p><p>《11》<code>AfxMessageBox(str) ;</code>（全局函数）</p><p>作用：输出字符串str</p><p>《12》<code>tempt = m_time2.Format("%H:%m:%S") ;</code></p><p>作用：将时间转化成字符型（时、分、秒）</p><p>m_time2为日历时间选取器的变量，tempt为CString型变量</p><p>《13》<code>tempt = m_time.Format("%Y-%m-%d") ;</code>//将时间转化成字符型</p><p>作用：将时间转化成字符型（年、月、日）</p><p>m_time2为日历时间选取器的变量，tempt为CString型变量</p><p>《14》<code>m_time = CTime::GetCurrentTime();</code></p><p>作用：获取系统当前时间</p><p>m_time为Ctime类型的变量。</p><p>《15》<code>m_list.AddString(str);</code></p><p>功能：将Cstrig类型的变量的内容显示在列表框中(或者组合框中)。</p><p>m_str为ClistBox类型的变量（或者是CcomboBox类型的变量）。</p><p>《16》<code>m_time = CTime(2012 ,5 ,28 ,0 ,0 ,0) ;</code></p><p>功能：初始化日期</p><p>m_time为Ctime类型的变量</p><p>《17》<code>str.TrimLeft();</code></p><p>功能：去掉Cstring类型变量的左边的空格</p><p>《18》<code>str.TrimRight();</code></p><p>功能：去掉Cstring类型变量的右边的空格</p><p>《19》<code>str.IsEmpty();</code></p><p>功能：判断Cstring类型的变量str是否为空，如果为空则返回1，否则返回零。</p><p>《20》<code>int nIndex=m_list.FindString(int k,str);</code></p><p>功能：列表框中查找与str匹配的列表项，m_list为ClistBox类型变量。</p><p>从第k个位置开始查找，若为-1，则从头至尾查找。</p><p>函数原型：</p><p><code>int FindString(int nStartAfter,LPCTSTR lpszItem) const;</code></p><p><code>int FindStringExact(int nIndexStart,LPCTSTR lpszFind) const;</code></p><p>其中，<code>FindStringExact</code>的查找精度最高</p><p>《21》<code>m_list.ResetContent() ;</code></p><p>功能：清空列表框中的内容</p><p>m_list为ClistBox类型变量。</p><p>《22》<code>m_listSearch.DeleteString(int  nIndex);</code></p><p>功能：删除列表框中的第nIndex条记录。</p><p>m_listSearch为ClistBox类型变量。</p><p>《23》<code>GetDlgItem(IDC_BUTTON_DELETE)-&gt;EnableWindow(FALSE);</code></p><p>功能：是ID为IDC_BUTTON_DELETE的按钮灰选。</p><p>《24》<code>GetDlgItem(IDC_BUTTON_DELETE)-&gt;EnableWindow(TRUE);</code></p><p>功能：是ID为IDC_BUTTON_DELETE的按钮还原。</p><p>《25》<code>str.Left(length);</code></p><p>功能：获取字符串str左边长度为length的值。</p><p>《26》<code>int length = str.GetLength() ;</code></p><p>功能：获取字符串str的长度</p><p>《27》<code>dlg.DoModal() ;</code></p><p>功能：建立一个对话框</p><p>dlg为该对话框的类的对象。</p><p>《28》<code>CDialog::OnCancel();</code></p><p>功能：关闭窗口</p><p>《29》<code>CMenu* pSysMenu=GetMenu();</code></p><p>功能：获取程序菜单指针</p><p>《30》<code>int nCount=pSysMenu-&gt;GetMenuItemCount();</code></p><p>功能：获取项层菜单项的项数</p><p>《31》<code>int nIndex=m_ListBox.GetCurSel();</code></p><p>功能：获取指针在列表框中的位置</p><p>m_ListBox为ClistBox类型变量。</p><p>《32》<code>GetWindowText(str) ;</code></p><p>功能：获取当前窗口的标题</p><p>Str为Cstring 类型的变量</p><p>《33》<code>GetDlgItem(IDC_CLICKHERE)-&gt;SetFocus();</code></p><p>将光标设置在控件IDC_CLICKHERE处,若是在打开某个对话框时候做此设置，则将该语句加到消息处理函数OnInitDialog的return语句前，并且将最后的语句 return TRUE; 该为 return FALSE;</p><p><code>GetDlgItem(IDC_CLICKHERE)-&gt;SetFocus();</code>也可写成<code>m_strit.SetFocus();</code></p><p>其中m_strit为该控件对应的变量。</p><p>《34》<code>GetDlgItem(IDC_STATIC_NUMBER1)</code></p><p>功能：获取ID为IDC_STATIC_NUMBER1控件的指针.</p><p>例如：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CString str ;</span><br><span class="line">GetDlgItem(IDC_STATIC_NUMBER1)-&gt;GetWindowText(str) ;<span class="comment">//此句等价于</span></span><br><span class="line">GetDlgItemText(IDC_STATIC_NUMBER1,str);</span><br></pre></td></tr></tbody></table></figure><p>《35》<code>int  num1 = GetDlgItemInt(IDC_EDIT1);</code></p><p>功能：获取ID为IDC_EDIT1控件的文本并且转化成整形的值，如果文本中含有非数字字符则转化失败.</p><p>《36》<code>SetDlgItemInt(IDC_EDIT3,num3) ;</code></p><p>功能：将整数num3显示在ID为IDC_EDIT3的编辑框中.</p><p>《37》<code>::SendMessage(GetDlgItem(IDC_EDIT1)-&gt;m_hWnd,WM_GETTEXT,10,(LPARAM)ch1);</code></p><p>注意：在函数前面加上作用域分节符表示调用的是全局函数.</p><p>功能：取ID为IDC_EDIT1控件的文本,获取的最大长度为10，并且将获取的内容存储在ch1中.相当于<code>GetDlgItemText(IDC_EDIT1,ch1,10);</code></p><p>说明：第一个参数为对应控件的句柄，第二个参数为消息名称，第三个参数为获取文本的最大长度，第四个参数为存储文本的缓冲区，此处ch1为字符数组,即 char ch1[10];第四个参数的类型必须强制转换成LPARAM.</p><p>此函数有多种调用方式，其功能是相同的。列举如下：</p><p>(1) <code>::SendMessage(GetDlgItem(IDC_EDIT1)-&gt;m_hWnd,WM_GETTEXT,10,(LPARAM)ch1);</code></p><p>(2) <code>GetDlgItem(IDC_EDIT1)-&gt;SendMessage(WM_GETTEXT,10,(LPARAM)ch1);</code></p><p>(3) <code>m_edit1.SendMessage(WM_GETTEXT,10,(LPARAM)ch1);</code></p><p>(4) <code>::SendMessage(m_edit1.m_hWnd,WM_GETTEXT,10,(LPARAM)ch1);</code></p><p>其中m_edit1是IDC_EDIT1控件的类别为Control，类型为CEdit的变量.</p><p>《38》<code>::SendMessage(GetDlgItem(IDC_EDIT3)-&gt;m_hWnd,WM_SETTEXT,0,(LPARAM)ch3);</code></p><p>功能：将缓冲区ch3的内容显示在D为IDC_EDIT1控件上.其作用相当于<code>SetDlgItemText(IDC_EDIT1,ch1);</code></p><p>说明：第一个参数为对应控件的句柄，第二个参数为消息名称，第三个参数用不上，故设置为零，第四个参数为要显示的文本内容, 第四个参数的类型必须强制转换成LPARAM.</p><p>《39》<code>SendDlgItemMessage(IDC_EDIT1,WM_GETTEXT,10,(LPARAM)ch1);</code></p><p>功能等价于<code>::SendMessage(GetDlgItem(IDC_EDIT1)-&gt;m_hWnd,WM_GETTEXT,10,(LPARAM)ch1);</code></p><p>《40》<code>SendDlgItemMessage(IDC_EDIT3,WM_SETTEXT,0,(LPARAM)ch3);</code></p><p>功能等价于<code>::SendMessage(GetDlgItem(IDC_EDIT3)-&gt;m_hWnd,WM_SETTEXT,0,(LPARAM)ch3);</code></p><p><strong>2、常用函数（比较全）</strong></p><ul><li><code>WinExec()</code></li><li><code>ExitWindowsEx()</code></li><li><code>GlobalMemoryStatus()</code></li><li><code>GetSystemInfo()</code></li><li><code>GetSystemDirectory()</code></li><li><code>GetWindowsDirectory()</code></li><li><code>GetTaskmanWindow()</code> user32.dll中 获取任务栏窗口句柄</li><li><code>OpenProcessToken()</code> 打开一个进程的访问令牌</li><li><code>GetCurrentProcess()</code> 获取本进程句柄</li><li><code>LookupPrivilegeValue()</code> 修改进程权限</li><li><code>AdjustTokenProvileges()</code> 通知WindowsNT修改本进程权利</li><li><code>CreateRectRgn()</code></li><li><code>CreateEllipticRgnIndirect()</code></li><li><code>PtInRegion()</code></li><li><code>CommandToIndex()</code> ID号转换为索引值</li></ul><p>菜单类:</p><ul><li><code>DrawMenuBar()</code> 重画菜单</li><li><code>SetDefaultItem()</code> 设置默认菜单项</li><li><code>CheckMenuItem()</code>设置菜单项Check状态</li><li><code>CreatePopupMenu()</code>创建弹出菜单</li></ul><p>窗口类:</p><ul><li><code>MoveWindow()</code></li><li><code>Invalidate()</code>使窗口无效,窗口无效时会进行窗口重绘</li><li><code>GetParent()</code> 获得窗口的父窗口句柄</li><li><code>BringWindowToTop()</code>把窗口放到顶部</li><li><code>SetWindowPos()</code></li><li><code>DeferWindowPos()</code></li><li><code>SetActiveWindow()</code>激活顶层窗口</li><li><code>Set/GetForegroundWindow()</code> 设置/获取前台窗口,返回句柄</li><li><code>Set/GetWindowLong()</code>改变窗口属性</li><li><code>GetNextWindow()</code>获取下一个窗口句柄</li><li><code>GetWindow()</code> 获取窗口句柄</li><li><code>FromHandle()</code> 通过句柄获取指针</li><li><code>AfxGetInstanceHandle()</code>获取程序当前实例句柄</li><li><code>AfxRegisterWndClass()</code></li><li><code>Set/GetClassLong()</code></li><li><code>Set/GetWindowLong()</code></li><li><code>GetWindowRect()</code>获取窗口在屏幕中的Rect</li></ul><p>对话框:</p><ul><li><code>GetDlgItem()</code></li><li><code>Set/GetDlgItemText()</code></li><li><code>Set/GetDlgItemInt()</code></li><li><code>Set/GetDlgItem()</code></li><li><code>SendDlgItemMessage()</code></li><li><code>SetFocus()</code>文本编辑框Edit控件若要响应回车按键消息，必须设置为多行类型</li><li><code>GetNextDlgTabItem()</code>获取下一个有TABStop属性的控件句柄</li><li><code>OnCtlColor()</code> WM_CTLCOLOR窗口绘制消息响应函数</li><li><code>GetDlgCtrlID()</code></li><li><code>SetButtonText()</code>设置按钮文本CreateRectRgn</li><li><code>GetStartPosition()</code></li><li><code>GetNextPathName()</code></li><li><code>SetHorizontalExtent()</code></li><li><code>SHBrowseForFolder()</code></li></ul><p>属性表单:</p><ul><li><code>SetWizardMode()</code></li><li><code>SetWizardButtons()</code></li><li><code>OnSetActive()</code></li></ul><p>工具栏:</p><ul><li><code>RecalcLayout()</code></li><li><code>ShowControlBar()</code></li></ul><p>状态栏:</p><ul><li><code>CommandToIndex()</code> 根据ID号获取索引值</li><li><code>SetMessageText()</code></li><li><code>GetMessageBar()</code></li><li><code>GetDescendantWindow()</code></li></ul><p>图形类</p><ul><li><p><code>OnEraseBkgnd()</code></p></li><li><p><code>CButton::DrawItem()</code></p></li><li><p><code>SetBkMode()</code>设置文字背景</p></li><li><p><code>SetTextColor()</code></p></li><li><p><code>SetBkColor()</code></p></li><li><p><code>SetROP2()</code></p></li><li><p><code>SetClipRtn()</code></p></li><li><p><code>DrawText()</code></p></li><li><p><code>BeginPath()</code></p></li><li><p><code>EndPath()</code></p></li><li><p><code>BeginPaint()</code></p></li><li><p><code>EndPaint()</code></p></li><li><p><code>GetTextExtend()</code></p></li><li><p><code>SetWorldTransform()</code></p></li><li><p><code>GetDeviceCaps()</code></p></li><li><p><code>Set/GetViewportOrg()</code></p></li><li><p><code>Set/GetWindowOrg()</code></p></li><li><p><code>DPtoLP()</code>将设备坐标点转换为逻辑坐标点</p></li><li><p><code>LPtoDP()</code>将逻辑坐标点转换为设备坐标点</p></li><li><p><code>DeleteMetaFile()</code></p></li><li><p><code>CopyMetaFile()</code></p></li><li><p><code>GetMetaFile()</code></p></li><li><p><code>GetEnhMetaFile()</code></p></li><li><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> CView::OnPaint()</span><br><span class="line">{</span><br><span class="line">    <span class="function">CPaintDC <span class="title">dc</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line">    OnPrepareDC(&amp;dc);</span><br><span class="line">    OnDraw(&amp;dc);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><p>文件操作:</p><ul><li><p><code>EncryptFile()</code></p></li><li><p><code>CreateFile()</code></p></li><li><p><code>ReadFile()</code></p></li><li><p><code>WriteFile()</code></p></li><li><p><code>SetFilePointer()</code></p></li><li><p><code>::WriteProfileString()</code> 向win.ini写入相关信息</p></li><li><p><code>::GetProfileString()</code> 从win.ini获取相关信息</p></li><li><p><code>CWinApp::WriteProfileString()</code>向注册表中写入相关信息</p></li><li><p><code>CWinApp::GetProfileString()</code> 从注册表中获取相关信息</p></li><li><p><code>::WritePrivateProfileString()</code></p></li><li><p><code>RegCreateKeyEx()</code>创建注册表项</p></li><li><p><code>RegCloseKey()</code>关闭注册表项</p></li><li><p><code>RegOpenKeyEx()</code> 打开注册表项</p></li><li><p><code>RegSetValueEx()</code> 写入注册表项</p></li><li><p><code>RegQueryValueEx()</code> 读取注册表项</p></li><li><p><code>RegEnumKeyEx()</code></p></li><li><p><code>RegDeleteKey()</code></p></li></ul><p>文档视图:</p><p>钩子:</p><ul><li><code>SetWindowsHookEx()</code></li><li><code>CallNextHookEx()</code></li><li><code>UnhookWindowsHookEx()</code></li><li><code>GetCurrentThreadID()</code></li><li><code>GetModuleHandle()</code></li></ul><p>动态库:</p><ul><li><code>#pragma data_seg()</code></li><li><code>#pragma comment(linker,"/section:XXX,RWS")</code> R可读W可写S共享</li><li><code>SEGMENTS</code></li><li><code>XXX READ WRITE SHARED</code></li><li><code>MAKEINTRESOURCE()</code></li><li><code>GetProcAddress()</code>获取函数地址</li><li><code>LoadLibrary()</code>加载Dll</li><li><code>FreeLibrary()</code>减少Dll的引用计数</li></ul><p>多线程:</p><ul><li><code>CreateThread()</code></li><li><code>CloseHandle()</code></li></ul><p>互斥:</p><ul><li><p><code>CreateMutex()</code></p></li><li><p><code>ReleaseMutex()</code></p></li><li><p><code>WaitForSingleObject()</code></p></li></ul><p>事件:</p><ul><li><p><code>CreateEvent()</code></p></li><li><p><code>SetEvent()</code> 设置有信号状态</p></li><li><p><code>ResetEvent()</code> 设置无信号状态</p></li></ul><p>临界区:</p><ul><li><p><code>EnterCriticalSection()</code></p></li><li><p><code>InitializeCriticalSection()</code></p></li><li><p><code>LeaveCriticalSection()</code></p></li><li><p><code>DeleteCriticalSection()</code></p></li></ul><p>异步套接字:</p><ul><li><p><code>WSAAsyncSelect()</code> 为一个套接字请求网络消息通知</p></li><li><p><code>WSAEnumProtocols()</code>检索可用的网络通信协议</p></li><li><p><code>WSASocket()</code></p></li></ul><p>剪贴板:</p><ul><li><p><code>OpenClipboard()</code> 打开剪贴板</p></li><li><p><code>CloseClipboard()</code>关闭剪贴板</p></li><li><p><code>EmptyClipboard()</code>清空剪贴板</p></li><li><p><code>SetClipboardData()</code></p></li><li><p><code>GetClipboardData()</code></p></li><li><p><code>GlobalAlloc()</code></p></li><li><p><code>GlobalLock()</code></p></li><li><p><code>GlobalUnlock()</code></p></li><li><p><code>IsClipboardFormatAvailable()</code></p></li></ul><p>匿名管道:</p><ul><li><p><code>CreatePipe()</code></p></li><li><p><code>CreateProcess()</code></p></li><li><p><code>CreateFile()</code></p></li><li><p><code>ReadFile()</code></p></li><li><p><code>WriteFile()</code></p></li></ul><p>命名管道:</p><ul><li><p><code>CreateNamedPipe()</code></p></li><li><p><code>ConnectNamedPipe()</code></p></li><li><p><code>WaitNamedPipe()</code></p></li><li><p><code>CreateFile()</code></p></li><li><p><code>ReadFile()</code></p></li><li><p><code>WriteFile()</code></p></li></ul><p>邮槽:</p><ul><li><code>CreateMailslot()</code></li></ul><p>多媒体:</p><ul><li><code>mciSendCommand()</code> <code>&lt;mmsystem.h&gt;</code></li></ul><p>窗口、控件的指针和句柄的相互转化</p><p>1指针转化为句柄</p><p>在MFC应用程序中首先要获得窗口的指针，然后将其转化为句柄</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CWnd* pWnd;</span><br><span class="line">HANDLE hWnd = pWnd-&gt;GetSafeHwnd();</span><br></pre></td></tr></tbody></table></figure><p>2句柄转化为指针</p><p>在MFC应用程序中首先获得对话框控件的句柄，然后获得其指针</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HANDLE hWnd;</span><br><span class="line">GetDlgItem(IDC_xxx,&amp;hWnd);</span><br><span class="line">CWnd * pWnd = FromHandle(hWnd);</span><br></pre></td></tr></tbody></table></figure><p>获得程序窗口指针的办法</p><p>1获得主框架窗口指针(任何时候都可以用，只要是MFC程序中)</p><p><code>CWnd* pWnd = AfxGetMainWnd();</code></p><p>2获得对话框中控件指针</p><p><code>CWnd* pWnd = GetDlgItem(IDC_xxx);</code></p><p>3获得对话框中某控件的句柄</p><p><code>HANDLE GetDlgItem(m_hDLG,m_nID_DlgItem);</code></p><p>4获得GDI对象的句柄</p><p><code>HANDLE m_hGDIObj = m_pGDIObj-&gt;GetSafeHanle();</code></p><p>1. 如何获取应用程序的 实例句柄? <code>AfxGetInstanceHandle()</code></p><pre><code>应用程序的 实例句柄保存在`CWinAppIm_hInstance` 中,可以这么调用 `AfxGetInstancdHandle`获得句柄.  `Example: HANDLE hInstance=AfxGetInstanceHandle();`</code></pre><p>2. 如何通过代码获得应用程序主窗口的 指针? <code>AfxGetMainWnd</code>   <code>GetSafeHwnd()</code> <code>AfxGetAppName()</code>   `AfxGetThread``</p><pre><code>主窗口的 指针保存在`CWinThread::m_pMainWnd`中,调用 `AfxGetMainWnd`实现。 </code></pre><p>   【例】    <code>AfxGetMainWnd() -&gt;ShowWindow(SW_SHOWMAXMIZED);</code> //使程序最大化. </p><p>   【例】此例的主窗口是对话框，下面的代码是在另外一个CFileTreeCtrl 类（子窗）中相关函数实现在主对话框（主窗）中的几个 静态文本框（子窗）中显示路径：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">CWnd* m_pCWnd= AfxGetMainWnd(); <span class="comment">//得到主窗口指针,通过主窗指针访问其他子窗资源</span></span><br><span class="line"><span class="comment">//方法一</span></span><br><span class="line">m_pCWnd-&gt;SetDlgItemText(IDC_STATIC_path,<span class="string">"CWnd* "</span>+m_sCurPath); <span class="comment">//在主窗中的子窗（ID：IDC_STATIC_path）中显示字符串</span></span><br><span class="line">m_pCWnd-&gt;SetDlgItemText(IDC_STATIC_who,<span class="string">"路径显示由FileTreeCtrl类完成："</span>);</span><br><span class="line"><span class="comment">//方法二</span></span><br><span class="line">m_pCWnd-&gt;SendMessage(STN_CLICKED); <span class="comment">//向主窗口发送一个消息,显示任务由主窗完成。</span></span><br><span class="line"><span class="comment">//在主窗的.cpp中有：ON_MESSAGE(STN_CLICKED, OnSTATICpath3)相关描述&nbsp;</span></span><br><span class="line"><span class="comment">//有的函数必须通过窗口的 句柄 来访问，我们可以使用下面的方法三</span></span><br><span class="line"><span class="comment">//CWnd::GetSafeHwnd&nbsp;</span></span><br><span class="line"><span class="comment">//Returns the window handle for a window</span></span><br><span class="line"><span class="comment">//HWND GetSafeHwnd( ) const;</span></span><br><span class="line">HWND m_hWnd_tree =GetSafeHwnd();<span class="comment">//【注】此处得到的只是当前窗口（FileTree类）的句柄</span></span><br><span class="line">HWND m_hWnd = m_pCWnd-&gt;GetSafeHwnd();<span class="comment">// 这里才是主窗口的句柄（由主窗指针得到主窗的句柄）</span></span><br><span class="line"><span class="comment">//BOOL SetWindowText( HWND hWnd, LPCTSTR lpString )</span></span><br><span class="line">::SetWindowText(m_hWnd,<span class="string">"ok2222"</span>);<span class="comment">//修改主窗口标题</span></span><br><span class="line">::SetDlgItemText(m_hWnd,IDC_STATIC_path2,<span class="string">"HWND: "</span>+m_sCurPath);</span><br></pre></td></tr></tbody></table></figure><p>   【另】AfxGetThread</p><pre><code>`CWinThread* AfxGetThread( );`Return Value：Pointer to the currently executing thread. </code></pre><p>3. 如何在程序中获得其他程序的 图标? <code>AfxGetInstanceHandle()</code></p><p>   <code>HINSTANCE AfxGetInstanceHandle( );</code></p><pre><code>Return Value  An HINSTANCE to the current instance of the application. If called from within a DLL linked with the USRDLL version of MFC, an HINSTANCE to the DLL is returned.Remarks  This function allows you to retrieve the instance handle of the current application. AfxGetInstanceHandle always returns the HINSTANCE of your executable file (.EXE) unless it is called from within a DLL linked with the USRDLL version of MFC. In this case, it returns an HINSTANCE to the DLL.  两种方法:     (1) SDK函数 `SHGetFileInfo` 或使用 ExtractIcon获得图标资源的 handle(句柄),     (2) SDK函数 `SHGetFileInfo`获得有关文件的 很多信息,如大小图标,属性,类型等.       Example(1): 在程序窗口左上角显示 NotePad图标.</code></pre><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> CSampleView: OnDraw(CDC * pDC)</span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span>( :: SHGetFileInfo(_T(<span class="string">"c:\\pwin95\\notepad.exe"</span>),<span class="number">0</span>,</span><br><span class="line">                         &amp;stFileInfo,<span class="keyword">sizeof</span>(stFileInfo),SHGFI_ICON))</span><br><span class="line">    {</span><br><span class="line">        pDC -&gt;DrawIcon(<span class="number">10</span>,<span class="number">10</span>,stFileInfo.hIcon);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><pre><code>Example(2):同样功能,Use ExtractIcon Function</code></pre><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> CSampleView:: OnDraw(CDC *pDC)</span><br><span class="line">{</span><br><span class="line">    HICON hIcon=:: ExtractIcon(AfxGetInstanceHandle(),_T</span><br><span class="line">                               (<span class="string">"NotePad.exe"</span>),<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (hIcon &amp;&amp;hIcon!=(HICON)<span class="number">-1</span>)</span><br><span class="line">        pDC-&gt;DrawIcon(<span class="number">10</span>,<span class="number">10</span>,hIcon);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><pre><code>【说明】关于如何得到系统文件的正确路径，象win.ini system32.ini等的路径，各种系统中具体的路径是不一样的。如：        获得notepad.exe的路径正规上来说用`GetWindowsDirectory` 函数得到；        如果是调用 win95下的画笔，应该用访问注册表的方法获得其路径；        要作成一个比较考究的程序，考虑应该全面点.【另】             `HINSTANCE AfxGetResourceHandle( );`             Return Value：An HINSTANCE handle where the default resources of the application are loaded. </code></pre><p>4.    有关取得桌面句柄 <code>GetDesktopWindow()</code></p><p>MSDN中的例子： </p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 静态函数CWnd:: GetDesktopWindow 返回桌面窗口的指针。下例说明了MFC</span></span><br><span class="line"><span class="keyword">void</span> CFrameWnd::BeginModalState ()</span><br><span class="line">{</span><br><span class="line">    <span class="comment">//first count all windows that need to be disabled</span></span><br><span class="line">    UINT nCount=<span class="number">0</span>;</span><br><span class="line">    HWND hWnd=:: GetWindow (:: GetDesktopWindow (), GW_CHILD);</span><br><span class="line">    <span class="keyword">while</span> (hWnd!=<span class="literal">NULL</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span> (:: IsWindowEnabled (hwnd) &amp;&amp;</span><br><span class="line">            CWnd::FromHandlePermanent (hWnd)!=<span class="literal">NULL</span> &amp;&amp;</span><br><span class="line">            AfxIsDescendant (pParent-&gt;m_hWnd, hWnd) &amp;&amp;</span><br><span class="line">            :: SendMessage (hWnd, WM_DISABLEMODAL, <span class="number">0</span>, <span class="number">0</span>) == <span class="number">0</span>)</span><br><span class="line">        {</span><br><span class="line">            ++nCount;</span><br><span class="line">        }</span><br><span class="line">        hWnd=:: GetWindow (hWnd, GW_HWNDNEXT);</span><br><span class="line">    }</span><br><span class="line">}&nbsp;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用户的问题：下面程序取的不是同一程序的句柄,但是GetModuleFileName返回的结果一样请问为什莫&nbsp;</span></span><br><span class="line">HWND ChWnd;<span class="comment">//子窗口句柄&nbsp;</span></span><br><span class="line">HWND hwDesktop=::GetDesktopWindow();<span class="comment">//取得桌面句柄&nbsp;</span></span><br><span class="line">ChWnd=::GetWindow(hwDesktop,GW_CHILD);<span class="comment">//取得桌面子句柄&nbsp;</span></span><br><span class="line">CString csTitle,csClass,csTm,mLookstring;&nbsp;</span><br><span class="line"><span class="keyword">char</span> szBuffer[<span class="number">255</span>];&nbsp;</span><br><span class="line"><span class="keyword">while</span>(ChWnd!=<span class="literal">NULL</span>)<span class="comment">//循环取子句柄的同级句柄&nbsp;</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span>(::IsWindowVisible(ChWnd))<span class="comment">//判断是否为可显示窗口&nbsp;</span></span><br><span class="line">    {&nbsp;</span><br><span class="line">        ::GetWindowText(ChWnd,csTitle.GetBuffer(<span class="number">255</span>),<span class="number">254</span>);&nbsp;</span><br><span class="line">        ::GetClassName(ChWnd,csClass.GetBuffer(<span class="number">255</span>),<span class="number">254</span>);&nbsp;</span><br><span class="line">        csTitle.ReleaseBuffer();<span class="comment">//标题&nbsp;</span></span><br><span class="line">        csClass.ReleaseBuffer();<span class="comment">//类名&nbsp;</span></span><br><span class="line">        csTm.Format(<span class="string">"%08X:"</span>,ChWnd);&nbsp;</span><br><span class="line">        <span class="keyword">if</span>(csTitle==<span class="string">""</span>)&nbsp;</span><br><span class="line">        {&nbsp;</span><br><span class="line">            mLookstring=csTm+csClass;&nbsp;</span><br><span class="line">        }<span class="keyword">else</span>&nbsp;</span><br><span class="line">        {&nbsp;</span><br><span class="line">            mLookstring=csTm+csTitle;&nbsp;</span><br><span class="line">        }&nbsp;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//这里的窗口句柄不是同一个程序吧?（问题所在！）可是为什莫结果一样&nbsp;</span></span><br><span class="line">        HINSTANCE hInstance = (HINSTANCE)::GetWindowLong(ChWnd,DWL_USER);&nbsp;</span><br><span class="line">        ::GetModuleFileName(hInstance, szBuffer, <span class="keyword">sizeof</span>(szBuffer));&nbsp;</span><br><span class="line">        MessageBox(szBuffer,mLookstring);&nbsp;</span><br><span class="line">    }&nbsp;</span><br><span class="line">    ChWnd=::GetWindow(ChWnd,GW_HWNDNEXT);&nbsp;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>回答: </p><p>问题在于Win32下GetWindowLong(ChWnd,DWL_USER)总是返回当前程序运行的hInstance，所以你得到的文件名总是一个。所以你要用枚举所有”进程的程序名”来获得程序名。 </p><p>=== 再谈句柄与指针的区别 </p><p>许多开始学习VC的朋友，最多听说的两个词莫过于指针和句柄了。 </p><p>但是，确经常搞不清他们之间的区别。 </p><p>首先，句柄是一个窗口的标志，也就是所有从CWND类继承下来的，多有句柄这个成员。 </p><p>他能做的，也就是唯一代表一个桌面上的窗口罢了。而指针是一个地址，如果它指向了一个内存中的对象，那么就可以对它进行任意操作了，当然，并不局限于自己的应用程序，你如果能够获得别的应用程序的某个对象的指针，也可以进行操作。然而，如果要获得指针，首先，必须找到那个窗口的句柄，然后用函数FromHandle就可以得到他的指针了。 </p><p>===   问题1: </p><p>如何在自定义的消息中发送一个字符串？例如: </p><p><code>SendMessage(MyWnd,WM_USERDEFINED, 0,0)</code></p><p>如何将字符串Buffer写入wParam或lParam? </p><p>你可以把字符串的地址传递过去，因为地址正好是32位。如： </p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> s[<span class="number">256</span>];&nbsp;</span><br><span class="line">SendMessage(MyWnd,WM_USERDEFINED, (WPARAM) s,<span class="number">0</span>)</span><br></pre></td></tr></tbody></table></figure><p>接收方只需要将wParam赋给一个char*就可以了。但此方法只能使用于在一个进程内部传递数据。 </p><p>===   问题2: </p><p>1.在VC应用程序框架中,如何加入自己做的类,如何定义这个类的对象,我想在鼠标点击某个菜单项的时候才生成这个对象,做得到吗?(这个类的构造函数是带参数的)。 </p><p>2.消息发送函数: </p><p>   <code>PostMessage(HWND handle,WM_MYMESSAGE,  WPARAM wParam,LPARAM lParam)</code></p><p>   中: </p><p>第一个参数如何获得?</p><p>如果我的消息是在自己的应用程序中生成的,想发给应用程序的窗口让它显示某些数据(用TextOut函数),能做到吗?</p><p>(也可以说是这样的问题:用Appwizard生成应用程序框架,在生成的类(如CView)中如何得到窗口的句柄,并放在PostMessage函数中。) </p><p>3.wParam,lParam,在消息响应函数中如何用?vc是怎样保证这两个数传到函数中的?问题比较多,谢谢! </p><p>水平: 刚入门 </p><p>回答: </p><p>1、这个问题是肯定的。你可以使用ClassWizard定义类，也可以手工输入。如果类定义已经在某个文件中，只要使用Project|Add files将文件加入工程就可以了。要想定义类的对象，只要在你的菜单项的相应事件中就可以了。如： </p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">{&nbsp;</span><br><span class="line">    ...&nbsp;</span><br><span class="line">    <span class="function">MyClass <span class="title">myObject</span><span class="params">(<span class="string">"Hello"</span>)</span></span>;&nbsp;</span><br><span class="line">    myObject.MyMethod();&nbsp;</span><br><span class="line">    ...&nbsp;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>2、在你自己的程序中传递消息当然没有任何问题,只要你知道要调用的窗口类是从CWnd继承来的，你就可以使用GetSafeHwnd函数获得窗口句柄。不过一般在自己的同一个程序中有时不愿意使用自定义消息，因为太麻烦。你完全可以给要调用的类添加一个成员函数，只要想显示数据，直接调用这个成员函数不就可以了？何必使用PostMessage呢？一般只有在程序间调用，才愿意使用自定义消息。这时，你通常可以使用FindWindow获得窗口句柄(QA000251 “如何利用<code>FindWindow()</code>函数查找程序”)。 </p><p>3、对于MFC已经定义了消息处理函数的消息，MFC会自动把wParam和lParam映射为更容易使用的方式。如OnMouseMove( UINT nFlags, CPoint point )。对于MFC不能自动处理的函数，如你使用ON_MESSAGE定义消息函数，则MFC会把wParam和lParam原原本本的传递给你的函数，不做任何处理。 </p><p>===   一个未公开的Win32 API函数：<code>GetTaskmanWindow()</code> </p><pre><code>下例中还用到： `GetProcAddress`     `GetParent(hWnd)`                `HMODULE hUser32 = GetModuleHandle("user32");` </code></pre><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// getaskmanwnd.cpp (Windows NT/2000)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 利用一个未公开的Win32 API函数：GetTaskmanWindow，</span></span><br><span class="line"><span class="comment">// 对Windows的任务栏进行操作(显示/隐藏)。这个函数返回拥有任务栏按钮的窗口句柄。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// This example will show you how you can obtain a handle to the</span></span><br><span class="line"><span class="comment">// Windows Taskbar window.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// (c)1999 Ashot Oganesyan K, SmartLine, Inc</span></span><br><span class="line"><span class="comment">// mailto:ashot@aha.ru, http://www.protect-me.com, http://www.codepile.com</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">// User32!GetTaskmanWindow (NT specific!)</span></span><br><span class="line"><span class="comment">// This function returns a handle to the window that ownes the taskbar buttons</span></span><br><span class="line"><span class="comment">// HWND GetTaskmanWindow()</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">HWND</span> <span class="params">(WINAPI *PROCGETTASKMANWND)</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line">PROCGETTASKMANWND GetTaskmanWindow;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (argc&lt;<span class="number">2</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Usage:\n\ngetaskmanwnd.exe S|H\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    HMODULE hUser32 = GetModuleHandle(<span class="string">"user32"</span>);</span><br><span class="line">    <span class="keyword">if</span> (!hUser32)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    GetTaskmanWindow = (PROCGETTASKMANWND)GetProcAddress(hUser32,<span class="string">"GetTaskmanWindow"</span>);&nbsp;</span><br><span class="line">    <span class="keyword">if</span> (!GetTaskmanWindow)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    HWND hWnd = GetTaskmanWindow();</span><br><span class="line">    <span class="keyword">if</span> (!hWnd)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (*argv[<span class="number">1</span>]==<span class="string">"H"</span> || *argv[<span class="number">1</span>]==<span class="string">"h"</span>)</span><br><span class="line">        ShowWindow(GetParent(hWnd),SW_HIDE);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        ShowWindow(GetParent(hWnd),SW_SHOW);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;1、MFC编辑框、静态文本框相关的常用函数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;《1》&lt;code&gt;GetDlgItemText(ID ,str)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;作用：从对话框中获取文本&lt;/p&gt;
&lt;p&gt;第一个参数为要获取的编辑框(或者静态文本框、单选按钮等可以显示内容的控件)的ID，第二个参数为字符串(Cstring 类型)的变量，获取的文本存储在str中。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C++" scheme="http://blog.iwxyi.com/tags/C/"/>
    
      <category term="整理" scheme="http://blog.iwxyi.com/tags/%E6%95%B4%E7%90%86/"/>
    
      <category term="MFC" scheme="http://blog.iwxyi.com/tags/MFC/"/>
    
  </entry>
  
  <entry>
    <title>Win32 SDK窗口模板</title>
    <link href="http://blog.iwxyi.com/2018/05/01/Win32-SDK%E7%AA%97%E5%8F%A3%E6%A8%A1%E6%9D%BF/"/>
    <id>http://blog.iwxyi.com/2018/05/01/Win32-SDK窗口模板/</id>
    <published>2018-05-01T02:15:00.000Z</published>
    <updated>2019-10-13T02:23:33.629Z</updated>
    
    <content type="html"><![CDATA[<p>Windows SDK 应用程序窗口模板</p><p>可以直接用</p><a id="more"></a><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tchar.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND, UINT, WPARAM, LPARAM)</span></span>; <span class="comment">// 窗口函数说明</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// -------------------- 入口函数的代码 --------------------</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> WINAPI <span class="title">WinMain</span><span class="params">(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, <span class="keyword">int</span> nCmdShow)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    WNDCLASSEX wcex;</span><br><span class="line">    HWND hWnd;</span><br><span class="line">    MSG msg;</span><br><span class="line">    TCHAR szWindowClass[] = <span class="string">"窗口示例"</span>;   <span class="comment">// 窗口类名</span></span><br><span class="line">    TCHAR szTitle[]       = <span class="string">"我的窗口"</span>; <span class="comment">// 窗口标题名</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ------------------- 初始化窗口类 -------------------</span></span><br><span class="line"></span><br><span class="line">    wcex.cbSize        = <span class="keyword">sizeof</span>(WNDCLASSEX);                                         <span class="comment">// 窗口类的大小</span></span><br><span class="line">    wcex.style         = <span class="number">0</span>;                                                          <span class="comment">// 窗口类型为默认类型</span></span><br><span class="line">    wcex.lpfnWndProc   = WndProc;                                                    <span class="comment">// 窗口处理函数为 WndProc</span></span><br><span class="line">    wcex.cbClsExtra    = <span class="number">0</span>;                                                          <span class="comment">// 窗口类无扩展</span></span><br><span class="line">    wcex.cbWndExtra    = <span class="number">0</span>;                                                          <span class="comment">// 窗口实例无扩展</span></span><br><span class="line">    wcex.hInstance     = hInstance;                                                  <span class="comment">// 当前实例句柄</span></span><br><span class="line">    wcex.hIcon         = LoadIcon(hInstance, MAKEINTRESOURCE(IDI_APPLICATION));      <span class="comment">// 窗口的图标为默认图标</span></span><br><span class="line">    wcex.hCursor       = LoadCursor(<span class="literal">NULL</span>, IDC_ARROW);                                <span class="comment">// 窗口采用箭头光标</span></span><br><span class="line">    wcex.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH);                        <span class="comment">// 窗口背景为白色</span></span><br><span class="line">    wcex.lpszMenuName  = <span class="literal">NULL</span>;                                                       <span class="comment">// 窗口中无菜单</span></span><br><span class="line">    wcex.lpszClassName = szWindowClass;                                              <span class="comment">// 窗口类名为“窗口实例”</span></span><br><span class="line">    wcex.hIconSm       = LoadIcon(wcex.hInstance, MAKEINTRESOURCE(IDI_APPLICATION)); <span class="comment">// 窗口的小图标为默认图标</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// -------------------- 注册窗口类 --------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( !RegisterClassEx(&amp;wcex) ) <span class="comment">// 如果注册失败则发出警告</span></span><br><span class="line">    {</span><br><span class="line">        MessageBox(<span class="literal">NULL</span>, _T(<span class="string">"窗口类注册失败！"</span>), _T(<span class="string">"窗口注册"</span>), <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// --------------------- 创建窗口 ---------------------</span></span><br><span class="line"></span><br><span class="line">    hWnd = CreateWindow(</span><br><span class="line">               szWindowClass,                <span class="comment">// 窗口类名</span></span><br><span class="line">               szTitle,                      <span class="comment">// 窗口实例的标题名</span></span><br><span class="line">               WS_OVERLAPPEDWINDOW,          <span class="comment">// 窗口的风格</span></span><br><span class="line">               CW_USEDEFAULT, CW_USEDEFAULT, <span class="comment">// 窗口左上角坐标为默认值</span></span><br><span class="line">               CW_USEDEFAULT, CW_USEDEFAULT, <span class="comment">// 窗口的高和宽为默认值</span></span><br><span class="line">               <span class="literal">NULL</span>,                         <span class="comment">// 无父窗口</span></span><br><span class="line">               <span class="literal">NULL</span>,                         <span class="comment">// 无主菜单</span></span><br><span class="line">               hInstance,                    <span class="comment">// 创建此窗口应用程序的当前句柄</span></span><br><span class="line">               <span class="literal">NULL</span>                          <span class="comment">// 如果创建窗口失败则发出警告</span></span><br><span class="line">           );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( !hWnd )</span><br><span class="line">    {</span><br><span class="line">        MessageBox(<span class="literal">NULL</span>, <span class="string">"创建窗口失败！"</span>, _T(<span class="string">"创建窗口"</span>), <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    ShowWindow(hWnd, nCmdShow);         <span class="comment">// 显示窗口</span></span><br><span class="line">    UpdateWindow(hWnd);                 <span class="comment">// 绘制用户区</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(GetMessage(&amp;msg, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="number">0</span>)) <span class="comment">// 消息循环</span></span><br><span class="line">    {</span><br><span class="line">        TranslateMessage(&amp;msg);</span><br><span class="line">        DispatchMessage(&amp;msg);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>) msg.wParam;            <span class="comment">// 程序终止时将信息返回系统</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ----------------------- 窗口函数 -----------------------</span></span><br><span class="line"></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">switch</span>(message)</span><br><span class="line">    {</span><br><span class="line">    <span class="keyword">case</span> WM_DESTROY :</span><br><span class="line">        PostQuitMessage(<span class="number">0</span>); <span class="comment">// 发出 WM_QUIT 消息，没有这句话则只是关闭窗口但进程不会停止</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span> :</span><br><span class="line">        <span class="keyword">return</span> DefWindowProc(hWnd, message, wParam, lParam); <span class="comment">// 默认时采用系统消息默认处理函数</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Windows SDK 应用程序窗口模板&lt;/p&gt;
&lt;p&gt;可以直接用&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="Win32 SDK" scheme="http://blog.iwxyi.com/tags/Win32-SDK/"/>
    
      <category term="模板" scheme="http://blog.iwxyi.com/tags/%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>VC++绘图函数大全</title>
    <link href="http://blog.iwxyi.com/2018/03/18/MFC%E6%8E%A7%E4%BB%B6%E4%BD%BF%E7%94%A8%E5%A4%A7%E5%85%A8/"/>
    <id>http://blog.iwxyi.com/2018/03/18/MFC控件使用大全/</id>
    <published>2018-03-18T01:07:00.000Z</published>
    <updated>2019-10-13T01:11:07.789Z</updated>
    
    <content type="html"><![CDATA[<h1 id="windows的绘图工具"><a href="#windows的绘图工具" class="headerlink" title="windows的绘图工具"></a>windows的绘图工具</h1><ol><li>画笔CPen</li><li>画刷CBrush</li><li>调色板CPalette</li></ol><a id="more"></a><h2 id="画笔通常具有宽度-样式和颜色3中属性"><a href="#画笔通常具有宽度-样式和颜色3中属性" class="headerlink" title="画笔通常具有宽度 样式和颜色3中属性"></a>画笔通常具有宽度 样式和颜色3中属性</h2><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><ol><li><code>CPen( );</code></li><li><code>CPen( int nPenStyle, int nWidth, COLORREF crColor );</code></li><li><code>CPen( int nPenStyle, int nWidth, const LOGBRUSH* pLogBrush, int nStyleCount = 0, const DWORD* lpStyle = NULL );</code></li></ol><p>当使用第一种构造函数时，还得继续调用一下函数</p><ul><li><code>CPen::CreatePen</code></li><li><code>BOOL CreatePen( int nPenStyle, int nWidth, COLORREF crColor );</code></li><li><code>BOOL CreatePen( int nPenStyle, int nWidth, const LOGBRUSH* pLogBrush, int nStyleCount = 0, const DWORD* lpStyle = NULL );</code></li><li><code>BOOL CreatePenIndirect( LPLOGPEN lpLogPen );</code></li></ul><h3 id="涉及的结构体"><a href="#涉及的结构体" class="headerlink" title="涉及的结构体"></a>涉及的结构体</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tagLOGPEN</span> {</span>  <span class="comment">/* lgpn */</span></span><br><span class="line">    UINT     lopnStyle;</span><br><span class="line">    POINT    lopnWidth;</span><br><span class="line">    COLORREF lopnColor;</span><br><span class="line">} LOGPEN;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tagLOGBRUSH</span> {</span> </span><br><span class="line">  UINT     lbStyle; </span><br><span class="line">  COLORREF lbColor; </span><br><span class="line">  LONG     lbHatch; </span><br><span class="line">} LOGBRUSH, *PLOGBRUSH; </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tagPOINT</span> {</span></span><br><span class="line">   LONG x;</span><br><span class="line">   LONG y;</span><br><span class="line">} POINT;</span><br></pre></td></tr></tbody></table></figure><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><ol><li><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CPen pen;</span><br><span class="line">  pen.CreatePen(PS_SOLID,<span class="number">1</span>,RGB(<span class="number">0</span>,<span class="number">0</span>,<span class="number">225</span>));</span><br></pre></td></tr></tbody></table></figure></li><li><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CPen *pen1=<span class="keyword">new</span> CPen(PS_SOLID,<span class="number">1</span>,RGB(<span class="number">0</span>,<span class="number">0</span>,<span class="number">225</span>))</span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="画刷通常具有填充色-填充图案和填充样式3种属性"><a href="#画刷通常具有填充色-填充图案和填充样式3种属性" class="headerlink" title="画刷通常具有填充色 填充图案和填充样式3种属性"></a>画刷通常具有填充色 填充图案和填充样式3种属性</h2><p>构造函数</p><ul><li><code>CBrush( );</code></li><li><code>CBrush( COLORREF crColor );</code></li><li><code>CBrush( int nIndex, COLORREF crColor );</code></li><li><code>CBrush( CBitmap* pBitmap );</code></li></ul><blockquote><p>If you use the constructor with no arguments, you must initialize the resulting CBrush object with<br>CreateSolidBrush,<br>CreateHatchBrush,<br>CreateBrushIndirect,<br>CreatePatternBrush, or<br>CreateDIBPatternBrush.</p></blockquote><h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h3><ol><li><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CBrush brush1;   <span class="comment">// Must initialize!</span></span><br><span class="line">brush1.CreateSolidBrush(RGB(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>));   <span class="comment">// Blue brush.</span></span><br></pre></td></tr></tbody></table></figure></li><li></li></ol><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">CBrush <span class="title">brush3</span><span class="params">(HS_DIAGCROSS, RGB(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>))</span></span>;</span><br><span class="line"><span class="function">CBrush <span class="title">brush3</span><span class="params">(HS_DIAGCROSS, RGB(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>))</span></span>;</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CBitmap bmp;</span><br><span class="line">bmp.LoadBitmap(IDB_BRUSH);</span><br><span class="line"><span class="function">CBrush <span class="title">brush4</span><span class="params">(&amp;bmp)</span></span>;</span><br></pre></td></tr></tbody></table></figure></li></ol><h1 id="绘画函数"><a href="#绘画函数" class="headerlink" title="绘画函数"></a>绘画函数</h1><hr><h2 id="画点"><a href="#画点" class="headerlink" title="画点"></a>画点</h2><p>CDC::SetPixel</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">COLORREF <span class="title">SetPixel</span><span class="params">( <span class="keyword">int</span> x, <span class="keyword">int</span> y, COLORREF crColor )</span></span>;</span><br><span class="line"><span class="function">COLORREF <span class="title">SetPixel</span><span class="params">( POINT point, COLORREF crColor )</span></span>;</span><br></pre></td></tr></tbody></table></figure><p>CDC::SetPixelV</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">SetPixelV</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, COLORREF crColor)</span></span>;</span><br><span class="line"><span class="function">BOOL <span class="title">SetPixelV</span><span class="params">( POINT point, COLORREF crColor )</span></span>;</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="画线"><a href="#画线" class="headerlink" title="画线"></a>画线</h2><h3 id="CDC-MoveTo"><a href="#CDC-MoveTo" class="headerlink" title="CDC::MoveTo"></a>CDC::MoveTo</h3><p>（获取当前点CDC::GetCurrentPosition）</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">CPoint <span class="title">MoveTo</span><span class="params">( <span class="keyword">int</span> x, <span class="keyword">int</span> y )</span></span>;</span><br><span class="line"><span class="function">CPoint <span class="title">MoveTo</span><span class="params">( POINT point )</span></span>;</span><br></pre></td></tr></tbody></table></figure><p>Moves the current position to the point specified by x and y (or by point).</p><h3 id="CDC-LineTo"><a href="#CDC-LineTo" class="headerlink" title="CDC::LineTo"></a>CDC::LineTo</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">LineTo</span><span class="params">( <span class="keyword">int</span> x, <span class="keyword">int</span> y )</span></span>;</span><br><span class="line"><span class="function">BOOL <span class="title">LineTo</span><span class="params">( POINT point )</span></span>;</span><br></pre></td></tr></tbody></table></figure><p>Draws a line from the current position up to, but not including, the point specified by x and y (or point). The line is drawn with the selected pen. The current position is set to x,y or to point.</p><hr><h2 id="椭圆和弧"><a href="#椭圆和弧" class="headerlink" title="椭圆和弧"></a>椭圆和弧</h2><h3 id="画椭圆"><a href="#画椭圆" class="headerlink" title="画椭圆"></a>画椭圆</h3><p>CDC::Ellipse  </p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">Ellipse</span><span class="params">( <span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2 )</span></span>;</span><br><span class="line"><span class="function">BOOL <span class="title">Ellipse</span><span class="params">( LPCRECT lpRect )</span></span>;</span><br></pre></td></tr></tbody></table></figure><p>Draws an ellipse. The center of the ellipse is the center of the bounding rectangle specified by x1, y1, x2, and y2, or lpRect. The ellipse is drawn with the current pen, and its interior is filled with the current brush. </p><h3 id="画椭圆弧"><a href="#画椭圆弧" class="headerlink" title="画椭圆弧"></a>画椭圆弧</h3><p>CDC::Arc</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">Arc</span><span class="params">( <span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2, <span class="keyword">int</span> x3, <span class="keyword">int</span> y3, <span class="keyword">int</span> x4, <span class="keyword">int</span> y4 )</span></span>;</span><br><span class="line"><span class="function">BOOL <span class="title">Arc</span><span class="params">( LPCRECT lpRect, POINT ptStart, POINT ptEnd )</span></span>;</span><br></pre></td></tr></tbody></table></figure><p>Since an arc is not a closed figure, it is not filled. </p><h3 id="画带弦的椭圆弧"><a href="#画带弦的椭圆弧" class="headerlink" title="画带弦的椭圆弧"></a>画带弦的椭圆弧</h3><p>CDC::Chord</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">Chord</span><span class="params">( <span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2, <span class="keyword">int</span> x3, <span class="keyword">int</span> y3, <span class="keyword">int</span> x4, <span class="keyword">int</span> y4 )</span></span>;</span><br><span class="line"><span class="function">BOOL <span class="title">Chord</span><span class="params">( LPCRECT lpRect, POINT ptStart, POINT ptEnd )</span></span>;</span><br></pre></td></tr></tbody></table></figure><p>The chord is drawn by using the selected pen and filled by using the selected brush. </p><h3 id="画一条椭圆弧并且弧的两个端点与圆心连线"><a href="#画一条椭圆弧并且弧的两个端点与圆心连线" class="headerlink" title="画一条椭圆弧并且弧的两个端点与圆心连线"></a>画一条椭圆弧并且弧的两个端点与圆心连线</h3><p>CDC::Pie</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">Pie</span><span class="params">( <span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2, <span class="keyword">int</span> x3, <span class="keyword">int</span> y3, <span class="keyword">int</span> x4, <span class="keyword">int</span> y4 )</span></span>;</span><br><span class="line"><span class="function">BOOL <span class="title">Pie</span><span class="params">( LPCRECT lpRect, POINT ptStart, POINT ptEnd )</span></span>;</span><br></pre></td></tr></tbody></table></figure><p>Draws a pie-shaped wedge by drawing an elliptical arc whose center and two endpoints are joined by lines. The pie-shaped area is filled with the current brush</p><hr><h2 id="线段、曲线"><a href="#线段、曲线" class="headerlink" title="线段、曲线"></a>线段、曲线</h2><h3 id="画连续的线段（从数组中的第一个点开始）"><a href="#画连续的线段（从数组中的第一个点开始）" class="headerlink" title="画连续的线段（从数组中的第一个点开始）"></a>画连续的线段（从数组中的第一个点开始）</h3><p>CDC::Polyline</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">Polyline</span><span class="params">( LPPOINT lpPoints, <span class="keyword">int</span> nCount )</span></span>;</span><br></pre></td></tr></tbody></table></figure><p>Return Value<br>Nonzero if the function is successful; otherwise 0.</p><p>Parameters<br>lpPoints<br>Points to an array of POINT structures or CPoint objects to be connected.<br>nCount<br>Specifies the number of points in the array. This value must be at least 2.</p><h3 id="画连续的线段（会从当前的点开始）"><a href="#画连续的线段（会从当前的点开始）" class="headerlink" title="画连续的线段（会从当前的点开始）"></a>画连续的线段（会从当前的点开始）</h3><p>CDC::PolylineTo</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">PolylineTo</span><span class="params">( <span class="keyword">const</span> POINT* lpPoints, <span class="keyword">int</span> nCount )</span></span>;</span><br></pre></td></tr></tbody></table></figure><p>A line is drawn from the current position to the first point specified by the lpPoints parameter by using the current pen.</p><h3 id="画贝塞尔曲线"><a href="#画贝塞尔曲线" class="headerlink" title="画贝塞尔曲线"></a>画贝塞尔曲线</h3><p>CDC::PolyBezier</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">PolyBezier</span><span class="params">( <span class="keyword">const</span> POINT* lpPoints, <span class="keyword">int</span> nCount )</span></span>;</span><br><span class="line"></span><br><span class="line">CDC::PolyBezierTo</span><br><span class="line">```C</span><br><span class="line"><span class="function">BOOL <span class="title">PolyBezierTo</span><span class="params">( <span class="keyword">const</span> POINT* lpPoints, <span class="keyword">int</span> nCount )</span></span>;</span><br></pre></td></tr></tbody></table></figure><p>The first spline is drawn from the current position to the third point by using the first two points as control points.</p><h3 id="画多组连接的线段"><a href="#画多组连接的线段" class="headerlink" title="画多组连接的线段"></a>画多组连接的线段</h3><p>CDC::Polyline</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">Polyline</span><span class="params">( <span class="keyword">const</span> POINT* lpPoints, <span class="keyword">const</span> DWORD* lpPolyPoints, <span class="keyword">int</span> nCount )</span></span>;</span><br><span class="line">参数</span><br></pre></td></tr></tbody></table></figure><p>lpPoints<br>Points to an array of variables specifying the number of points in the lpPoints array for the corresponding polygon. Each entry must be greater than or equal to 2.</p><h3 id="绘任意多边形"><a href="#绘任意多边形" class="headerlink" title="绘任意多边形"></a>绘任意多边形</h3><p>CDC::Polygon</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">Polygon</span><span class="params">( LPPOINT lpPoints, <span class="keyword">int</span> nCount )</span></span>;</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="矩形"><a href="#矩形" class="headerlink" title="矩形"></a>矩形</h2><h3 id="填充矩形"><a href="#填充矩形" class="headerlink" title="填充矩形"></a>填充矩形</h3><p>CDC::Rectangle</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">Rectangle</span><span class="params">( <span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2 )</span></span>;</span><br><span class="line"><span class="function">BOOL <span class="title">Rectangle</span><span class="params">( LPCRECT lpRect )</span></span>;</span><br></pre></td></tr></tbody></table></figure><p>Draws a rectangle using the current pen. The interior of the rectangle is filled using the current brush. </p><h3 id="画一个带圆角的矩形"><a href="#画一个带圆角的矩形" class="headerlink" title="画一个带圆角的矩形"></a>画一个带圆角的矩形</h3><p>CDC::RoundRect</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">RoundRect</span><span class="params">( <span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2, <span class="keyword">int</span> x3, <span class="keyword">int</span> y3 )</span></span>;</span><br><span class="line"><span class="function">BOOL <span class="title">RoundRect</span><span class="params">( LPCRECT lpRect, POINT point )</span></span>;</span><br></pre></td></tr></tbody></table></figure><h3 id="用指定的颜色填充矩形"><a href="#用指定的颜色填充矩形" class="headerlink" title="用指定的颜色填充矩形"></a>用指定的颜色填充矩形</h3><p>CDC::FillSolidRect</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FillSolidRect</span><span class="params">( LPCRECT lpRect, COLORREF clr )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FillSolidRect</span><span class="params">( <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> cx, <span class="keyword">int</span> cy, COLORREF clr )</span></span>;</span><br></pre></td></tr></tbody></table></figure><p>Remarks<br>Call this member function to fill the given rectangle with the specified solid color.<br>FillSolidRect is very similar to CDC::FillRect; however, FillSolidRect uses only solid colors (indicated by the COLORREF parameter), while FillRect takes a brush and therefore can be used to fill a rectangle with a solid color, a dithered color, hatched brushes, or a pattern. FillSolidRect usually is faster than FillRect.</p><h3 id="使用指定的画刷填充矩形"><a href="#使用指定的画刷填充矩形" class="headerlink" title="使用指定的画刷填充矩形"></a>使用指定的画刷填充矩形</h3><p>CDC::FillRect</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FillRect</span><span class="params">( LPCRECT lpRect, CBrush* pBrush )</span></span>;</span><br></pre></td></tr></tbody></table></figure><p>Remarks<br>Call this member function to fill a given rectangle using the specified brush. The function fills the complete rectangle, including the left and top borders, but it does not fill the right and bottom borders.</p><h3 id="使用指定的画刷填充矩形，可以指定样式"><a href="#使用指定的画刷填充矩形，可以指定样式" class="headerlink" title="使用指定的画刷填充矩形，可以指定样式"></a>使用指定的画刷填充矩形，可以指定样式</h3><p>CDC::ExtFloodFill</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">ExtFloodFill</span><span class="params">( <span class="keyword">int</span> x, <span class="keyword">int</span> y, COLORREF crColor, UINT nFillType )</span></span>;</span><br></pre></td></tr></tbody></table></figure><p>Remarks<br>Fills an area of the display surface with the current brush. This member function offers more flexibility than FloodFill because you can specify a fill type in nFillType. </p><h3 id="使用当前画刷填充显示区域"><a href="#使用当前画刷填充显示区域" class="headerlink" title="使用当前画刷填充显示区域"></a>使用当前画刷填充显示区域</h3><p>CDC::FloodFill</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">FloodFill</span><span class="params">( <span class="keyword">int</span> x, <span class="keyword">int</span> y, COLORREF crColor )</span></span>;</span><br></pre></td></tr></tbody></table></figure><p>Remarks<br>Fills an area of the display surface with the current brush. The area is assumed to be bounded as specified by crColor. The FloodFill function begins at the point specified by x and y and continues in all directions to the color boundary. </p><p>Only memory-device contexts and devices that support raster-display technology support the FloodFill member function. </p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;windows的绘图工具&quot;&gt;&lt;a href=&quot;#windows的绘图工具&quot; class=&quot;headerlink&quot; title=&quot;windows的绘图工具&quot;&gt;&lt;/a&gt;windows的绘图工具&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;画笔CPen&lt;/li&gt;
&lt;li&gt;画刷CBrush&lt;/li&gt;
&lt;li&gt;调色板CPalette&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="整理" scheme="http://blog.iwxyi.com/tags/%E6%95%B4%E7%90%86/"/>
    
      <category term="VC++" scheme="http://blog.iwxyi.com/tags/VC/"/>
    
  </entry>
  
  <entry>
    <title>Windows卡顿优化</title>
    <link href="http://blog.iwxyi.com/2018/03/04/Windows%E5%8D%A1%E9%A1%BF%E4%BC%98%E5%8C%96/"/>
    <id>http://blog.iwxyi.com/2018/03/04/Windows卡顿优化/</id>
    <published>2018-03-04T11:52:00.000Z</published>
    <updated>2019-10-12T23:34:17.394Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关闭家庭组"><a href="#关闭家庭组" class="headerlink" title="关闭家庭组"></a>关闭家庭组</h2><p>因为这功能会导致硬盘和CPU处于高负荷状态</p><p>关闭方案：控制面板–管理工具–服务– HomeGroup Listener 和 HomeGroup Provider 禁用。</p><a id="more"></a><h2 id="关闭性能特效（配置较低的机器可以关闭）"><a href="#关闭性能特效（配置较低的机器可以关闭）" class="headerlink" title="关闭性能特效（配置较低的机器可以关闭）"></a>关闭性能特效（配置较低的机器可以关闭）</h2><p>系统属性-高级-性能-设置-关闭淡出淡入效果。</p><h2 id="关闭磁盘碎片整理计划"><a href="#关闭磁盘碎片整理计划" class="headerlink" title="关闭磁盘碎片整理计划"></a>关闭磁盘碎片整理计划</h2><p>磁盘碎片整理可以提高磁盘性能，但不需要整理计划，可以关闭整理计划。选中磁盘C-属性–工具–对驱动器进行优化和碎片整理–优化–更改设置–取消选择按计划执行。关闭IPv6协议</p><p>Win10默认开启的IPv6协议，对于日常使用的我们来讲，使用率几乎为0，而它却大大的占用着系统资源。<br>打开控制面板，进入网络和 Internet，找到网络和共享中心窗口，从左侧的栏目中点击更改适配器设置进入网络连接。<br>打开以太网属性窗口。在列表中找到Internet协议版本6(TCP/IPv6)，点击取消勾选，确定=】即可。</p><h2 id="卸载预装应用（强力）"><a href="#卸载预装应用（强力）" class="headerlink" title="卸载预装应用（强力）"></a>卸载预装应用（强力）</h2><p>使用Cortana搜索，输入PowerShell，右键PowerShell，以管理员身份运行。<br>在PowerShell中输入：Get-AppXPackage | Remove-AppxPackage<br>遇到错误时请无视，继续执行该命令<br>最终结果是，所有预装软件中只剩Edge浏览器，连APP商店都没了<br>使用win更新系统后，预装软件均可找回</p><h2 id="关闭服务"><a href="#关闭服务" class="headerlink" title="关闭服务"></a>关闭服务</h2><p><code>win+r</code>输入<code>services.msc</code></p><p>以下是可以更改为手动启动的服务（按名称排序）：</p><p>1、Application Experience（启动时为程序处理应用程序兼容性缓存请求）</p><p>2、Computer Browser（维护网络上计算机的更新列表，不需要联网的话可以改为手动）</p><p>3、Diagnostic Policy Service（诊断策略服务）Diagnositic 开头的都<strong>禁用</strong></p><p>4、Distributed Link Tracking Client（维护计算机内的NTFS文件之间的链接）</p><p>5、IP Helper（使用IPv6转换技术）</p><p>6、Offline Files（脱机文件服务）</p><p>7、Program Compatibility Assistant Service（为应用程序兼容性助手提供支持）</p><p>8、Portable Device Enumerator Service（强制可移动大容量存储设备的组策略）</p><p>9、Print Spooler（没有打印机的话可以关闭它）</p><p>10、Remote Registry（远程注册表设置，这项服务应该保持禁用状态）</p><p>11、Secondary Logon（在不同凭据下启用启动过程，改为手动即可，禁用会导致魔兽世界等游戏无法登录）</p><p>12、Security Center（监视并报告计算机上的安全健康设置）</p><p>13、Server （支持计算机通过网络进行共享，若处于单机状态的话，可以改为手动）</p><p>14、TCP/IP NetBIOS Helper （提供NetBIOS名称解析支持，若你的计算机没有连接到工作组网络的话，可以改为手动）</p><p>15、Windows Error Reporting Service （报告错误并提供现有解决方案）</p><p>16、Windows Image Acquisition （WIA） （为扫描仪和照相机提供图像采集服务）</p><p>17、Windows Search （提供内容索引，如果你不怎么使用Windows自带搜索的话，可以改<strong>手动</strong>）</p><p>18、Windows Time （维护时间和日期同步）</p><p>19、Windows Update 系统更新（<strong>禁用</strong>）</p><p>20、Superfetch 超级与读取（<strong>禁用</strong>）</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;关闭家庭组&quot;&gt;&lt;a href=&quot;#关闭家庭组&quot; class=&quot;headerlink&quot; title=&quot;关闭家庭组&quot;&gt;&lt;/a&gt;关闭家庭组&lt;/h2&gt;&lt;p&gt;因为这功能会导致硬盘和CPU处于高负荷状态&lt;/p&gt;
&lt;p&gt;关闭方案：控制面板–管理工具–服务– HomeGroup Listener 和 HomeGroup Provider 禁用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="修电脑" scheme="http://blog.iwxyi.com/categories/%E4%BF%AE%E7%94%B5%E8%84%91/"/>
    
    
      <category term="Windows" scheme="http://blog.iwxyi.com/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Emment语法</title>
    <link href="http://blog.iwxyi.com/2018/03/03/Emment%E8%AF%AD%E6%B3%95/"/>
    <id>http://blog.iwxyi.com/2018/03/03/Emment语法/</id>
    <published>2018-03-03T11:57:00.000Z</published>
    <updated>2019-10-12T23:34:32.330Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-1-生成html初始文档"><a href="#1-1-生成html初始文档" class="headerlink" title="1.1 生成html初始文档"></a>1.1 生成html初始文档</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">!+tab或者html:5   生成html5文档的初始结构</span><br><span class="line">html:xt           生成html4过渡型</span><br><span class="line">html:4s           生成html4严格型）</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><p>生成的文档如下：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="1-2-生成带有id-class的HTML标签"><a href="#1-2-生成带有id-class的HTML标签" class="headerlink" title="1.2 生成带有id,class的HTML标签"></a>1.2 生成带有id,class的HTML标签</h3><p>1.</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#aaa  生成一个ID为aaa的div</span><br></pre></td></tr></tbody></table></figure><p>生成结构如下：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"aaa"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>2.</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ul#ccc.ddd   生成一个ID为ccc,class为ddd的ul</span><br></pre></td></tr></tbody></table></figure><p>生成结构如下：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"ccc"</span> <span class="attr">class</span>=<span class="string">"ddd"</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="1-3-生成后代-“-gt-”"><a href="#1-3-生成后代-“-gt-”" class="headerlink" title="1.3 生成后代 “>”"></a>1.3 生成后代 “&gt;”</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">div.aaa&gt;ul&gt;li   生成一个无序列表，而且被class为aaa的div包裹</span><br></pre></td></tr></tbody></table></figure><p>生成结构如下：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"aaa"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="1-4-生成兄弟"><a href="#1-4-生成兄弟" class="headerlink" title="1.4 生成兄弟"></a>1.4 生成兄弟</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">div+p+dp</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dp</span>&gt;</span><span class="tag">&lt;/<span class="name">dp</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="1-5-生成上级元素-“-”"><a href="#1-5-生成上级元素-“-”" class="headerlink" title="1.5 生成上级元素 “^”"></a>1.5 生成上级元素 “^”</h3><p>上级 （Climb-up）元素是什么意思呢？前面咱们说过了生成下级元素的符号“&gt;”，当使用 div&gt;ul&gt;li 的指令之后，再继续写下去，那么后续内容都是在 li 下级的。如果我想编写一个跟 ul 平级的 span 标签，那么我需要先用 “^” 提升一下层次。例如：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">div&gt;ul&gt;li^span</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>如果我想生成一个与div平级的span，那么就再上升一个层级，多用一个^</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">div&gt;ul&gt;li^^span</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="1-6重复生成多份"><a href="#1-6重复生成多份" class="headerlink" title="1.6重复生成多份*"></a>1.6重复生成多份*</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ul&gt;li*5</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="1-7生成分组"><a href="#1-7生成分组" class="headerlink" title="1.7生成分组()"></a>1.7生成分组()</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">div&gt;(header&gt;ul&gt;li*2&gt;a)+footer&gt;p</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>分组还可以结合上面的*符号生成重复结构</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(div&gt;dl&gt;(dt&gt;dd)*3)+footer&gt;p</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="1-8生成自定义属性-attr"><a href="#1-8生成自定义属性-attr" class="headerlink" title="1.8生成自定义属性[attr]"></a>1.8生成自定义属性[attr]</h3><p>a 标签中往往需要附带 href 属性和 title 属性，如果我们想生成一个 href 为 “<a href="http://google.com/" target="_blank" rel="noopener">http://google.com</a>” ，title 为“我爱水煮鱼”的 a 标签，可以这样写：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a[href="www.google.com" title="我爱水煮鱼"]</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"www.google.com"</span> <span class="attr">title</span>=<span class="string">"我爱水煮鱼"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="1-9生成内容编号"><a href="#1-9生成内容编号" class="headerlink" title="1.9生成内容编号$"></a>1.9生成内容编号$</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ul&gt;li.item$*5</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item1"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item2"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item3"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item4"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item5"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ul&gt;li.item$$$*5</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item001"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item002"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item003"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item004"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item005"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>只能这样单调的生成序号？对于强大的 Emmet 来说，肯定不会会了，我们也可以在 $ 后面增加 @- 来实现倒序排列：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ul&gt;li.item$@-*5</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item5"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item4"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item3"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item2"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item1"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>我们也可以使用@N指定开始的序号</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ul&gt;li.item$@3*5</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item3"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item4"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item5"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item6"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item7"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>配合上面倒序输出，可以这样写:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ul&gt;li.item$@-3*5</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item7"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item6"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item5"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item4"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item3"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="2-0生成文本内容"><a href="#2-0生成文本内容" class="headerlink" title="2.0生成文本内容{}"></a>2.0生成文本内容{}</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a[href="www.google.com"]{click me}</span><br></pre></td></tr></tbody></table></figure><p>或者</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a[href="www.google.com"]&gt;{click me}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"www.google.com"</span>&gt;</span>click me<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>注意不能有空格</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-1-生成html初始文档&quot;&gt;&lt;a href=&quot;#1-1-生成html初始文档&quot; class=&quot;headerlink&quot; title=&quot;1.1 生成html初始文档&quot;&gt;&lt;/a&gt;1.1 生成html初始文档&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;!+tab或者html:5   生成html5文档的初始结构&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;html:xt           生成html4过渡型&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;html:4s           生成html4严格型）&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="HTML" scheme="http://blog.iwxyi.com/tags/HTML/"/>
    
      <category term="语法" scheme="http://blog.iwxyi.com/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>安卓Rec模式清除锁屏密码</title>
    <link href="http://blog.iwxyi.com/2018/01/29/%E5%AE%89%E5%8D%93Rec%E6%A8%A1%E5%BC%8F%E6%B8%85%E9%99%A4%E9%94%81%E5%B1%8F%E5%AF%86%E7%A0%81/"/>
    <id>http://blog.iwxyi.com/2018/01/29/安卓Rec模式清除锁屏密码/</id>
    <published>2018-01-29T12:44:00.000Z</published>
    <updated>2019-10-12T23:35:06.468Z</updated>
    
    <content type="html"><![CDATA[<p>打开TWRP的<code>adb shell</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rm /data/system/locksettings.db</span><br><span class="line">rm /data/system/locksettings.db-shm</span><br><span class="line">rm /data/system/locksettings.db-wal</span><br><span class="line">rm /data/system/gatekeeper.password.key</span><br><span class="line">rm /data/system/gatekeeper.pattern.key</span><br></pre></td></tr></tbody></table></figure><p>实测可以用文件管理删除前两项即可（不同类型密码的文件不同）</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;打开TWRP的&lt;code&gt;adb shell&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;b
      
    
    </summary>
    
    
      <category term="搞机" scheme="http://blog.iwxyi.com/categories/%E6%90%9E%E6%9C%BA/"/>
    
    
      <category term="搞机" scheme="http://blog.iwxyi.com/tags/%E6%90%9E%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>这样学Java不枯燥-学习笔记</title>
    <link href="http://blog.iwxyi.com/2017/10/12/%E8%BF%99%E6%A0%B7%E5%AD%A6Java%E4%B8%8D%E6%9E%AF%E7%87%A5-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://blog.iwxyi.com/2017/10/12/这样学Java不枯燥-学习笔记/</id>
    <published>2017-10-12T12:10:00.000Z</published>
    <updated>2019-10-12T23:18:06.307Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.rupeng.game.GameCore;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">GameCore.start(<span class="keyword">new</span> Main());</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{ <span class="comment">// 游戏运行的函数</span></span><br><span class="line">GameCore.alert(<span class="string">"Hello World"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GameCore.pause(<span class="keyword">int</span> x) <span class="comment">// 暂停x毫秒</span></span><br><span class="line">GameCore.setGameTitle(<span class="keyword">char</span> * name); <span class="comment">// 设置名字</span></span><br><span class="line">GameCore.setGameSize(<span class="keyword">int</span> width, <span class="keyword">int</span> height); <span class="comment">// 设置宽高</span></span><br><span class="line">GameCore.alert(Object msg); <span class="comment">// 弹出提示框（整数、字符串都行）</span></span><br><span class="line">Dimension d = GameCore.getGameSize();  </span><br><span class="line"><span class="comment">// d.width 、 d.height （imprt java.awt.Demension;）</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GameCore.loadBgView(String imgName); <span class="comment">// 不重叠不拉伸显示图片。图片放到 src/Images 下面（注意大小写），可拖拽或者 ctrl+V粘贴</span></span><br><span class="line">playSound(String soundName, <span class="keyword">boolean</span> repeat); <span class="comment">// 播放音乐（仅支持mp3），音乐放到 src/Sounds 下面</span></span><br><span class="line">closeSound(String soundName); <span class="comment">// 关闭音乐播放（包括重复播放的）</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> a = <span class="number">99999L</span> <span class="comment">// 常数数字默认为整型，long赋值需要转换到int</span></span><br><span class="line"><span class="keyword">float</span> f = <span class="number">3.14</span> <span class="comment">// 这样写是错的，需要加个F或f</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String s = GameCore.input(Object value, Object msg); <span class="comment">// 输入框（默认信息， 提示信息）</span></span><br><span class="line"><span class="keyword">boolean</span> b = GameCore.confirm(Object msg); <span class="comment">// 确认框（提示信息）</span></span><br><span class="line"><span class="keyword">int</span> i = Integer.parseInt(s); <span class="comment">// 输入的内容到整数</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createText</span><span class="params">(<span class="keyword">int</span> txtNum, String text)</span> <span class="comment">// 创建只读文本</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setTextPosition</span><span class="params">(<span class="keyword">int</span> txtNum, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> <span class="comment">// 修改文本位置</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setText</span><span class="params">(<span class="keyword">int</span> txtNum, String text)</span> <span class="comment">// 设置文本内容</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setTextColor</span><span class="params">(<span class="keyword">int</span> txtNum, Color color)</span> <span class="comment">// 设置文本颜色，color.RED、color.green、new color(int R, int G, int B)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setTextFontSize</span><span class="params">(<span class="keyword">int</span> txtNum, <span class="keyword">int</span> size)</span> <span class="comment">// 设置文本大小</span></span></span><br><span class="line"><span class="function">Point <span class="title">getTextPosition</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> num)</span> <span class="comment">// 获取文本位置（import java.awt.Point;）</span></span></span><br><span class="line"><span class="function">Dimension <span class="title">getTextSize</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> textNum)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hdieText</span><span class="params">(fina <span class="keyword">int</span> labelNum)</span> <span class="comment">// 隐藏文字</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showText</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> labelNum)</span> <span class="comment">// 显示文字</span></span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createImage</span><span class="params">(<span class="keyword">int</span> num, String imgName)</span> <span class="comment">// 创建图片控件，图片放到 src/Images 里面（注意大小写）</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createImage</span><span class="params">(<span class="keyword">int</span> num)</span> <span class="comment">// 创建一个什么都不显示的图片</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setImageSource</span><span class="params">(<span class="keyword">int</span> num, String imgName)</span> <span class="comment">// 修改显示的图片源</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setImagePosition</span><span class="params">(<span class="keyword">int</span> num, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> <span class="comment">// 修改坐标</span></span></span><br><span class="line"><span class="function">Point <span class="title">getImagePosition</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> num)</span> <span class="comment">// 获得坐标</span></span></span><br><span class="line"><span class="function">Dimension <span class="title">getImagePosition</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> num)</span> <span class="comment">// 获得大小</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hideImage</span><span class="params">(<span class="keyword">int</span> num)</span> <span class="comment">// 隐藏图片</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showImage</span><span class="params">(<span class="keyword">int</span> num)</span> <span class="comment">// 显示图片</span></span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">精灵文件位置：src/Sprites/精灵名字[]/精灵动作[]/i.png图片  按顺序放好（多选文件夹粘贴）（分层：工作空间—右上角倒三角—包表示法）</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createSprite</span><span class="params">(<span class="keyword">int</span> num, String spriteName)</span></span>; <span class="comment">// 创建精灵</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">palySpriteAnimate</span><span class="params">(<span class="keyword">int</span> spriteNum, String animateName, <span class="keyword">boolean</span> repeat)</span></span>; <span class="comment">// 播放精灵的动作</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setSpritePosition</span><span class="params">(<span class="keyword">int</span> spriteNum, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>; <span class="comment">// 设置精灵的位置</span></span><br><span class="line"><span class="function">Point <span class="title">getSpritePosition</span><span class="params">(<span class="keyword">int</span> spriteNum)</span></span>; <span class="comment">//获得精灵的位置</span></span><br><span class="line"><span class="function">Dimension <span class="title">getSpriteSize</span><span class="params">(<span class="keyword">int</span> spriteNum)</span></span>; <span class="comment">// 获取精灵尺寸</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hideSprite</span><span class="params">(<span class="keyword">int</span> spriteNum)</span></span>; <span class="comment">// 隐藏精灵</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showSprite</span><span class="params">(<span class="keyword">int</span> spriteNum)</span></span>; <span class="comment">// 显示精灵</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setSpriteFlipX</span><span class="params">(<span class="keyword">int</span> spriteNum, <span class="keyword">boolean</span> flipX)</span></span>; <span class="comment">// 是否进行X方向翻转（左右对称,fip为true时翻转，false时还原）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setSpriteFlipY</span><span class="params">(<span class="keyword">int</span> spriteNum, <span class="keyword">boolean</span> flipY)</span></span>; <span class="comment">// 是否设置Y方向翻转（上下对称）</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Java程序打包：拷贝bin和两个jar到单独的文件夹，拷贝jre，去掉src.zip、lib\ext\jfxrt.jar、bin\server、bin\jfxwebkit.dll，减小尺寸；</span><br><span class="line">创建一个.bat文件，内容：start jre\bin\javaw.exe -cp .\bin\ -Djava.ext.dirs=. Main1</span><br><span class="line">Main1 代表入口类，如果有包名则要写全名（xxx.Main1）</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String转int：Integer.parseInt("123")</span><br><span class="line">String相等：s1.equal(s2);   （必须用这种方式写）</span><br><span class="line">s1==s2 不使用原因： "abc"+"123" != "abc123" （初学者常犯错误）</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if (i = 10) // Java中这么写是错误的，C语言可以</span><br><span class="line">if (b = true) // 这样是正确的</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">switch (表达式) // 表达式可以为byte/short/int/char，JDK5后可以是枚举，JDK7后可以是String类型</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GameCore.getPressedKeyCode(); // 获得用户当前按键（只适合“连续动作”，一次性触发最好用“事件驱动”）</span><br><span class="line">与KeyEvent中的值作比较：（import java.awt.event.KeyEvent;）</span><br><span class="line">用法：if ( key == KeyEvent.VK_UP )</span><br><span class="line">数字键：VK_0、VK_1……</span><br><span class="line">字母键：VK_A、VK_B……</span><br><span class="line">功能键：VK_F1、VK_F2……</span><br><span class="line">回车：VK_ENTER</span><br><span class="line">空格：VK_SPACE</span><br><span class="line">ESC：VK_ESCAPE</span><br><span class="line">方向键：VK_LEFT、VK_UP、VK_RIGHT、VK_DOWN</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int[10] a = new int[10];  等价于  int a[10];  但是前者有初始化</span><br><span class="line">int、double等默认为0，String、Integer等默认为null</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">编译器认为，if(无else的)、for等操作可能不执行，所以里面的变量初始化会被忽略，若没有初始化则编译器报错</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">double</span> d = Math.random(); <span class="comment">// 返回 [ 0, 1.0 ) 之间的 double</span></span><br><span class="line"><span class="keyword">int</span> num = (<span class="keyword">int</span>) (Math.random() * <span class="number">3</span>); <span class="comment">// 0-2的整数</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GameCore.rand(<span class="keyword">int</span> low, <span class="keyword">int</span> high); <span class="comment">// low &lt;= x &lt; high</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">System.currentTimeMillis() <span class="comment">// 返回当前的毫秒事件</span></span><br><span class="line">Date d = <span class="keyword">new</span> Date(<span class="number">2009</span>-<span class="number">1900</span>,<span class="number">3</span>-<span class="number">1</span>,<span class="number">9</span>); <span class="comment">// 需-1900.1.0，为：2009.3.9</span></span><br><span class="line">System.out.println(d1);</span><br><span class="line"><span class="keyword">int</span> year = d.getYear()+<span class="number">1900</span>;  getMonth()+<span class="number">1</span>;  getDate(); <span class="comment">// 年月日</span></span><br><span class="line">getHours();  getMinutes();  getSeconds(); <span class="comment">// 时分秒</span></span><br><span class="line">getDat(); <span class="comment">//星期几，周日=0，周一=1</span></span><br><span class="line"><span class="keyword">long</span> time = d.getTime(); <span class="comment">// 获取时间的毫秒（相对时间）</span></span><br><span class="line">Date d = <span class="keyword">new</span> Date(time); <span class="comment">// 毫秒转换成时间</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] a = { { <span class="number">1</span> }, { <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> }, { <span class="number">6</span>, <span class="number">7</span> } }; <span class="comment">// 每一行的列数可以不一样，a[i].length也不一样。</span></span><br></pre></td></tr></tbody></table></figure><hr><blockquote><p>课程视频：如鹏网《这样学Java不枯燥》</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; com.rupeng.game.GameCore;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Runnable&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		GameCore.start(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Main());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{ &lt;span class=&quot;comment&quot;&gt;// 游戏运行的函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		GameCore.alert(&lt;span class=&quot;string&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="学习笔记" scheme="http://blog.iwxyi.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java" scheme="http://blog.iwxyi.com/tags/Java/"/>
    
      <category term="游戏开发" scheme="http://blog.iwxyi.com/tags/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>0x3F3F3F3F</title>
    <link href="http://blog.iwxyi.com/2017/09/01/0x3F3F3F3F/"/>
    <id>http://blog.iwxyi.com/2017/09/01/0x3F3F3F3F/</id>
    <published>2017-09-01T11:40:00.000Z</published>
    <updated>2019-10-12T12:13:42.792Z</updated>
    
    <content type="html"><![CDATA[<p><code>0x3f3f3f3f</code>的十进制是<code>1061109567</code>，是<code>10^9</code>级别的（和<code>0x7fffffff</code>一个数量级），而一般场合下的数据都是小于<code>10^9</code>的，所以它可以作为无穷大使用而不致出现数据大于无穷大的情形。 </p><a id="more"></a><p>另一方面，由于一般的数据都不会大于<code>10^9</code>，所以当我们把无穷大加上一个数据时，它并不会溢出（这就满足了“无穷大加一个有穷的数依然是无穷大”），事实上<code>0x3f3f3f3f</code>+<code>0x3f3f3f3f</code>=<code>2122219134</code>，这非常大但却没有超过<code>32-bit int</code>的表示范围，所以<code>0x3f3f3f3f</code>还满足了我们“无穷大加无穷大还是无穷大”的需求。</p><p>最后，<code>0x3f3f3f3f</code>还能给我们带来一个意想不到的额外好处：<br>如果我们想要将某个数组清零，我们通常会使用<code>memset(a,0,sizeof(a))</code>，方便又高效，但是当我们想将某个数组全部赋值为无穷大时，就不能使用memset函数而得自己写循环了，因为<code>memset</code>是按字节操作的，它能够对数组清零是因为0的每个字节都是0（一般我们只有赋值为-1和0的时候才使用它）。现在好了，如果我们将无穷大设为<code>0x3f3f3f3f</code>，那么奇迹就发生了，<code>0x3f3f3f3f</code>的每个字节都是0x3f！所以要把一段内存全部置为无穷大，我们只需要<code>memset(a,0x3f,sizeof(a))</code>。</p><p>所以在通常的场合下，<code>0x3f3f3f3f</code>真的是一个非常棒的选择！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;0x3f3f3f3f&lt;/code&gt;的十进制是&lt;code&gt;1061109567&lt;/code&gt;，是&lt;code&gt;10^9&lt;/code&gt;级别的（和&lt;code&gt;0x7fffffff&lt;/code&gt;一个数量级），而一般场合下的数据都是小于&lt;code&gt;10^9&lt;/code&gt;的，所以它可以作为无穷大使用而不致出现数据大于无穷大的情形。 &lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C" scheme="http://blog.iwxyi.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Java大数相加示例</title>
    <link href="http://blog.iwxyi.com/2017/03/05/Java%E5%A4%A7%E6%95%B0%E7%9B%B8%E5%8A%A0/"/>
    <id>http://blog.iwxyi.com/2017/03/05/Java大数相加/</id>
    <published>2017-03-05T12:02:00.000Z</published>
    <updated>2019-10-12T12:14:28.621Z</updated>
    
    <content type="html"><![CDATA[<p>题目：两个整数和能否整除 86</p><a id="more"></a><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"></span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(sc.hasNext()) {</span><br><span class="line"><span class="keyword">int</span> a = sc.nextInt();</span><br><span class="line"><span class="keyword">int</span> b = sc.nextInt();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((a + b) % <span class="number">86</span> == <span class="number">0</span>) {</span><br><span class="line">System.out.println(<span class="string">"yes"</span>);</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">System.out.println(<span class="string">"no"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目：两个整数和能否整除 86&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="Java" scheme="http://blog.iwxyi.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>正则二三事</title>
    <link href="http://blog.iwxyi.com/2017/01/02/%E6%AD%A3%E5%88%99%E4%BA%8C%E4%B8%89%E4%BA%8B/"/>
    <id>http://blog.iwxyi.com/2017/01/02/正则二三事/</id>
    <published>2017-01-02T11:40:00.000Z</published>
    <updated>2019-10-12T12:13:13.410Z</updated>
    
    <content type="html"><![CDATA[<p>一、校验数字的表达式</p><p>1、 数字：<code>^[0-9]*$</code></p><p>2、 n位的数字：<code>^\d{n}$</code></p><p>3、 至少n位的数字：<code>^\d{n,}$</code></p><p>4、 m-n位的数字：<code>^\d{m,n}$</code></p><a id="more"></a><p>5、 零和非零开头的数字：<code>^(0|[1-9][0-9]*)$</code></p><p>6、 非零开头的最多带两位小数的数字：<code>^([1-9][0-9]*)+(.[0-9]{1,2})?$</code></p><p>7、 带1-2位小数的正数或负数：<code>^(-)?\d+(.\d{1,2})?$</code></p><p>8、 正数、负数、和小数：<code>^(-|+)?\d+(.\d+)?$</code></p><p>9、 有两位小数的正实数：<code>^[0-9]+(.[0-9]{2})?$</code></p><p>10、 有1~3位小数的正实数：<code>^[0-9]+(.[0-9]{1,3})?$</code></p><p>11、 非零的正整数：<code>^[1-9]\d$ 或 ^([1-9][0-9]){1,3}$ 或 ^+?[1-9][0-9]*$</code></p><p>12、 非零的负整数：<code>^-[1-9][]0-9"$ 或 ^-[1-9]\d$</code></p><p>13、 非负整数：<code>^\d+$ 或 ^[1-9]\d*|0$</code></p><p>14、 非正整数：<code>^-[1-9]\d*|0$ 或 ^((-\d+)|(0+))$</code></p><p>15、 非负浮点数：<code>^\d+(.\d+)?$ 或 ^[1-9]\d.\d|0.\d[1-9]\d|0?.0+|0$</code></p><p>16、 非正浮点数：<code>^((-\d+(.\d+)?)|(0+(.0+)?))$ 或 ^(-([1-9]\d.\d|0.\d[1-9]\d))|0?.0+|0$</code></p><p>17、 正浮点数：<code>^[1-9]\d.\d|0.\d[1-9]\d$ 或 ^(([0-9]+.[0-9][1-9][0-9])|([0-9][1-9][0-9].[0-9]+)|([0-9][1-9][0-9]))$</code></p><p>18、 负浮点数：<code>^-([1-9]\d.\d|0.\d[1-9]\d)$ 或 ^(-(([0-9]+.[0-9][1-9][0-9])|([0-9][1-9][0-9].[0-9]+)|([0-9][1-9][0-9])))$</code></p><p>19、 浮点数：<code>^(-?\d+)(.\d+)?$ 或 ^-?([1-9]\d.\d|0.\d[1-9]\d|0?.0+|0)$</code></p><p>二、校验字符的表达式</p><p>1、 汉字：<code>^[\u4e00-\u9fa5]{0,}$</code></p><p>2、 英文和数字：<code>^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]{4,40}$</code></p><p>3、 长度为3-20的所有字符：<code>^.{3,20}$</code></p><p>4、 由26个英文字母组成的字符串：<code>^[A-Za-z]+$</code></p><p>5、 由26个大写英文字母组成的字符串：<code>^[A-Z]+$</code></p><p>6、 由26个小写英文字母组成的字符串：<code>^[a-z]+$</code></p><p>7、 由数字和26个英文字母组成的字符串：<code>^[A-Za-z0-9]+$</code></p><p>8、 由数字、26个英文字母或者下划线组成的字符串：<code>^\w+$ 或 ^\w{3,20}$</code></p><p>9、 中文、英文、数字包括下划线：<code>^[\u4E00-\u9FA5A-Za-z0-9_]+$</code></p><p>10、 中文、英文、数字但不包括下划线等符号：<code>^[\u4E00-\u9FA5A-Za-z0-9]+$ 或 ^[\u4E00-\u9FA5A-Za-z0-9]{2,20}$</code></p><p>11、 可以输入含有<code>^%&amp;',;=?$\"</code>等字符：<code>[^%&amp;',;=?$\x22]+</code></p><p>12、 禁止输入含有<code>~</code>的字符：<code>[^~\x22]+</code></p><p>三、特殊需求表达式</p><p>1、 Email地址：<code>^\w+([-+.]\w+)@\w+([-.]\w+).\w+([-.]\w+)*$</code></p><p>2、 域名：<code>[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/.?</code></p><p>3、 InternetURL：<code>[a-zA-z]+://[^\s]</code> 或 <code>^http://([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=])?$</code></p><p>4、 手机号码：<code>^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d{8}$</code></p><p>5、 电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)：<code>^((\d{3,4}-)|\d{3.4}-)?\d{7,8}$</code></p><p>6、 国内电话号码(0511-4405222、021-87888822)：<code>\d{3}-\d{8}|\d{4}-\d{7}</code></p><p>7、 身份证号(15位、18位数字)：<code>^\d{15}|\d{18}$</code></p><p>8、 短身份证号码(数字、字母x结尾)：<code>^([0-9]){7,18}(x|X)?$ 或 ^\d{8,18}|[0-9x]{8,18}|[0-9X]{8,18}?$</code></p><p>9、 帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：<code>^[a-zA-Z][a-zA-Z0-9_]{4,15}$</code></p><p>10、 密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：<code>^[a-zA-Z]\w{5,17}$</code></p><p>11、 强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：<code>^(?=.\d)(?=.[a-z])(?=.*[A-Z]).{8,10}$</code></p><p>12、 日期格式：<code>^\d{4}-\d{1,2}-\d{1,2}</code></p><p>13、 一年的12个月(01～09和1～12)：<code>^(0?[1-9]|1[0-2])$</code></p><p>14 一个月的31天(01～09和1～31)：<code>^((0?[1-9])|((1|2)[0-9])|30|31)$</code></p><p>15、 钱的输入格式：</p><p>   1.有四种钱的表示形式我们可以接受:”10000.00” 和 “10,000.00”, 和没有 “分” 的 “10000” 和 “10,000”：<code>^[1-9][0-9]*$</code></p><p>   2.这表示任意一个不以0开头的数字,但是,这也意味着一个字符”0”不通过,所以我们采用下面的形式：<code>^(0|[1-9][0-9]*)$</code></p><p>   3.一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：<code>^(0|-?[1-9][0-9]*)$</code></p><p>   4.这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：<code>^[0-9]+(.[0-9]+)?$</code></p><p>   5.必须说明的是,小数点后面至少应该有1位数,所以”10.”是不通过的,但是 “10” 和 “10.2” 是通过的：<code>^[0-9]+(.[0-9]{2})?$</code></p><p>   6.这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：<code>^[0-9]+(.[0-9]{1,2})?$</code></p><p>   7.这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：<code>^[0-9]{1,3}(,[0-9]{3})*(.[0-9]{1,2})?$</code></p><ol start="8"><li>1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：<code>^([0-9]+|[0-9]{1,3}(,[0-9]{3})*)(.[0-9]{1,2})?$</code></li></ol><p>16、 备注：这就是最终结果了,别忘了”+”可以用”*”替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里</p><p>17、 xml文件：<code>^([a-zA-Z]+-?)+[a-zA-Z0-9]+\.[x|X][m|M][l|L]$</code></p><p>18、 中文字符的正则表达式：<code>[\u4e00-\u9fa5]</code></p><p>19、 双字节字符：<code>[^\x00-\xff]</code> (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))</p><p>20、 空白行的正则表达式：\n\s*\r (可以用来删除空白行)</p><p>21、 HTML标记的正则表达式：<code>&lt;(\S?)[^&gt;]&gt;.?&lt;/\1&gt;|&lt;.? /&gt;</code> (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)</p><p>22、 首尾空白字符的正则表达式：<code>^\s|\s$</code>或<code>(^\s)|(\s$)</code> (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)</p><p>23、 腾讯QQ号：<code>[1-9][0-9]{4,}</code> (腾讯QQ号从10000开始)</p><p>24、 中国邮政编码：<code>[1-9]\d{5}(?!\d)</code> (中国邮政编码为6位数字)</p><p>25、 IP地址：<code>\d+.\d+.\d+.\d+</code> (提取IP地址时有用)</p><p>26、 IP地址：<code>((?:(?:25[0-5]|2[0-4]\d|[01]?\d?\d)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d?\d))</code></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一、校验数字的表达式&lt;/p&gt;
&lt;p&gt;1、 数字：&lt;code&gt;^[0-9]*$&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;2、 n位的数字：&lt;code&gt;^\d{n}$&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;3、 至少n位的数字：&lt;code&gt;^\d{n,}$&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;4、 m-n位的数字：&lt;code&gt;^\d{m,n}$&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="RegExp" scheme="http://blog.iwxyi.com/tags/RegExp/"/>
    
  </entry>
  
  <entry>
    <title>CGI-C语言也能干大事</title>
    <link href="http://blog.iwxyi.com/2016/07/12/CGI-C%E8%AF%AD%E8%A8%80%E4%B9%9F%E8%83%BD%E5%B9%B2%E5%A4%A7%E4%BA%8B/"/>
    <id>http://blog.iwxyi.com/2016/07/12/CGI-C语言也能干大事/</id>
    <published>2016-07-12T11:42:00.000Z</published>
    <updated>2019-10-12T23:18:19.148Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CGI-amp-DGI"><a href="#CGI-amp-DGI" class="headerlink" title="CGI &amp; DGI"></a>CGI &amp; DGI</h1><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> * qs = getenv(<span class="string">"QUERY_STRING"</span>);<span class="comment">//获取环境变量</span></span><br><span class="line"><span class="keyword">char</span> username[<span class="number">256</span>];</span><br><span class="line"><span class="built_in">sscanf</span>(qs, <span class="string">"username=%s"</span>, username);<span class="comment">//获取地址栏后面的东西</span></span><br></pre></td></tr></tbody></table></figure><p>断点调试：<code>include \&lt;windows.h&gt;</code>，然后 <code>MessageBoxA(0,"ok","ok",0);</code></p><a id="more"></a><p>让程序启动后暂停，等待着按按钮；<br>浏览器访问CGI，窗口弹出后，在VS中“调试”→“附加到进程”，设置断点，然后在关闭消息对话框。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"Location:http://www.baidu.com\r\n"</span>);<span class="comment">//重定向，302 Found。注意\r\n</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Location:1.html\r\n"</span>);<span class="comment">//重定向至cgi程序同目录的1.html文件</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Content-Type:text/html;charset=gbk\r\n\r\n"</span>);<span class="comment">//改成 text/plain，为普通文本，显示HTML标签。</span></span><br></pre></td></tr></tbody></table></figure><p>注意<code>\r\n\r\n</code>（两个），表示报文头结束了（各个报文头顺序可调换）<br>源代码中，<code>\n</code>能换行，但是浏览器上要用<code>&lt;br&gt;</code>才换行，所以用： <code>\n&lt;br&gt;</code></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">itoa(i, str, x); <span class="comment">//int i 转换成 char str[]、x进制的文本</span></span><br><span class="line"><span class="keyword">int</span> i = atoi(str); <span class="comment">//字符串转换成int</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">fprintf</span>(cgiOut, <span class="string">"&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;大家好，Querystring=%s，你的浏览器UserAgent是：%s，你的IP地址是：%s，当前cgi地址：%s&lt;/body&gt;&lt;/html&gt;"</span>, cgiQueryString, cgiUserAgent, cgiRemoteAddr, cgiScriptName);<span class="comment">//可以用printf</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cgiFormString(<span class="string">"name"</span>, name, <span class="keyword">sizeof</span> name); <span class="comment">// 获取用户名：name=xxx</span></span><br><span class="line"><span class="keyword">if</span> (cgiFormString(<span class="string">"password"</span>, pwd, <span class="keyword">sizeof</span> pwd) != cgiFormSuccess);<span class="comment">//返回值表示有没有这个值</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">&lt;!--点击登陆转到网址：../11.cgi?name=admin&amp;pwd=123，</span></span><br><span class="line"><span class="comment">  或者绝对网址："http://www.baidu.com"。</span></span><br><span class="line"><span class="comment">  method="get"（默认）或者"post"，post时地址栏看不到表单 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"11.cgi"</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"admin"</span> /&gt;</span></span><br><span class="line">    密　码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"pwd"</span> <span class="attr">value</span>=<span class="string">"123"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"登陆"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--form中的：input、textarea、select 中的名字和值都会提交给服务器</span></span><br><span class="line"><span class="comment">没有name值的表单将不会提交，包括submit。--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"se"</span>&gt;</span><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"nan"</span>&gt;</span>男<span class="tag">&lt;/<span class="name">option</span>&gt;</span><span class="tag">&lt;<span class="name">option...</span> /<span class="attr">option</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--提交的值为value属性，如：se="nan"--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"ch"</span> <span class="attr">id</span>=<span class="string">"chk"</span> / &gt;</span><span class="tag">&lt;<span class="name">lable</span> <span class="attr">for</span>=<span class="string">"chk"</span>&gt;</span>我已阅读XXX<span class="tag">&lt;/<span class="name">lable</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--如果勾上了，会有 "ch=on"   提交给服务器。</span></span><br><span class="line"><span class="comment">   radio 的 name 属性相同的为一组，提交选中的 value--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">...</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--隐藏的字段，不会显示，但是也会提交--&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>1、select、input、textarea必须要在form中。<br>2、当点击<code>input type="submit"</code>的按钮的时候，会把它所在的form中的所有“<strong>有name属性的</strong>”<code>input</code>/<code>select</code>/<code>textarea</code>的值（value）提交给服务器。<br>3、<strong>表单提交的值</strong></p><ul><li><code>input type="text"</code>的值就是用户输入的值；</li><li>对于<code>input type="checkbox"</code>的值就是“选中是on，没选中则没有”；</li><li>对于<code>inpu type="radio</code>“的则是被选中的name、value提交给服务器；</li><li>对于<code>input type="submit"</code>的则是被点击的name、value被提交给服务器；</li><li>对textarea就是输入的文本；</li><li>对于select就是选择项对应的option的value。</li></ul><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">TMPL_varlist *varlist1 = <span class="number">0</span>;<span class="comment">//空的参数列表 C99</span></span><br><span class="line">cgiHeaderContentType(<span class="string">"text/html;charset=gbk"</span>);</span><br><span class="line">varlist1 = TMPL_add_var(varlist1, <span class="string">"test1"</span>, <span class="string">"特斯特1"</span>, <span class="string">"pwd"</span>, <span class="string">"小密码"</span>, <span class="string">"name"</span>, <span class="string">"小鹏"</span>, <span class="number">0</span>); <span class="comment">// 3对，最后一个必须为0表示可变</span></span><br><span class="line"><span class="keyword">char</span> *age = <span class="string">"38"</span>;</span><br><span class="line">varlist1 = TMPL_add_var(varlist1, <span class="string">"age"</span>, age, <span class="number">0</span>);<span class="comment">//执行完了varlist1四对参数</span></span><br><span class="line">TMPL_write(<span class="string">"P1.htm"</span>, <span class="number">0</span>, <span class="number">0</span>, varlist1, cgiOut, cgiOut);</span><br></pre></td></tr></tbody></table></figure><p>变量使用：<code>&lt;TMPL_VAR name="test1" /&gt;&lt;br /&gt;</code></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">TMPL_varlist * varlist1 = <span class="number">0</span>;</span><br><span class="line">TMPL_loop * loopUsers = <span class="number">0</span>;</span><br><span class="line">varlist1 = TMPL_add_var(varlist1, <span class="string">"Title"</span>, <span class="string">"测试Loop"</span>, <span class="number">0</span>);</span><br><span class="line">loopUsers = TMPL_add_varlist(loopUsers, TMPL_add_var(<span class="number">0</span>, <span class="string">"Name"</span>, <span class="string">"如鹏网"</span>, <span class="string">"Age"</span>, <span class="string">"8"</span>, <span class="string">"Title"</span>, <span class="string">"t1"</span>, <span class="number">0</span>));<span class="comment">//t1，同一行有的用同一行</span></span><br><span class="line">loopUsers = TMPL_add_varlist(loopUsers, TMPL_add_var(<span class="number">0</span>, <span class="string">"Name"</span>, <span class="string">"淘宝"</span>, <span class="string">"Age"</span>, <span class="string">"15"</span>, <span class="string">"Title"</span>, <span class="string">"t2"</span>, <span class="number">0</span>));<span class="comment">//t2</span></span><br><span class="line">loopUsers = TMPL_add_varlist(loopUsers, TMPL_add_var(<span class="number">0</span>, <span class="string">"Name"</span>, <span class="string">"京东"</span>, <span class="string">"Age"</span>, <span class="string">"10"</span>, <span class="number">0</span>));<span class="comment">//测试Loop，同一行没有的到上层去找</span></span><br><span class="line">varlist1 = TMPL_add_loop(varlist1, <span class="string">"users"</span>, loopUsers);<span class="comment">//大List里面的小List（name=“users”的Loop）</span></span><br><span class="line">cgiHeaderContentType(<span class="string">"text/html;charset=gbk"</span>);</span><br><span class="line">TMPL_write(<span class="string">"Users.htm"</span>, <span class="number">0</span>, <span class="number">0</span>, varlist1, cgiOut, cgiOut);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">tbody</span>&gt;</span><span class="tag">&lt;<span class="name">TMPL_LOOP</span> <span class="attr">name</span>=<span class="string">"users"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">TMPL_VAR</span> <span class="attr">name</span>=<span class="string">"Name"</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">TMPL_VAR</span> <span class="attr">name</span>=<span class="string">"Age"</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">TMPL_VAR</span> <span class="attr">name</span>=<span class="string">"Title"</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;/<span class="name">TMPL_LOOP</span>&gt;</span><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span> <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h1 id="MySQL-数据库"><a href="#MySQL-数据库" class="headerlink" title="MySQL 数据库"></a>MySQL 数据库</h1><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from Students // 表里面的数据</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into Students(ID, Name, Gender) value(3, 'asd', 1) // 插入数据，属性值对应（允许为空或者自动递增可不用写）</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">update Persons set Name='hehehe',Age=Age+1 // 全部更新表中某几列的数据</span><br><span class="line">update Persons set Age=Age+1 where Name='Tom' // 名字为 Tom 的人年龄+1</span><br><span class="line">条件用法：where (Age&gt;20 and Age&lt;30) or(Age=80)   // or、and、not、&lt;、&gt;、&gt;=、&lt;=、!=（或&lt;&gt;）</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">delete from Person where ... // 删除表中的数据，没有where为删除所有</span><br><span class="line">drop table Persons // 删除表</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select Age+1, Name from Persons where...// 显示表中的某几列（Age的列结果为Age+1）</span><br><span class="line">select Name 姓名, Age as 年龄 from Persons; // 为列取别名，可以不写as</span><br><span class="line">select 1+1 // 检索不与表关联的数据，结果为2</span><br><span class="line">select now() // 返回时间</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SQL聚合函数：MAX（最大值）、MIN（最小值）、AVG （平均值）、SUM （和）、COUNT（数量）</span><br><span class="line">select min(Age), max(Age) from Persons // 最低、最高年龄</span><br><span class="line">select count(*) from Persons where Age&gt;25 // 年龄大于25的人数</span><br><span class="line">select sum(Age), avg(Age) from Persons // 总年龄和平均年龄</span><br><span class="line">select count(Hobbies) from Persons // Hobbies 不为空的数量</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from Persons (where……) order by Age ASC, Salary DESC // 按照年龄升序(ASC,不写时默认)、薪水降序(DESC) 排列</span><br><span class="line">order 必须放在 where 后面</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">单字符通配符：_</span><br><span class="line">多字符通配符：% （可以为0个）</span><br><span class="line">select * from Persons where Name like 'T%' // 名字为 T 开头的所有</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nul 代表“不知道”，而不是“没有”。null+1 结果是 null</span><br><span class="line">select ...... name=null 或者 name != null 或者 nul=null 都没有任何返回结果</span><br><span class="line">select name+"a" from Persons</span><br><span class="line">select * from Persons where name is (not) null // 判断是不是null</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">limit 首行行号（行号从 0 开始）, 最大数目 // limit 必须放在所有语句的最后</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">group by Age   // 按照年龄分组，相同的为一组（重复的堆到一起）</span><br><span class="line">select age, count(*) from Persons group by age  // 显示所有年龄段，并且显示数量</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">查询每张订单的订单号、价格、对应的客户姓名以及客户年龄</span><br><span class="line">SELECT o.Number 订单编号,o.Price 价格,c.Name 客户姓名,c.Age FROM T_Orders o // 表别名为 o</span><br><span class="line">LEFT JOIN T_Customers c  ON o.CustomerId=c.Id // 别名为 c，当两个相等的时候，进行连接</span><br><span class="line">LEFT JOIN T_OrderTypes t ON o.TypeId=t.Id // 可以 join 多张表</span><br><span class="line">WHERE o.Price&gt;=150 // 可添加 where 条件</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">设计表——外键——添加，然后删除时会提示无法删除（可设置）</span><br><span class="line">删除时、更新时：一般默认RESTRICT（一起删除）；SET NULL（删除后连接的项目设置为NULL）；NO ACTION/RESTRICT（拒绝删除）</span><br></pre></td></tr></tbody></table></figure><h1 id="C-MySQL"><a href="#C-MySQL" class="headerlink" title="C + MySQL"></a>C + MySQL</h1><h2 id="使用方法：需要修改三个目录，以及复制dll"><a href="#使用方法：需要修改三个目录，以及复制dll" class="headerlink" title="使用方法：需要修改三个目录，以及复制dll"></a><strong>使用方法</strong>：需要修改三个目录，以及复制dll</h2><blockquote><p>1、在项目属性中【VC++目录】→“包含目录”，选择mysql的include文件夹；“库目录”选择mysql的lib文件夹；【链接器】→【输入】的“附加依赖项”增加“libmysql.lib”。</p><p>2、C代码里<code>include</code>头文件<code>mysql.h</code>，并且在之前要<code>include</code>头文件<code>winsock.h</code>。</p><p>3、<code>MYSQL *pConn = mysql_init(0);</code></p><p>4、编译运行，会报错找不到“libmysql.dll”，把mysql的<code>libmysql.dll</code>复制到exe的目录下。</p></blockquote><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;winsock.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mysql.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">MYSQL *mysql = mysql_init(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(!mysql_real_connect(mysql,<span class="string">"localhost"</span>,<span class="string">"root"</span>,<span class="string">"root"</span>,<span class="string">"study3"</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)){</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"连接数据库出错：%s"</span>,mysql_error(mysql));<span class="comment">// mysql的上一次错误信息</span></span><br><span class="line"><span class="keyword">goto</span> <span class="built_in">exit</span>;<span class="comment">//goto一般不推荐使用，但是在错误处理的时候，很好用</span></span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"连接数据库成功！\n"</span>);</span><br><span class="line"><span class="keyword">if</span>(mysql_query(mysql,<span class="string">"set names gbk"</span>)){ <span class="comment">// 这样才能用中文。失败时 为 真</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"设定连接编码失败%s"</span>,mysql_error(mysql));</span><br><span class="line"><span class="keyword">goto</span> <span class="built_in">exit</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span>:</span><br><span class="line">mysql_close(mysql);<span class="comment">//程序最后必须关闭连接，否则会有mysql服务器连接过多卡死的可能性</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"exit"</span>);</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="execute封装"><a href="#execute封装" class="headerlink" title="execute封装"></a>execute封装</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;winsock.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mysql.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">executeNonQuery</span><span class="params">(<span class="keyword">char</span> * sql)</span></span>; <span class="comment">// 没有返回值的</span></span><br><span class="line"><span class="function">MYSQL_RES * <span class="title">executeQuery</span><span class="params">(<span class="keyword">char</span> * sql)</span></span>; <span class="comment">// 有返回值的</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">executeNonQuery(<span class="string">"insert into Persons(name, gender) value('aaa', 1)"</span>);</span><br><span class="line"></span><br><span class="line">MYSQL_RES * res = executeQuery(<span class="string">"select * from Persons"</span>);</span><br><span class="line">MYSQL_ROW row;</span><br><span class="line"><span class="keyword">while</span> (row = mysql_fetch_row(res))</span><br><span class="line">{</span><br><span class="line"><span class="keyword">char</span> * un = row[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">char</span> * pwd = row[<span class="number">1</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"username = %s, password = %s\n"</span>, un, pwd);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">executeNonQuery</span><span class="params">(<span class="keyword">char</span> * sql)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">MYSQL * pConn = mysql_init(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (!mysql_real_connect(pConn, <span class="string">"localhost"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>, <span class="string">"test"</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)) {</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"连接失败：%s\n"</span>, mysql_error(pConn));</span><br><span class="line"><span class="keyword">goto</span> endd;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (mysql_query(pConn, <span class="string">"set names gbk"</span>)) {</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"设置gbk失败：%s\n"</span>, mysql_error(pConn));</span><br><span class="line"><span class="keyword">goto</span> endd;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (mysql_query(pConn, sql)) {</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"查询失败：%s\n"</span>, mysql_error(pConn));</span><br><span class="line"><span class="keyword">goto</span> endd;</span><br><span class="line">}</span><br><span class="line">endd:</span><br><span class="line">mysql_close(pConn);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function">MYSQL_RES * <span class="title">executeQuery</span><span class="params">(<span class="keyword">char</span> * sql)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">MYSQL * pConn = mysql_init(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (!mysql_real_connect(pConn, <span class="string">"localhost"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>, <span class="string">"test"</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)) {</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"连接失败：%s\n"</span>, mysql_error(pConn));</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (mysql_query(pConn, <span class="string">"set names gbk"</span>)) {</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"设置gbk失败：%s\n"</span>, mysql_error(pConn));</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (mysql_query(pConn, sql)) {</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"查询失败：%s\n"</span>, mysql_error(pConn));</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">MYSQL_RES * result = mysql_store_result(pConn);</span><br><span class="line">mysql_close(pConn);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="表单数据"><a href="#表单数据" class="headerlink" title="表单数据"></a>表单数据</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> sql[<span class="number">1024</span>]={<span class="number">0</span>}; <span class="comment">// 把用户输入的字符串动态拼接生成sql语句</span></span><br><span class="line"><span class="keyword">char</span> userName, hexUserName[<span class="number">1024</span>]={<span class="number">0</span>}; <span class="comment">// 把可能含有特殊符号的字符串进行16进制转换</span></span><br><span class="line">mysql_hex_string(hexUserName, userName, <span class="built_in">strlen</span>(userName)); <span class="comment">// 转换成安全的16进制</span></span><br><span class="line"><span class="built_in">sprintf</span>(sql, <span class="string">"Insert into T_Users(UserName,Password) values(0x%s,'%s')"</span>, hexUserName,password);</span><br><span class="line"><span class="comment">// 可以直接识别命令里面0x开头的16进制数据，并自动转换成原来的字符串(数字 0，不是 英文o)</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">cgiFormInteger(<span class="string">"age"</span>, &amp;age, <span class="number">100</span>); <span class="comment">// 获取整型表单。注意，是地址！最后一个是失败后的age默认值</span></span><br><span class="line"><span class="comment">// 例如，当 "age=aaa" 时，取不到整型的值，所以 age = 100</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> len; <span class="comment">// 用来决定需要申请的长度</span></span><br><span class="line"><span class="keyword">char</span> *txt;</span><br><span class="line">TMPL_varlist *varlist = <span class="number">0</span>;</span><br><span class="line">cgiFormStringSpaceNeeded(<span class="string">"txt1"</span>,&amp;len); <span class="comment">// 用于获取可能会非常长的值的长度</span></span><br><span class="line">txt = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(len+<span class="number">1</span>); <span class="comment">// 动态申请内存</span></span><br><span class="line">cgiFormString(<span class="string">"txt1"</span>,txt,len);</span><br><span class="line"><span class="built_in">free</span>(txt); <span class="comment">// 最后别忘了 free</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(cgiFormCheckboxSingle(<span class="string">"agree"</span>)!=cgiFormSuccess) <span class="comment">// 多选框是否选中</span></span><br><span class="line">&lt;select&gt;&lt;option&gt;xxx&lt;/option&gt;&lt;/select&gt; 和 "radio" 都用 cgiFormString 来获取是否输入</span><br></pre></td></tr></tbody></table></figure><h1 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h1><h2 id="HTML文件"><a href="#HTML文件" class="headerlink" title="HTML文件"></a>HTML文件</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span> // 必须这样写</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"f1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="文件参数"><a href="#文件参数" class="headerlink" title="文件参数"></a>文件参数</h3><ul><li><code>cgiFormFileName</code>：上传的文件名</li><li><code>cgiFormFileSize</code>：文件大小（单位为B）</li><li><code>cgiFormFileRead</code>：读取上传文件</li><li><code>cgiFormFileClose</code>：关闭上传的文件</li></ul><h3 id="判断有没有上传文件"><a href="#判断有没有上传文件" class="headerlink" title="判断有没有上传文件"></a>判断有没有上传文件</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(cgiFormFileName(<span class="string">"file1"</span>,uploadfilename,<span class="keyword">sizeof</span>(uploadfilename))!=cgiFormSuccess)</span><br></pre></td></tr></tbody></table></figure><h3 id="获取扩展名"><a href="#获取扩展名" class="headerlink" title="获取扩展名"></a>获取扩展名</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">_splitpath(uploadfilename,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,fileExt); <span class="comment">// &lt;stdlib.h&gt;中</span></span><br><span class="line">参数：全路径指针，盘符（带冒号），路径（纯目录无盘符，如 /aaa/），文件名（不包含后缀名），后缀名（带点）</span><br><span class="line">文件格式：d:/aaa/bbb.jpg</span><br><span class="line"><span class="keyword">if</span>(stricmp(fileExt,<span class="string">".jpg"</span>)!=<span class="number">0</span>&amp;&amp;stricmp(fileExt,<span class="string">".png"</span>))…… <span class="comment">// stricmp 为不区分大小写的比较</span></span><br></pre></td></tr></tbody></table></figure><h3 id="获取文件大小"><a href="#获取文件大小" class="headerlink" title="获取文件大小"></a>获取文件大小</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cgiFormFileSize(<span class="string">"file1"</span>,&amp;filesize);</span><br><span class="line"><span class="keyword">if</span>(filesize&gt;<span class="number">1024</span>*<span class="number">1024</span>)…… <span class="comment">// 1024 * 1024 = 1 M</span></span><br></pre></td></tr></tbody></table></figure><h2 id="总的操作"><a href="#总的操作" class="headerlink" title="总的操作"></a>总的操作</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cgiFilePtr file1; <span class="comment">// 声明类似文件指针的变量，网络文件指针</span></span><br><span class="line"><span class="comment">//读取本地文件，用于写入，本地文件指针</span></span><br><span class="line">FILE *fileLocal = fopen(uploadfilename,<span class="string">"wb"</span>); <span class="comment">// C语言读取文件，wb是二进制模式，默认是用文本</span></span><br><span class="line"><span class="keyword">char</span> buffer[<span class="number">1024</span>]; <span class="comment">// 每次最多1024kb</span></span><br><span class="line"><span class="keyword">int</span> lenRead; <span class="comment">// 实际读的字节数</span></span><br><span class="line">cgiFormFileOpen(<span class="string">"file1"</span>,&amp;file1);</span><br><span class="line"><span class="keyword">while</span>(cgiFormFileRead(file1,buffer,<span class="keyword">sizeof</span>(buffer),&amp;lenRead)==cgiFormSuccess)</span><br><span class="line">{</span><br><span class="line">fwrite(buffer,lenRead,<span class="number">1</span>,fileLocal); <span class="comment">// buffer[] 的前 lenRead 字节写入到 fileLocal 中</span></span><br><span class="line">}</span><br><span class="line">fclose(fileLocal);</span><br><span class="line">cgiFormFileClose(file1);</span><br><span class="line">printFileUploadMsg(<span class="string">"上传成功"</span>);</span><br></pre></td></tr></tbody></table></figure><hr><blockquote><p>如鹏网《C语言也能干大事》学习笔记</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CGI-amp-DGI&quot;&gt;&lt;a href=&quot;#CGI-amp-DGI&quot; class=&quot;headerlink&quot; title=&quot;CGI &amp;amp; DGI&quot;&gt;&lt;/a&gt;CGI &amp;amp; DGI&lt;/h1&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; * qs = getenv(&lt;span class=&quot;string&quot;&gt;&quot;QUERY_STRING&quot;&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//获取环境变量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; username[&lt;span class=&quot;number&quot;&gt;256&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;sscanf&lt;/span&gt;(qs, &lt;span class=&quot;string&quot;&gt;&quot;username=%s&quot;&lt;/span&gt;, username);&lt;span class=&quot;comment&quot;&gt;//获取地址栏后面的东西&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;断点调试：&lt;code&gt;include \&amp;lt;windows.h&amp;gt;&lt;/code&gt;，然后 &lt;code&gt;MessageBoxA(0,&quot;ok&quot;,&quot;ok&quot;,0);&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C" scheme="http://blog.iwxyi.com/tags/C/"/>
    
      <category term="学习笔记" scheme="http://blog.iwxyi.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="CGI" scheme="http://blog.iwxyi.com/tags/CGI/"/>
    
      <category term="Web" scheme="http://blog.iwxyi.com/tags/Web/"/>
    
  </entry>
  
</feed>
