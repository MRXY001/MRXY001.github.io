<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>云笺</title>
  
  <subtitle>一些技术摘要和写作技巧</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.iwxyi.com/"/>
  <updated>2019-10-11T12:23:30.939Z</updated>
  <id>http://blog.iwxyi.com/</id>
  
  <author>
    <name>命燃芯乂</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>fread和fwrite转移文件数据</title>
    <link href="http://blog.iwxyi.com/2019/10/11/fread%E5%92%8Cfwrite%E8%BD%AC%E7%A7%BB%E6%96%87%E4%BB%B6%E6%95%B0%E6%8D%AE/"/>
    <id>http://blog.iwxyi.com/2019/10/11/fread和fwrite转移文件数据/</id>
    <published>2019-10-11T12:18:00.000Z</published>
    <updated>2019-10-11T12:23:30.939Z</updated>
    
    <content type="html"><![CDATA[<p>读取文件，再写入到另一个文件里面：</p><p><strong>1、获取文件大小</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FILE* fp_size = fopen(<span class="string">"T:/img.jpg"</span>, <span class="string">"rb"</span>);</span><br><span class="line">fseek(fp_size, <span class="number">0</span>, SEEK_END);</span><br><span class="line"><span class="keyword">int</span> size = ftell(fp_size);</span><br><span class="line">fclose(fp_size);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"文件大小(指针偏移计算):"</span> &lt;&lt; size; <span class="comment">// 字节大小</span></span><br></pre></td></tr></tbody></table></figure><a id="more"></a><p><strong>2、读取文件</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FILE* fp_read = fopen(<span class="string">"T:/img.jpg"</span>, <span class="string">"rb"</span>);</span><br><span class="line"><span class="keyword">int</span>* buffer = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(size+<span class="number">4</span>); <span class="comment">// 可以改成其他类型也没事，比如 char*</span></span><br><span class="line">fread(buffer, size, <span class="number">1</span>, fp_read);</span><br><span class="line">fclose(fp_read);</span><br></pre></td></tr></tbody></table></figure><p><strong>3、写入到另一个文件</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FILE* fp_write = fopen(<span class="string">"T:/img1.png"</span>, <span class="string">"wb"</span>);</span><br><span class="line">fwrite(buffer,size, <span class="number">1</span>, fp_write);</span><br><span class="line">fclose(fp_write);</span><br></pre></td></tr></tbody></table></figure><p><code>fread</code>和<code>write</code>的<code>size</code>可以更大，不影响结果（表示上限）</p><hr><p>实测一张jpg图片：</p><ul><li>size超过体积，保存的会是size的大小</li><li>1/10时：图片只有一半显示，体积也只有1/10</li><li>1/4时：上方5/6的部分清晰，剩下的模糊</li><li>1/2时：虽然体积只有一半，但是好像一样清晰……</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;读取文件，再写入到另一个文件里面：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、获取文件大小&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;FILE* fp_size = fopen(&lt;span class=&quot;string&quot;&gt;&quot;T:/img.jpg&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;rb&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fseek(fp_size, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, SEEK_END);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; size = ftell(fp_size);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fclose(fp_size);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;文件大小(指针偏移计算):&quot;&lt;/span&gt; &amp;lt;&amp;lt; size; &lt;span class=&quot;comment&quot;&gt;// 字节大小&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C" scheme="http://blog.iwxyi.com/tags/C/"/>
    
      <category term="文件" scheme="http://blog.iwxyi.com/tags/%E6%96%87%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>嵌套循环优化</title>
    <link href="http://blog.iwxyi.com/2019/10/11/%E5%B5%8C%E5%A5%97%E5%BE%AA%E7%8E%AF%E4%BC%98%E5%8C%96/"/>
    <id>http://blog.iwxyi.com/2019/10/11/嵌套循环优化/</id>
    <published>2019-10-11T11:50:00.000Z</published>
    <updated>2019-10-11T12:12:58.428Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>请对以下的代码进行优化：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++)  </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">100</span>; j++)  </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">10</span>; k++)  </span><br><span class="line">            testFunction (i, j, k);</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>从给出的代码可知，不论如何优化，testFunction执行的次数都是相同的，该部分不存在优化的可能。那么，代码的优化只能从循环变量i、j、k的实例化、初始化、比较、自增等方面的耗时上进行分析。</p><p>首先，我们先分析原题代码循环变量在实例化、初始化、比较、自增等方面的耗时情况： </p><table><thead><tr><th>变量</th><th>实例化(次数)</th><th>初始化(次数)</th><th>比较(次数)</th><th>自增(次数)</th></tr></thead><tbody><tr><td>i</td><td>1</td><td>1</td><td>1000</td><td>1000</td></tr><tr><td>j</td><td>1000</td><td>1000</td><td>1000 * 100</td><td>1000 * 100</td></tr><tr><td>k</td><td>1000 * 100</td><td>1000 * 100</td><td>1000 * 100 * 10</td><td>1000 * 100 * 10</td></tr></tbody></table><p>该代码的性能优化就是尽可能减少循环变量i、j、k的实例化、初始化、比较、自增的次数，同时，不能引进其它可能的运算耗时。 </p><h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)  </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">100</span>; j++)  </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">1000</span>; k++)  </span><br><span class="line">            testFunction (k, j, i);</span><br></pre></td></tr></tbody></table></figure><p>该方案主要是将循环次数最少的放到外面，循环次数最多的放里面，这样可以最大程度的（注：3个不同次数的循环变量共有6种排列组合情况，此种组合为最优）减少相关循环变量的实例化次数、初始化次数、比较次数、自增次数，方案耗时情况如下： </p><table><thead><tr><th>变量</th><th>实例化(次数)</th><th>初始化(次数)</th><th>比较(次数)</th><th>自增(次数)</th></tr></thead><tbody><tr><td>i</td><td>1</td><td>1</td><td>10</td><td>10</td></tr><tr><td>j</td><td>10</td><td>10</td><td>10 * 100</td><td>10 * 100</td></tr><tr><td>k</td><td>10 * 100</td><td>10 * 100</td><td>10 * 100 * 1000</td><td>10 * 100 * 1000</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;请对以下的代码进行优化：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;; i++)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j &amp;lt; &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;; j++)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; k = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; k &amp;lt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;; k++)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            testFunction (i, j, k);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C" scheme="http://blog.iwxyi.com/tags/C/"/>
    
      <category term="优化" scheme="http://blog.iwxyi.com/tags/%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>0x3F3F3F3F</title>
    <link href="http://blog.iwxyi.com/2019/10/11/0x3F3F3F3F/"/>
    <id>http://blog.iwxyi.com/2019/10/11/0x3F3F3F3F/</id>
    <published>2019-10-11T11:40:00.000Z</published>
    <updated>2019-10-11T11:59:18.278Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x3f3f3f3f"><a href="#0x3f3f3f3f" class="headerlink" title="0x3f3f3f3f"></a>0x3f3f3f3f</h1><p><code>0x3f3f3f3f</code>的十进制是<code>1061109567</code>，是<code>10^9</code>级别的（和<code>0x7fffffff</code>一个数量级），而一般场合下的数据都是小于<code>10^9</code>的，所以它可以作为无穷大使用而不致出现数据大于无穷大的情形。 </p><a id="more"></a><p>另一方面，由于一般的数据都不会大于<code>10^9</code>，所以当我们把无穷大加上一个数据时，它并不会溢出（这就满足了“无穷大加一个有穷的数依然是无穷大”），事实上<code>0x3f3f3f3f</code>+<code>0x3f3f3f3f</code>=<code>2122219134</code>，这非常大但却没有超过<code>32-bit int</code>的表示范围，所以<code>0x3f3f3f3f</code>还满足了我们“无穷大加无穷大还是无穷大”的需求。</p><p>最后，<code>0x3f3f3f3f</code>还能给我们带来一个意想不到的额外好处：<br>如果我们想要将某个数组清零，我们通常会使用<code>memset(a,0,sizeof(a))</code>，方便又高效，但是当我们想将某个数组全部赋值为无穷大时，就不能使用memset函数而得自己写循环了，因为<code>memset</code>是按字节操作的，它能够对数组清零是因为0的每个字节都是0（一般我们只有赋值为-1和0的时候才使用它）。现在好了，如果我们将无穷大设为<code>0x3f3f3f3f</code>，那么奇迹就发生了，<code>0x3f3f3f3f</code>的每个字节都是0x3f！所以要把一段内存全部置为无穷大，我们只需要<code>memset(a,0x3f,sizeof(a))</code>。</p><p>所以在通常的场合下，<code>0x3f3f3f3f</code>真的是一个非常棒的选择！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0x3f3f3f3f&quot;&gt;&lt;a href=&quot;#0x3f3f3f3f&quot; class=&quot;headerlink&quot; title=&quot;0x3f3f3f3f&quot;&gt;&lt;/a&gt;0x3f3f3f3f&lt;/h1&gt;&lt;p&gt;&lt;code&gt;0x3f3f3f3f&lt;/code&gt;的十进制是&lt;code&gt;1061109567&lt;/code&gt;，是&lt;code&gt;10^9&lt;/code&gt;级别的（和&lt;code&gt;0x7fffffff&lt;/code&gt;一个数量级），而一般场合下的数据都是小于&lt;code&gt;10^9&lt;/code&gt;的，所以它可以作为无穷大使用而不致出现数据大于无穷大的情形。 &lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C" scheme="http://blog.iwxyi.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>正则二三事</title>
    <link href="http://blog.iwxyi.com/2019/10/10/%E6%AD%A3%E5%88%99%E4%BA%8C%E4%B8%89%E4%BA%8B/"/>
    <id>http://blog.iwxyi.com/2019/10/10/正则二三事/</id>
    <published>2019-10-10T11:40:00.000Z</published>
    <updated>2019-10-11T11:35:33.889Z</updated>
    
    <content type="html"><![CDATA[<p>一、校验数字的表达式</p><p>1、 数字：<code>^[0-9]*$</code></p><p>2、 n位的数字：<code>^\d{n}$</code></p><p>3、 至少n位的数字：<code>^\d{n,}$</code></p><p>4、 m-n位的数字：<code>^\d{m,n}$</code></p><a id="more"></a><p>5、 零和非零开头的数字：<code>^(0|[1-9][0-9]*)$</code></p><p>6、 非零开头的最多带两位小数的数字：<code>^([1-9][0-9]*)+(.[0-9]{1,2})?$</code></p><p>7、 带1-2位小数的正数或负数：<code>^(-)?\d+(.\d{1,2})?$</code></p><p>8、 正数、负数、和小数：<code>^(-|+)?\d+(.\d+)?$</code></p><p>9、 有两位小数的正实数：<code>^[0-9]+(.[0-9]{2})?$</code></p><p>10、 有1~3位小数的正实数：<code>^[0-9]+(.[0-9]{1,3})?$</code></p><p>11、 非零的正整数：<code>^[1-9]\d$ 或 ^([1-9][0-9]){1,3}$ 或 ^+?[1-9][0-9]*$</code></p><p>12、 非零的负整数：<code>^-[1-9][]0-9"$ 或 ^-[1-9]\d$</code></p><p>13、 非负整数：<code>^\d+$ 或 ^[1-9]\d*|0$</code></p><p>14、 非正整数：<code>^-[1-9]\d*|0$ 或 ^((-\d+)|(0+))$</code></p><p>15、 非负浮点数：<code>^\d+(.\d+)?$ 或 ^[1-9]\d.\d|0.\d[1-9]\d|0?.0+|0$</code></p><p>16、 非正浮点数：<code>^((-\d+(.\d+)?)|(0+(.0+)?))$ 或 ^(-([1-9]\d.\d|0.\d[1-9]\d))|0?.0+|0$</code></p><p>17、 正浮点数：<code>^[1-9]\d.\d|0.\d[1-9]\d$ 或 ^(([0-9]+.[0-9][1-9][0-9])|([0-9][1-9][0-9].[0-9]+)|([0-9][1-9][0-9]))$</code></p><p>18、 负浮点数：<code>^-([1-9]\d.\d|0.\d[1-9]\d)$ 或 ^(-(([0-9]+.[0-9][1-9][0-9])|([0-9][1-9][0-9].[0-9]+)|([0-9][1-9][0-9])))$</code></p><p>19、 浮点数：<code>^(-?\d+)(.\d+)?$ 或 ^-?([1-9]\d.\d|0.\d[1-9]\d|0?.0+|0)$</code></p><p>二、校验字符的表达式</p><p>1、 汉字：<code>^[\u4e00-\u9fa5]{0,}$</code></p><p>2、 英文和数字：<code>^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]{4,40}$</code></p><p>3、 长度为3-20的所有字符：<code>^.{3,20}$</code></p><p>4、 由26个英文字母组成的字符串：<code>^[A-Za-z]+$</code></p><p>5、 由26个大写英文字母组成的字符串：<code>^[A-Z]+$</code></p><p>6、 由26个小写英文字母组成的字符串：<code>^[a-z]+$</code></p><p>7、 由数字和26个英文字母组成的字符串：<code>^[A-Za-z0-9]+$</code></p><p>8、 由数字、26个英文字母或者下划线组成的字符串：<code>^\w+$ 或 ^\w{3,20}$</code></p><p>9、 中文、英文、数字包括下划线：<code>^[\u4E00-\u9FA5A-Za-z0-9_]+$</code></p><p>10、 中文、英文、数字但不包括下划线等符号：<code>^[\u4E00-\u9FA5A-Za-z0-9]+$ 或 ^[\u4E00-\u9FA5A-Za-z0-9]{2,20}$</code></p><p>11、 可以输入含有<code>^%&amp;',;=?$\"</code>等字符：<code>[^%&amp;',;=?$\x22]+</code></p><p>12、 禁止输入含有<code>~</code>的字符：<code>[^~\x22]+</code></p><p>三、特殊需求表达式</p><p>1、 Email地址：<code>^\w+([-+.]\w+)@\w+([-.]\w+).\w+([-.]\w+)*$</code></p><p>2、 域名：<code>[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/.?</code></p><p>3、 InternetURL：<code>[a-zA-z]+://[^\s]</code> 或 <code>^http://([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=])?$</code></p><p>4、 手机号码：<code>^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d{8}$</code></p><p>5、 电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)：<code>^((\d{3,4}-)|\d{3.4}-)?\d{7,8}$</code></p><p>6、 国内电话号码(0511-4405222、021-87888822)：<code>\d{3}-\d{8}|\d{4}-\d{7}</code></p><p>7、 身份证号(15位、18位数字)：<code>^\d{15}|\d{18}$</code></p><p>8、 短身份证号码(数字、字母x结尾)：<code>^([0-9]){7,18}(x|X)?$ 或 ^\d{8,18}|[0-9x]{8,18}|[0-9X]{8,18}?$</code></p><p>9、 帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：<code>^[a-zA-Z][a-zA-Z0-9_]{4,15}$</code></p><p>10、 密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：<code>^[a-zA-Z]\w{5,17}$</code></p><p>11、 强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：<code>^(?=.\d)(?=.[a-z])(?=.*[A-Z]).{8,10}$</code></p><p>12、 日期格式：<code>^\d{4}-\d{1,2}-\d{1,2}</code></p><p>13、 一年的12个月(01～09和1～12)：<code>^(0?[1-9]|1[0-2])$</code></p><p>14 一个月的31天(01～09和1～31)：<code>^((0?[1-9])|((1|2)[0-9])|30|31)$</code></p><p>15、 钱的输入格式：</p><p>   1.有四种钱的表示形式我们可以接受:”10000.00” 和 “10,000.00”, 和没有 “分” 的 “10000” 和 “10,000”：<code>^[1-9][0-9]*$</code></p><p>   2.这表示任意一个不以0开头的数字,但是,这也意味着一个字符”0”不通过,所以我们采用下面的形式：<code>^(0|[1-9][0-9]*)$</code></p><p>   3.一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：<code>^(0|-?[1-9][0-9]*)$</code></p><p>   4.这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：<code>^[0-9]+(.[0-9]+)?$</code></p><p>   5.必须说明的是,小数点后面至少应该有1位数,所以”10.”是不通过的,但是 “10” 和 “10.2” 是通过的：<code>^[0-9]+(.[0-9]{2})?$</code></p><p>   6.这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：<code>^[0-9]+(.[0-9]{1,2})?$</code></p><p>   7.这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：<code>^[0-9]{1,3}(,[0-9]{3})*(.[0-9]{1,2})?$</code></p><ol start="8"><li>1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：<code>^([0-9]+|[0-9]{1,3}(,[0-9]{3})*)(.[0-9]{1,2})?$</code></li></ol><p>16、 备注：这就是最终结果了,别忘了”+”可以用”*”替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里</p><p>17、 xml文件：<code>^([a-zA-Z]+-?)+[a-zA-Z0-9]+\.[x|X][m|M][l|L]$</code></p><p>18、 中文字符的正则表达式：<code>[\u4e00-\u9fa5]</code></p><p>19、 双字节字符：<code>[^\x00-\xff]</code> (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))</p><p>20、 空白行的正则表达式：\n\s*\r (可以用来删除空白行)</p><p>21、 HTML标记的正则表达式：<code>&lt;(\S?)[^&gt;]&gt;.?&lt;/\1&gt;|&lt;.? /&gt;</code> (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)</p><p>22、 首尾空白字符的正则表达式：<code>^\s|\s$</code>或<code>(^\s)|(\s$)</code> (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)</p><p>23、 腾讯QQ号：<code>[1-9][0-9]{4,}</code> (腾讯QQ号从10000开始)</p><p>24、 中国邮政编码：<code>[1-9]\d{5}(?!\d)</code> (中国邮政编码为6位数字)</p><p>25、 IP地址：<code>\d+.\d+.\d+.\d+</code> (提取IP地址时有用)</p><p>26、 IP地址：<code>((?:(?:25[0-5]|2[0-4]\d|[01]?\d?\d)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d?\d))</code></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一、校验数字的表达式&lt;/p&gt;
&lt;p&gt;1、 数字：&lt;code&gt;^[0-9]*$&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;2、 n位的数字：&lt;code&gt;^\d{n}$&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;3、 至少n位的数字：&lt;code&gt;^\d{n,}$&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;4、 m-n位的数字：&lt;code&gt;^\d{m,n}$&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="RegExp" scheme="http://blog.iwxyi.com/tags/RegExp/"/>
    
  </entry>
  
  <entry>
    <title>SQL查询及删除重复记录</title>
    <link href="http://blog.iwxyi.com/2019/10/10/SQL%E6%9F%A5%E8%AF%A2%E5%8F%8A%E5%88%A0%E9%99%A4%E9%87%8D%E5%A4%8D%E8%AE%B0%E5%BD%95/"/>
    <id>http://blog.iwxyi.com/2019/10/10/SQL查询及删除重复记录/</id>
    <published>2019-10-10T10:38:00.000Z</published>
    <updated>2019-10-11T11:59:58.376Z</updated>
    
    <content type="html"><![CDATA[<p>1、查找表中多余的重复记录，重复记录是根据单个字段（peopleId）来判断</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> people</span><br><span class="line"><span class="keyword">where</span> peopleId <span class="keyword">in</span> (<span class="keyword">select</span> peopleId <span class="keyword">from</span> people <span class="keyword">group</span> <span class="keyword">by</span> peopleId <span class="keyword">having</span> <span class="keyword">count</span>(peopleId) &gt; <span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><p>2、删除表中多余的重复记录，重复记录是根据单个字段（peopleId）来判断，只留有rowid最小的记录</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> people</span><br><span class="line"><span class="keyword">where</span> peopleId <span class="keyword">in</span> (<span class="keyword">select</span> peopleId <span class="keyword">from</span> people <span class="keyword">group</span> <span class="keyword">by</span> peopleId <span class="keyword">having</span> <span class="keyword">count</span>(peopleId) &gt; <span class="number">1</span>)</span><br><span class="line"><span class="keyword">and</span> <span class="keyword">rowid</span> <span class="keyword">not</span> <span class="keyword">in</span> (<span class="keyword">select</span> <span class="keyword">min</span>(<span class="keyword">rowid</span>) <span class="keyword">from</span> people <span class="keyword">group</span> <span class="keyword">by</span> peopleId <span class="keyword">having</span> <span class="keyword">count</span>(peopleId )&gt;<span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure><p>3、查找表中多余的重复记录（多个字段）</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> vitae a</span><br><span class="line"><span class="keyword">where</span> (a.peopleId,a.seq) <span class="keyword">in</span> (<span class="keyword">select</span> peopleId,seq <span class="keyword">from</span> vitae <span class="keyword">group</span> <span class="keyword">by</span> peopleId,seq <span class="keyword">having</span> <span class="keyword">count</span>(*) &gt; <span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure><p>4、删除表中多余的重复记录（多个字段），只留有rowid最小的记录</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> vitae a</span><br><span class="line"><span class="keyword">where</span> (a.peopleId,a.seq) <span class="keyword">in</span> (<span class="keyword">select</span> peopleId,seq <span class="keyword">from</span> vitae <span class="keyword">group</span> <span class="keyword">by</span> peopleId,seq <span class="keyword">having</span> <span class="keyword">count</span>(*) &gt; <span class="number">1</span>)</span><br><span class="line"><span class="keyword">and</span> <span class="keyword">rowid</span> <span class="keyword">not</span> <span class="keyword">in</span> (<span class="keyword">select</span> <span class="keyword">min</span>(<span class="keyword">rowid</span>) <span class="keyword">from</span> vitae <span class="keyword">group</span> <span class="keyword">by</span> peopleId,seq <span class="keyword">having</span> <span class="keyword">count</span>(*)&gt;<span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure><p>5、查找表中多余的重复记录（多个字段），不包含rowid最小的记录</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> vitae a</span><br><span class="line"><span class="keyword">where</span> (a.peopleId,a.seq) <span class="keyword">in</span> (<span class="keyword">select</span> peopleId,seq <span class="keyword">from</span> vitae <span class="keyword">group</span> <span class="keyword">by</span> peopleId,seq <span class="keyword">having</span> <span class="keyword">count</span>(*) &gt; <span class="number">1</span>)</span><br><span class="line"><span class="keyword">and</span> <span class="keyword">rowid</span> <span class="keyword">not</span> <span class="keyword">in</span> (<span class="keyword">select</span> <span class="keyword">min</span>(<span class="keyword">rowid</span>) <span class="keyword">from</span> vitae <span class="keyword">group</span> <span class="keyword">by</span> peopleId,seq <span class="keyword">having</span> <span class="keyword">count</span>(*)&gt;<span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1、查找表中多余的重复记录，重复记录是根据单个字段（peopleId）来判断&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; * &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; people&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt; peopleId &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; peopleId &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; people &lt;span class=&quot;keyword&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;by&lt;/span&gt; peopleId &lt;span class=&quot;keyword&quot;&gt;having&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;count&lt;/span&gt;(peopleId) &amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="SQL" scheme="http://blog.iwxyi.com/tags/SQL/"/>
    
  </entry>
  
</feed>
