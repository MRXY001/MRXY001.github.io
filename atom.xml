<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>云笺</title>
  
  <subtitle>一些技术摘要和写作技巧</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.iwxyi.com/"/>
  <updated>2019-10-13T03:03:38.177Z</updated>
  <id>http://blog.iwxyi.com/</id>
  
  <author>
    <name>命燃芯乂</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>工厂模式</title>
    <link href="http://blog.iwxyi.com/2019/10/12/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://blog.iwxyi.com/2019/10/12/工厂模式/</id>
    <published>2019-10-12T12:18:00.000Z</published>
    <updated>2019-10-13T03:03:38.177Z</updated>
    
    <content type="html"><![CDATA[<p>在平时编程中，构建对象最常用的方式是 new 一个对象。乍一看这种做法没什么不好，而实际上这也属于一种硬编码。每 new 一个对象，相当于<strong>调用者多知道了一个类</strong>，增加了类与类之间的联系，不利于程序的松耦合。其实构建过程可以被封装起来，工厂模式便是用于封装对象的设计模式。</p><a id="more"></a><h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2><p>举个例子，直接 new 对象的方式相当于当我们需要一个苹果时，我们需要知道苹果的构造方法，需要一个梨子时，需要知道梨子的构造方法。更好的实现方式是有一个水果工厂，我们告诉工厂需要什么种类的水果，水果工厂将我们需要的水果制造出来给我们就可以了。这样我们就无需知道苹果、梨子是怎么种出来的，<strong>只用和水果工厂打交道</strong>即可。</p><p>水果工厂：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FruitFactory</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Fruit <span class="title">create</span><span class="params">(String type)</span></span>{</span><br><span class="line">        <span class="keyword">switch</span> (type){</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"苹果"</span>: <span class="keyword">return</span> <span class="keyword">new</span> Apple();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"梨子"</span>: <span class="keyword">return</span> <span class="keyword">new</span> Pear();</span><br><span class="line">            <span class="keyword">default</span>: <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"暂时没有这种水果"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>调用：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>{</span><br><span class="line">        FruitFactory fruitFactory = <span class="keyword">new</span> FruitFactory();</span><br><span class="line">        Fruit apple = fruitFactory.create(<span class="string">"苹果"</span>);</span><br><span class="line">        Fruit pear = fruitFactory.create(<span class="string">"梨子"</span>);</span><br><span class="line">        apple.eat();</span><br><span class="line">        pear.eat();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>事实上，将构建过程封装的好处不仅可以<strong>降低耦合</strong>，如果某个产品构造方法相当复杂，使用工厂模式可以大大<strong>减少代码重复</strong>。</p><p>简单工厂模式就是让一个工厂类承担构建所有对象的职责。调用者需要什么产品，让工厂生产出来即可。它的弊端也显而易见：</p><ul><li>一是如果需要生产的产品过多，此模式会导致<strong>工厂类过于庞大</strong>，承担过多的职责，变成超级类。当苹果生产过程需要修改时，要来修改此工厂。梨子生产过程需要修改时，也要来修改此工厂。也就是说这个类不止一个引起修改的原因。违背了单一职责原则。</li><li>二是当要生产新的产品时，必须在工厂类中<strong>添加新的分支</strong>。而开闭原则告诉我们：类应该对修改封闭。我们希望在添加新功能时，只需增加新的类，而不是修改既有的类，所以这就违背了开闭原则。</li></ul><h2 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h2><p>为了解决简单工厂模式的这两个弊端，工厂方法模式应运而生，它规定每个产品都有一个专属工厂。比如苹果有专属的苹果工厂，梨子有专属的梨子工厂，Java 代码如下：</p><p>苹果工厂：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppleFactory</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Fruit <span class="title">create</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Apple();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>梨子工厂：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PearFactory</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Fruit <span class="title">create</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Pear();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>调用者：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>{</span><br><span class="line">        AppleFactory appleFactory = <span class="keyword">new</span> AppleFactory();</span><br><span class="line">        Fruit apple = appleFactory.create();</span><br><span class="line">        PearFactory pearFactory = <span class="keyword">new</span> PearFactory();</span><br><span class="line">        Fruit pear = pearFactory.create();</span><br><span class="line">        apple.eat();</span><br><span class="line">        pear.eat();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>调用者虽然不需要和 Apple 、Pear 类打交道了，但却需要和 <code>AppleFactory</code>、<code>PearFactory</code> 类打交道。有几种水果就需要知道几个工厂类，耦合度完全没有下降啊，甚至还增加了代码量！</p><p>仔细想一想，工厂模式的第二个优点在工厂方法模式中还是存在的。当构建过程相当复杂时，工厂将构建过程封装起来，调用者可以很方便的直接使用，同样以苹果生产为例：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppleFactory</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Fruit <span class="title">create</span><span class="params">()</span></span>{</span><br><span class="line">        AppleSeed appleSeed = <span class="keyword">new</span> AppleSeed();</span><br><span class="line">        Sunlight sunlight = <span class="keyword">new</span> Sunlight();</span><br><span class="line">        Water water = <span class="keyword">new</span> Water();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Apple(appleSeed, sunlight, water);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>调用者无需知道苹果的生产细节，当生产过程需要修改时也无需更改调用端。同时，工厂方法模式解决了简单工厂模式的两个弊端。</p><ul><li>当生产的产品种类越来越多时，工厂类不会变成超级类。<strong>工厂类会越来越多</strong>，保持灵活。<strong>不会越来越大</strong>、变得臃肿。如果苹果的生产过程需要修改时，只需修改苹果工厂。梨子的生产过程需要修改时，只需修改梨子工厂。符合单一职责原则。</li><li>当需要生产新的产品时，无需更改既有的工厂，只需要<strong>添加新的工厂</strong>即可。保持了面向对象的可扩展性，符合开闭原则。</li></ul><h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><p>工厂方法模式可以进一步优化，提取出工厂接口：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IFactory</span> </span>{</span><br><span class="line">    <span class="function">Fruit <span class="title">create</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>然后苹果工厂和梨子工厂都实现此接口：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppleFactory</span> <span class="keyword">implements</span> <span class="title">IFactory</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Fruit <span class="title">create</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Apple();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PearFactory</span> <span class="keyword">implements</span> <span class="title">IFactory</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Fruit <span class="title">create</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Pear();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>此时，调用者可以将 <code>AppleFactory</code> 和 <code>PearFactory</code> 统一作为 <code>IFactory</code> 对象使用：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>{</span><br><span class="line">        IFactory appleFactory = <span class="keyword">new</span> AppleFactory();</span><br><span class="line">        Fruit apple = appleFactory.create();</span><br><span class="line">        IFactory pearFactory = <span class="keyword">new</span> PearFactory();</span><br><span class="line">        Fruit pear = pearFactory.create();</span><br><span class="line">        apple.eat();</span><br><span class="line">        pear.eat();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>可以看到，我们在创建时指定了具体的工厂类后，在使用时就无需再关心是哪个工厂类，只需要将此工厂当作抽象的 <code>IFactory</code> 接口使用即可。这种经过抽象的工厂方法模式被称作<strong>抽象工厂模式</strong>。</p><p>由于客户端只和 <code>IFactory</code> 打交道了，调用的是接口中的方法，使用时根本<strong>不需要知道是在哪个具体工厂</strong>中实现的这些方法，这就使得<strong>替换工厂</strong>变得非常容易。</p><p>例如：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>{</span><br><span class="line">        IFactory factory = <span class="keyword">new</span> AppleFactory();</span><br><span class="line">        Fruit fruit = factory.create();</span><br><span class="line">        fruit.eat();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>如果需要替换为吃梨子，只需要更改一行代码即可：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>{</span><br><span class="line">        IFactory factory = <span class="keyword">new</span> PearFactory();</span><br><span class="line">        Fruit fruit = factory.create();</span><br><span class="line">        fruit.eat();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>IFactory 中只有一个抽象方法时，或许还看不出抽象工厂模式的威力。实际上抽象工厂模式主要用于替换一系列方法。例如将程序中的 SQL Server 数据库整个替换为 Access 数据库，使用抽象方法模式的话，只需在 IFactory 接口中定义好增删改查四个方法，让 SQLFactory 和 AccessFactory 实现此接口，调用时直接使用 IFactory 中的抽象方法即可，调用者无需知道使用的什么数据库，我们就可以非常方便的整个替换程序的数据库，并且让客户端毫不知情。</p><p>抽象工厂模式很好的发挥了开闭原则、依赖倒置原则，但缺点是抽象工厂模式<strong>太重了</strong>，如果 IFactory 接口需要新增功能，则会影响到所有的具体工厂类。使用抽象工厂模式，替换具体工厂时只需更改一行代码，但要新增抽象方法则需要修改所有的具体工厂类。所以抽象工厂模式适用于增加同类工厂这样的横向扩展需求，不适合新增功能这样的纵向扩展。</p><hr><blockquote><p>参考：<a href="https://zhuanlan.zhihu.com/p/85624457" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/85624457</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在平时编程中，构建对象最常用的方式是 new 一个对象。乍一看这种做法没什么不好，而实际上这也属于一种硬编码。每 new 一个对象，相当于&lt;strong&gt;调用者多知道了一个类&lt;/strong&gt;，增加了类与类之间的联系，不利于程序的松耦合。其实构建过程可以被封装起来，工厂模式便是用于封装对象的设计模式。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="设计模式" scheme="http://blog.iwxyi.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>单例模式</title>
    <link href="http://blog.iwxyi.com/2019/10/12/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://blog.iwxyi.com/2019/10/12/单例模式/</id>
    <published>2019-10-12T12:17:00.000Z</published>
    <updated>2019-10-13T03:03:48.584Z</updated>
    
    <content type="html"><![CDATA[<p>单例模式非常常见，某个对象全局只需要一个实例时，就可以使用单例模式。它的优点也显而易见：</p><ul><li>它能够避免对象重复创建，节约空间并提升效率</li><li>避免由于操作不同实例导致的逻辑错误</li></ul><p>单例模式有两种实现方式：<strong>饿汉式</strong>和<strong>懒汉式</strong>。</p><a id="more"></a><h2 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h2><p>饿汉式：变量在声明时便初始化。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>{</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>{</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>可以看到，我们将构造方法定义为 <code>private</code>，这就保证了其他类无法实例化此类，必须通过 <code>getInstance</code> 方法才能获取到唯一的 instance 实例，非常直观。但饿汉式有一个弊端，那就是即使这个单例不需要使用，它也会<strong>在类加载之后立即创建出来，占用一块内存，并增加类初始化时间</strong>。就好比一个电工在修理灯泡时，先把所有工具拿出来，不管是不是所有的工具都用得上。就像一个饥不择食的饿汉，所以称之为饿汉式。</p><h2 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h2><p>懒汉式：先声明一个空变量，需要用时才初始化。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>{</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">null</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>{</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) {</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>我们先声明了一个初始值为 null 的 instance 变量，当需要使用时判断此变量是否已被初始化，没有初始化的话才 new 一个实例出来。就好比电工在修理灯泡时，开始比较偷懒，什么工具都不拿，当发现需要使用螺丝刀时，才把螺丝刀拿出来。当需要用钳子时，再把钳子拿出来。就像一个不到万不得已不会行动的懒汉，所以称之为懒汉式。</p><p>懒汉式解决了饿汉式的弊端，好处是<strong>按需加载，避免了内存浪费，减少了类初始化时间</strong>。</p><h3 id="双检锁方式：线程安全"><a href="#双检锁方式：线程安全" class="headerlink" title="双检锁方式：线程安全"></a>双检锁方式：线程安全</h3><p>上述代码的懒汉式单例乍一看没什么问题，但其实它不是线程安全的。如果有多个线程同一时间调用 getInstance 方法，instance 变量<strong>可能会被实例化多次</strong>。为了保证线程安全，我们需要给判空过程加上锁：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>{</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">synchronized</span> (Singleton.class) {</span><br><span class="line">            <span class="keyword">if</span> (instance == <span class="keyword">null</span>) {</span><br><span class="line">                instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这样就能保证多个线程调用 getInstance 时，一次最多只有一个线程能够执行判空并 new 出实例的操作，所以 instance 只会实例化一次。</p><h4 id="双检锁提高性能"><a href="#双检锁提高性能" class="headerlink" title="双检锁提高性能"></a>双检锁提高性能</h4><p>但这样的写法仍然有问题，当多个线程调用 getInstance 时，每次都需要执行 synchronized 同步化方法，这样会严重影响程序的执行效率。所以更好的做法是在同步化之前，<strong>再加上一层检查</strong>：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>{</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) {</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) {</span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这样增加一种检查方式后，如果 instance 已经被实例化，则不会执行同步化操作，大大提升了程序效率。上面这种写法也就是我们平时较常用的双检锁方式实现的线程安全的单例模式。</p><h3 id="静态内部类方式"><a href="#静态内部类方式" class="headerlink" title="静态内部类方式"></a>静态内部类方式</h3><p>除了双检锁方式外，还有一种比较常见的静态内部类方式保证懒汉式单例的线程安全：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>{</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>{</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.instance;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>虽然我们经常使用这种静态内部类的懒加载方式，但其中的原理不一定每个人都清楚。接下来我们便来分析其原理，搞清楚两个问题：</p><ul><li>静态内部类方式是怎么实现懒加载的</li><li>静态内部类方式是怎么保证线程安全的</li></ul><blockquote><p>Java 类的加载过程包括：加载、验证、准备、解析、初始化。初始化阶段即执行类的 clinit 方法（clinit = class + initialize），包括为类的静态变量赋初始值和执行静态代码块中的内容。但<strong>不会立即加载内部类，内部类会在使用时才加载</strong>。所以当此 Singleton 类加载时，SingletonHolder 并不会被立即加载，所以不会像饿汉式那样占用内存。</p><p>另外，Java 虚拟机规定，<strong>当访问一个类的静态字段时，如果该类尚未初始化，则立即初始化此类</strong>。当调用Singleton 的 getInstance 方法时，由于其使用了 SingletonHolder 的静态变量 instance，所以这时才会去初始化 SingletonHolder，在 SingletonHolder 中 new 出 Singleton 对象。这就实现了懒加载。</p><p>第二个问题的答案是 Java 虚拟机的设计是非常稳定的，早已经考虑到了多线程并发执行的情况。虚拟机在加载类的 clinit 方法时，会保证 clinit 在多线程中被正确的加锁、同步。<strong>即使有多个线程同时去初始化一个类，一次也只有一个线程可以执行 clinit 方法</strong>，其他线程都需要阻塞等待，从而保证了线程安全。</p></blockquote><p>懒汉式的缺点就是<strong>将程序加载时间从启动时延后到了运行时</strong>，虽然启动时间缩短了，但我们浏览页面时就会看到数据的 loading 过程。</p><p>一般的建议是：对于构建不复杂，加载完成后会立即使用的单例对象，推荐使用饿汉式。对于构建过程耗时较长，并不是所有使用此类都会用到的单例对象，推荐使用懒汉式。</p><hr><blockquote><p>参考：<a href="https://zhuanlan.zhihu.com/p/85624457" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/85624457</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;单例模式非常常见，某个对象全局只需要一个实例时，就可以使用单例模式。它的优点也显而易见：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;它能够避免对象重复创建，节约空间并提升效率&lt;/li&gt;
&lt;li&gt;避免由于操作不同实例导致的逻辑错误&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;单例模式有两种实现方式：&lt;strong&gt;饿汉式&lt;/strong&gt;和&lt;strong&gt;懒汉式&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="多线程" scheme="http://blog.iwxyi.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="设计模式" scheme="http://blog.iwxyi.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>好玩的Linux命令行</title>
    <link href="http://blog.iwxyi.com/2019/10/05/%E5%A5%BD%E7%8E%A9%E7%9A%84Linux%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    <id>http://blog.iwxyi.com/2019/10/05/好玩的Linux命令行/</id>
    <published>2019-10-05T05:54:00.000Z</published>
    <updated>2019-10-13T12:44:34.993Z</updated>
    
    <content type="html"><![CDATA[<h1 id="呼出命令"><a href="#呼出命令" class="headerlink" title="呼出命令"></a>呼出命令</h1><ul><li><code>moo</code></li><li><code>cowsay 你要说的话</code><br><code>xcowsay 你要说的话</code></li><li><code>sl</code> 蒸汽机</li><li><code>oneko</code> 小猫</li><li><code>cmatrix</code> 数据流雨</li><li><code>aafire</code> 代码火</li><li><code>xeyes</code> 两只眼睛</li><li>pv 模拟人工打字<br><code>echo "要说的话" | pv -qL 10</code></li><li><code>toilet Hello!</code> 字母组成文字图<br><code>toilet -f mono12 -F metal Hello!</code> 另一个风格</li><li><code>bb</code> 外太空音乐</li><li><code>ASCIIquarium</code> 水族箱</li><li><code>asciiview 图片路径</code> 字符图（需要PNG图标）</li><li><code>you-get "网址"</code> 下载网址中的视频</li></ul><a id="more"></a><hr><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="【前言】"><a href="#【前言】" class="headerlink" title="【前言】"></a>【前言】</h2><p>作为一名程序员，在别人的眼里往往是充满科技感、神秘感的，而在我们自己的眼里却往往是觉得无聊、枯燥的。其实，在程序的世界里同样会充满着各种的彩蛋，这些彩蛋往往都是一些大神留下来的，我们未曾发现，只是我们缺少发现程序之美而已。</p><p>今天小编就来唠叨几个程序中，有趣酷炫的命令，来体验一波程序彩蛋之美。</p><p>Tips：施展功力的时候，最好有妹子在身边，装足一波逼的同时，说不定还能脱单哟<del>~</del></p><p>好，废话不多说，直接上命令：</p><h2 id="一、moo"><a href="#一、moo" class="headerlink" title="一、moo"></a>一、moo</h2><p>彩蛋：你今天咩咩了没有？（滑稽眼）</p><p>~$ apt-get moo</p><p>效果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/6317408-e330ec01a1896dd8.gif?imageMogr2/auto-orient/strip|imageView2/2/w/600/format/webp" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><h2 id="二、Cowsay"><a href="#二、Cowsay" class="headerlink" title="二、Cowsay"></a>二、<strong>Cowsay</strong></h2><p>彩蛋： 一看名字就知道是牛要说话了，哈哈，没错，就是设定一头牛跟你对话，有意识不？</p><p>这个指令有两种牛，一个是普通的<strong>Cowsay</strong>牛，另一个是加强、纯种的<strong>XCowsay</strong>奶牛，下面就来看看：</p><p>~$ apt-get install cowsay    # 安装【普通牛】程序</p><p>~$ apt-get install xcowsay    # 安装【加强牛】程序</p><p>~$ cowsay 旁边坐的是你女朋友吧！    # 执行</p><p>~$ xcowsay 旁边坐的是你女朋友吧！    # 执行</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/6317408-e38f3fbb340b3900.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/329/format/webp" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/6317408-940d000809b7b54a.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/800/format/webp" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><h2 id="三、sl-（Steam-Locomotive）"><a href="#三、sl-（Steam-Locomotive）" class="headerlink" title="三、sl （Steam Locomotive）"></a>三、sl （<strong>Steam Locomotive</strong>）</h2><p>彩蛋：在电脑屏幕上隆隆的驶过一辆蒸汽机火车（有趣吧！全屏效果更好哦~）。</p><p>~$ apt-get install sl      # 安装命令</p><p>~$ sl      # 执行命令</p><p>效果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/6317408-13ca1502f3da81e2.gif?imageMogr2/auto-orient/strip|imageView2/2/w/600/format/webp" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><h2 id="四、oneko"><a href="#四、oneko" class="headerlink" title="四、oneko"></a>四、oneko</h2><p>彩蛋：撸猫指令，”oneko”会生成一个图像猫，与你愉快的玩耍。</p><p>~$ apt-get install oneko    # 安装程序</p><p>~$ oneko    # 执行</p><p>效果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/6317408-fd632e6a86cfebb3.gif?imageMogr2/auto-orient/strip|imageView2/2/w/600/format/webp" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><h2 id="五、cmatrix"><a href="#五、cmatrix" class="headerlink" title="五、cmatrix"></a>五、<strong>cmatrix</strong></h2><p>彩蛋：有没有想过，你的电脑上也能像黑客片中的一样，让电脑上的数据飞起来，看看那引人瞩目、令人叹为观止的数据流，黑客中最神秘、不可思议的一个场景在自己电脑上是如何实现的。</p><p>~$ apt-get install cmatrix    # 安装程序</p><p>~$ cmatrix    # 执行</p><p>效果（全屏感觉更好）：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/6317408-4bd433fd06e49694.gif?imageMogr2/auto-orient/strip|imageView2/2/w/600/format/webp" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><h2 id="六、xeyes"><a href="#六、xeyes" class="headerlink" title="六、xeyes"></a>六、<strong>xeyes</strong></h2><p>彩蛋：生成一双会注视你工作的眼镜。想想在工作中，这是一种什么感觉。。。。。</p><p>~$ apt-get install xeyes  # 安装程序</p><p>~$ xeyes    # 执行</p><p>效果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/6317408-5a5e2eac76101834.gif?imageMogr2/auto-orient/strip|imageView2/2/w/600/format/webp" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><h2 id="七、ASCIIquarium"><a href="#七、ASCIIquarium" class="headerlink" title="七、ASCIIquarium"></a>七、<strong>ASCIIquarium</strong></h2><p>彩蛋：把你的linux终端变成一个海洋世界，各种生物在不断呈现，有鱼、有水、有草…，真是Amazing~~</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libcurses-perl</span><br><span class="line">cd /tmp</span><br><span class="line">wget http://search.cpan.org/CPAN/authors/id/K/KB/KBAUCOM/Term-Animation-2.4.tar.gz</span><br><span class="line">tar -zxvf Term-Animation-2.4.tar.gz</span><br><span class="line">cd Term-Animation-2.4/</span><br><span class="line">perl Makefile.PL &amp;&amp; make &amp;&amp; make test</span><br><span class="line">sudo make install</span><br></pre></td></tr></tbody></table></figure><p>效果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/6317408-b02371de351aa838.gif?imageMogr2/auto-orient/strip|imageView2/2/w/600/format/webp" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><h2 id="八、aview命令"><a href="#八、aview命令" class="headerlink" title="八、aview命令"></a>八、<strong>aview命令</strong></h2><p>彩蛋：想象一下将一张图片以ASCII码格式在终端上显示出来是什么效果？实现后真实酷爆了。。。</p><p><strong>安装aalib-1.4</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget https://sourceforge.net/projects/aa-project/files/latest/download?source=files # 可能需要手动改下载的文件名</span><br><span class="line">tar xvzf aalib-1.4rc5.tar.gz</span><br><span class="line">cd  aalib-1.4.0</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></tbody></table></figure><p><strong>二、安装aview</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget http://prdownloads.sourceforge.net/aa-project/aview-1.3.0rc1.tar.gz</span><br><span class="line">cd  aview-1.3.0</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></tbody></table></figure><p><strong>三、安装ImageMagick</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ImageMagick</span><br></pre></td></tr></tbody></table></figure><p>可能要用：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install imagemagick</span><br></pre></td></tr></tbody></table></figure><p>如果还是不行，用手动安装：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.imagemagick.org/download/ImageMagick.tar.gz</span><br><span class="line">tar -xzvf ImageMagick.tar.gz</span><br><span class="line">cd ImageMagick-7.0.8-67/</span><br><span class="line">./configure  # 会滚动一段时间</span><br><span class="line">make &amp;&amp; make install  # 需要好久</span><br><span class="line">sudo ldconfig /usr/local/lib</span><br><span class="line">convert -version  # 检查是否成功</span><br><span class="line">convert input.tif output.pdf  # 执行成功当前目录下会生成output.pdf</span><br></pre></td></tr></tbody></table></figure><blockquote><p>如果convert -version出现convert command notfound，需要配置环境变量<br>vim /etc/profile 添加如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; export ImageMagick_HOME=/usr/local/ImageMagick</span><br><span class="line">&gt; export PATH=$PATH:$ImageMagick_HOME/bin</span><br><span class="line">&gt;</span><br></pre></td></tr></tbody></table></figure></blockquote><p><strong>四、测试是否成功</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">asciiview songshu.jpg</span><br></pre></td></tr></tbody></table></figure><p>效果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/6317408-6575e0851611f768.gif?imageMogr2/auto-orient/strip|imageView2/2/w/935/format/webp" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><h2 id="九、pv"><a href="#九、pv" class="headerlink" title="九、pv"></a><strong>九、pv</strong></h2><p>彩蛋：模仿人工打字。将预先设定好的文字内容按约定的时间逐个输出，类似有人在敲键盘。</p><p>~$ apt-get install pv    # 安装程序</p><p>~$ echo “Tecmint[dot]com is a community of Linux Nerds and Geeks” | pv -qL 10  # 输出设定好的内容</p><p>效果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://upload-images.jianshu.io/upload_images/6317408-49605db8a563e106.gif?imageMogr2/auto-orient/strip|imageView2/2/w/935/format/webp" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><blockquote><p>参考：<a href="https://www.jianshu.com/p/08e9094f61ce" target="_blank" rel="noopener">https://www.jianshu.com/p/08e9094f61ce</a></p></blockquote><hr><p>Linux最强大的一个特征就是它有大量的各种小命令工具，这也可以称做是它最有趣的一个地方了。你要知道，Linux命令终端并不是总来干一些严肃的事情的，这里列举一些很有趣的命令。（它们的有趣并不是因为无用，而是真的有趣。）</p><p>一、cmatrix    （代码雨）</p><p>安装cmatrix：<del>#sudo apt-get install cmatrix<br>执行效果：</del># cmatix<br>二、oneko        （小猫）<br>安装oneko: <del>#sudo apt-get install oneko<br>执行效果:  ~# oneko<br>三、aafire           （代码火）<br>安装：</del>#sudo apt-get install libaa-bin<br>执行效果：<del>#aafire<br>四、ASCIIquarium   （水族馆）<br>安装：</del># cd /tmp<br>          <del># wget <a href="http://www.robobunny.com/projects/asciiquarium/asciiquarium.tar.gz" target="_blank" rel="noopener">http://www.robobunny.com/projects/asciiquarium/asciiquarium.tar.gz</a><br>          ~# tar -zxvf asciiquarium.tar.gz<br>          ~# cd asciiquarium_1.1/<br>          ~# cp asciiquarium /usr/local/bin<br>          ~# chmod 0755 /usr/local/bin/asciiquarium<br>执行效果：</del># asciiquarium<br>五、toilet           （不是厕所！！！它能用字母拼写出更大字母的工具，具体拼出什么字由命令后面的参数决定，不仅如此，它还能打印出各种风格的效果，比如彩色，金属光泽等。）<br>安装： <del># sudo apt-get install toilet<br>执行效果：</del># toilet Hello!<br>                <del># toilet -f mono12 -F metal Hello!   等等<br>六、sl           (蒸汽机。ls是linux命令最常用的一个命令，用来列表文件目录等。因为用的频繁，难免有着急打错的时候，一旦你敲成了 ‘sl’，会出现什么结果？）<br>安装：</del>#sudo apt-get install sl<br>执行效果：<del>#sl<br>七、cowsay 和 xcowsay  (牛牛说话啦！）<br>安装：</del>#sudo apt-get install cowsay<br>      <del>#sudo apt-get install xcowsay<br>执行效果：</del># cowsay 你好<br>          <del># xcowsay 你好<br>八、xeyes       (大眼睛)<br>安装：</del>#sudo apt-get install xeyes<br>执行效果：<del>#xeyes<br>九、moo             (今天你咩咩了没？)<br>无需安装<br>执行效果：</del># apt-get  moo<br>十、bb              (外太空音乐……)<br>安装：~# sudo apt-get install bb<br>执行效果：  ~# bb</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;呼出命令&quot;&gt;&lt;a href=&quot;#呼出命令&quot; class=&quot;headerlink&quot; title=&quot;呼出命令&quot;&gt;&lt;/a&gt;呼出命令&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;moo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cowsay 你要说的话&lt;/code&gt;&lt;br&gt;&lt;code&gt;xcowsay 你要说的话&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sl&lt;/code&gt; 蒸汽机&lt;/li&gt;
&lt;li&gt;&lt;code&gt;oneko&lt;/code&gt; 小猫&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cmatrix&lt;/code&gt; 数据流雨&lt;/li&gt;
&lt;li&gt;&lt;code&gt;aafire&lt;/code&gt; 代码火&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xeyes&lt;/code&gt; 两只眼睛&lt;/li&gt;
&lt;li&gt;pv 模拟人工打字&lt;br&gt;&lt;code&gt;echo &quot;要说的话&quot; | pv -qL 10&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;toilet Hello!&lt;/code&gt; 字母组成文字图&lt;br&gt;&lt;code&gt;toilet -f mono12 -F metal Hello!&lt;/code&gt; 另一个风格&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bb&lt;/code&gt; 外太空音乐&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ASCIIquarium&lt;/code&gt; 水族箱&lt;/li&gt;
&lt;li&gt;&lt;code&gt;asciiview 图片路径&lt;/code&gt; 字符图（需要PNG图标）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;you-get &quot;网址&quot;&lt;/code&gt; 下载网址中的视频&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="Linux" scheme="http://blog.iwxyi.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Deepin个人配置</title>
    <link href="http://blog.iwxyi.com/2019/09/23/Deepin%E4%B8%AA%E4%BA%BA%E9%85%8D%E7%BD%AE/"/>
    <id>http://blog.iwxyi.com/2019/09/23/Deepin个人配置/</id>
    <published>2019-09-23T06:00:00.000Z</published>
    <updated>2019-10-13T06:15:01.536Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装Sublime-Text"><a href="#安装Sublime-Text" class="headerlink" title="安装Sublime Text"></a>安装Sublime Text</h2><blockquote><p><a href="https://www.sublimetext.com/docs/3/linux_repositories.html" target="_blank" rel="noopener">https://www.sublimetext.com/docs/3/linux_repositories.html</a></p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget -qO - https://download.sublimetext.com/sublimehq-pub.gpg | sudo apt-key add -</span><br><span class="line">sudo apt-get install apt-transport-https</span><br><span class="line">echo "deb https://download.sublimetext.com/ apt/stable/" | sudo tee /etc/apt/sources.list.d/sublime-text.list</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install sublime-text</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><h2 id="修改仓库-商店软件源"><a href="#修改仓库-商店软件源" class="headerlink" title="修改仓库/商店软件源"></a>修改仓库/商店软件源</h2><p><a href="https://bbs.deepin.org/forum.php?mod=viewthread&amp;tid=179163" target="_blank" rel="noopener">https://bbs.deepin.org/forum.php?mod=viewthread&amp;tid=179163</a></p><p>无法添加软件源</p><p><code>sudo dedit /etc/lsb-release</code>，保存为下面的内容</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#DISTRIB_ID=Deepin</span><br><span class="line">#DISTRIB_RELEASE="15.10.1"</span><br><span class="line">#DISTRIB_DESCRIPTION="Deepin 15.10.1 "</span><br><span class="line">#DISTRIB_CODENAME=stable</span><br><span class="line"></span><br><span class="line">DISTRIB_ID=Ubuntu</span><br><span class="line">DISTRIB_RELEASE=16.04</span><br><span class="line">DISTRIB_CODENAME=trusty</span><br><span class="line">DISTRIB_DESCRIPTION="Ubuntu 16.04.3 LTS"</span><br></pre></td></tr></tbody></table></figure><h2 id="安装rEFInd引导"><a href="#安装rEFInd引导" class="headerlink" title="安装rEFInd引导"></a>安装rEFInd引导</h2><p><a href="https://www.ithome.com/0/425/537.htm" target="_blank" rel="noopener">https://www.ithome.com/0/425/537.htm</a></p><h2 id="引导启动项顺序"><a href="#引导启动项顺序" class="headerlink" title="引导启动项顺序"></a>引导启动项顺序</h2><blockquote><p><a href="https://blog.csdn.net/owen_suen/article/details/79050549" target="_blank" rel="noopener">https://blog.csdn.net/owen_suen/article/details/79050549</a></p></blockquote><p>/etc/grub.d文件夹下的30_os-prober文件改名为08_os-prober</p><p><code>sudo update-grub</code></p><h2 id="修改Chrome滚动速度"><a href="#修改Chrome滚动速度" class="headerlink" title="修改Chrome滚动速度"></a>修改Chrome滚动速度</h2><p><a href="https://www.helplib.com/ubuntu/article_164190" target="_blank" rel="noopener">https://www.helplib.com/ubuntu/article_164190</a></p><h2 id="SSR下载"><a href="#SSR下载" class="headerlink" title="SSR下载"></a>SSR下载</h2><p><a href="https://github.com/qingshuisiyuan/electron-ssr-backup/releases" target="_blank" rel="noopener">https://github.com/qingshuisiyuan/electron-ssr-backup/releases</a></p><h2 id="安装Qt"><a href="#安装Qt" class="headerlink" title="安装Qt"></a>安装Qt</h2><p>可能需要自己手动设置编译器上的C++路径，否则无法编译（5.13.1）</p><h3 id="安装依赖库"><a href="#安装依赖库" class="headerlink" title="安装依赖库"></a>安装依赖库</h3><p><a href="https://blog.csdn.net/qq_42378797/article/details/91038804" target="_blank" rel="noopener">https://blog.csdn.net/qq_42378797/article/details/91038804</a></p><p>或者输入下面一句话也可以安装所有的库：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install build-essential libgl1-mesa-dev</span><br></pre></td></tr></tbody></table></figure><h3 id="打包程序"><a href="#打包程序" class="headerlink" title="打包程序"></a>打包程序</h3><p><a href="https://blog.csdn.net/qing666888/article/details/78577633" target="_blank" rel="noopener">https://blog.csdn.net/qing666888/article/details/78577633</a></p><h3 id="支持中文"><a href="#支持中文" class="headerlink" title="支持中文"></a>支持中文</h3><p><a href="https://my.oschina.net/lieefu/blog/505363?fromerr=NNm21wBS" target="_blank" rel="noopener">https://my.oschina.net/lieefu/blog/505363?fromerr=NNm21wBS</a></p><h2 id="安装Android-Studio"><a href="#安装Android-Studio" class="headerlink" title="安装Android Studio"></a>安装Android Studio</h2><p>安装 Java：<code>sudo apt install default-jdk</code></p><p>安装 SDK：<code>wget http://dl.google.com/android/android-sdk_r22.0.5-linux.tgz</code></p><p>安装 AS：<code>sudo apt install android-studio</code></p><p>安装 Gradle：AS安装<a href="https://shimo.im/docs/C7Om170UHl0Ih8yD/read" target="_blank" rel="noopener">https://shimo.im/docs/C7Om170UHl0Ih8yD/read</a></p><p>安装 Virtual Box：<code>sudo apt-get install virtualbox</code></p><p>安装 Genymotion：<a href="https://www.jianshu.com/p/53bd3408439c" target="_blank" rel="noopener">https://www.jianshu.com/p/53bd3408439c</a></p><blockquote><p>手动下载后安装方法：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; chmod 755 genymotion.bin # 需要权限</span><br><span class="line">&gt; ./genymotion -d /home/mrxy001/Programs</span><br><span class="line">&gt;</span><br></pre></td></tr></tbody></table></figure></blockquote><blockquote><p>Android Studio 连接不上 Genymotion 设备：Genymotion &gt; Settings &gt; adb &gt; custom &gt; /home/mrxy001/Android/Sdk/</p></blockquote><h2 id="挂载FTP"><a href="#挂载FTP" class="headerlink" title="挂载FTP"></a>挂载FTP</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curlftpfs -o codepage=utf8 ftp://username:password@iwxyi.com /home/mrxy001/ftp</span><br></pre></td></tr></tbody></table></figure><p>开机自动挂载：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="string">"curlftpfs -o codepage=utf8 ftp://username:password@iwxyi.com /home/mrxy001/ftp"</span> &gt;&gt; /etc/fstab</span><br></pre></td></tr></tbody></table></figure><h2 id="安装Fira-Code字体"><a href="#安装Fira-Code字体" class="headerlink" title="安装Fira Code字体"></a>安装Fira Code字体</h2><p><a href="https://blog.csdn.net/m0_37952030/article/details/99958890" target="_blank" rel="noopener">https://blog.csdn.net/m0_37952030/article/details/99958890</a></p><h2 id="翻墙"><a href="#翻墙" class="headerlink" title="翻墙"></a>翻墙</h2><p><a href="https://github.com/qingshuisiyuan/electron-ssr-backup" target="_blank" rel="noopener">https://github.com/qingshuisiyuan/electron-ssr-backup</a></p><h2 id="安装PHPStudy"><a href="#安装PHPStudy" class="headerlink" title="安装PHPStudy"></a>安装PHPStudy</h2><p><a href="https://blog.csdn.net/qq_40842615/article/details/81075231" target="_blank" rel="noopener">https://blog.csdn.net/qq_40842615/article/details/81075231</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装Sublime-Text&quot;&gt;&lt;a href=&quot;#安装Sublime-Text&quot; class=&quot;headerlink&quot; title=&quot;安装Sublime Text&quot;&gt;&lt;/a&gt;安装Sublime Text&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.sublimetext.com/docs/3/linux_repositories.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.sublimetext.com/docs/3/linux_repositories.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;wget -qO - https://download.sublimetext.com/sublimehq-pub.gpg | sudo apt-key add -&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get install apt-transport-https&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;echo &quot;deb https://download.sublimetext.com/ apt/stable/&quot; | sudo tee /etc/apt/sources.list.d/sublime-text.list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get update&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get install sublime-text&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="搭建" scheme="http://blog.iwxyi.com/categories/%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="Linux" scheme="http://blog.iwxyi.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>PHP Redis函数</title>
    <link href="http://blog.iwxyi.com/2019/09/18/PHP-Redis%E5%87%BD%E6%95%B0/"/>
    <id>http://blog.iwxyi.com/2019/09/18/PHP-Redis函数/</id>
    <published>2019-09-18T08:31:00.000Z</published>
    <updated>2019-10-13T08:33:14.871Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、简单的字符串缓存"><a href="#一、简单的字符串缓存" class="headerlink" title="一、简单的字符串缓存"></a>一、简单的字符串缓存</h2><p>比如针对一些sql查询较慢，更新不频繁的数据进行缓存。</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$redis = <span class="keyword">new</span> Redis();</span><br><span class="line">$redis-&gt;connect(<span class="string">'127.0.0.1'</span>, <span class="number">6379</span>, <span class="number">60</span>);</span><br><span class="line"> </span><br><span class="line">$sql = <span class="string">'select * from tb_order order by id desc limit 10'</span>;</span><br><span class="line"><span class="comment">//伪代码，从数据库中获取数据</span></span><br><span class="line">$data = $db-&gt;query($sql);</span><br><span class="line">$data = json_encode($data, JSON_UNESCAPED_UNICODE);</span><br><span class="line">$key = md5($sql);</span><br><span class="line"><span class="comment">//缓存数据</span></span><br><span class="line">$redis-&gt;set($key, $value, <span class="number">60</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//获取数据</span></span><br><span class="line">$data = $redis-&gt;get($key);</span><br><span class="line">print_r(json_decode($data, <span class="keyword">true</span>));</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><h2 id="二、通过列表模拟简单队列"><a href="#二、通过列表模拟简单队列" class="headerlink" title="二、通过列表模拟简单队列"></a>二、通过列表模拟简单队列</h2><p>比如我们需要批量的发送邮件，可以把发送邮件的任务存入队列中，然后启多个php脚本从队列中读取任务去发送邮件。</p><p>也可以用来处理商品秒杀，用户点击抢购时，把一个个的用户抢购任务放入队列中，串行化处理，判断队列数量，防止超卖的发生。</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$redis = <span class="keyword">new</span> Redis();</span><br><span class="line">$redis-&gt;connect(<span class="string">'127.0.0.1'</span>, <span class="number">6379</span>, <span class="number">60</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//循环的把发送1000条邮件任务插入队列</span></span><br><span class="line"><span class="keyword">for</span> ($ix = <span class="number">0</span>; $ix &lt; <span class="number">1000</span>; $ix++) {</span><br><span class="line">    $redis-&gt;lPush(<span class="string">'send_email_queue'</span>, json_encode([</span><br><span class="line">        <span class="string">'id'</span> =&gt; $ix,</span><br><span class="line">        <span class="string">'send'</span> =&gt; <span class="string">'xxx@qq.com'</span>,</span><br><span class="line">        <span class="string">'receive'</span> =&gt; <span class="string">'yyy@qq.com'</span>,</span><br><span class="line">        <span class="string">'title'</span> =&gt; <span class="string">'xxx'</span>,</span><br><span class="line">        <span class="string">'body'</span> =&gt; <span class="string">'xxx'</span>,</span><br><span class="line">    ]));</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line">sleep(<span class="number">3</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//从队列中取任务，执行任务</span></span><br><span class="line"><span class="keyword">while</span> ($count = $redis-&gt;lLen(<span class="string">'send_email_queue'</span>)) {</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"当前任务队列数 {$count} &lt;br&gt;"</span>;</span><br><span class="line">    $task = $redis-&gt;rpop(<span class="string">'send_email_queue'</span>);</span><br><span class="line">    $task = json_decode($task, <span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">//伪代码，发送邮件</span></span><br><span class="line">    $mailer-&gt;send($task[<span class="string">'send'</span>], $task[<span class="string">'receive'</span>], $task[<span class="string">'title'</span>], $task[<span class="string">'body'</span>]);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"任务 {$task['id']} 邮件发送成功&lt;br&gt;"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="三、通过watch-multi-来实现乐观锁"><a href="#三、通过watch-multi-来实现乐观锁" class="headerlink" title="三、通过watch + multi 来实现乐观锁"></a>三、通过watch + multi 来实现乐观锁</h2><p>乐观锁，顾名思义，乐观的认为数据不会被修改，只有当更新时才去判断数据是否被修改过，通常用版本号或时间戳来实现。</p><p>redis中通过watch和multi来实现，watch会监视给定的key是否发生更改，当exec的时候如果监视的key发生过改变，则整个事务会失败。</p><p>当然我们可以调用多次watch监视多个key。</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$redis = <span class="keyword">new</span> Redis();</span><br><span class="line">$redis-&gt;connect(<span class="string">'127.0.0.1'</span>, <span class="number">6379</span>, <span class="number">60</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//设置商品的库存数为100</span></span><br><span class="line">$redis-&gt;set(<span class="string">'goods_stock_nums'</span>, <span class="number">100</span>);</span><br><span class="line"><span class="comment">//监视该key</span></span><br><span class="line">$redis-&gt;watch(<span class="string">'goods_stock_nums'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//开启事务</span></span><br><span class="line">$redis-&gt;multi();</span><br><span class="line"> </span><br><span class="line"><span class="comment">//修改库存数</span></span><br><span class="line">$redis-&gt;decr(<span class="string">'goods_stock_nums'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//提交事务，如果在此期间有其他请求修改了该key，那么事务会失败</span></span><br><span class="line"><span class="keyword">if</span> ($redis-&gt;exec()) {</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'抢购成功'</span>;</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'数据错误，请重新再试'</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="四、使用-set-来实现悲观锁"><a href="#四、使用-set-来实现悲观锁" class="headerlink" title="四、使用 set 来实现悲观锁"></a>四、使用 set 来实现悲观锁</h2><p>悲观锁，顾名思义，悲观的认为数据总是会被修改，所以在操作前都会先加上锁，操作完后，再释放锁。</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRedis</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    $redis = <span class="keyword">new</span> Redis();</span><br><span class="line">    $redis-&gt;connect(<span class="string">'127.0.0.1'</span>, <span class="number">6379</span>, <span class="number">60</span>);</span><br><span class="line">    <span class="keyword">return</span> $redis;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lock</span><span class="params">($key, $random)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    $redis = getRedis();</span><br><span class="line">    <span class="keyword">return</span> $redis-&gt;set($key, $random, [<span class="string">'nx'</span>, <span class="string">'ex'</span> =&gt; <span class="number">3</span>]);</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unlock</span><span class="params">($key, $random)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    $redis = getRedis();</span><br><span class="line">    <span class="comment">//使用lua脚本保证原子性</span></span><br><span class="line">    $script = <span class="string">'if redis.call("get",KEYS[1]) == ARGV[1] then return redis.call("del",KEYS[1]) else return 0 end'</span>;</span><br><span class="line">    <span class="keyword">return</span> $redis-&gt;eval($script, [$key, $random], <span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">decrGoodsStockNums</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    $redis = getRedis();</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//获取商品库存数</span></span><br><span class="line">    $ret = $redis-&gt;get(<span class="string">'goods_stock_nums'</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> ($ret === <span class="keyword">false</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> ($ret &lt;= <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    $random = mt_rand();</span><br><span class="line">    <span class="comment">//先获取锁</span></span><br><span class="line">    <span class="keyword">if</span> (lock(<span class="string">'goods_stock_nums_lock'</span>, $random)) {</span><br><span class="line">        <span class="comment">//修改库存数</span></span><br><span class="line">        $redis-&gt;decr(<span class="string">'goods_stock_nums'</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//释放锁</span></span><br><span class="line">        unlock(<span class="string">'goods_stock_nums_lock'</span>, $random);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        usleep(<span class="number">100</span>);</span><br><span class="line">        decrGoodsStockNums();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line">decrGoodsStockNums();</span><br></pre></td></tr></tbody></table></figure><h2 id="五、使用-publish-subscribe-完成发布和订阅"><a href="#五、使用-publish-subscribe-完成发布和订阅" class="headerlink" title="五、使用 publish + subscribe 完成发布和订阅"></a>五、使用 publish + subscribe 完成发布和订阅</h2><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$redis = <span class="keyword">new</span> Redis();</span><br><span class="line">$redis-&gt;pconnect(<span class="string">'127.0.0.1'</span>, <span class="number">6379</span>);</span><br><span class="line"> </span><br><span class="line">$ix = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//发布内容</span></span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) {</span><br><span class="line">    $redis-&gt;publish(<span class="string">'news'</span>, json_encode([</span><br><span class="line">        <span class="string">'title'</span> =&gt; <span class="string">'我是新闻标题'</span> . $ix,</span><br><span class="line">        <span class="string">'content'</span> =&gt; <span class="string">'我是新闻内容'</span> . $ix,</span><br><span class="line">        <span class="string">'time'</span> =&gt; date(<span class="string">'Y-m-d H:i:s'</span>),</span><br><span class="line">    ]));</span><br><span class="line">    $ix++;</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>订阅代码：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$redis = <span class="keyword">new</span> Redis();</span><br><span class="line">$redis-&gt;pconnect(<span class="string">'127.0.0.1'</span>, <span class="number">6379</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//订阅内容</span></span><br><span class="line">$redis-&gt;subscribe([<span class="string">'news'</span>], <span class="function"><span class="keyword">function</span> <span class="params">($redis, $channel, $msg)</span> </span>{</span><br><span class="line">    $msg = json_decode($msg, <span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"标题: {$msg['title']} 内容: {$msg['content']} 时间: {$msg['time']} &lt;br&gt;"</span>;</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><hr><blockquote><p>参考博客：<a href="https://www.cnblogs.com/jkko123/p/10491342.html" target="_blank" rel="noopener">https://www.cnblogs.com/jkko123/p/10491342.html</a></p><p>函数用法：<a href="https://www.php.cn/php-weizijiaocheng-387118.html" target="_blank" rel="noopener">https://www.php.cn/php-weizijiaocheng-387118.html</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、简单的字符串缓存&quot;&gt;&lt;a href=&quot;#一、简单的字符串缓存&quot; class=&quot;headerlink&quot; title=&quot;一、简单的字符串缓存&quot;&gt;&lt;/a&gt;一、简单的字符串缓存&lt;/h2&gt;&lt;p&gt;比如针对一些sql查询较慢，更新不频繁的数据进行缓存。&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$redis = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Redis();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$redis-&amp;gt;connect(&lt;span class=&quot;string&quot;&gt;&#39;127.0.0.1&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6379&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;60&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$sql = &lt;span class=&quot;string&quot;&gt;&#39;select * from tb_order order by id desc limit 10&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//伪代码，从数据库中获取数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$data = $db-&amp;gt;query($sql);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$data = json_encode($data, JSON_UNESCAPED_UNICODE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$key = md5($sql);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//缓存数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$redis-&amp;gt;set($key, $value, &lt;span class=&quot;number&quot;&gt;60&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//获取数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$data = $redis-&amp;gt;get($key);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print_r(json_decode($data, &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="PHP" scheme="http://blog.iwxyi.com/tags/PHP/"/>
    
      <category term="Redis" scheme="http://blog.iwxyi.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>GCC和G++的区别</title>
    <link href="http://blog.iwxyi.com/2019/09/18/GCC%E5%92%8CG-%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://blog.iwxyi.com/2019/09/18/GCC和G-的区别/</id>
    <published>2019-09-18T00:23:00.000Z</published>
    <updated>2019-10-13T00:24:17.598Z</updated>
    
    <content type="html"><![CDATA[<p>gcc和g++都是GNU(组织)的一个编译器。</p><p>误区一:<strong>gcc只能编译c代码,g++只能编译c++代码</strong><br><strong>两者都可以</strong>，但是请注意：<br>1<strong>.后缀为.c的，gcc把它当作是C程序，而g++当作是c++程序</strong>；后缀为.cpp的，两者都会认为是c++程序，注意，虽然<strong>c++是c的超集，但是两者对语法的要求是有区别的。C++的语法规则更加严谨一些。</strong><br>2.<strong>编译阶段，g++会调用gcc，对于c++代码，两者是等价的</strong>，但是因为<strong>gcc命令不能自动和C＋＋程序使用的库联接，所以通常用g++来完成链接</strong>，<strong>为了统一起见，干脆编译/链接统统用g++了，这就给人一种错觉，好像cpp程序只能用g++似的。</strong> </p><a id="more"></a><p>误区二:<strong>gcc不会定义__cplusplus宏，而g++会</strong><br>实际上，这个宏只是标志着编译器将会把代码按C还是C++语法来解释，如上所述，如果后缀为.c，并且采用gcc编译器，则该宏就是未定义的，否则，就是已定义。</p><p>误区三:<strong>编译只能用gcc，链接只能用g++</strong><br>严格来说，这句话不算错误，但是它混淆了概念，应该这样说：<strong>编译可以用gcc/g++，而链接可以用g++或者gcc -lstdc++。</strong>因为<strong>gcc命令不能自动和C＋＋程序使用的库联接，所以通常使用g++来完成联接。但在编译阶段，g++会自动调用gcc，二者等价。</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;gcc和g++都是GNU(组织)的一个编译器。&lt;/p&gt;
&lt;p&gt;误区一:&lt;strong&gt;gcc只能编译c代码,g++只能编译c++代码&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;两者都可以&lt;/strong&gt;，但是请注意：&lt;br&gt;1&lt;strong&gt;.后缀为.c的，gcc把它当作是C程序，而g++当作是c++程序&lt;/strong&gt;；后缀为.cpp的，两者都会认为是c++程序，注意，虽然&lt;strong&gt;c++是c的超集，但是两者对语法的要求是有区别的。C++的语法规则更加严谨一些。&lt;/strong&gt;&lt;br&gt;2.&lt;strong&gt;编译阶段，g++会调用gcc，对于c++代码，两者是等价的&lt;/strong&gt;，但是因为&lt;strong&gt;gcc命令不能自动和C＋＋程序使用的库联接，所以通常用g++来完成链接&lt;/strong&gt;，&lt;strong&gt;为了统一起见，干脆编译/链接统统用g++了，这就给人一种错觉，好像cpp程序只能用g++似的。&lt;/strong&gt; &lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C++" scheme="http://blog.iwxyi.com/tags/C/"/>
    
      <category term="编译原理" scheme="http://blog.iwxyi.com/tags/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Qt工程转VS工程</title>
    <link href="http://blog.iwxyi.com/2019/09/11/Qt%E5%B7%A5%E7%A8%8B%E8%BD%ACVS%E5%B7%A5%E7%A8%8B/"/>
    <id>http://blog.iwxyi.com/2019/09/11/Qt工程转VS工程/</id>
    <published>2019-09-11T10:48:00.000Z</published>
    <updated>2019-10-13T10:48:52.892Z</updated>
    
    <content type="html"><![CDATA[<p>将pro文件转换成vcxproj，可通过VS打开：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qmake -tp vc</span><br></pre></td></tr></tbody></table></figure><p>我的电脑上qmake路径：<code>D:\IDE\Qt5.11.3\5.11.3\msvc2017_64\bin\qmake.exe</code></p><p>如果报<code>Can not run cl</code>之类的错误，把 cl 加到环境变量中：</p><p><code>D:\IDE\Visual Studio 2017 Enterprise\VC\Tools\MSVC\14.10.25017\bin\HostX64\x64</code></p><a id="more"></a><hr><p>由于编译器位数不一样，一些lib库可能需要用vs重新编译才能使用。</p><p>bat脚本</p><figure class="highlight bat"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">path</span>=<span class="variable">%path%</span>; D:\IDE\Qt5.<span class="number">13</span>.<span class="number">1</span>\<span class="number">5</span>.<span class="number">13</span>.<span class="number">1</span>\msvc2017_64\bin\; D:\IDE\Visual Studio <span class="number">2017</span> Enterprise\VC\Tools\MSVC\<span class="number">14</span>.<span class="number">10</span>.<span class="number">25017</span>\bin\HostX64\x64</span><br><span class="line"><span class="built_in">start</span> qmake -tp vc</span><br></pre></td></tr></tbody></table></figure><hr><blockquote><p>可能会有编码乱码问题？</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;将pro文件转换成vcxproj，可通过VS打开：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;qmake -tp vc&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;我的电脑上qmake路径：&lt;code&gt;D:\IDE\Qt5.11.3\5.11.3\msvc2017_64\bin\qmake.exe&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果报&lt;code&gt;Can not run cl&lt;/code&gt;之类的错误，把 cl 加到环境变量中：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;D:\IDE\Visual Studio 2017 Enterprise\VC\Tools\MSVC\14.10.25017\bin\HostX64\x64&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="Qt" scheme="http://blog.iwxyi.com/tags/Qt/"/>
    
      <category term="VS" scheme="http://blog.iwxyi.com/tags/VS/"/>
    
  </entry>
  
  <entry>
    <title>Qt自定义右键菜单和托盘菜单</title>
    <link href="http://blog.iwxyi.com/2019/08/28/Qt%E8%87%AA%E5%AE%9A%E4%B9%89%E8%8F%9C%E5%8D%95/"/>
    <id>http://blog.iwxyi.com/2019/08/28/Qt自定义菜单/</id>
    <published>2019-08-28T11:12:00.000Z</published>
    <updated>2019-10-13T11:13:23.593Z</updated>
    
    <content type="html"><![CDATA[<p>自定义菜单包括右键菜单，按钮菜单和系统托盘菜单</p><h2 id="一：右键菜单"><a href="#一：右键菜单" class="headerlink" title="一：右键菜单"></a>一：右键菜单</h2><p>textEdit的右键菜单，通过槽函数on_textEdit_customContextMenuRequested()实现,其中的Action是已经创建好的 </p><a id="more"></a><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> MainWindow::on_textEdit_customContextMenuRequested()</span><br><span class="line">{</span><br><span class="line">    QMenu *menu = <span class="keyword">new</span> QMenu(<span class="keyword">this</span>);</span><br><span class="line">    menu-&gt;addAction(ui-&gt;undoAction);</span><br><span class="line">    menu-&gt;addAction(ui-&gt;redoAction);</span><br><span class="line">    menu-&gt;addSeparator();</span><br><span class="line">    menu-&gt;addAction(ui-&gt;cutAction);</span><br><span class="line">    menu-&gt;addAction(ui-&gt;copyAction);</span><br><span class="line">    menu-&gt;addAction(ui-&gt;pasteAction);</span><br><span class="line">    menu-&gt;addSeparator();</span><br><span class="line">    menu-&gt;addAction(ui-&gt;selectAllAction);</span><br><span class="line">    menu-&gt;exec(QCursor::pos());</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>参考：<a href="http://blog.sina.com.cn/s/blog_a6fb6cc90101f0xn.html" target="_blank" rel="noopener">Qt之自定义菜单（右键菜单）</a></p><h2 id="二：托盘菜单"><a href="#二：托盘菜单" class="headerlink" title="二：托盘菜单"></a>二：托盘菜单</h2><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> MainWindow::createSystemTrayIcon()</span><br><span class="line">{</span><br><span class="line">    trayIcon=<span class="keyword">new</span> QSystemTrayIcon(<span class="keyword">this</span>);<span class="comment">//创建托盘</span></span><br><span class="line">    trayIcon-&gt;setIcon(QIcon(tr(<span class="string">":images/icon"</span>)));<span class="comment">//设置托盘图标</span></span><br><span class="line">    trayIcon-&gt;setToolTip(tr(<span class="string">"托盘"</span>));</span><br><span class="line"> </span><br><span class="line">    play_widget = <span class="keyword">new</span> QWidget();</span><br><span class="line">    play_widget_Action = <span class="keyword">new</span> QWidgetAction(<span class="keyword">this</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/*********创建所需的按钮和动作并连接信号槽********/</span></span><br><span class="line">    play_Button = <span class="keyword">new</span> QPushButton();</span><br><span class="line">    play_Button -&gt;setCursor(Qt::PointingHandCursor);</span><br><span class="line">    play_Button -&gt;setFlat(<span class="literal">true</span>);</span><br><span class="line">    play_Button-&gt;setFixedSize(<span class="number">40</span>,<span class="number">40</span>);</span><br><span class="line">    connect(play_Button,SIGNAL(clicked()), <span class="keyword">this</span>, SLOT(Play()));</span><br><span class="line"> </span><br><span class="line">    last_Button = <span class="keyword">new</span> QPushButton();</span><br><span class="line">    last_Button -&gt;setCursor(Qt::PointingHandCursor);</span><br><span class="line">    last_Button -&gt;setFlat(<span class="literal">true</span>);</span><br><span class="line">    last_Button-&gt;setFixedSize(<span class="number">30</span>,<span class="number">30</span>);</span><br><span class="line">    connect(last_Button, SIGNAL(clicked()), <span class="keyword">this</span>, SLOT(Last()));</span><br><span class="line"> </span><br><span class="line">    next_Button = <span class="keyword">new</span> QPushButton();</span><br><span class="line">    next_Button-&gt;setCursor(Qt::PointingHandCursor);</span><br><span class="line">    next_Button -&gt;setFlat(<span class="literal">true</span>);</span><br><span class="line">    next_Button-&gt;setFixedSize(<span class="number">30</span>,<span class="number">30</span>);</span><br><span class="line">    connect(next_Button, SIGNAL(clicked()), <span class="keyword">this</span>, SLOT(Next()));</span><br><span class="line"> </span><br><span class="line">    musicname_Label = <span class="keyword">new</span> QLabel();</span><br><span class="line">    musicname_Label-&gt;setFixedWidth(<span class="number">100</span>);</span><br><span class="line">    musicname_Label-&gt;setAlignment(Qt::AlignCenter);</span><br><span class="line"> </span><br><span class="line">    aboutAction = <span class="keyword">new</span> QAction(tr(<span class="string">"关  于"</span>),<span class="keyword">this</span>);</span><br><span class="line">    aboutAction-&gt;setIcon(QIcon(<span class="string">":/images/about"</span>));</span><br><span class="line">    connect(aboutAction,SIGNAL(triggered()),<span class="keyword">this</span>,SLOT(about()));</span><br><span class="line"> </span><br><span class="line">    quitAction=<span class="keyword">new</span> QAction(tr(<span class="string">"退  出"</span>), <span class="keyword">this</span>);</span><br><span class="line">    quitAction-&gt;setIcon(QIcon(<span class="string">":/images/quit"</span>));</span><br><span class="line">    connect(quitAction, SIGNAL(triggered()), <span class="keyword">this</span>, SLOT(quit()));</span><br><span class="line"> </span><br><span class="line"><span class="comment">//使用样式表修饰按钮</span></span><br><span class="line">    last_Button-&gt;setStyleSheet(<span class="string">"QPushButton {border-image:url(:/images/last);}QPushButton:hover{border-image:url(:/images/last_on);}QPushButton:hover:pressed{border-image:url(:/images/last);}"</span>);</span><br><span class="line">    play_Button-&gt;setStyleSheet(<span class="string">"QPushButton {border-image:url(:/images/play);}QPushButton:hover{border-image:url(:/images/play_on);}QPushButton:hover:pressed{border-image:url(:/images/play);}"</span>);</span><br><span class="line">    next_Button-&gt;setStyleSheet(<span class="string">"QPushButton {border-image:url(:/images/next);}QPushButton:hover{border-image:url(:/images/next_on);}QPushButton:hover:pressed{border-image:url(:/images/next);}"</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//将next，last和play按钮水平布局</span></span><br><span class="line">    QHBoxLayout *Hlayout = <span class="keyword">new</span> QHBoxLayout();</span><br><span class="line">    Hlayout-&gt;addWidget(last_Button);</span><br><span class="line">    Hlayout-&gt;addWidget(play_Button);</span><br><span class="line">    Hlayout-&gt;addWidget(next_Button);</span><br><span class="line">    Hlayout-&gt;setSpacing(<span class="number">0</span>);</span><br><span class="line">    Hlayout-&gt;setContentsMargins(<span class="number">20</span>, <span class="number">0</span>, <span class="number">20</span>, <span class="number">0</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//将上面布好的一排按钮和歌名Label垂直布局</span></span><br><span class="line">    QVBoxLayout *Vlayout = <span class="keyword">new</span> QVBoxLayout();</span><br><span class="line">    Vlayout-&gt;addLayout(Hlayout);</span><br><span class="line">    Vlayout-&gt;addWidget(musicname_Label,<span class="number">0</span>,Qt::AlignCenter);</span><br><span class="line">    Vlayout-&gt;setSpacing(<span class="number">5</span>);</span><br><span class="line">    Vlayout-&gt;setContentsMargins(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line">    musicname_Label-&gt;setEnabled(<span class="literal">false</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//将上面整合好的控件作为一个widget并将此widget赋给一个Action</span></span><br><span class="line">    play_widget-&gt;setLayout(Vlayout);</span><br><span class="line">    play_widget_Action-&gt;setDefaultWidget(play_widget);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//new一个托盘菜单并将上面的Action和其他Action赋给托盘菜单</span></span><br><span class="line">    trayContextMenu=<span class="keyword">new</span> QMenu(<span class="keyword">this</span>);</span><br><span class="line">    trayContextMenu-&gt;addAction(play_widget_Action);</span><br><span class="line">    trayContextMenu-&gt;addSeparator();</span><br><span class="line">    trayContextMenu-&gt;addAction(aboutAction);</span><br><span class="line">    trayContextMenu-&gt;addAction(quitAction);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//将托盘菜单赋给托盘并显示托盘</span></span><br><span class="line">    trayIcon-&gt;setContextMenu(trayContextMenu);</span><br><span class="line">    trayIcon-&gt;show();</span><br><span class="line"> </span><br><span class="line"><span class="comment">//点击托盘执行的事件</span></span><br><span class="line">    connect(trayIcon, SIGNAL(activated(QSystemTrayIcon::ActivationReason)), <span class="keyword">this</span>, SLOT(iconActivated(QSystemTrayIcon::ActivationReason)));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>参考：<a href="http://blog.sina.com.cn/s/blog_a6fb6cc90101f0yb.html" target="_blank" rel="noopener">Qt之自定义菜单（托盘菜单）</a> </p><hr><blockquote><p>参考：<a href="https://blog.csdn.net/csdn_sxl/article/details/50586856" target="_blank" rel="noopener">https://blog.csdn.net/csdn_sxl/article/details/50586856</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自定义菜单包括右键菜单，按钮菜单和系统托盘菜单&lt;/p&gt;
&lt;h2 id=&quot;一：右键菜单&quot;&gt;&lt;a href=&quot;#一：右键菜单&quot; class=&quot;headerlink&quot; title=&quot;一：右键菜单&quot;&gt;&lt;/a&gt;一：右键菜单&lt;/h2&gt;&lt;p&gt;textEdit的右键菜单，通过槽函数on_textEdit_customContextMenuRequested()实现,其中的Action是已经创建好的 &lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C++" scheme="http://blog.iwxyi.com/tags/C/"/>
    
      <category term="Qt" scheme="http://blog.iwxyi.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>C++可变长参数</title>
    <link href="http://blog.iwxyi.com/2019/08/11/C-%E5%8F%AF%E5%8F%98%E9%95%BF%E5%8F%82%E6%95%B0/"/>
    <id>http://blog.iwxyi.com/2019/08/11/C-可变长参数/</id>
    <published>2019-08-11T00:13:00.000Z</published>
    <updated>2019-10-13T00:22:46.607Z</updated>
    
    <content type="html"><![CDATA[<p><code>type function(type arg1, ...) { }</code></p><a id="more"></a><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdarg&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">vsum</span><span class="params">(<span class="keyword">int</span> count, ...)</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个变长参数类型的指针变量：ap （Argument Pointer）</span></span><br><span class="line">    va_list ap;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化指针变量ap.</span></span><br><span class="line">    <span class="comment">// 第二个参数count是用来确定ap的起始位置的，count是vsum的第一个参数，</span></span><br><span class="line">    <span class="comment">// 注意： 如果vsum在count参数后，还有一个命名的参数叫abc, 那么就要va_start(ap, abc)来初始化ap了</span></span><br><span class="line">    <span class="comment">// 后边的变长参数是根据count的地址来计算出来</span></span><br><span class="line">    va_start(ap, count);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">val</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历变长参数内容，通过ap。</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;count; ++i) {</span><br><span class="line">        <span class="comment">// va_arg的第一个参数是va_list定义的变长参数指针ap，</span></span><br><span class="line">        <span class="comment">// 第二个参数指明了当前位置变长参数的类型。va_arg会自动改变ap的指针位置。</span></span><br><span class="line">        <span class="comment">// 下次再调用va_arg它就自动取下一个参数了，这里ap就像个迭代器</span></span><br><span class="line">        val = va_arg(ap, <span class="keyword">int</span>);</span><br><span class="line">        sum += val;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清理工作</span></span><br><span class="line">    va_end(ap);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; vsum(<span class="number">4</span>, <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>示例：递归求和</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function">T <span class="title">vsum</span><span class="params">(<span class="keyword">const</span> T &amp;t)</span> </span>{ <span class="keyword">return</span> t; }</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> ... Args&gt;</span><br><span class="line"><span class="function">T <span class="title">vsum</span><span class="params">(<span class="keyword">const</span> T &amp;t, <span class="keyword">const</span> Args&amp;... args)</span> </span>{</span><br><span class="line">    <span class="function">T <span class="title">sum</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">    sum += t;</span><br><span class="line">    sum += vsum(args...);</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; vsum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><blockquote><p>参考：<a href="https://blog.csdn.net/elloop/article/details/50092631" target="_blank" rel="noopener">https://blog.csdn.net/elloop/article/details/50092631</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;type function(type arg1, ...) { }&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C++" scheme="http://blog.iwxyi.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>小顶堆TopN</title>
    <link href="http://blog.iwxyi.com/2019/07/07/%E5%B0%8F%E9%A1%B6%E5%A0%86TopN/"/>
    <id>http://blog.iwxyi.com/2019/07/07/小顶堆TopN/</id>
    <published>2019-07-07T12:48:00.000Z</published>
    <updated>2019-10-12T12:49:29.508Z</updated>
    
    <content type="html"><![CDATA[<p>应用场景：10亿个数中取前1000大的数</p><a id="more"></a><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmallHeap</span> </span>{</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;description&gt;获取前N数据&lt;/description&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> n</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: ouyp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span>: Seeyon V7.0 SP2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018年10月16日 下午4:52:27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] topN(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> n) {</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 构建堆积</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">int</span>[] list = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">System.arraycopy(arr, <span class="number">0</span>, list, <span class="number">0</span>, n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line"><span class="keyword">int</span> t = i;</span><br><span class="line"><span class="keyword">while</span> (t != <span class="number">0</span> &amp;&amp; list[parent(t)] &gt; list[t]) {</span><br><span class="line">swap(list, t, t = parent(t));</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 小顶堆</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n, len = arr.length; i &lt; len; i++) {</span><br><span class="line"><span class="keyword">if</span> (arr[i] &gt;= list[<span class="number">0</span>]) {</span><br><span class="line"><span class="comment">// 置换栈顶</span></span><br><span class="line">list[<span class="number">0</span>] = arr[i];</span><br><span class="line"><span class="comment">// 调整栈顶</span></span><br><span class="line"><span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ((left(t) &lt; n &amp;&amp; list[t] &gt; list[left(t)]) || (right(t) &lt; n &amp;&amp; list[t] &gt; list[right(t)])) {</span><br><span class="line"><span class="keyword">if</span> (right(t) &lt; n &amp;&amp; list[right(t)] &lt; list[left(t)]) {</span><br><span class="line">swap(list, t, t = right(t));</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">swap(list, t, t = left(t));</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;description&gt;对象交换&lt;/description&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> list</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> j</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: ouyp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span>: Seeyon V7.0 SP2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018年10月16日 下午4:56:33</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] list, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> tmp = list[i];</span><br><span class="line">list[i] = list[j];</span><br><span class="line">list[j] = tmp;</span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;description&gt;父节点索引&lt;/description&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: ouyp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018年10月16日 下午3:34:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">parent</span><span class="params">(<span class="keyword">int</span> i)</span> </span>{</span><br><span class="line"><span class="keyword">return</span> (i - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;description&gt;左孩子索引&lt;/description&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: ouyp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018年10月16日 下午4:01:30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">left</span><span class="params">(<span class="keyword">int</span> i)</span> </span>{</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span> * i + <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;description&gt;右孩子索引&lt;/description&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: ouyp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018年10月16日 下午4:02:04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">right</span><span class="params">(<span class="keyword">int</span> i)</span> </span>{</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span> * i + <span class="number">2</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]{<span class="number">56</span>, <span class="number">30</span>, <span class="number">71</span>, <span class="number">18</span>, <span class="number">29</span>, <span class="number">93</span>, <span class="number">44</span>, <span class="number">75</span>, <span class="number">20</span>, <span class="number">65</span>, <span class="number">68</span>, <span class="number">34</span>};</span><br><span class="line">System.out.println(<span class="string">"原始数组: "</span>);</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line">System.out.println(<span class="string">"调整后数组: "</span>);</span><br><span class="line">System.out.println(Arrays.toString(SmallHeap.topN(arr, <span class="number">5</span>)));</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;应用场景：10亿个数中取前1000大的数&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="算法" scheme="http://blog.iwxyi.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Qt QString和unsigned char互转</title>
    <link href="http://blog.iwxyi.com/2019/07/07/Qt-QString%E5%92%8Cunsigned-char%E4%BA%92%E8%BD%AC/"/>
    <id>http://blog.iwxyi.com/2019/07/07/Qt-QString和unsigned-char互转/</id>
    <published>2019-07-07T09:41:00.000Z</published>
    <updated>2019-10-13T09:43:13.954Z</updated>
    
    <content type="html"><![CDATA[<p>QString 转 char 和 unsigned char</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">QString <span class="title">s</span><span class="params">(<span class="string">"tttttest"</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> len = <span class="built_in">strlen</span>((<span class="keyword">char</span> *)(s.toLatin1().data()));</span><br><span class="line"><span class="keyword">char</span> *cs = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>) * len);</span><br><span class="line"><span class="built_in">strcpy</span>(cs, (<span class="keyword">char</span> *)(s.toLatin1().data()));</span><br><span class="line">qDebug() &lt;&lt; <span class="string">"char*"</span> &lt;&lt; cs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> * us = (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)cs;</span><br><span class="line">qDebug() &lt;&lt; <span class="string">"unsigned char:"</span> &lt;&lt; us;</span><br><span class="line"><span class="built_in">free</span>(cs);</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><p>unsigned char 转 QString</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">QString <span class="title">ss</span><span class="params">(QLatin1String((<span class="keyword">char</span> *)us))</span></span>;</span><br><span class="line">qDebug() &lt;&lt; <span class="string">"QString:"</span> &lt;&lt; ss;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">QString <span class="title">s</span><span class="params">(<span class="string">"test"</span>)</span></span>;</span><br><span class="line">qDebug() &lt;&lt; QString(QLatin1String(</span><br><span class="line">    (<span class="keyword">char</span>*)(<span class="keyword">unsigned</span> <span class="keyword">char</span> *)s.toLatin1().data()</span><br><span class="line">));</span><br></pre></td></tr></tbody></table></figure><blockquote><p>注意：不支持中文这类双字节</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;QString 转 char 和 unsigned char&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;QString &lt;span class=&quot;title&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&quot;tttttest&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; len = &lt;span class=&quot;built_in&quot;&gt;strlen&lt;/span&gt;((&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *)(s.toLatin1().data()));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *cs = (&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;*)&lt;span class=&quot;built_in&quot;&gt;malloc&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;) * len);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;strcpy&lt;/span&gt;(cs, (&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *)(s.toLatin1().data()));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;qDebug() &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;char*&quot;&lt;/span&gt; &amp;lt;&amp;lt; cs;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; * us = (&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *)cs;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;qDebug() &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;unsigned char:&quot;&lt;/span&gt; &amp;lt;&amp;lt; us;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;free&lt;/span&gt;(cs);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C++" scheme="http://blog.iwxyi.com/tags/C/"/>
    
      <category term="Qt" scheme="http://blog.iwxyi.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>打印丑丑的手写字体</title>
    <link href="http://blog.iwxyi.com/2019/06/30/%E6%89%93%E5%8D%B0%E4%B8%91%E4%B8%91%E7%9A%84%E6%89%8B%E5%86%99%E5%AD%97%E4%BD%93/"/>
    <id>http://blog.iwxyi.com/2019/06/30/打印丑丑的手写字体/</id>
    <published>2019-06-30T11:59:00.000Z</published>
    <updated>2019-10-13T12:00:11.076Z</updated>
    
    <content type="html"><![CDATA[<p>先设置成丑的手写体<br>再运行下方随即调整行距的宏：</p><a id="more"></a><figure class="highlight vb"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Sub</span> 字体修改()</span><br><span class="line"><span class="comment">' 字体修改 宏</span></span><br><span class="line">    <span class="keyword">Dim</span> R_Character <span class="keyword">As</span> Range</span><br><span class="line"></span><br><span class="line">    <span class="keyword">Dim</span> FontSize(<span class="number">5</span>)</span><br><span class="line">    <span class="comment">' 字体大小在5个值之间进行波动，可以改写</span></span><br><span class="line">    FontSize(<span class="number">1</span>) = <span class="string">"21"</span></span><br><span class="line">    FontSize(<span class="number">2</span>) = <span class="string">"21.5"</span></span><br><span class="line">    FontSize(<span class="number">3</span>) = <span class="string">"22"</span></span><br><span class="line">    FontSize(<span class="number">4</span>) = <span class="string">"22.5"</span></span><br><span class="line">    FontSize(<span class="number">5</span>) = <span class="string">"23"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">Dim</span> FontName(<span class="number">3</span>)</span><br><span class="line">    <span class="comment">'字体名称在三种字体之间进行波动，可改写，但需要保证系统拥有下列字体</span></span><br><span class="line">    FontName(<span class="number">1</span>) = <span class="string">"陈静的字完整版"</span></span><br><span class="line">    FontName(<span class="number">2</span>) = <span class="string">"萌妹子体"</span></span><br><span class="line">    FontName(<span class="number">3</span>) = <span class="string">"李国夫手写体"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">Dim</span> ParagraphSpace(<span class="number">5</span>)</span><br><span class="line">    <span class="comment">'行间距 在一定以下值中均等分布，可改写</span></span><br><span class="line">    ParagraphSpace(<span class="number">1</span>) = <span class="string">"12"</span></span><br><span class="line">    ParagraphSpace(<span class="number">2</span>) = <span class="string">"13"</span></span><br><span class="line">    ParagraphSpace(<span class="number">3</span>) = <span class="string">"20"</span></span><br><span class="line">    ParagraphSpace(<span class="number">4</span>) = <span class="string">"7"</span></span><br><span class="line">    ParagraphSpace(<span class="number">5</span>) = <span class="string">"12"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">'不懂原理的话，不建议修改下列代码</span></span><br><span class="line">    <span class="keyword">For</span> <span class="keyword">Each</span> R_Character <span class="keyword">In</span> ActiveDocument.Characters</span><br><span class="line">        VBA.Randomize</span><br><span class="line">        R_Character.Font.Name = FontName(Int(VBA.Rnd * <span class="number">3</span>) + <span class="number">1</span>)</span><br><span class="line">        R_Character.Font.Size = FontSize(Int(VBA.Rnd * <span class="number">5</span>) + <span class="number">1</span>)</span><br><span class="line">        R_Character.Font.Position = Int(VBA.Rnd * <span class="number">3</span>) + <span class="number">1</span></span><br><span class="line">        R_Character.Font.Spacing = <span class="number">0</span></span><br><span class="line">    <span class="keyword">Next</span></span><br><span class="line"></span><br><span class="line">    Application.ScreenUpdating = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">For</span> <span class="keyword">Each</span> Cur_Paragraph <span class="keyword">In</span> ActiveDocument.Paragraphs</span><br><span class="line">        Cur_Paragraph.LineSpacing = ParagraphSpace(Int(VBA.Rnd * <span class="number">5</span>) + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">Next</span></span><br><span class="line">    Application.ScreenUpdating = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;先设置成丑的手写体&lt;br&gt;再运行下方随即调整行距的宏：&lt;/p&gt;
    
    </summary>
    
    
      <category term="办公技巧" scheme="http://blog.iwxyi.com/categories/%E5%8A%9E%E5%85%AC%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="office" scheme="http://blog.iwxyi.com/tags/office/"/>
    
  </entry>
  
  <entry>
    <title>AHK鼠标X1X2按键映射</title>
    <link href="http://blog.iwxyi.com/2019/06/29/AHK%E9%BC%A0%E6%A0%87X1X2%E6%8C%89%E9%94%AE%E6%98%A0%E5%B0%84/"/>
    <id>http://blog.iwxyi.com/2019/06/29/AHK鼠标X1X2按键映射/</id>
    <published>2019-06-29T11:55:00.000Z</published>
    <updated>2019-10-13T11:55:42.051Z</updated>
    
    <content type="html"><![CDATA[<p>AutoHotKey 针对鼠标 X1、X2 的按键映射</p><p>实现部分应用程序，包括 Android Studio、PyCharm、Idea、Qt Creator，按 X1 编译，X2 调试</p><a id="more"></a><p>快捷键按需配置，我自己是 ctrl+r 编译运行，ctrl+shift+r 调试</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">run1()</span><br><span class="line">{</span><br><span class="line">    send ^r ; ctrl+r</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">run2()</span><br><span class="line">{</span><br><span class="line">send ^+r ; ctrl+shift+r</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">XButton1:: ; 靠近自己的那边</span><br><span class="line">WinGetClass, class, A</span><br><span class="line">rst:=InStr(%class%, SunAwtFrame)</span><br><span class="line">;MsgBox %class% ans result is %rst%</span><br><span class="line">IfInString class, SunAwtFrame</span><br><span class="line">run1()</span><br><span class="line">IfInString class, Qt5QWindowIcon</span><br><span class="line">run1()</span><br><span class="line">return</span><br><span class="line"></span><br><span class="line">XButton2:: ; 靠近屏幕的那边</span><br><span class="line">WinGetClass, class, A</span><br><span class="line">IfInString class, SunAwtFrame</span><br><span class="line">run2()</span><br><span class="line">return</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;AutoHotKey 针对鼠标 X1、X2 的按键映射&lt;/p&gt;
&lt;p&gt;实现部分应用程序，包括 Android Studio、PyCharm、Idea、Qt Creator，按 X1 编译，X2 调试&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="AHK" scheme="http://blog.iwxyi.com/tags/AHK/"/>
    
  </entry>
  
  <entry>
    <title>一加7Pro开启全局90Hz</title>
    <link href="http://blog.iwxyi.com/2019/06/22/%E4%B8%80%E5%8A%A07Pro%E5%BC%80%E5%90%AF%E5%85%A8%E5%B1%8090Hz/"/>
    <id>http://blog.iwxyi.com/2019/06/22/一加7Pro开启全局90Hz/</id>
    <published>2019-06-22T11:57:00.000Z</published>
    <updated>2019-10-13T11:58:32.026Z</updated>
    
    <content type="html"><![CDATA[<p>电脑adb：<br><code>adb shell settings put global oneplus_screen_refresh_rate 0</code></p><p>本地终端：<br><code>settings put global oneplus_screen_refresh_rate 0</code></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;电脑adb：&lt;br&gt;&lt;code&gt;adb shell settings put global oneplus_screen_refresh_rate 0&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;本地终端：&lt;br&gt;&lt;code&gt;settings put global oneplus_scre
      
    
    </summary>
    
    
      <category term="搞机" scheme="http://blog.iwxyi.com/categories/%E6%90%9E%E6%9C%BA/"/>
    
    
      <category term="搞机" scheme="http://blog.iwxyi.com/tags/%E6%90%9E%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Qt加载自定义字体</title>
    <link href="http://blog.iwxyi.com/2019/05/28/Qt%E5%8A%A0%E8%BD%BD%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AD%97%E4%BD%93/"/>
    <id>http://blog.iwxyi.com/2019/05/28/Qt加载自定义字体/</id>
    <published>2019-05-28T09:01:00.000Z</published>
    <updated>2019-10-13T09:02:04.583Z</updated>
    
    <content type="html"><![CDATA[<p>加载外部字体，但是会稍微影响开启速度。</p><a id="more"></a><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QStyleFactory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QFontDataBase&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QIODevice&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">QString <span class="title">loadFontFamilyFromFiles</span><span class="params">(<span class="keyword">const</span> QString &amp;fontFilePath)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    QString font = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">QFile <span class="title">fontFile</span><span class="params">(fontFilePath)</span></span>;</span><br><span class="line">    <span class="keyword">if</span>(!fontFile.open(QIODevice::ReadOnly))</span><br><span class="line">    {</span><br><span class="line">        qDebug()&lt;&lt;<span class="string">"Open font file error"</span>;</span><br><span class="line">        <span class="keyword">return</span> font;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> loadedFontID = QFontDatabase::addApplicationFontFromData(fontFile.readAll());</span><br><span class="line">    QStringList loadedFontFamilies = QFontDatabase::applicationFontFamilies(loadedFontID);</span><br><span class="line">    <span class="keyword">if</span>(!loadedFontFamilies.empty())</span><br><span class="line">    {</span><br><span class="line">        font = loadedFontFamilies.at(<span class="number">0</span>);</span><br><span class="line">    }</span><br><span class="line">    fontFile.close();</span><br><span class="line">    <span class="keyword">return</span> font;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="function">QApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line"></span><br><span class="line">    QString font_path = <span class="string">"字体路径（ttf/otf）"</span>;</span><br><span class="line">    <span class="keyword">if</span> (isFileExist(font_path))</span><br><span class="line">    {</span><br><span class="line">        QString strFont =  loadFontFamilyFromFiles(font_path);</span><br><span class="line">        <span class="function">QFont <span class="title">font</span><span class="params">(strFont, <span class="number">9</span>)</span></span>;</span><br><span class="line">        a.setFont(font);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    MainWindow w;</span><br><span class="line">    w.show();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> a.exec();</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;加载外部字体，但是会稍微影响开启速度。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C++" scheme="http://blog.iwxyi.com/tags/C/"/>
    
      <category term="Qt" scheme="http://blog.iwxyi.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>C++调用Python</title>
    <link href="http://blog.iwxyi.com/2019/05/27/C-%E8%B0%83%E7%94%A8Python/"/>
    <id>http://blog.iwxyi.com/2019/05/27/C-调用Python/</id>
    <published>2019-05-27T05:35:00.000Z</published>
    <updated>2019-10-13T05:36:01.734Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Python代码</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fastText</span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断小说类型的调用语句</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">judge</span><span class="params">(novel)</span>:</span></span><br><span class="line">    print(novel, <span class="string">" : "</span>, classifier.predict(<span class="string">" "</span>.join(jieba.cut(novel))))</span><br><span class="line">    <span class="keyword">return</span> str(classifier.predict(<span class="string">" "</span>.join(jieba.cut(novel)))[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># classifier = fastText.train_supervised("data/novel_names.txt", lr=0.1, wordNgrams=1, loss="hs", epoch=20)</span></span><br><span class="line"><span class="comment"># model = classifier.save_model("data/novel_names.model")</span></span><br><span class="line">classifier = fastText.load_model(<span class="string">"data/novel_names.model"</span>)</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><p><strong>C++代码（Qt为例）</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QCoreApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Python.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDebug&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="function">QCoreApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line"></span><br><span class="line">    Py_Initialize();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!Py_IsInitialized())</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        PyObject* pModule = PyImport_ImportModule(<span class="string">"wtnn"</span>); <span class="comment">// 模块名（不带后缀的文件名）</span></span><br><span class="line">        <span class="keyword">if</span> (!pModule)</span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Can't open python file!\n"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        PyObject* pFun = PyObject_GetAttrString(pModule, <span class="string">"judge"</span>); <span class="comment">// 函数名</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!pFun)</span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Get function failed"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        }</span><br><span class="line">    </span><br><span class="line">    PyObject* args = Py_BuildValue(<span class="string">"(s)"</span>, <span class="string">"测试"</span>); <span class="comment">// 构建参数，为元组形式</span></span><br><span class="line">        PyObject* result = PyObject_CallObject(pFun, args);</span><br><span class="line">        <span class="keyword">if</span> (result)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">char</span>* str = <span class="literal">nullptr</span>;</span><br><span class="line">            PyArg_Parse(result, <span class="string">"s"</span>, &amp;str);</span><br><span class="line">            qDebug() &lt;&lt; str; <span class="comment">// 可以直接printf，但是中文乱码，得用qDebug</span></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    Py_Finalize();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> a.exec();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>pro文件</strong></p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">INCLUDEPATH</span> <span class="string">+= -I C:\Users\HP\AppData\Local\Programs\Python\Python36\include</span></span><br><span class="line"><span class="attr">LIBS</span> <span class="string">+= -LC:\Users\HP\AppData\Local\Programs\Python\Python36\libs -lpython36</span></span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Python代码&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; fastText&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; jieba&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 判断小说类型的调用语句&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;judge&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(novel)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(novel, &lt;span class=&quot;string&quot;&gt;&quot; : &quot;&lt;/span&gt;, classifier.predict(&lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt;.join(jieba.cut(novel))))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; str(classifier.predict(&lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt;.join(jieba.cut(novel)))[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# classifier = fastText.train_supervised(&quot;data/novel_names.txt&quot;, lr=0.1, wordNgrams=1, loss=&quot;hs&quot;, epoch=20)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# model = classifier.save_model(&quot;data/novel_names.model&quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;classifier = fastText.load_model(&lt;span class=&quot;string&quot;&gt;&quot;data/novel_names.model&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C++" scheme="http://blog.iwxyi.com/tags/C/"/>
    
      <category term="Python" scheme="http://blog.iwxyi.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>FastText心得</title>
    <link href="http://blog.iwxyi.com/2019/05/20/FastText%E5%BF%83%E5%BE%97/"/>
    <id>http://blog.iwxyi.com/2019/05/20/FastText心得/</id>
    <published>2019-05-20T05:36:00.000Z</published>
    <updated>2019-10-13T05:37:15.725Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>方法一：手动安装</p><p>下载<a href="https://github.com/xiamx/fastText/releases" target="_blank" rel="noopener">https://github.com/xiamx/fastText/releases</a>的<code>source code(zip)</code>，解压后打开，输入：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip setup.py install</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><p>如果缺少什么库（比如<code>pybind11</code>），则用 pip 安装</p><p>方法二：PIP</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip search fasttext</span><br><span class="line">pip install fasttext</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;p&gt;方法一：手动安装&lt;/p&gt;
&lt;p&gt;下载&lt;a href=&quot;https://github.com/xiamx/fastText/releases&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/xiamx/fastText/releases&lt;/a&gt;的&lt;code&gt;source code(zip)&lt;/code&gt;，解压后打开，输入：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pip setup.py install&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="Python" scheme="http://blog.iwxyi.com/tags/Python/"/>
    
      <category term="NLP" scheme="http://blog.iwxyi.com/tags/NLP/"/>
    
  </entry>
  
  <entry>
    <title>Windows下建立Linux子系统</title>
    <link href="http://blog.iwxyi.com/2019/05/19/Windows%E4%B8%8B%E5%BB%BA%E7%AB%8BLinux%E5%AD%90%E7%B3%BB%E7%BB%9F/"/>
    <id>http://blog.iwxyi.com/2019/05/19/Windows下建立Linux子系统/</id>
    <published>2019-05-19T06:02:00.000Z</published>
    <updated>2019-10-13T06:14:53.959Z</updated>
    
    <content type="html"><![CDATA[<h4 id="在windows开窗口："><a href="#在windows开窗口：" class="headerlink" title="在windows开窗口："></a>在windows开窗口：</h4><p>先打开 xming，再输入：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DISPLAY=:0 firefox</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><h4 id="远程桌面控制："><a href="#远程桌面控制：" class="headerlink" title="远程桌面控制："></a>远程桌面控制：</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service xrdp start</span><br></pre></td></tr></tbody></table></figure><blockquote><p><a href="https://www.cnblogs.com/lihjacky/p/9106202.html" target="_blank" rel="noopener">https://www.cnblogs.com/lihjacky/p/9106202.html</a></p></blockquote><p>然后通过远程桌面链接到：<code>127.0.0.1:3390</code></p><h4 id="VNC连接："><a href="#VNC连接：" class="headerlink" title="VNC连接："></a>VNC连接：</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zsh</span><br><span class="line">vncserver</span><br></pre></td></tr></tbody></table></figure><p>打开 VNC Viewer，访问：<code>127.0.0.1:端口号</code>，端口号为 Ubuntu 中的最后一个数字（从1开始，可能递增）</p><blockquote><p><a href="http://www.cnblogs.com/kerrycode/p/6055126.html" target="_blank" rel="noopener">http://www.cnblogs.com/kerrycode/p/6055126.html</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;在windows开窗口：&quot;&gt;&lt;a href=&quot;#在windows开窗口：&quot; class=&quot;headerlink&quot; title=&quot;在windows开窗口：&quot;&gt;&lt;/a&gt;在windows开窗口：&lt;/h4&gt;&lt;p&gt;先打开 xming，再输入：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;DISPLAY=:0 firefox&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="搭建" scheme="http://blog.iwxyi.com/categories/%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="Linux" scheme="http://blog.iwxyi.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Git用法</title>
    <link href="http://blog.iwxyi.com/2019/05/16/Git%E7%94%A8%E6%B3%95/"/>
    <id>http://blog.iwxyi.com/2019/05/16/Git用法/</id>
    <published>2019-05-16T06:01:00.000Z</published>
    <updated>2019-10-13T06:01:58.747Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git-用法"><a href="#Git-用法" class="headerlink" title="Git 用法"></a>Git 用法</h1><h2 id="下载Git"><a href="#下载Git" class="headerlink" title="下载Git"></a>下载Git</h2><p>git-x.x.x-64-bit.exe</p><p>下载地址：<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">https://git-scm.com/downloads</a></p><p>一路默认安装</p><blockquote><p>linux下安装：<code>sudo apt-get install git</code></p></blockquote><a id="more"></a><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>在项目目录中打开 Git Bash</p><p>用命令行进行管理</p><h2 id="身份"><a href="#身份" class="headerlink" title="身份"></a>身份</h2><ul><li><code>git config --global user.email "you@example.com"</code></li><li><code>git config --global user.name "Your Name"</code></li></ul><h2 id="上传Git"><a href="#上传Git" class="headerlink" title="上传Git"></a>上传Git</h2><ol><li><code>git init</code></li><li><code>git add .</code> （空格和 . ）将文件夹全部内容添加到 git（新文件+修改，不包括删除）<br><code>git add -A</code> 包括上传删除的文件</li><li><code>git commit -m “提交信息”</code></li><li><code>git remote add origin GitHub项目https地址</code> 连接仓库<br>如果报错（一般是由于在其他设备使用），先使用 <code>git remote rm origin</code> 来清空，再重试</li><li><code>git push -u origin master</code> 上传项目。会弹出窗口输入GitHub账号密码。<br>如果要上传到已存在的仓库，要先使用<code>git pull origin master</code>来同步到本地</li></ol><h2 id="更新Git"><a href="#更新Git" class="headerlink" title="更新Git"></a>更新Git</h2><p>从上面<code>第2点</code>开始，最后一步可以直接 <code>git push</code></p><h2 id="SSH连接"><a href="#SSH连接" class="headerlink" title="SSH连接"></a>SSH连接</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b <span class="number">4096</span> -C <span class="string">"your_email@example.com"</span></span><br></pre></td></tr></tbody></table></figure><p>三下回车，出现图案结果。</p><p>复制文件<code>C:/Users/Administrator/.ssh/id_rsa.pub</code>内容，把key添加到：github &gt; settings &gt; SSH and GPG keys &gt; New SSH key &gt; 粘贴保存。</p><blockquote><p>linux在：<code>/home/用户名/.ssh/id_rsa.pub</code>，可用命令行打开</p></blockquote><h2 id="代码回滚"><a href="#代码回滚" class="headerlink" title="代码回滚"></a>代码回滚</h2><ul><li><code>git log</code> # 得到你需要回退一次提交的commit id</li><li><code>git reset --hard &lt;commit_id&gt;</code></li><li>``git push origin HEAD –force` # 强制提交一次，之前错误的提交就从远程仓库删除</li></ul><h1 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h1><h2 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h2><p><a href="http://www.imooc.com/article/279280" target="_blank" rel="noopener">http://www.imooc.com/article/279280</a></p><h2 id="记住密码"><a href="#记住密码" class="headerlink" title="记住密码"></a>记住密码</h2><p><code>git config credential.helper store</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git config credential.helper store</span><br><span class="line">$ git push https://github.com/owner/repo.git</span><br><span class="line"><span class="comment"># 然后输入用户名和密码</span></span><br><span class="line">Username <span class="keyword">for</span> <span class="string">'https://github.com'</span>: &lt;USERNAME&gt;</span><br><span class="line">Password <span class="keyword">for</span> <span class="string">'https://USERNAME@github.com'</span>: &lt;PASSWORD&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="更改-commit-信息"><a href="#更改-commit-信息" class="headerlink" title="更改 commit 信息"></a>更改 commit 信息</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit --amend -m <span class="string">"新提交信息"</span></span><br></pre></td></tr></tbody></table></figure><h2 id="漏提交"><a href="#漏提交" class="headerlink" title="漏提交"></a>漏提交</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add 遗漏文件</span><br><span class="line">git commit --amend --no-edit <span class="comment">// 表示提交消息不会更改，仅为一次提交</span></span><br></pre></td></tr></tbody></table></figure><h2 id="重新提交"><a href="#重新提交" class="headerlink" title="重新提交"></a>重新提交</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset <span class="comment">// 回退到上一个commit版本</span></span><br></pre></td></tr></tbody></table></figure><h2 id="回滚"><a href="#回滚" class="headerlink" title="回滚"></a>回滚</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD 文件名  <span class="comment">// 取消暂存区的修改</span></span><br><span class="line"></span><br><span class="line">git reset --hard 提交ID  <span class="comment">// 全部回退到指定版本</span></span><br><span class="line"></span><br><span class="line">git reset --hard HEAD~<span class="number">1</span>  <span class="comment">// 回退一个版本</span></span><br><span class="line"></span><br><span class="line">git reset --soft HEAD~<span class="number">1</span>  <span class="comment">// 版本库回退一个版本，该版本之后的所有变更进入暂存区</span></span><br></pre></td></tr></tbody></table></figure><h2 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h2><p>revert 和 reset 的区别：revert 也会作为一次操作进入版本库，reset 直接删除指定 commit</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git revert  <span class="comment">// 使用新的 commit 来回滚到之前的 commit</span></span><br></pre></td></tr></tbody></table></figure><h2 id="删除Repository"><a href="#删除Repository" class="headerlink" title="删除Repository"></a>删除Repository</h2><p>点开项目–Settings–Delete this repository，会要求输入项目名字来确认删除</p><h2 id="强推"><a href="#强推" class="headerlink" title="强推"></a>强推</h2><p>出了问题，不管三七二十一，强行push</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master -f</span><br></pre></td></tr></tbody></table></figure><h2 id="强制下载"><a href="#强制下载" class="headerlink" title="强制下载"></a>强制下载</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git fetch --all </span><br><span class="line">git reset --hard origin/master</span><br><span class="line">git pull</span><br></pre></td></tr></tbody></table></figure><h2 id="Git目录下新增文件"><a href="#Git目录下新增文件" class="headerlink" title="Git目录下新增文件"></a>Git目录下新增文件</h2><p>在项目根目录直接添加新文件夹好像不会上传</p><p>需要手动添加到Git的上传列表里</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add 文件夹名</span><br><span class="line">git commit -m <span class="string">""</span></span><br><span class="line">git push</span><br></pre></td></tr></tbody></table></figure><h2 id="删除某个文件"><a href="#删除某个文件" class="headerlink" title="删除某个文件"></a>删除某个文件</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm -r --cached xxx</span><br></pre></td></tr></tbody></table></figure><p>再commit和push</p><p>其中目录需要强制-r</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="remote-origin-already-exists"><a href="#remote-origin-already-exists" class="headerlink" title="remote origin already exists"></a>remote origin already exists</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add origin 项目地址</span><br><span class="line">fatal: remote origin already exists.</span><br></pre></td></tr></tbody></table></figure><p><strong>解决方法</strong>：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote rm origin</span><br></pre></td></tr></tbody></table></figure><p>再重新<code>git remote add origin 项目地址</code></p><p>其实不用管它也没事的……</p><h2 id="多设备提交冲突"><a href="#多设备提交冲突" class="headerlink" title="多设备提交冲突"></a>多设备提交冲突</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git push -u origin master</span><br><span class="line">To https://github.com/MRXY001/yunj.git</span><br><span class="line"> ! [rejected]        master -&gt; master (fetch first)</span><br><span class="line">error: failed to push some refs to <span class="string">'https://github.com/MRXY001/yunj.git'</span></span><br><span class="line">hint: Updates were rejected because the remote contains work that you do</span><br><span class="line">hint: <span class="keyword">not</span> have locally. This <span class="keyword">is</span> usually caused by another repository pushing</span><br><span class="line">hint: to the same ref. You may want to first integrate the remote changes</span><br><span class="line">hint: (e.g., <span class="string">'git pull ...'</span>) before pushing again.</span><br><span class="line">hint: See the <span class="string">'Note about fast-forwards'</span> <span class="keyword">in</span> <span class="string">'git push --help'</span> <span class="keyword">for</span> details.</span><br></pre></td></tr></tbody></table></figure><p>让你<code>fetch first</code><br>就是先<code>git pull</code> 一下</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git fetch</span><br><span class="line">git merge</span><br></pre></td></tr></tbody></table></figure><p>等同于</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></tbody></table></figure><p><strong>还是不行的解决办法</strong>：</p><p>远程分支上存在本地分支中不存在的提交，往往是多人协作开发过程中遇到的问题，可以先<code>fetch</code>再<code>merge</code>，也就是<code>pull</code>，把远程分支上的提交合并到本地分支之后再<code>push</code>。</p><p><strong>如果你确定远程分支上那些提交都不需要了，那么直接<code>git push origin master -f</code>，强行让本地分支覆盖远程分支。。。</strong>（不建议，会覆盖掉以前的所有 commits）</p><h2 id="SSH问题"><a href="#SSH问题" class="headerlink" title="SSH问题"></a>SSH问题</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ git push -u origin master</span><br><span class="line">The authenticity of host <span class="string">'github.com (13.229.188.59)'</span> can<span class="string">'t be established.</span></span><br><span class="line"><span class="string">RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no)? yes</span></span><br><span class="line"><span class="string">Warning: Permanently added '</span>github.com,<span class="number">13.229</span><span class="number">.188</span><span class="number">.59</span><span class="string">' (RSA) to the list of known    hosts.</span></span><br><span class="line"><span class="string">git@github.com: Permission denied (publickey).</span></span><br><span class="line"><span class="string">fatal: Could not read from remote repository.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Please make sure you have the correct access rights</span></span><br><span class="line"><span class="string">and the repository exists.</span></span><br></pre></td></tr></tbody></table></figure><p><strong>解决办法</strong>：</p><p>需要重新创建SSH</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"wxy19980615@gmail.com"</span></span><br></pre></td></tr></tbody></table></figure><p>把 <code>/c/Users/Administrator/.ssh/id_rsa.pub</code> 文件的内容放到 <code>GitHub/Settings/SSH keys</code> 里面<br>然后再重新执行 <code>git push -u origin master</code></p><h2 id="failed-to-push-some-refs-to-‘origin’"><a href="#failed-to-push-some-refs-to-‘origin’" class="headerlink" title="failed to push some refs to ‘origin’"></a>failed to push some refs to ‘origin’</h2><p>意思是本地和远程的文件应该合并后才能上传本地的新文件</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></tbody></table></figure><h2 id="不匹配"><a href="#不匹配" class="headerlink" title="不匹配"></a>不匹配</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">error: src refspec master does not match any.</span><br><span class="line">error: failed to push some refs to</span><br></pre></td></tr></tbody></table></figure><p><code>git commit -m "xxx"</code> 重新上传一遍</p><h2 id="拒绝合并不相关的历史"><a href="#拒绝合并不相关的历史" class="headerlink" title="拒绝合并不相关的历史"></a>拒绝合并不相关的历史</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fatal: refusing to merge unrelated histories</span><br></pre></td></tr></tbody></table></figure><p>出现这个问题的最主要原因还是在于本地仓库和远程仓库实际上是独立的两个仓库。假如我之前是直接clone的方式在本地建立起远程github仓库的克隆本地仓库就不会有这问题了。</p><p>可以在pull命令后紧接着使用<code>--allow-unrelated-history</code>选项来解决问题（该选项可以合并两个独立启动仓库的历史）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master --allow-unrelated-histories</span><br></pre></td></tr></tbody></table></figure><p>（合并的文件很可能会有问题，需要手动调整）</p><p>直接push的话会继续报错：<code>Updates were rejected because the tip of your current branch is behind its remote counterpart. Integrate the remote changes</code></p><p>然后add和commit，最后重新push一遍</p><h2 id="Changes-not-staged-for-commit"><a href="#Changes-not-staged-for-commit" class="headerlink" title="Changes not staged for commit:"></a>Changes not staged for commit:</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">"更新文件结构"</span></span><br><span class="line">On branch master</span><br><span class="line">Your branch <span class="keyword">is</span> up to date <span class="keyword">with</span> <span class="string">'origin/master'</span>.</span><br><span class="line"></span><br><span class="line">Changes <span class="keyword">not</span> staged <span class="keyword">for</span> commit:</span><br><span class="line">        modified:   ../README.md</span><br><span class="line">        deleted:    ../picture/result.png</span><br><span class="line">        deleted:    ../qidian_collections.py</span><br><span class="line">        deleted:    ../train.py</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">        ../name_collections.py</span><br><span class="line">        ../name_train.py</span><br><span class="line"></span><br><span class="line">no changes added to commit</span><br></pre></td></tr></tbody></table></figure><p>解决方法：使用<code>git add -A</code> 进行添加</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Git-用法&quot;&gt;&lt;a href=&quot;#Git-用法&quot; class=&quot;headerlink&quot; title=&quot;Git 用法&quot;&gt;&lt;/a&gt;Git 用法&lt;/h1&gt;&lt;h2 id=&quot;下载Git&quot;&gt;&lt;a href=&quot;#下载Git&quot; class=&quot;headerlink&quot; title=&quot;下载Git&quot;&gt;&lt;/a&gt;下载Git&lt;/h2&gt;&lt;p&gt;git-x.x.x-64-bit.exe&lt;/p&gt;
&lt;p&gt;下载地址：&lt;a href=&quot;https://git-scm.com/downloads&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://git-scm.com/downloads&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一路默认安装&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;linux下安装：&lt;code&gt;sudo apt-get install git&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="工具" scheme="http://blog.iwxyi.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Qt屏蔽中文输入法</title>
    <link href="http://blog.iwxyi.com/2019/05/05/Qt%E5%B1%8F%E8%94%BD%E4%B8%AD%E6%96%87%E8%BE%93%E5%85%A5%E6%B3%95/"/>
    <id>http://blog.iwxyi.com/2019/05/05/Qt屏蔽中文输入法/</id>
    <published>2019-05-05T12:00:00.000Z</published>
    <updated>2019-10-13T12:01:18.229Z</updated>
    
    <content type="html"><![CDATA[<p>只在屏蔽输入法的QLineEdit上调用：</p><p><code>setAttribute(Qt::WA_InputMethodEnabled, false);</code></p><p>接下来就能监听到各种按键事件</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;只在屏蔽输入法的QLineEdit上调用：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;setAttribute(Qt::WA_InputMethodEnabled, false);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;接下来就能监听到各种按键事件&lt;/p&gt;
&lt;script&gt;
        docu
      
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C++" scheme="http://blog.iwxyi.com/tags/C/"/>
    
      <category term="Qt" scheme="http://blog.iwxyi.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>Python网络爬虫</title>
    <link href="http://blog.iwxyi.com/2019/05/02/Python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/"/>
    <id>http://blog.iwxyi.com/2019/05/02/Python网络爬虫/</id>
    <published>2019-05-02T05:41:00.000Z</published>
    <updated>2019-10-13T05:41:49.748Z</updated>
    
    <content type="html"><![CDATA[<p>一个提取起点小说名称的例子</p><a id="more"></a><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取网页源码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_html</span><span class="params">(url)</span>:</span></span><br><span class="line">    page = urllib.request.urlopen(url)</span><br><span class="line">    _html = page.read()</span><br><span class="line">    <span class="keyword">return</span> str(_html, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存到文本文件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_text_file</span><span class="params">(file_name, contents)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(file_name, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(contents)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 正则表达式提取数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_novel_names</span><span class="params">(source)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> re.findall(<span class="string">'&lt;h4&gt;&lt;a href="//book.qidian.com/info/\\d+" target="_blank" data-eid="qd_C40" data-bid="\\d+"&gt;(.+?)&lt;/a&gt;&lt;/h4&gt;'</span>, source)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">novels = []  <span class="comment"># 所有的书名列表</span></span><br><span class="line"><span class="keyword">for</span> page <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">3</span>):  <span class="comment"># 遍历2页</span></span><br><span class="line">    html = get_html(<span class="string">"https://www.qidian.com/rank/fin?chn=21&amp;page="</span>+str(page))</span><br><span class="line">    novels += get_novel_names(html)</span><br><span class="line">save_text_file(<span class="string">"玄幻.txt"</span>, <span class="string">"\n"</span>.join(novels))</span><br></pre></td></tr></tbody></table></figure><p>这是最简单的例子，但是连续爬<code>https</code>会遇到报错：<code>http.client.RemoteDisconnected: Remote end closed connection without response</code>。需要加上headers:</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取网页源码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_html</span><span class="params">(url)</span>:</span></span><br><span class="line">    headers = {<span class="string">'User-Agent'</span>: <span class="string">'User-Agent:Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36'</span>}</span><br><span class="line">    req = urllib.request.Request(url=url, headers=headers)</span><br><span class="line">    html = urllib.request.urlopen(req)</span><br><span class="line">    <span class="keyword">return</span> html.read().decode(<span class="string">'utf-8'</span>, <span class="string">'ignore'</span>)</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一个提取起点小说名称的例子&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="Python" scheme="http://blog.iwxyi.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Jiaba分词</title>
    <link href="http://blog.iwxyi.com/2019/05/02/Jiaba%E5%88%86%E8%AF%8D/"/>
    <id>http://blog.iwxyi.com/2019/05/02/Jiaba分词/</id>
    <published>2019-05-02T05:37:00.000Z</published>
    <updated>2019-10-13T05:38:29.858Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Jieba"><a href="#Jieba" class="headerlink" title="Jieba"></a>Jieba</h1><p>“结巴”中文分词：做最好的 Python 中文分词组件<br>github : <a href="https://github.com/fxsjy/jieba" target="_blank" rel="noopener">https://github.com/fxsjy/jieba</a></p><p>特点</p><ul><li>支持三种分词模式<ul><li>精确模式，试图将句子最精确地切开，适合文本分析；</li><li>全模式，把句子中所有的可以成词的词语都扫描出来, 速度非常快，但是不能解决歧义；</li><li>搜索引擎模式，在精确模式的基础上，对长词再次切分，提高召回率，适合用于搜索引擎分词。</li></ul></li><li>支持繁体分词</li><li>支持自定义词典</li><li>MIT 授权协议</li></ul><a id="more"></a><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>代码对 Python 2/3 均兼容</p><ul><li>全自动安装：easy_install jieba 或者 pip install jieba / pip3 install jieba</li><li>半自动安装：先下载 <a href="http://pypi.python.org/pypi/jieba/" target="_blank" rel="noopener">http://pypi.python.org/pypi/jieba/</a> ，解压后运行 python setup.py install</li><li>手动安装：将 jieba 目录放置于当前目录或者 site-packages 目录</li></ul><p>通过 import jieba 来引用</p><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><ul><li>基于前缀词典实现高效的词图扫描，生成句子中汉字所有可能成词情况所构成的有向无环图 (DAG)</li><li>采用了动态规划查找最大概率路径, 找出基于词频的最大切分组合</li><li>对于未登录词，采用了基于汉字成词能力的 HMM 模型，使用了 Viterbi 算法</li></ul><h1 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h1><h2 id="1、分词"><a href="#1、分词" class="headerlink" title="1、分词"></a>1、分词</h2><ul><li><code>jieba.cut</code> 方法接受三个输入参数: 需要分词的字符串；cut_all 参数用来控制是否采用全模式；HMM 参数用来控制是否使用 HMM 模型</li><li><code>jieba.cut_for_search</code> 方法接受两个参数：需要分词的字符串；是否使用 HMM 模型。该方法适合用于搜索引擎构建倒排索引的分词，粒度比较细</li><li>待分词的字符串可以是 unicode 或 UTF-8 字符串、GBK 字符串。注意：不建议直接输入 GBK 字符串，可能无法预料地错误解码成 UTF-8</li><li><code>jieba.cut</code> 以及 <code>jieba.cut_for_search</code> 返回的结构都是一个可迭代的 generator，可以使用 for 循环来获得分词后得到的每一个词语(unicode)，或者用</li><li><code>jieba.lcut</code> 以及 <code>jieba.lcut_for_search</code> 直接返回 list</li><li><code>jieba.Tokenizer(dictionary=DEFAULT_DICT)</code> 新建自定义分词器，可用于同时使用不同词典。<code>jieba.dt</code> 为默认分词器，所有全局分词相关函数都是该分词器的映射。</li></ul><p>代码示例</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"></span><br><span class="line">seg_list = jieba.cut(<span class="string">"我来到北京清华大学"</span>, cut_all=<span class="literal">True</span>)</span><br><span class="line">print(<span class="string">"Full Mode: "</span> + <span class="string">"/ "</span>.join(seg_list))  <span class="comment"># 全模式</span></span><br><span class="line"></span><br><span class="line">seg_list = jieba.cut(<span class="string">"我来到北京清华大学"</span>, cut_all=<span class="literal">False</span>)</span><br><span class="line">print(<span class="string">"Default Mode: "</span> + <span class="string">"/ "</span>.join(seg_list))  <span class="comment"># 精确模式</span></span><br><span class="line"></span><br><span class="line">seg_list = jieba.cut(<span class="string">"他来到了网易杭研大厦"</span>)  <span class="comment"># 默认是精确模式</span></span><br><span class="line">print(<span class="string">", "</span>.join(seg_list))</span><br><span class="line"></span><br><span class="line">seg_list = jieba.cut_for_search(<span class="string">"小明硕士毕业于中国科学院计算所，后在日本京都大学深造"</span>)  <span class="comment"># 搜索引擎模式</span></span><br><span class="line">print(<span class="string">", "</span>.join(seg_list))</span><br></pre></td></tr></tbody></table></figure><p>输出</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">【全模式】: 我/ 来到/ 北京/ 清华/ 清华大学/ 华大/ 大学</span><br><span class="line"></span><br><span class="line">【精确模式】: 我/ 来到/ 北京/ 清华大学</span><br><span class="line"></span><br><span class="line">【新词识别】：他, 来到, 了, 网易, 杭研, 大厦    (此处，“杭研”并没有在词典中，但是也被Viterbi算法识别出来了)</span><br><span class="line"></span><br><span class="line">【搜索引擎模式】： 小明, 硕士, 毕业, 于, 中国, 科学, 学院, 科学院, 中国科学院, 计算, 计算所, 后, 在, 日本, 京都, 大学, 日本京都大学, 深造</span><br></pre></td></tr></tbody></table></figure><h2 id="2、添加自定义词典"><a href="#2、添加自定义词典" class="headerlink" title="2、添加自定义词典"></a>2、添加自定义词典</h2><h3 id="载入词典"><a href="#载入词典" class="headerlink" title="载入词典"></a>载入词典</h3><ul><li>开发者可以指定自己自定义的词典，以便包含 jieba 词库里没有的词。虽然 jieba 有新词识别能力，但是自行添加新词可以保证更高的正确率</li><li>用法： <code>jieba.load_userdict(file_name)</code> file_name 为文件类对象或自定义词典的路径<br>词典格式和 <code>dict.txt</code> 一样，一个词占一行；每一行分三部分：<strong>词语、词频（可省略）、词性（可省略）</strong>，用空格隔开，顺序不可颠倒。<code>file_name</code> 若为路径或二进制方式打开的文件，则文件必须为 UTF-8 编码。</li><li>词频省略时使用自动计算的能保证分出该词的词频。</li></ul><p>例如：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">创新办 3 i</span><br><span class="line">云计算 5</span><br><span class="line">凱特琳 nz</span><br><span class="line">台中</span><br></pre></td></tr></tbody></table></figure><ul><li>更改分词器（默认为 <code>jieba.dt</code>）的 <code>tmp_dir</code> 和 <code>cache_file</code> 属性，可分别指定缓存文件所在的文件夹及其文件名，用于受限的文件系统。</li><li>范例：<ul><li>自定义词典：<a href="https://github.com/fxsjy/jieba/blob/master/test/userdict.txt" target="_blank" rel="noopener">https://github.com/fxsjy/jieba/blob/master/test/userdict.txt</a></li><li>用法示例：<a href="https://github.com/fxsjy/jieba/blob/master/test/test_userdict.py" target="_blank" rel="noopener">https://github.com/fxsjy/jieba/blob/master/test/test_userdict.py</a><ul><li>之前： 李小福 / 是 / 创新 / 办 / 主任 / 也 / 是 / 云 / 计算 / 方面 / 的 / 专家 /</li><li>加载自定义词库后：　李小福 / 是 / 创新办 / 主任 / 也 / 是 / 云计算 / 方面 / 的 / 专家 /</li></ul></li></ul></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function, unicode_literals</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"><span class="keyword">import</span> jieba.posseg <span class="keyword">as</span> pseg</span><br><span class="line"></span><br><span class="line">sys.path.append(<span class="string">"../"</span>)  <span class="comment"># 添加当前文件所在目录</span></span><br><span class="line">jieba.load_userdict(<span class="string">"userdict.txt"</span>)  <span class="comment"># 和PY文件是同一个目录</span></span><br><span class="line"></span><br><span class="line">jieba.add_word(<span class="string">'石墨烯'</span>)</span><br><span class="line">jieba.add_word(<span class="string">'凱特琳'</span>)</span><br><span class="line">jieba.del_word(<span class="string">'自定义词'</span>)</span><br><span class="line"></span><br><span class="line">test_sent = (</span><br><span class="line">    <span class="string">"李小福是创新办主任也是云计算方面的专家; 什么是八一双鹿\n"</span></span><br><span class="line">    <span class="string">"例如我输入一个带“韩玉赏鉴”的标题，在自定义词库中也增加了此词为N类\n"</span></span><br><span class="line">    <span class="string">"「台中」正確應該不會被切開。mac上可分出「石墨烯」；此時又可以分出來凱特琳了。"</span></span><br><span class="line">)</span><br><span class="line">words = jieba.cut(test_sent)  <span class="comment"># 数组，仅分出结果</span></span><br><span class="line">print(<span class="string">'/'</span>.join(words))</span><br><span class="line"></span><br><span class="line">result = pseg.cut(test_sent)  <span class="comment"># 包括每一个分割词的信息</span></span><br><span class="line"><span class="keyword">for</span> w <span class="keyword">in</span> result:</span><br><span class="line">    print(w.word, <span class="string">"/"</span>, w.flag, <span class="string">", "</span>, end=<span class="string">' '</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="调整词典"><a href="#调整词典" class="headerlink" title="调整词典"></a>调整词典</h3><ul><li>使用 <code>add_word(word, freq=None, tag=None)</code> 和 <code>del_word(word)</code> 可在程序中动态修改词典。</li><li>使用 <code>suggest_freq(segment, tune=True)</code> 可调节单个词语的词频，使其能（或不能）被分出来。</li></ul><p>注意：自动计算的词频在使用 HMM 新词发现功能时可能无效。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'/'</span>.join(jieba.cut(<span class="string">'如果放到post中将出错。'</span>, HMM=<span class="literal">False</span>)))</span><br><span class="line">如果/放到/post/中将/出错/。</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>jieba.suggest_freq((<span class="string">'中'</span>, <span class="string">'将'</span>), <span class="literal">True</span>)  <span class="comment"># 调节为分开 </span></span><br><span class="line"><span class="number">494</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'/'</span>.join(jieba.cut(<span class="string">'如果放到post中将出错。'</span>, HMM=<span class="literal">False</span>)))</span><br><span class="line">如果/放到/post/中/将/出错/。</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'/'</span>.join(jieba.cut(<span class="string">'「台中」正确应该不会被切开'</span>, HMM=<span class="literal">False</span>)))</span><br><span class="line">「/台/中/」/正确/应该/不会/被/切开</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>jieba.suggest_freq(<span class="string">'台中'</span>, <span class="literal">True</span>)  <span class="comment"># 调节为不分开</span></span><br><span class="line"><span class="number">69</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'/'</span>.join(jieba.cut(<span class="string">'「台中」正确应该不会被切开'</span>, HMM=<span class="literal">False</span>)))</span><br><span class="line">「/台中/」/正确/应该/不会/被/切开</span><br></pre></td></tr></tbody></table></figure><ul><li>“通过用户自定义词典来增强歧义纠错能力” — <a href="https://github.com/fxsjy/jieba/issues/14" target="_blank" rel="noopener">https://github.com/fxsjy/jieba/issues/14</a></li></ul><hr><blockquote><p>参考：<a href="https://blog.csdn.net/qq_34337272/article/details/79554772" target="_blank" rel="noopener">https://blog.csdn.net/qq_34337272/article/details/79554772</a></p><p><strong>更多功能</strong>与<strong>各语言版本</strong>请见此博客</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Jieba&quot;&gt;&lt;a href=&quot;#Jieba&quot; class=&quot;headerlink&quot; title=&quot;Jieba&quot;&gt;&lt;/a&gt;Jieba&lt;/h1&gt;&lt;p&gt;“结巴”中文分词：做最好的 Python 中文分词组件&lt;br&gt;github : &lt;a href=&quot;https://github.com/fxsjy/jieba&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/fxsjy/jieba&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;特点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持三种分词模式&lt;ul&gt;
&lt;li&gt;精确模式，试图将句子最精确地切开，适合文本分析；&lt;/li&gt;
&lt;li&gt;全模式，把句子中所有的可以成词的词语都扫描出来, 速度非常快，但是不能解决歧义；&lt;/li&gt;
&lt;li&gt;搜索引擎模式，在精确模式的基础上，对长词再次切分，提高召回率，适合用于搜索引擎分词。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;支持繁体分词&lt;/li&gt;
&lt;li&gt;支持自定义词典&lt;/li&gt;
&lt;li&gt;MIT 授权协议&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="Python" scheme="http://blog.iwxyi.com/tags/Python/"/>
    
      <category term="NLP" scheme="http://blog.iwxyi.com/tags/NLP/"/>
    
  </entry>
  
  <entry>
    <title>使用Telegram收发微信</title>
    <link href="http://blog.iwxyi.com/2019/04/30/%E4%BD%BF%E7%94%A8Telegram%E6%94%B6%E5%8F%91%E5%BE%AE%E4%BF%A1/"/>
    <id>http://blog.iwxyi.com/2019/04/30/使用Telegram收发微信/</id>
    <published>2019-04-30T05:58:00.000Z</published>
    <updated>2019-10-13T06:15:11.872Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>发代号 EH Forwarder Bot（简称 EFB）是一个可扩展的聊天平台隧道框架，基于 Python 3。目前已内置了 Telegram 主端 (Master Channel) 和微信从端 (Slave Channel)，用来在 Telegram 收发微信消息。其他从端开发已在计划之中。同时 EFB 也配备了详尽的文档，欢迎有兴趣的朋友们开发自己的主端或从端，来支持更多的平台。EFB <a href="https://github.com/blueset/ehforwarderbot" target="_blank" rel="noopener">在 GitHub 中开放了源代码</a>，并且<a href="https://ehforwarderbot.readthedocs.io/" target="_blank" rel="noopener">在 Read The Docs 平台上发布的开发文档</a>（英文，<code>en-US</code>）。</p><p>本文主要介绍了如何在一个虚拟服务器 (VPS) 中安装并配置 EFB、Telegram 主端和微信从端，以及如何使用 Telegram 主端来收发微信消息。</p><a id="more"></a><h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><p>服务器系统：CentOS</p><h3 id="安装Python3-6"><a href="#安装Python3-6" class="headerlink" title="安装Python3.6"></a>安装Python3.6</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install -y https://centos7.iuscommunity.org/ius-release.rpm</span><br><span class="line">yum install -y python36u python36u-libs python36u-devel python36u-pip python36u-setuptools</span><br><span class="line">which -a python3.6</span><br></pre></td></tr></tbody></table></figure><p>运行完成后再shell中键入<code>python3.6</code>看能否进入python，如果能则进入下一步，如果显示路径错误则编辑~/bashrc文件<code>vi ~/.bashrc</code>在其中键入<code>python3.6='/usr/bin/python3.6'</code>退出vi编辑器并在shell下键入<code>source ~/.bashrc</code>保存更改</p><h3 id="安装非Python依赖项"><a href="#安装非Python依赖项" class="headerlink" title="安装非Python依赖项"></a>安装非Python依赖项</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo rpm --import http://li.nux.ro/download/nux/RPM-GPG-KEY-nux.ro</span><br><span class="line">sudo rpm -Uvh http://li.nux.ro/download/nux/dextop/el7/x86_64/nux-dextop-release-0-5.el7.nux.noarch.rpm</span><br><span class="line">yum install -y libwebp-devel file-devel ffmpeg</span><br></pre></td></tr></tbody></table></figure><h3 id="下载源码并安装"><a href="#下载源码并安装" class="headerlink" title="下载源码并安装"></a>下载源码并安装</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget https://codeload.github.com/blueset/ehForwarderBot/tar.gz/v1.6.6</span><br><span class="line">tar -xvf v1.6.6</span><br><span class="line">cd ehForwarderBot-1.6.6</span><br><span class="line">pip3.6 install -r requirements.txt</span><br></pre></td></tr></tbody></table></figure><p>配置 EFB</p><p>接下来就是进行各种必要的配置和初始化的步骤了。</p><h3 id="4-1-创建-Telegram-Bot"><a href="#4-1-创建-Telegram-Bot" class="headerlink" title="4.1 创建 Telegram Bot"></a>4.1 创建 Telegram Bot</h3><p>Telegram Bot 是 EFB（Telegram 主端）的出口，也是呈献给用户的渠道。我们在这里使用了 Telegram 官方的 Bot API，以最大化利用 Telegram Bot 所提供的各种便利功能。</p><p>要创建一个新的 Bot，要先向 @BotFather 发起会话。发送指令 <code>/newbot</code> 以启动向导。期间，你需要指定这个 Bot 的名称与用户名（用户名必须以 bot 结尾）。完毕之后 @BotFather 会提供给你一个密钥（Token），妥善保存这个密钥。请注意，为保护您的隐私及信息安全，请不要向任何人提供你的 Bot 用户名及密钥，这可能导致聊天信息泄露等各种风险。</p><p>接下来还要对刚刚启用的 Bot 进行进一步的配置：允许 Bot 读取非指令信息、允许将 Bot 添加进群组、以及提供指令列表。</p><ul><li>发送 /setprivacy 到 @BotFather，选择刚刚创建好的 Bot 用户名，然后选择 “Disable”.</li><li>发送 /setjoingroups 到 @BotFather，选择刚刚创建好的 Bot 用户名，然后选择 “Enable”.</li><li>发送 /setcommands 到 @BotFather，选择刚刚创建好的 Bot 用户名，然后发送如下内容：</li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">link - 将会话绑定到 Telegram 群组</span><br><span class="line">chat - 生成会话头</span><br><span class="line">recog - 回复语音消息以进行识别</span><br><span class="line">extra - 获取更多功能</span><br></pre></td></tr></tbody></table></figure><p>然后还需要获取你自己的 Telegram ID，ID 应显示为一串数字。获取你自己的 ID 有很多方式，你可以选择任意一种。下面介绍两种可能的方式。</p><ul><li>Plus Messenger如果你使用了 Plus Messenger 作为你的 Telegram 客户端，你可以直接打开你自己的资料页，在「自己」下面会显示你的 ID。</li><li>通过 Bot 查询</li></ul><p>很多现存的 Bot 也提供了 ID 查询服务，直接向其发送特定的指令即可获得自己的数字 ID。在这里介绍一些接触过的。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@get_id_bot 发送 /start</span><br><span class="line">@mokubot 发送 /whoami</span><br><span class="line">@GroupButler_Bot 发送 /id</span><br><span class="line">@jackbot 发送 /me</span><br><span class="line">@userinfobot 发送任意文字</span><br><span class="line">@orzdigbot 发送 /user</span><br></pre></td></tr></tbody></table></figure><h3 id="4-2-配置-EFB-和-Telegram-主端"><a href="#4-2-配置-EFB-和-Telegram-主端" class="headerlink" title="4.2 配置 EFB 和 Telegram 主端"></a>4.2 配置 EFB 和 Telegram 主端</h3><p>这差不多就是安装过程的最后一步了。首先创建存储用文件夹并赋予其权限。回到 VPS 上 ehForwarderBot 目录。（不出意外的话你应该还在这个目录）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir storage</span><br><span class="line">chmod 777 storage</span><br></pre></td></tr></tbody></table></figure><p>然后复制并编辑配置文件。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cp config.sample.py config.py</span><br><span class="line">editor config.py</span><br><span class="line"># 其中 editor 是你所喜欢的文本编辑器，比如 vim 则 vim config.py</span><br></pre></td></tr></tbody></table></figure><p>在配置文件中，token 后引号里面的内容替换为你之前获得的 Bot 密钥，admins 后方括号里面填入你自己的 Telegram ID。后面的 6 行是用来配置语音转文字功能的，不是必要功能，目前可以删除各行。如果有兴趣启用该功能的，请到各平台申请 API keys。详情请参见文档 的「ETM」章节。</p><hr><blockquote><p>参考：<a href="https://www.ishare.work/在centos-7下安装并使用-efb：在-telegram-收发微信消息/" target="_blank" rel="noopener">https://www.ishare.work/在centos-7下安装并使用-efb：在-telegram-收发微信消息/</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;发代号 EH Forwarder Bot（简称 EFB）是一个可扩展的聊天平台隧道框架，基于 Python 3。目前已内置了 Telegram 主端 (Master Channel) 和微信从端 (Slave Channel)，用来在 Telegram 收发微信消息。其他从端开发已在计划之中。同时 EFB 也配备了详尽的文档，欢迎有兴趣的朋友们开发自己的主端或从端，来支持更多的平台。EFB &lt;a href=&quot;https://github.com/blueset/ehforwarderbot&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;在 GitHub 中开放了源代码&lt;/a&gt;，并且&lt;a href=&quot;https://ehforwarderbot.readthedocs.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;在 Read The Docs 平台上发布的开发文档&lt;/a&gt;（英文，&lt;code&gt;en-US&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;本文主要介绍了如何在一个虚拟服务器 (VPS) 中安装并配置 EFB、Telegram 主端和微信从端，以及如何使用 Telegram 主端来收发微信消息。&lt;/p&gt;
    
    </summary>
    
    
      <category term="搭建" scheme="http://blog.iwxyi.com/categories/%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="服务器" scheme="http://blog.iwxyi.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>CSS样式表大全</title>
    <link href="http://blog.iwxyi.com/2019/04/24/CSS%E6%A0%B7%E5%BC%8F%E8%A1%A8%E5%A4%A7%E5%85%A8/"/>
    <id>http://blog.iwxyi.com/2019/04/24/CSS样式表大全/</id>
    <published>2019-04-24T05:02:00.000Z</published>
    <updated>2019-10-13T06:08:25.083Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、CSS文字属性："><a href="#一、CSS文字属性：" class="headerlink" title="一、CSS文字属性："></a>一、CSS文字属性：</h2><ul><li>color : #999999; /<em>文字颜色</em>/</li><li>font-family : 宋体,sans-serif; /<em>文字字体</em>/</li><li>font-size : 9pt; /<em>文字大小</em>/</li><li>font-style:itelic; /<em>文字斜体</em>/<a id="more"></a></li><li>font-variant:small-caps; /<em>小字体</em>/</li><li>letter-spacing : 1pt; /<em>字间距离</em>/</li><li>line-height : 200%; /<em>设置行高</em>/</li><li>font-weight:bold; /<em>文字粗体</em>/</li><li>vertical-align:sub; /<em>下标字</em>/</li><li>vertical-align:super; /<em>上标字</em>/</li><li>text-decoration:line-through; /<em>加删除线</em>/</li><li>text-decoration: overline; /<em>加顶线</em>/</li><li>text-decoration:underline; /<em>加下划线</em>/</li><li>text-decoration:none; /<em>删除链接下划线</em>/</li><li>text-transform : capitalize; /<em>首字大写</em>/</li><li>text-transform : uppercase; /<em>英文大写</em>/</li><li>text-transform : lowercase; /<em>英文小写</em>/</li><li>text-align:right; /<em>文字右对齐</em>/  </li><li>text-align:left; /<em>文字左对齐</em>/</li><li>text-align:center; /<em>文字居中对齐</em>/</li><li>text-align:justify; /<em>文字分散对齐</em>/</li><li>vertical-align属性</li><li>vertical-align:top; /<em>垂直向上对齐</em>/</li><li>vertical-align:bottom; /<em>垂直向下对齐</em>/</li><li>vertical-align:middle; /<em>垂直居中对齐</em>/</li><li>vertical-align:text-top; /<em>文字垂直向上对齐</em>/</li><li>vertical-align:text-bottom; /<em>文字垂直向下对齐</em>/</li></ul><h2 id="二、CSS边框空白"><a href="#二、CSS边框空白" class="headerlink" title="二、CSS边框空白"></a>二、CSS边框空白</h2><ul><li>padding-top:10px; /<em>上边框留空白</em>/</li><li>padding-right:10px; /<em>右边框留空白</em>/</li><li>padding-bottom:10px; /<em>下边框留空白</em>/</li><li>padding-left:10px; /*左边框留空白</li></ul><h2 id="三、CSS符号属性"><a href="#三、CSS符号属性" class="headerlink" title="三、CSS符号属性"></a>三、CSS符号属性</h2><ul><li>list-style-type:none; /<em>不编号</em>/</li><li>list-style-type:decimal; /<em>阿拉伯数字</em>/</li><li>list-style-type:lower-roman; /<em>小写罗马数字</em>/</li><li>list-style-type:upper-roman; /<em>大写罗马数字</em>/</li><li>list-style-type:lower-alpha; /<em>小写英文字母</em>/</li><li>list-style-type:upper-alpha; /<em>大写英文字母</em>/</li><li>list-style-type:disc; /<em>实心圆形符号</em>/</li><li>list-style-type:circle; /<em>空心圆形符号</em>/</li><li>list-style-type:square; /<em>实心方形符号</em>/</li><li>list-style-image:url(/dot.gif); /<em>图片式符号</em>/</li><li>list-style-position: outside; /<em>凸排</em>/</li><li>list-style-position:inside; /<em>缩进</em>/</li></ul><h2 id="四、CSS背景样式"><a href="#四、CSS背景样式" class="headerlink" title="四、CSS背景样式"></a>四、CSS背景样式</h2><ul><li>background-color:#F5E2EC; /<em>背景颜色</em>/  </li><li>background:transparent; /<em>透视背景</em>/</li><li>background-image : url(/image/bg.gif); /<em>背景图片</em>/</li><li>background-attachment : fixed; /<em>浮水印固定背景</em>/</li><li>background-repeat : repeat; /<em>重复排列-网页默认</em>/</li><li>background-repeat : no-repeat; /<em>不重复排列</em>/</li><li>background-repeat : repeat-x; /<em>在x轴重复排列</em>/</li><li>background-repeat : repeat-y; /<em>在y轴重复排列</em>/</li></ul><p>指定背景位置</p><ul><li>background-position : 90% 90%; /<em>背景图片x与y轴的位置</em>/</li><li>background-position : top; /<em>向上对齐</em>/</li><li>background-position : buttom; /<em>向下对齐</em>/</li><li>background-position : left; /<em>向左对齐</em>/</li><li>background-position : right; /<em>向右对齐</em>/</li><li>background-position : center; /<em>居中对齐</em>/</li></ul><h2 id="五、CSS连接属性"><a href="#五、CSS连接属性" class="headerlink" title="五、CSS连接属性"></a>五、CSS连接属性</h2><ul><li>a /<em>所有超链接</em>/</li><li>a:link /<em>超链接文字格式</em>/  </li><li>a:visited /<em>浏览过的链接文字格式</em>/</li><li>a:active /<em>按下链接的格式</em>/</li><li>a:hover /<em>鼠标转到链接</em>/</li></ul><p>鼠标光标样式：</p><ul><li>链接手指 CURSOR: hand</li><li>十字体 cursor:crosshair</li><li>箭头朝下 cursor:s-resize</li><li>十字箭头 cursor:move</li><li>箭头朝右 cursor:move</li><li>加一问号 cursor:help</li><li>箭头朝左 cursor:w-resize</li><li>箭头朝上 cursor:n-resize</li><li>箭头朝右上 cursor:ne-resize</li><li>箭头朝左上 cursor:nw-resize</li><li>文字I型 cursor:text</li><li>箭头斜右下 cursor:se-resize</li><li>箭头斜左下 cursor:sw-resize</li><li>漏斗 cursor:wait</li><li>光标图案(IE6)   p {cursor:url(“光标文件名.cur”),text;}</li></ul><h2 id="六、CSS框线一览表"><a href="#六、CSS框线一览表" class="headerlink" title="六、CSS框线一览表"></a>六、CSS框线一览表</h2><ul><li>border-top : 1px solid #6699cc; /<em>上框线</em>/</li><li>border-bottom : 1px solid #6699cc; /<em>下框线</em>/</li><li>border-left : 1px solid #6699cc; /<em>左框线</em>/  </li><li>border-right : 1px solid #6699cc; /<em>右框线</em>/</li></ul><p>以上是建议书写方式,但也可以使用常规的方式 如下:</p><ul><li>border-top-color : #369 /<em>设置上框线top颜色</em>/</li><li>border-top-width :1px /<em>设置上框线top宽度</em>/</li><li>border-top-style : solid/<em>设置上框线top样式</em>/</li></ul><p>其他框线样式</p><ul><li>solid /<em>实线框</em>/</li><li>dotted /<em>虚线框</em>/</li><li>double /<em>双线框</em>/</li><li>groove /<em>立体内凸框</em>/</li><li>ridge /<em>立体浮雕框</em>/</li><li>inset /<em>凹框</em>/</li><li>outset /<em>凸框</em>/</li></ul><h2 id="七、CSS表单运用"><a href="#七、CSS表单运用" class="headerlink" title="七、CSS表单运用"></a>七、CSS表单运用</h2><ul><li>文字方块  </li><li>按钮  </li><li>复选框  </li><li>选择钮  </li><li>多行文字方块  </li><li>下拉式菜单 选项1选项2</li></ul><h2 id="八、CSS边界样式"><a href="#八、CSS边界样式" class="headerlink" title="八、CSS边界样式"></a>八、CSS边界样式</h2><ul><li>margin-top:10px; /<em>上边界</em>/</li><li>margin-right:10px; /<em>右边界值</em>/</li><li>margin-bottom:10px; /<em>下边界值</em>/</li><li>margin-left:10px; /<em>左边界值</em>/</li></ul><h2 id="九、CSS滤镜属性"><a href="#九、CSS滤镜属性" class="headerlink" title="九、CSS滤镜属性"></a>九、CSS滤镜属性</h2><p>Filter：在样式中加上滤镜特效。由于此属性内容比较多，我们将到下一章单独对滤镜介绍。</p><ol><li><p>Alpha：设置透明度<br>Alpha(Opacity=?, FinishOpacity=?, Style=?, StartX=?, StartY=?, FinishX=?, FinishY=?)<br>Opacity：透明度级别，范围是0-100，0代表完全透明，100代表完全不透明。FinishOpacity：设置渐变的透明效果时，用来指定结束时的透明度，范围也是0 到 100。Style：设置渐变透明的样式，值为0代表统一形状、1代表线形、2代表放射状、3代表长方形。StartX和StartY：代表渐变透明效果的开始X和Y坐标。 FinishX和FinishY：代表渐变透明效果结束X和Y 的坐标。 </p></li><li><p>BlendTrans：图像之间的淡入和淡出的效果<br>BlendTrans(Duration=?) Duration：淡入或淡出的时间。注意：这个滤镜必须配合JS建立图片序列，才能做出图片间效果。</p></li><li><p>Blru：建立模糊效果<br>Blur(Add=?, Direction=?, Strength=?) Add：是否单方向模糊，此参数是一个布尔值，true（非0）或false（0）。 Direction：设置模糊的方向，其中0度代表垂直向上，然后每45度为一个单位。 Strength：代表模糊的象素值。 </p></li><li><p>Chroma：把指定的颜色设置为透明<br>Chroma(Color=?) Color：是指要设置为透明的颜色。</p></li><li><p>DropShadow：建立阴影效果<br>DropShadow(Color=?, OffX=?, OffY=?, Positive=?) Color：指定阴影的颜色。OffX：指定阴影相对于元素在水平方向偏移量，整数。 OffY：指定阴影相对于元素在垂直方向偏移量，整数。 Positive：是一个布尔值，值为true（非0）时，表示为建立外阴影；为false(0)，表示为建立内阴影。 </p></li><li><p>FlipH：将元素水平反转 </p></li><li><p>FlipV：将元素垂直反转<br>8.Glow：建立外发光效效果<br>Glow(Color=?, Strength=?)<br>Color：是指定发光的颜色。<br>Strength：光的强度，可以是1到255之间的任何整数，数字越大，发光的范围就越大。</p></li><li><p>Gray：去掉图像的色彩，显示为黑白图象 </p></li><li><p>Invert：反转图象的颜色，产生类似底片的效果 </p></li><li><p>Light：放置光源的效果，可以用来模拟光源在物体上的投影效果 注意：此效果需要用JS设置光的位置和强度。</p></li><li><p>Mask：建立透明遮罩<br>Mask(Color=?) Color：设置底色，让对象遮住底色的部分透明。</p></li><li><p>RevealTrans：建立切换效果<br>RevealTrans(Duration=?, Transition=?)<br>Duration：是切换时间，以秒为单位。<br>Transtition：是切换方式，可设置为从0到23。<br>注意：如果做页面间的切换效果，可以在<code>&lt;head&gt;</code>区加上一行代码：<code>&lt;Meta http-equiv=Page-enter content=revealTrans(Transition=?,Duration=?) &gt;</code>。如果用在页面里的元素必须配合JS使用。</p></li><li><p>Shadow：建立另一种阴影效果 Shadow(Color=?, Direction=?) Color：是指阴影的颜色。<br>Direction：是设置投影的方向，0度代表垂直向上，然后每45度为一个单位。 </p></li><li><p>Wave：波纹效果<br>Wave(Add=?, Freq=?, LightStrength=?, Phase=?, Strength=?) Add：表示是否显示原对象，0表示不显示，非0表示要显示原对象。 Freq：设置波动的个数。LightStrength：设置波浪效果的光照强度，从0到100。0表示最弱，100表示最强。 Phase：波浪的起始相角。从0到100的百分数值。（例如：25相当于90度，而50相当于180度。） Strength：设置波浪摇摆的幅度。 </p></li><li><p>Xray：显现图片的轮廓，X光片效果<br>注意：在使用CSS滤镜时，必须使用在有区域的元素，比如表格，图片等。而文本，段落这样没有区域的元素不能使用CSS滤镜，对这样的元素我们可以设置元素的Height和Width样式或坐标来实现。</p></li></ol><h1 id="样式大全"><a href="#样式大全" class="headerlink" title="样式大全"></a>样式大全</h1><h2 id="字体属性：-font"><a href="#字体属性：-font" class="headerlink" title="字体属性：(font)"></a>字体属性：(font)</h2><ul><li><p>大小 {font-size: x-large;}(特大) xx-small;(极小) 一般中文用不到，只要用数值就可以，单位：PX、PD</p></li><li><p>样式 {font-style: oblique;}(偏斜体) italic;(斜体) normal;(正常)</p></li><li><p>行高 {line-height: normal;}(正常) 单位：PX、PD、EM</p></li><li><p>粗细 {font-weight: bold;}(粗体) lighter;(细体) normal;(正常)</p></li><li><p>变体 {font-variant: small-caps;}(小型大写字母) normal;(正常)</p></li><li><p>大小写 {text-transform: capitalize;}(首字母大写) uppercase;(大写) lowercase;(小写) none;(无)</p></li><li><p>修饰 {text-decoration: underline;}(下划线) overline;(上划线) line-through;(删除线) blink;(闪烁)</p></li><li><p>常用字体： (font-family)<br>“Courier New”, Courier, monospace, “Times New Roman”, Times, serif, Arial, Helvetica, sans-serif, Verdana</p></li></ul><h2 id="背景属性：-background"><a href="#背景属性：-background" class="headerlink" title="背景属性： (background)"></a>背景属性： (background)</h2><ul><li><p>色彩 {background-color: #FFFFFF;}</p></li><li><p>图片 {background-image: url();}</p></li><li><p>重复 {background-repeat: no-repeat;}</p></li><li><p>滚动 {background-attachment: fixed;}(固定) scroll;(滚动)</p></li><li><p>位置 {background-position: left;}(水平) top(垂直);</p></li><li><p>简写方法 {background:#000 url(..) repeat fixed left top;} /<em>简写·这个在阅读代码中经常出现，要认真的研究</em>/</p></li><li><p>区块属性： (Block) /<em>这个属性第一次认识，要多多研究</em>/</p></li><li><p>字间距 {letter-spacing: normal;} 数值 /<em>这个属性似乎有用，多实践下</em>/</p></li><li><p>对齐 {text-align: justify;}(两端对齐) left;(左对齐) right;(右对齐) center;(居中)</p></li><li><p>缩进 {text-indent: 数值px;}</p></li><li><p>垂直对齐 {vertical-align: baseline;}(基线) sub;(下标) super;(下标) top; text-top; middle; bottom; text-bottom;</p></li><li><p>词间距word-spacing: normal; 数值</p></li><li><p>空格white-space: pre;(保留) nowrap;(不换行)</p></li><li><p>显示 {display:block;}(块) inline;(内嵌) list-item;(列表项) run-in;(追加部分) compact;(紧凑) marker;(标记) table; inline-table; table-raw-group; table-header-group; table-footer-group; table-raw; table-column-group; table-column; table-cell; table-caption;(表格标题) /<em>display 属性的了解很模糊</em>/</p></li></ul><h2 id="方框属性：-Box"><a href="#方框属性：-Box" class="headerlink" title="方框属性： (Box)"></a>方框属性： (Box)</h2><ul><li>width:</li><li>height:</li><li>float:</li><li>clear:both; </li><li>margin:</li><li>padding:</li><li>顺序：上右下左</li></ul><h2 id="边框属性：-Border"><a href="#边框属性：-Border" class="headerlink" title="边框属性： (Border)"></a>边框属性： (Border)</h2><ul><li><p>border-style: dotted;(点线) dashed;(虚线) solid; double;(双线) groove;(槽线) ridge;(脊状) inset;(凹陷) outset;</p></li><li><p>border-width:; 边框宽度</p></li><li><p>border-color:#;</p></li><li><p>简写方法border：width style color; /<em>简写</em>/</p></li></ul><h2 id="列表属性：-List-style"><a href="#列表属性：-List-style" class="headerlink" title="列表属性： (List-style)"></a>列表属性： (List-style)</h2><ul><li><p>类型list-style-type: disc;(圆点) circle;(圆圈) square;(方块) decimal;(数字) lower-roman;(小罗码数字) upper-roman; lower-alpha; upper-alpha;</p></li><li><p>位置list-style-position: outside;(外) inside;</p></li><li><p>图像list-style-image: url(..);</p></li></ul><h2 id="定位属性：-Position"><a href="#定位属性：-Position" class="headerlink" title="定位属性： (Position)"></a>定位属性： (Position)</h2><ul><li><p>Position: absolute; relative; static;</p></li><li><p>visibility: inherit; visible; hidden;</p></li><li><p>overflow: visible; hidden; scroll; auto;</p></li><li><p>clip: rect(12px,auto,12px,auto) (裁切)</p></li></ul><h1 id="css属性代码大全"><a href="#css属性代码大全" class="headerlink" title="css属性代码大全"></a>css属性代码大全</h1><h2 id="字体样式-Font-Style"><a href="#字体样式-Font-Style" class="headerlink" title="字体样式(Font Style)"></a>字体样式(Font Style)</h2><p>序号 中文说明 标记语法</p><ol><li><p>字体样式 {font:font-style font-variant font-weight font-size font-family}</p></li><li><p>字体类型 {font-family:”字体1”,”字体2”,”字体3”,…}</p></li><li><p>字体大小 {font-size:数值|inherit| medium| large| larger| x-large| xx-large| small| smaller| x-small| xx-small}</p></li><li><p>字体风格 {font-style:inherit|italic|normal|oblique}</p></li><li><p>字体粗细 {font-weight:100-900|bold|bolder|lighter|normal;}</p></li><li><p>字体颜色 {color:数值;}</p></li><li><p>阴影颜色 {text-shadow:16位色值}</p></li><li><p>字体行高 {line-height:数值|inherit|normal;}</p></li><li><p>字 间 距 {letter-spacing:数值|inherit|normal}</p></li><li><p>单词间距 {word-spacing:数值|inherit|normal}</p></li><li><p>字体变形 {font-variant:inherit|normal|small-cps }</p></li><li><p>英文转换 {text-transform:inherit|none|capitalize|uppercase|lowercase}</p></li><li><p>字体变形 {font-size-adjust:inherit|none}</p></li><li><p>字体 {font-stretch:condensed|expanded|extra-condensed|extra-expanded|inherit|narrower|normal| semi-condensed|semi-expanded|ultra-condensed|ultra-expanded|wider}</p></li></ol><h2 id="文本样式-Text-Style"><a href="#文本样式-Text-Style" class="headerlink" title="文本样式(Text Style)"></a>文本样式(Text Style)</h2><p>序号 中文说明 标记语法</p><ol><li><p>行 间 距 {line-height:数值|inherit|normal;}</p></li><li><p>文本修饰 {text-decoration:inherit|none|underline|overline|line-through|blink}</p></li><li><p>段首空格 {text-indent:数值|inherit}</p></li><li><p>水平对齐 {text-align:left|right|center|justify}</p></li><li><p>垂直对齐 {vertical-align:inherit|top|bottom|text-top|text-bottom|baseline|middle|sub|super}</p></li><li><p>书写方式 {writing-mode:lr-tb|tb-rl}</p></li></ol><h2 id="背景样式"><a href="#背景样式" class="headerlink" title="背景样式"></a>背景样式</h2><p>序号 中文说明 标记语法</p><ol><li><p>背景颜色 {background-color:数值}</p></li><li><p>背景图片 {background-image: url(URL)|none}</p></li><li><p>背景重复 {background-repeat:inherit|no-repeat|repeat|repeat-x|repeat-y}</p></li><li><p>背景固定 {background-attachment:fixed|scroll}</p></li><li><p>背景定位 {background-position:数值|top|bottom|left|right|center}</p></li><li><p>背影样式 {background:背景颜色|背景图象|背景重复|背景附件|背景位置}</p></li></ol><h2 id="框架样式-Box-Style"><a href="#框架样式-Box-Style" class="headerlink" title="框架样式(Box Style)"></a>框架样式(Box Style)</h2><p>序号 中文说明 标记语法</p><ol><li><p>边界留白 {margin:margin-top margin-right margin-bottom margin-left}</p></li><li><p>补　　白 {padding:padding-top padding-right padding-bottom padding-left}</p></li><li><p>边框宽度 {border-width:border-top-width border-right-width border-bottom-width border-left-width}　　<br>宽度值： thin|medium|thick|数值</p></li><li><p>边框颜色 {border-color:数值 数值 数值 数值}　　数值：分别代表top、right、bottom、left颜色值</p></li><li><p>边框风格 {border-style:none|hidden|inherit|dashed|solid|double|inset|outset|ridge|groove}</p></li><li><p>边　　框 {border:border-width border-style color}<br>上 边 框 {border-top:border-top-width border-style color}<br>右 边 框 {border-right:border-right-width border-style color}<br>下 边 框 {border-bottom:border-bottom-width border-style color}<br>左 边 框 {border-left:border-left-width border-style color}</p></li><li><p>宽　　度 {width:长度|百分比| auto}</p></li><li><p>高　　度 {height:数值|auto}</p></li><li><p>漂　　浮 {float:left|right|none}</p></li><li><p>清　　除 {clear:none|left|right|both}</p></li></ol><h2 id="分类列表"><a href="#分类列表" class="headerlink" title="分类列表"></a>分类列表</h2><p>序号 中文说明 标记语法</p><ol><li><p>控制显示 {display:none|block|inline|list-item}</p></li><li><p>控制空白 {white-space:normal|pre|nowarp}</p></li><li><p>符号列表 {list-style-type:disc|circle|square|decimal|lower-roman|upper-roman|lower-alpha|upper-alpha|none}</p></li><li><p>图形列表 {list-style-image:URL}</p></li><li><p>位置列表 {list-style-position:inside|outside}</p></li><li><p>目录列表 {list-style:目录样式类型|目录样式位置|url}</p></li><li><p>鼠标形状 {cursor:hand|crosshair|text|wait|move|help|e-resize|nw-resize|w-resize|s-resize|se-resize|sw-resize}</p></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、CSS文字属性：&quot;&gt;&lt;a href=&quot;#一、CSS文字属性：&quot; class=&quot;headerlink&quot; title=&quot;一、CSS文字属性：&quot;&gt;&lt;/a&gt;一、CSS文字属性：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;color : #999999; /&lt;em&gt;文字颜色&lt;/em&gt;/&lt;/li&gt;
&lt;li&gt;font-family : 宋体,sans-serif; /&lt;em&gt;文字字体&lt;/em&gt;/&lt;/li&gt;
&lt;li&gt;font-size : 9pt; /&lt;em&gt;文字大小&lt;/em&gt;/&lt;/li&gt;
&lt;li&gt;font-style:itelic; /&lt;em&gt;文字斜体&lt;/em&gt;/&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="整理" scheme="http://blog.iwxyi.com/tags/%E6%95%B4%E7%90%86/"/>
    
      <category term="CSS" scheme="http://blog.iwxyi.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>PHP时间戳转易读性文本</title>
    <link href="http://blog.iwxyi.com/2019/04/20/PHP%E6%97%B6%E9%97%B4%E6%88%B3%E8%BD%AC%E6%98%93%E8%AF%BB%E6%80%A7%E6%96%87%E6%9C%AC/"/>
    <id>http://blog.iwxyi.com/2019/04/20/PHP时间戳转易读性文本/</id>
    <published>2019-04-20T08:13:00.000Z</published>
    <updated>2019-10-13T08:15:54.360Z</updated>
    
    <content type="html"><![CDATA[<p>将两个时间戳的差（秒）转化成字符串</p><p>比如“x分钟前”、“x小时前”</p><a id="more"></a><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 时间转换易读的文字</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span>   technofiend&lt;2281551151<span class="doctag">@qq</span>.com&gt;</span></span><br><span class="line"><span class="comment">* https://blog.csdn.net/technofiend/article/details/78627161</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">time2Readability</span><span class="params">($time, $contrastTime = <span class="number">0</span>)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> ($contrastTime &lt;= <span class="number">0</span>) {</span><br><span class="line">        $contrastTime = time();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ($time &lt;= <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'未知'</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 非今年发布的时间</span></span><br><span class="line">    <span class="keyword">if</span> (date(<span class="string">'Y'</span>, $time) != date(<span class="string">'Y'</span>, $contrastTime)) {</span><br><span class="line">        <span class="keyword">return</span> date(<span class="string">'Y-m-d H:i:s'</span>, $time);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发布时间的零点</span></span><br><span class="line">    $dateTime1  = <span class="keyword">new</span> \DateTime();</span><br><span class="line">    $dateTime1-&gt;setTimestamp($time);</span><br><span class="line">    $dateTime1-&gt;setTime(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    $time1      = $dateTime1-&gt;getTimestamp();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 今天的零点</span></span><br><span class="line">    $todayObj   = <span class="keyword">new</span> \DateTime();</span><br><span class="line">    $todayObj-&gt;setTimestamp($contrastTime);</span><br><span class="line">    $todayObj-&gt;setTime(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    $today      = $todayObj-&gt;getTimestamp();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 距离发表时间的秒数</span></span><br><span class="line">    $elapseTime = $contrastTime - $time;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发表时间等于今天</span></span><br><span class="line">    <span class="keyword">if</span> ($time1 == $today) {</span><br><span class="line">        <span class="comment">// 今天发表的</span></span><br><span class="line">        <span class="keyword">if</span> ($elapseTime &lt;= <span class="number">5</span> * <span class="number">60</span>) {</span><br><span class="line">            <span class="comment">// 5分钟内</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">'刚刚'</span>;</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> ($elapseTime &lt;= <span class="number">60</span> * <span class="number">60</span>) {</span><br><span class="line">            <span class="comment">// 一个钟头内</span></span><br><span class="line">            <span class="keyword">return</span> floor($elapseTime / <span class="number">60</span>) . <span class="string">' 分钟前'</span>;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">return</span> floor($elapseTime / (<span class="number">60</span> * <span class="number">60</span>)) . <span class="string">' 小时前'</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    $dateTime3 = <span class="keyword">new</span> \DateTime();</span><br><span class="line">    $dateTime3-&gt;setTimestamp($contrastTime);</span><br><span class="line">    $dateTime3-&gt;modify(<span class="string">'-1 day'</span>);</span><br><span class="line">    $dateTime3-&gt;setTime(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    $yesterday = $dateTime3-&gt;getTimestamp();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发表时间等于昨天</span></span><br><span class="line">    <span class="keyword">if</span> ($time1 == $yesterday) {</span><br><span class="line">        <span class="keyword">if</span> (($contrastTime - <span class="number">6</span> * <span class="number">60</span> * <span class="number">60</span>) &lt; $today) {</span><br><span class="line">            <span class="comment">// 如果当前时间是凌晨</span></span><br><span class="line">            $hourBefore = floor($elapseTime / (<span class="number">60</span> * <span class="number">60</span>));</span><br><span class="line">            <span class="keyword">if</span> ($hourBefore &lt;= <span class="number">9</span>) {</span><br><span class="line">                <span class="keyword">return</span> $hourBefore . <span class="string">' 小时前'</span>;</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="keyword">return</span> <span class="string">'昨天：'</span> . date(<span class="string">'H:i'</span>, $time);</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'昨天：'</span> . date(<span class="string">'H:i'</span>, $time);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> date(<span class="string">'m-d H:i:s'</span>, $time);</span><br><span class="line">}</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$today = <span class="keyword">new</span> DateTime();</span><br><span class="line">$today-&gt;setTime(<span class="number">23</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">$t     = <span class="keyword">new</span> DateTime();</span><br><span class="line">$t-&gt;modify(<span class="string">'-1 year -1 day'</span>);</span><br><span class="line">$t-&gt;setTime(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> time2Readability($t-&gt;getTimestamp(), $today-&gt;getTimestamp());</span><br></pre></td></tr></tbody></table></figure><hr><blockquote><p>参考：<a href="https://blog.csdn.net/technofiend/article/details/78627161" target="_blank" rel="noopener">https://blog.csdn.net/technofiend/article/details/78627161</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;将两个时间戳的差（秒）转化成字符串&lt;/p&gt;
&lt;p&gt;比如“x分钟前”、“x小时前”&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="PHP" scheme="http://blog.iwxyi.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>HTML表单即将提交事件</title>
    <link href="http://blog.iwxyi.com/2019/04/20/HTML%E8%A1%A8%E5%8D%95%E5%8D%B3%E5%B0%86%E6%8F%90%E4%BA%A4%E4%BA%8B%E4%BB%B6/"/>
    <id>http://blog.iwxyi.com/2019/04/20/HTML表单即将提交事件/</id>
    <published>2019-04-20T05:06:00.000Z</published>
    <updated>2019-10-13T05:07:32.700Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"insert.php"</span> <span class="attr">onsubmit</span>=<span class="string">"return onSubmit()"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"title"</span> <span class="attr">id</span>=<span class="string">"title"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">onSubmit</span><span class="params">()</span></span></span></span><br><span class="line">    {</span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> ( $(<span class="string">"#title"</span>).val(); == <span class="string">""</span> ) {</span></span><br><span class="line"><span class="actionscript">            alert(<span class="string">"请输入标题"</span>);</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> <span class="literal">true</span>;</span></span><br><span class="line">    }</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span
      
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="JS" scheme="http://blog.iwxyi.com/tags/JS/"/>
    
      <category term="HTML" scheme="http://blog.iwxyi.com/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>CSS圆角头像</title>
    <link href="http://blog.iwxyi.com/2019/04/20/CSS%E5%9C%86%E8%A7%92%E5%A4%B4%E5%83%8F/"/>
    <id>http://blog.iwxyi.com/2019/04/20/CSS圆角头像/</id>
    <published>2019-04-20T04:58:00.000Z</published>
    <updated>2019-10-13T04:59:11.145Z</updated>
    
    <content type="html"><![CDATA[<p>CSS:</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.round_icon</span>{</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">34px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">34px</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><p>HTML:</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/what_ever.jpg"</span> <span class="attr">class</span>=<span class="string">"round_icon"</span> /&gt;</span></span><br></pre></td></tr></tbody></table></figure><hr><blockquote><p>参考：<a href="https://blog.csdn.net/s1674521/article/details/79731141" target="_blank" rel="noopener">https://blog.csdn.net/s1674521/article/details/79731141</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CSS:&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.round_icon&lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;34px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;34px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;: flex;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;border-radius&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;50%&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;align-items&lt;/span&gt;: center;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;justify-content&lt;/span&gt;: center;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;overflow&lt;/span&gt;: hidden;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="CSS" scheme="http://blog.iwxyi.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>C++ new和malloc的10点区别</title>
    <link href="http://blog.iwxyi.com/2019/04/18/C-new%E5%92%8Cmalloc%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://blog.iwxyi.com/2019/04/18/C-new和malloc的区别/</id>
    <published>2019-04-18T00:27:00.000Z</published>
    <updated>2019-10-13T01:59:55.873Z</updated>
    
    <content type="html"><![CDATA[## 1. 申请的内存所在位置<p>new操作符从<strong>自由存储区（free store）</strong>上为对象动态分配内存空间，而malloc函数从<strong>堆</strong>上动态分配内存。自由存储区是C++基于new操作符的一个抽象概念，凡是通过new操作符进行内存申请，该内存即为自由存储区。而堆是操作系统中的术语，是操作系统所维护的一块特殊内存，用于程序的内存动态分配，C语言使用malloc从堆上分配内存，使用free释放已分配的对应内存。</p><a id="more"></a><p>那么自由存储区是否能够是堆（问题等价于new是否能在堆上动态分配内存），这取决于operator new 的实现细节。自由存储区不仅可以是堆，还可以是静态存储区，这都看operator new在哪里为对象分配内存。</p><p>特别的，new甚至可以不为对象分配内存！<strong>定位new</strong>的功能可以办到这一点：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> (place_address) type</span><br></pre></td></tr></tbody></table></figure><p>place_address为一个指针，代表一块内存的地址。当使用上面这种仅以一个地址调用new操作符时，new操作符调用特殊的operator new，也就是下面这个版本：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> * <span class="keyword">operator</span> <span class="title">new</span> <span class="params">(<span class="keyword">size_t</span>,<span class="keyword">void</span> *)</span> <span class="comment">//不允许重定义这个版本的operator new</span></span></span><br></pre></td></tr></tbody></table></figure><p>这个operator new<strong>不分配任何的内存</strong>，它只是简单地返回指针实参，然后右new表达式负责在place_address指定的地址进行对象的初始化工作。</p><h2 id="2-返回类型安全性"><a href="#2-返回类型安全性" class="headerlink" title="2.返回类型安全性"></a>2.返回类型安全性</h2><p>new操作符内存分配成功时，返回的是对象类型的指针，类型严格与对象匹配，无须进行类型转换，故new是符合<strong>类型安全</strong>性的操作符。而malloc内存分配成功则是返回void * ，需要通过强制类型转换将void*指针转换成我们需要的类型。<br>类型安全很大程度上可以等价于内存安全，类型安全的代码不会试图方法自己没被授权的内存区域。关于C++的类型安全性可说的又有很多了。</p><h2 id="3-内存分配失败时的返回值"><a href="#3-内存分配失败时的返回值" class="headerlink" title="3.内存分配失败时的返回值"></a>3.内存分配失败时的返回值</h2><p>new内存分配失败时，会抛出bac_alloc异常，它<strong>不会返回NULL</strong>；malloc分配内存失败时返回NULL。<br>在使用C语言时，我们习惯在malloc分配内存后判断分配是否成功：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *a  = (<span class="keyword">int</span> *)<span class="built_in">malloc</span> ( <span class="keyword">sizeof</span> (<span class="keyword">int</span> ));</span><br><span class="line"><span class="keyword">if</span>(<span class="literal">NULL</span> == a)</span><br><span class="line">{</span><br><span class="line">    ...</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">{</span><br><span class="line">    ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>从C语言走入C++阵营的新手可能会把这个习惯带入C++：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> * a = <span class="keyword">new</span> <span class="keyword">int</span>();</span><br><span class="line"><span class="keyword">if</span>(<span class="literal">NULL</span> == a)</span><br><span class="line">{</span><br><span class="line">    ...</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{   </span><br><span class="line">    ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>实际上这样做<strong>一点意义也没有</strong>，因为new根本不会返回NULL，而且程序能够执行到if语句已经说明内存分配成功了，如果失败早就抛异常了。正确的做法应该是使用异常机制：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">int</span> *a = <span class="keyword">new</span> <span class="keyword">int</span>();</span><br><span class="line">}</span><br><span class="line"><span class="keyword">catch</span> (bad_alloc)</span><br><span class="line">{</span><br><span class="line">    ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>如果你想顺便了解下异常基础，可以看<a href="http://www.cnblogs.com/QG-whz/p/5136883.htmlC++" target="_blank" rel="noopener">http://www.cnblogs.com/QG-whz/p/5136883.htmlC++</a> 异常机制分析。</p><h2 id="4-是否需要指定内存大小"><a href="#4-是否需要指定内存大小" class="headerlink" title="4.是否需要指定内存大小"></a>4.是否需要指定内存大小</h2><p>使用new操作符申请内存分配时无须指定内存块的大小，编译器会根据类型信息自行计算，而malloc则需要显式地指出所需内存的尺寸。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>{</span>...}</span><br><span class="line">A * ptr = <span class="keyword">new</span> A;</span><br><span class="line">A * ptr = (A *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(A)); <span class="comment">//需要显式指定所需内存大小sizeof(A);</span></span><br></pre></td></tr></tbody></table></figure><p>当然了，我这里使用malloc来为我们自定义类型分配内存是不怎么合适的，请看下一条。</p><h2 id="5-是否调用构造函数-析构函数"><a href="#5-是否调用构造函数-析构函数" class="headerlink" title="5.是否调用构造函数/析构函数"></a>5.是否调用构造函数/析构函数</h2><p>使用new操作符来分配对象内存时会经历三个步骤：</p><ul><li>第一步：调用operator new 函数（对于数组是operator new[]）分配一块足够大的，<strong>原始</strong>的，未命名的内存空间以便存储特定类型的对象。</li><li>第二步：编译器运行相应的<strong>构造函数</strong>以构造对象，并为其传入初值。</li><li>第三部：对象构造完成后，返回一个指向该对象的指针。</li></ul><p>使用delete操作符来释放对象内存时会经历两个步骤：</p><ul><li>第一步：调用对象的析构函数。</li><li>第二步：编译器调用operator delete(或operator delete[])函数释放内存空间。</li></ul><p>总之来说，new/delete会调用对象的构造函数/析构函数以完成对象的构造/析构。而malloc则不会。如果你不嫌啰嗦可以看下我的例子：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    A() :a(<span class="number">1</span>), b(<span class="number">1.11</span>){}</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">double</span> b;</span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    A * ptr = (A*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(A));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在return处设置断点，观看ptr所指内存的内容：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://images2015.cnblogs.com/blog/610439/201601/610439-20160119004300406-962244228.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p>可以看出A的默认构造函数并没有被调用，因为数据成员a,b的值并没有得到初始化，这也是上面我为什么说使用malloc/free来处理C++的自定义类型不合适，其实不止自定义类型，标准库中凡是需要构造/析构的类型通通不合适。</p><p>而使用new来分配对象时：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    A * ptr = <span class="keyword">new</span> A;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>查看程序生成的汇编代码可以发现，A的默认构造函数被调用了：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://images2015.cnblogs.com/blog/610439/201601/610439-20160119004332328-1197338727.png" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><h2 id="6-对数组的处理"><a href="#6-对数组的处理" class="headerlink" title="6.对数组的处理"></a>6.对数组的处理</h2><p>C++提供了new[]与delete[]来专门处理数组类型:</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A * ptr = <span class="keyword">new</span> A[<span class="number">10</span>];<span class="comment">//分配10个A对象</span></span><br></pre></td></tr></tbody></table></figure><p>使用new[]分配的内存必须使用delete[]进行释放：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> [] ptr;</span><br></pre></td></tr></tbody></table></figure><p>new对数组的支持体现在它会分别调用构造函数函数初始化每一个数组元素，释放对象时为每个对象调用析构函数。注意delete[]要与new[]配套使用，不然会找出数组对象部分释放的现象，造成内存泄漏。</p><p>至于malloc，它并知道你在这块内存上要放的数组还是啥别的东西，反正它就给你一块原始的内存，在给你个内存的地址就完事。所以如果要动态分配一个数组的内存，还需要我们手动自定数组的大小：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int * ptr = (int *) malloc( sizeof(int)* 10 );//分配一个10个int元素的数组</span><br></pre></td></tr></tbody></table></figure><h2 id="7-new与malloc是否可以相互调用"><a href="#7-new与malloc是否可以相互调用" class="headerlink" title="7.new与malloc是否可以相互调用"></a>7.new与malloc是否可以相互调用</h2><p>operator new /operator delete的实现可以基于malloc，而malloc的实现不可以去调用new。下面是编写operator new /operator delete 的一种简单方式，其他版本也与之类似：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> * <span class="keyword">operator</span> <span class="title">new</span> <span class="params">(<span class="keyword">sieze_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">void</span> * mem = <span class="built_in">malloc</span>(size)</span><br><span class="line">        <span class="keyword">return</span> mem;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">throw</span> bad_alloc();</span><br><span class="line">}</span><br><span class="line"><span class="keyword">void</span> <span class="keyword">operator</span> <span class="keyword">delete</span>(<span class="keyword">void</span> *mem) <span class="keyword">noexcept</span></span><br><span class="line">{</span><br><span class="line">    <span class="built_in">free</span>(mem);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="8-是否可以被重载"><a href="#8-是否可以被重载" class="headerlink" title="8.是否可以被重载"></a>8.是否可以被重载</h2><p>opeartor new /operator delete可以被重载。标准库是定义了operator new函数和operator delete函数的8个重载版本：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这些版本可能抛出异常</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> * <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="keyword">size_t</span>)</span></span>;</span><br><span class="line"><span class="keyword">void</span> * <span class="keyword">operator</span> <span class="keyword">new</span>[](<span class="keyword">size_t</span>);</span><br><span class="line"><span class="function"><span class="keyword">void</span> * <span class="keyword">operator</span> <span class="title">delete</span> <span class="params">(<span class="keyword">void</span> * )</span><span class="keyword">noexcept</span></span>;</span><br><span class="line"><span class="keyword">void</span> * <span class="keyword">operator</span> <span class="keyword">delete</span>[](<span class="keyword">void</span> *<span class="number">0</span>）<span class="keyword">noexcept</span>;</span><br><span class="line"><span class="comment">//这些版本承诺不抛出异常</span></span><br><span class="line"><span class="keyword">void</span> * <span class="keyword">operator</span> <span class="keyword">new</span>(<span class="keyword">size_t</span> ,<span class="keyword">nothrow_t</span>&amp;) <span class="keyword">noexcept</span>;</span><br><span class="line"><span class="keyword">void</span> * <span class="keyword">operator</span> <span class="keyword">new</span>[](<span class="keyword">size_t</span>, <span class="keyword">nothrow_t</span>&amp; );</span><br><span class="line"><span class="keyword">void</span> * <span class="keyword">operator</span> <span class="keyword">delete</span> (<span class="keyword">void</span> *,<span class="keyword">nothrow_t</span>&amp; )<span class="keyword">noexcept</span>;</span><br><span class="line"><span class="keyword">void</span> * <span class="keyword">operator</span> <span class="keyword">delete</span>[](<span class="keyword">void</span> *<span class="number">0</span>,<span class="keyword">nothrow_t</span>&amp; ）<span class="keyword">noexcept</span>;</span><br></pre></td></tr></tbody></table></figure><p>我们可以自定义上面函数版本中的任意一个，前提是自定义版本必须位于全局作用域或者类作用域中。太细节的东西不在这里讲述，总之，我们知道我们有足够的自由去重载operator new /operator delete ,以决定我们的new与delete如何为对象分配内存，如何回收对象。</p><p>而malloc/free并<strong>不允许重载</strong>。</p><h2 id="9-能够直观地重新分配内存"><a href="#9-能够直观地重新分配内存" class="headerlink" title="9. 能够直观地重新分配内存"></a>9. 能够直观地重新分配内存</h2><p>使用malloc分配的内存后，如果在使用过程中发现内存不足，可以使用realloc函数进行内存重新分配实现内存的扩充。realloc先判断当前的指针所指内存是否有足够的连续空间，如果有，原地扩大可分配的内存地址，并且返回原来的地址指针；如果空间不够，先按照新指定的大小分配空间，将原有数据从头到尾拷贝到新分配的内存区域，而后释放原来的内存区域。</p><p>new没有这样直观的配套设施来扩充内存。</p><h2 id="10-客户处理内存分配不足"><a href="#10-客户处理内存分配不足" class="headerlink" title="10. 客户处理内存分配不足"></a>10. 客户处理内存分配不足</h2><p>在operator new抛出异常以反映一个未获得满足的需求之前，它会先调用一个用户指定的错误处理函数，这就是<strong>new-handler</strong>。new_handler是一个指针类型：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="built_in">std</span></span><br><span class="line">{</span><br><span class="line">    <span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*new_handler)</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>指向了一个没有参数没有返回值的函数,即为错误处理函数。为了指定错误处理函数，客户需要调用set_new_handler，这是一个声明于的一个标准库函数:</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="built_in">std</span></span><br><span class="line">{</span><br><span class="line">    <span class="function">new_handler <span class="title">set_new_handler</span><span class="params">(new_handler p )</span> <span class="title">throw</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>set_new_handler的参数为new_handler指针，指向了operator new 无法分配足够内存时该调用的函数。其返回值也是个指针，指向set_new_handler被调用前正在执行（但马上就要发生替换）的那个new_handler函数。</p><p>对于malloc，客户并不能够去编程决定内存不足以分配时要干什么事，只能看着malloc返回NULL。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>将上面所述的10点差别整理成表格：</p><table><thead><tr><th align="center">特征</th><th align="center">new/delete</th><th align="center">malloc/free</th></tr></thead><tbody><tr><td align="center">分配内存的位置</td><td align="center">自由存储区</td><td align="center">堆</td></tr><tr><td align="center">内存分配成功的返回值</td><td align="center">完整类型指针</td><td align="center">void*</td></tr><tr><td align="center">内存分配失败的返回值</td><td align="center">默认抛出异常</td><td align="center">返回NULL</td></tr><tr><td align="center">分配内存的大小</td><td align="center">由编译器根据类型计算得出</td><td align="center">必须显式指定字节数</td></tr><tr><td align="center">处理数组</td><td align="center">有处理数组的new版本new[]</td><td align="center">需要用户计算数组的大小后进行内存分配</td></tr><tr><td align="center">已分配内存的扩充</td><td align="center">无法直观地处理</td><td align="center">使用realloc简单完成</td></tr><tr><td align="center">是否相互调用</td><td align="center">可以，看具体的operator new/delete实现</td><td align="center">不可调用new</td></tr><tr><td align="center">分配内存时内存不足</td><td align="center">客户能够指定处理函数或重新制定分配器</td><td align="center">无法通过用户代码进行处理</td></tr><tr><td align="center">函数重载</td><td align="center">允许</td><td align="center">不允许</td></tr><tr><td align="center">构造函数与析构函数</td><td align="center">调用</td><td align="center">不调用</td></tr></tbody></table><p>malloc给你的就好像一块原始的土地，你要种什么需要自己在土地上来播种</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://images2015.cnblogs.com/blog/610439/201601/610439-20160119011445828-2003774083.jpg" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p>而new帮你划好了田地的分块（数组），帮你播了种（构造函数），还提供其他的设施给你使用:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://images2015.cnblogs.com/blog/610439/201601/610439-20160119012007484-749179736.jpg" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p>当然，malloc并不是说比不上new，它们各自有适用的地方。在C++这种偏重OOP的语言，使用new/delete自然是更合适的。</p><hr><blockquote><p>参考：<a href="https://www.cnblogs.com/QG-whz/p/5140930.html" target="_blank" rel="noopener">https://www.cnblogs.com/QG-whz/p/5140930.html</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      ## 1. 申请的内存所在位置

&lt;p&gt;new操作符从&lt;strong&gt;自由存储区（free store）&lt;/strong&gt;上为对象动态分配内存空间，而malloc函数从&lt;strong&gt;堆&lt;/strong&gt;上动态分配内存。自由存储区是C++基于new操作符的一个抽象概念，凡是通过new操作符进行内存申请，该内存即为自由存储区。而堆是操作系统中的术语，是操作系统所维护的一块特殊内存，用于程序的内存动态分配，C语言使用malloc从堆上分配内存，使用free释放已分配的对应内存。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C++" scheme="http://blog.iwxyi.com/tags/C/"/>
    
      <category term="内存管理" scheme="http://blog.iwxyi.com/tags/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>公众号token服务器配置</title>
    <link href="http://blog.iwxyi.com/2019/04/14/%E5%85%AC%E4%BC%97%E5%8F%B7token%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/"/>
    <id>http://blog.iwxyi.com/2019/04/14/公众号token服务器配置/</id>
    <published>2019-04-14T12:30:00.000Z</published>
    <updated>2019-10-12T12:38:03.322Z</updated>
    
    <content type="html"><![CDATA[<h1 id="修改公众号的服务器配置"><a href="#修改公众号的服务器配置" class="headerlink" title="修改公众号的服务器配置"></a>修改公众号的服务器配置</h1><p><img src="/images/pasted-0.png" alt="配置"></p><p>Token配置代码，文件放在对应的URL路径下</p><p>微信会发送GET请求来验证</p><a id="more"></a><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">define(<span class="string">"TOKEN"</span>, <span class="string">"mrxy"</span>); <span class="comment">// 你自己的Token</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//验证消息</span></span><br><span class="line">$echoStr = $_GET[<span class="string">"echostr"</span>];</span><br><span class="line"><span class="keyword">if</span>(checkSignature()){</span><br><span class="line">    <span class="keyword">echo</span> $echoStr;</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//检查签名</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkSignature</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    $signature = $_GET[<span class="string">"signature"</span>];</span><br><span class="line">    $timestamp = $_GET[<span class="string">"timestamp"</span>];</span><br><span class="line">    $nonce = $_GET[<span class="string">"nonce"</span>];</span><br><span class="line">    $token = TOKEN;</span><br><span class="line">    $tmpArr = <span class="keyword">array</span>($token, $timestamp, $nonce);</span><br><span class="line">    sort($tmpArr, SORT_STRING);</span><br><span class="line">    $tmpStr = implode($tmpArr);</span><br><span class="line">    $tmpStr = sha1($tmpStr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>($tmpStr == $signature){</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    }<span class="keyword">else</span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>微信授权网页登录：<a href="https://www.cnblogs.com/whowhere/p/5787247.html" target="_blank" rel="noopener">https://www.cnblogs.com/whowhere/p/5787247.html</a></p></blockquote><blockquote><p>微信扫码登录：<a href="https://www.cnblogs.com/0201zcr/p/5133062.html" target="_blank" rel="noopener">https://www.cnblogs.com/0201zcr/p/5133062.html</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;修改公众号的服务器配置&quot;&gt;&lt;a href=&quot;#修改公众号的服务器配置&quot; class=&quot;headerlink&quot; title=&quot;修改公众号的服务器配置&quot;&gt;&lt;/a&gt;修改公众号的服务器配置&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/pasted-0.png&quot; alt=&quot;配置&quot;&gt;&lt;/p&gt;
&lt;p&gt;Token配置代码，文件放在对应的URL路径下&lt;/p&gt;
&lt;p&gt;微信会发送GET请求来验证&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="微信小程序" scheme="http://blog.iwxyi.com/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>PHP7.0使用数据库</title>
    <link href="http://blog.iwxyi.com/2019/04/14/PHP7-0%E4%BD%BF%E7%94%A8%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://blog.iwxyi.com/2019/04/14/PHP7-0使用数据库/</id>
    <published>2019-04-14T08:20:00.000Z</published>
    <updated>2019-10-13T08:21:20.736Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$mysql_server_name=<span class="string">'localhost'</span>; <span class="comment">//改成自己的mysql数据库服务器</span></span><br><span class="line">$mysql_username=<span class="string">"root"</span>; <span class="comment">//改成自己的mysql数据库用户名</span></span><br><span class="line">$mysql_password=<span class="string">"root"</span>; <span class="comment">//改成自己的mysql数据库密码</span></span><br><span class="line">$mysql_database=<span class="string">"test"</span>; <span class="comment">//改成自己的mysql数据库名</span></span><br></pre></td></tr></tbody></table></figure><a id="more"></a><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$conn=<span class="keyword">new</span> mysqli($mysql_server_name,$mysql_username,$mysql_password); <span class="comment">//连接数据库</span></span><br><span class="line"><span class="keyword">if</span>($conn==<span class="keyword">false</span>) <span class="keyword">echo</span> <span class="string">"数据连接失败！&lt;br/&gt;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// $conn-&gt;query("set names 'utf8'"); //数据库输出编码 应该与你的数据库编码保持一致</span></span><br><span class="line">$conn-&gt;select_db($mysql_database); <span class="comment">//打开数据库</span></span><br><span class="line">$sql =<span class="string">"select * from biao "</span>; <span class="comment">//SQL语句</span></span><br><span class="line">$result = $conn-&gt;query($sql); <span class="comment">//查询成功</span></span><br><span class="line">$data=<span class="keyword">array</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ($tmp=$result-&gt;fetch_assoc())</span><br><span class="line">{</span><br><span class="line">    $data[]=$tmp; <span class="comment">// 按照下标挨个赋值，$tmp 为一行</span></span><br><span class="line">    <span class="keyword">echo</span> $tmp[<span class="string">'name'</span>] . PHP_EOL;</span><br><span class="line">}</span><br><span class="line"><span class="comment">// var_dump($data); // 输出所有数据，二维数组，例如 $data[0]['id]</span></span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$mysql_server_name=&lt;span class=&quot;string&quot;&gt;&#39;localhost&#39;&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//改成自己的mysql数据库服务器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$mysql_username=&lt;span class=&quot;string&quot;&gt;&quot;root&quot;&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//改成自己的mysql数据库用户名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$mysql_password=&lt;span class=&quot;string&quot;&gt;&quot;root&quot;&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//改成自己的mysql数据库密码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$mysql_database=&lt;span class=&quot;string&quot;&gt;&quot;test&quot;&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//改成自己的mysql数据库名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="PHP" scheme="http://blog.iwxyi.com/tags/PHP/"/>
    
      <category term="MySQL" scheme="http://blog.iwxyi.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>C语言输出代码本身</title>
    <link href="http://blog.iwxyi.com/2019/04/08/C%E8%AF%AD%E8%A8%80%E8%BE%93%E5%87%BA%E4%BB%A3%E7%A0%81%E6%9C%AC%E8%BA%AB/"/>
    <id>http://blog.iwxyi.com/2019/04/08/C语言输出代码本身/</id>
    <published>2019-04-08T12:02:00.000Z</published>
    <updated>2019-10-13T12:03:11.265Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">main(){<span class="keyword">char</span> *s;<span class="built_in">printf</span>(s,<span class="number">34</span>,s=<span class="string">"main(){char *s;printf(s,34,s=%c%s%c,34);}"</span>,<span class="number">34</span>);}</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><p>完整版本：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">char</span>*s=<span class="string">"#include &lt;stdio.h&gt;%cchar*s=%c%s%c;main(){printf(10,s,34,s,34);}"</span>;</span><br><span class="line">main(){<span class="built_in">printf</span>(s,<span class="number">10</span>,<span class="number">34</span>,s,<span class="number">34</span>);}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;main(){&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *s;&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(s,&lt;span class=&quot;number&quot;&gt;34&lt;/span&gt;,s=&lt;span class=&quot;string&quot;&gt;&quot;main(){char *s;printf(s,34,s=%c%s%c,34);}&quot;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;34&lt;/span&gt;);}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C" scheme="http://blog.iwxyi.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Qt获取全球唯一ID</title>
    <link href="http://blog.iwxyi.com/2019/04/02/Qt%E8%8E%B7%E5%8F%96%E5%85%A8%E7%90%83%E5%94%AF%E4%B8%80ID/"/>
    <id>http://blog.iwxyi.com/2019/04/02/Qt获取全球唯一ID/</id>
    <published>2019-04-02T12:01:00.000Z</published>
    <updated>2019-10-13T12:02:13.828Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QUuid&gt;</span></span></span><br><span class="line">QUuid id = QUuid::createUuid();</span><br><span class="line">QString strId = id.toString();</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C++" scheme="http://blog.iwxyi.com/tags/C/"/>
    
      <category term="Qt" scheme="http://blog.iwxyi.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>jQuery+AJAX+Gateway上传文件</title>
    <link href="http://blog.iwxyi.com/2019/03/21/jQuery-AJAX-Gateway%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/"/>
    <id>http://blog.iwxyi.com/2019/03/21/jQuery-AJAX-Gateway上传文件/</id>
    <published>2019-03-21T07:49:00.000Z</published>
    <updated>2019-10-13T07:51:17.861Z</updated>
    
    <content type="html"><![CDATA[<p>本例实现了一个用于在线聊天界面发送图片的效果</p><p><strong>HTML</strong>部分：</p><p>新建input标签，隐藏起来</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--隐藏的表单控件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"pic"</span> <span class="attr">id</span>=<span class="string">"file"</span> <span class="attr">style</span>=<span class="string">"displace: none"</span> /&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--用来交互的加号按钮--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"icon icon-add image_up t-50"</span> <span class="attr">style</span>=<span class="string">"color: #888;"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><a id="more"></a><p><strong>JS发送</strong>部分：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">".image_up"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{ <span class="comment">// 点击加号</span></span><br><span class="line">    $(<span class="string">".file"</span>).click(); <span class="comment">// 模拟点击事件</span></span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">$(<span class="string">"#file"</span>).change(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{ <span class="comment">// 内容改变，即选择了图片</span></span><br><span class="line">    formdata = <span class="keyword">new</span> FormData();</span><br><span class="line">    formdata.append(<span class="string">'fromid'</span>, fromid);</span><br><span class="line">    formdata.append(<span class="string">'toid'</span>, toid);</span><br><span class="line">    formdata.append(<span class="string">'online'</span>, online);</span><br><span class="line">    formdata.append(<span class="string">'file'</span>, $(<span class="string">'#file'</span>)[<span class="number">0</span>].file[<span class="number">0</span>]);</span><br><span class="line">    </span><br><span class="line">    $.ajax({</span><br><span class="line">        url: API_URL+<span class="string">"uploadimg"</span>,</span><br><span class="line">        type: <span class="string">'POST'</span>,</span><br><span class="line">        cache: <span class="literal">false</span>,</span><br><span class="line">        data: formdata,     <span class="comment">// 发送的数据</span></span><br><span class="line">        dataType: <span class="string">'json'</span>,   <span class="comment">// 收到的数据格式</span></span><br><span class="line">        processData: <span class="literal">false</span>, <span class="comment">// 不转成对象的形式</span></span><br><span class="line">        contentType: <span class="literal">false</span>, <span class="comment">// 不转成URLencode编码</span></span><br><span class="line">        success: <span class="function"><span class="keyword">function</span>(<span class="params">data, status, xhr</span>)</span>{ <span class="comment">// 上传结果</span></span><br><span class="line">            <span class="keyword">if</span> (data.status == <span class="string">'ok'</span>) { <span class="comment">// 上传成功</span></span><br><span class="line">                <span class="comment">// 添加到自己的聊天框中</span></span><br><span class="line">                $(<span class="string">".chat-content"</span>).append(<span class="string">'&lt;div class="chat-text section-right flex"&gt;&lt;span class="char-img"&gt;&lt;i class="icon icon-sanjiao3 t-32"&gt;&lt;/i&gt;&lt;img width="120em" height="120em" src="__ROOT__/uploads/'</span>+data.img_name+<span class="string">'"&gt;&lt;/span&gt; &lt;span class="char-img" style="background-image: url('</span>+from_head+<span class="string">');"&gt;&lt;/span&gt;&lt;/div&gt;'</span>);</span><br><span class="line">                $(<span class="string">".chat-content"</span>).scrollTop(<span class="number">3000</span>); <span class="comment">// 滚动到底部</span></span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 通过socket发送给聊天对象</span></span><br><span class="line">                <span class="keyword">var</span> message = <span class="string">'{"data":"'</span>+data.img_name+<span class="string">'", "fromid":"'</span>+fromid+<span class="string">'", "toid":"'</span>+toid+<span class="string">'", "type":"say_img"}'</span>;</span><br><span class="line">                ws.send(message);</span><br><span class="line">                </span><br><span class="line">                $(<span class="string">"#file"</span>).val(<span class="string">""</span>); <span class="comment">// 清空，以便响应下一次的 change 时间</span></span><br><span class="line">            } <span class="keyword">else</span> { <span class="comment">// 上传失败</span></span><br><span class="line">                </span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    });</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p><strong>PHP</strong>部分：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 上传图片，返回图片地址 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">uploadimg</span><span class="params">()</span> </span>{</span><br><span class="line">    $file = $_FILES[<span class="string">'file'</span>];</span><br><span class="line">    $fromid = input(<span class="string">'fromid'</span>);</span><br><span class="line">    $toid = input(<span class="string">'toid'</span>);</span><br><span class="line">    $online = input(<span class="string">'online'</span>);</span><br><span class="line">    $suffix = strtolower(strrchr($file[<span class="string">'name'</span>], <span class="string">'.'</span>)); <span class="comment">// 获取文件后缀</span></span><br><span class="line">    $type = [<span class="string">'.jpg'</span>, <span class="string">'.jpeg'</span>, <span class="string">'.png'</span>, <span class="string">'.gif'</span>];</span><br><span class="line">    <span class="keyword">if</span> (!in_array($suffix, $type)) {</span><br><span class="line">        <span class="keyword">return</span> [<span class="string">'status'</span> =&gt; <span class="string">'img type erroe'</span>];</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> ($file[<span class="string">'size'</span>] / <span class="number">1024</span> &gt; <span class="number">5</span>*<span class="number">1024</span>) { <span class="comment">// 如果大于5M</span></span><br><span class="line">        <span class="keyword">return</span> [<span class="string">'status'</span> =&gt; <span class="string">'img is too large'</span>];</span><br><span class="line">    }</span><br><span class="line">    $filename = uniqid(<span class="string">"chat_img_"</span>, <span class="keyword">false</span>);        <span class="comment">// 生成一个带前缀的唯一的微秒ID</span></span><br><span class="line">    $uploadpath = ROOT_PATH . <span class="string">'public\\uploads\\'</span>; <span class="comment">// 文件夹路径</span></span><br><span class="line">    $file_up = $uploadpath . $filename . $suffix;  <span class="comment">// 文件路径</span></span><br><span class="line">    </span><br><span class="line">    $res = move_upload_file($file[<span class="string">'tmp_name'</span>], $file_up);</span><br><span class="line">    <span class="keyword">if</span> ($res) {</span><br><span class="line">        $name = $filename . $suffix;</span><br><span class="line">        $data[<span class="string">'content'</span>] = $name;</span><br><span class="line">        $data[<span class="string">'fromid'</span>] = $fromid;</span><br><span class="line">        $data[<span class="string">'toid'</span>] = $toid;</span><br><span class="line">        $data[<span class="string">'time'</span>] = time();</span><br><span class="line">        $data[<span class="string">'isread'</span>] = $online;</span><br><span class="line">        $data[<span class="string">'type'</span>] = <span class="number">2</span>; <span class="comment">// 表示是图片消息</span></span><br><span class="line">        $message_id = Db::name(<span class="string">'message'</span>)-&gt;insertGetId($data);</span><br><span class="line">        <span class="keyword">if</span> ($message_id) {</span><br><span class="line">            <span class="keyword">return</span> [<span class="string">'status'</span> =&gt; <span class="string">'ok'</span>, <span class="string">'img_name'</span> =&gt; $name];</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">return</span> [<span class="string">'status'</span> =&gt; <span class="string">'false'</span>];</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>PHP <strong>GatewayWorker</strong>部分：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*...*/</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">"say_img"</span> :</span><br><span class="line">{</span><br><span class="line">$toid = $message_data[<span class="string">'toid'</span>];</span><br><span class="line">$fromid = $message_data[<span class="string">'fromid'</span>];</span><br><span class="line">$img_name = $message_data[<span class="string">'data'</span>];</span><br><span class="line">    $data = [</span><br><span class="line"><span class="string">'type'</span> =&gt; <span class="string">'say_img'</span>,</span><br><span class="line">        <span class="string">'fromid'</span> =&gt; $fromid.</span><br><span class="line">        <span class="string">'toid'</span> =&gt; $toid,</span><br><span class="line">        <span class="string">'img_name'</span> =&gt; $img_name</span><br><span class="line">    ];</span><br><span class="line">    Gateway::sentToUid($toid, json_encode($date));</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>JS目标接收</strong>部分：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">"say_img"</span> :</span><br><span class="line">{</span><br><span class="line">    <span class="comment">// 添加到自己的聊天框中</span></span><br><span class="line">    $(<span class="string">".chat-content"</span>).append(<span class="string">'&lt;div class="chat-text section-left flex"&gt;span class="char-img" style="background-image: url('</span>+to_head+<span class="string">');"&gt;&lt;/span&gt;&lt;span class="char-img"&gt;&lt;i class="icon icon-sanjiao3 t-32"&gt;&lt;/i&gt;&lt;img width="120em" height="120em" src="__ROOT__/uploads/'</span>+message.img_name+<span class="string">'"&gt;&lt;/span&gt; &lt;&lt;/div&gt;'</span>);</span><br><span class="line">    $(<span class="string">".chat-content"</span>).scrollTop(<span class="number">3000</span>); <span class="comment">// 滚动到底部</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><blockquote><p><strong>参考：网易云课堂 <a href="https://study.163.com/course/courseLearn.htm?courseId=1005015012#/learn/video?lessonId=1051354078&amp;courseId=1005015012" target="_blank" rel="noopener">https://study.163.com/course/courseLearn.htm?courseId=1005015012#/learn/video?lessonId=1051354078&amp;courseId=1005015012</a></strong></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本例实现了一个用于在线聊天界面发送图片的效果&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HTML&lt;/strong&gt;部分：&lt;/p&gt;
&lt;p&gt;新建input标签，隐藏起来&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--隐藏的表单控件--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;file&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;pic&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;file&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;displace: none&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--用来交互的加号按钮--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;icon icon-add image_up t-50&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;color: #888;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;i&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;i&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="JS" scheme="http://blog.iwxyi.com/tags/JS/"/>
    
      <category term="AJAX" scheme="http://blog.iwxyi.com/tags/AJAX/"/>
    
      <category term="jQuery" scheme="http://blog.iwxyi.com/tags/jQuery/"/>
    
      <category term="PHP" scheme="http://blog.iwxyi.com/tags/PHP/"/>
    
      <category term="Gateway" scheme="http://blog.iwxyi.com/tags/Gateway/"/>
    
  </entry>
  
  <entry>
    <title>Android自定义输入对话框，带联网</title>
    <link href="http://blog.iwxyi.com/2019/03/21/Android%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BE%93%E5%85%A5%E5%AF%B9%E8%AF%9D%E6%A1%86%EF%BC%8C%E5%B8%A6%E8%81%94%E7%BD%91/"/>
    <id>http://blog.iwxyi.com/2019/03/21/Android自定义输入对话框，带联网/</id>
    <published>2019-03-21T03:36:00.000Z</published>
    <updated>2019-10-13T11:06:48.001Z</updated>
    
    <content type="html"><![CDATA[<p>自定义输入方式，回调方法，带输入后联网示例</p><a id="more"></a><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>{</span><br><span class="line">    <span class="keyword">switch</span> (v.getId()) {</span><br><span class="line">        <span class="keyword">case</span> R.id.tv_nickname:</span><br><span class="line">            inputDialog(<span class="string">"nickname"</span>, <span class="string">"修改用户昵称"</span>, User.nickname);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 弹出输入框</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> aim   目标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> title 标题</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> def   默认值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>      输入的字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">inputDialog</span><span class="params">(<span class="keyword">final</span> String aim, String title, String def)</span> </span>{</span><br><span class="line">    <span class="keyword">final</span> String[] result = <span class="keyword">new</span> String[<span class="number">1</span>];</span><br><span class="line">    LayoutInflater factory = LayoutInflater.from(PersonActivity.<span class="keyword">this</span>);<span class="comment">//提示框</span></span><br><span class="line">    <span class="keyword">final</span> View view = factory.inflate(R.layout.edit_box, <span class="keyword">null</span>);<span class="comment">//这里必须是final的</span></span><br><span class="line">    <span class="keyword">final</span> EditText edit = (EditText) view.findViewById(R.id.editText);<span class="comment">//获得输入框对象</span></span><br><span class="line">    edit.setText(def);</span><br><span class="line">    <span class="keyword">new</span> AlertDialog.Builder(PersonActivity.<span class="keyword">this</span>)</span><br><span class="line">        .setTitle(title)<span class="comment">//提示框标题</span></span><br><span class="line">        .setView(view)</span><br><span class="line">        .setPositiveButton(<span class="string">"确定"</span>,<span class="comment">//提示框的两个按钮</span></span><br><span class="line">                           <span class="keyword">new</span> DialogInterface.OnClickListener() {</span><br><span class="line">                               <span class="meta">@Override</span></span><br><span class="line">                               <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                   <span class="keyword">int</span> which)</span> </span>{</span><br><span class="line">                                   result[<span class="number">0</span>] = edit.getText().toString();</span><br><span class="line">                                   onInputDialog(aim, edit.getText().toString());</span><br><span class="line">                               }</span><br><span class="line">                           })</span><br><span class="line">        .setNegativeButton(<span class="string">"取消"</span>, <span class="keyword">null</span>)</span><br><span class="line">        .create().show();</span><br><span class="line">    <span class="keyword">return</span> result[<span class="number">0</span>];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 输入框结束事件，自定义结果</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> aim 目标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> s   字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">onInputDialog</span><span class="params">(String aim, String s)</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (aim) {</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"nickname"</span>:</span><br><span class="line">            <span class="keyword">if</span> (!canMatch(s, <span class="string">"\\S+"</span>)) {</span><br><span class="line">                App.toast(<span class="string">"用户名不能有空格"</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            }</span><br><span class="line">            mNicknameTv.setText(User.nickname = s);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    updateContent(aim, s);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 上传用户信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key 文件名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> val 数值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updateContent</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> String val)</span> </span>{</span><br><span class="line">    String path = Paths.getNetpath(<span class="string">"updateUserInfo"</span>);</span><br><span class="line">    String[] params = <span class="keyword">new</span> String[]{<span class="string">"user_id"</span>, User.id(), key, val};</span><br><span class="line">    ConnectUtil.Get(path, params, <span class="keyword">new</span> StringCallback(){</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFinish</span><span class="params">(String result)</span> </span>{</span><br><span class="line">            <span class="keyword">if</span> (result.equals(<span class="string">"OK"</span>)) {</span><br><span class="line">                Snackbar.make(findViewById(R.id.fab), <span class="string">"修改成功"</span>, Snackbar.LENGTH_LONG)</span><br><span class="line">                    .setAction(<span class="string">"Action"</span>, <span class="keyword">null</span>).show();</span><br><span class="line">            } <span class="keyword">else</span> <span class="keyword">if</span> (!result.isEmpty()) {</span><br><span class="line">                Snackbar.make(findViewById(R.id.fab), <span class="string">"修改失败:"</span>+ StringUtil.getXml(result, <span class="string">"result"</span>), Snackbar.LENGTH_LONG)</span><br><span class="line">                    .setAction(<span class="string">"Action"</span>, <span class="keyword">null</span>).show();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    });</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">canMatch</span><span class="params">(String str, String pat)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> StringUtil.canMatch(str, pat);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>布局 edit_box.xml</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"fill_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"fill_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">EditText</span> <span class="attr">android:id</span>=<span class="string">"@+id/editText"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"fill_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">requestFocus</span>&gt;</span><span class="tag">&lt;/<span class="name">requestFocus</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">EditText</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自定义输入方式，回调方法，带输入后联网示例&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="Android" scheme="http://blog.iwxyi.com/tags/Android/"/>
    
      <category term="HTTP" scheme="http://blog.iwxyi.com/tags/HTTP/"/>
    
      <category term="多线程" scheme="http://blog.iwxyi.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Android状态栏透明</title>
    <link href="http://blog.iwxyi.com/2019/03/21/Android%E7%8A%B6%E6%80%81%E6%A0%8F%E9%80%8F%E6%98%8E/"/>
    <id>http://blog.iwxyi.com/2019/03/21/Android状态栏透明/</id>
    <published>2019-03-21T03:32:00.000Z</published>
    <updated>2019-10-13T03:33:51.635Z</updated>
    
    <content type="html"><![CDATA[<p>Java文件：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>{</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">    <span class="comment">//透明状态栏&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><br><span class="line">    getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);</span><br><span class="line">    getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_NAVIGATION);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><p>Xml文件：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:background="@drawable/background"</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java文件：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Bundle savedInstanceState)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* ... */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//透明状态栏&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_NAVIGATION);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="Android" scheme="http://blog.iwxyi.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>JS复制字符串到剪贴板</title>
    <link href="http://blog.iwxyi.com/2019/03/16/JS%E5%A4%8D%E5%88%B6%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%88%B0%E5%89%AA%E8%B4%B4%E6%9D%BF/"/>
    <id>http://blog.iwxyi.com/2019/03/16/JS复制字符串到剪贴板/</id>
    <published>2019-03-16T07:37:00.000Z</published>
    <updated>2019-10-13T07:40:00.525Z</updated>
    
    <content type="html"><![CDATA[<p>简单原理：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.createElement(<span class="string">"textarea"</span>);</span><br><span class="line">textArea.value = text;</span><br><span class="line">textArea.select();</span><br><span class="line"><span class="built_in">document</span>.execCommand(<span class="string">'copy'</span>);</span><br><span class="line"><span class="built_in">document</span>.body.removeChild(textArea);</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><p>具体代码：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copyToClipboard</span> (<span class="params">text</span>) </span>{</span><br><span class="line">    <span class="keyword">if</span>(text.indexOf(<span class="string">'-'</span>) !== <span class="number">-1</span>) {</span><br><span class="line">        <span class="keyword">let</span> arr = text.split(<span class="string">'-'</span>);</span><br><span class="line">        text = arr[<span class="number">0</span>] + arr[<span class="number">1</span>];</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">var</span> textArea = <span class="built_in">document</span>.createElement(<span class="string">"textarea"</span>);</span><br><span class="line">      textArea.style.position = <span class="string">'fixed'</span>;</span><br><span class="line">      textArea.style.top = <span class="string">'0'</span>;</span><br><span class="line">      textArea.style.left = <span class="string">'0'</span>;</span><br><span class="line">      textArea.style.width = <span class="string">'2em'</span>;</span><br><span class="line">      textArea.style.height = <span class="string">'2em'</span>;</span><br><span class="line">      textArea.style.padding = <span class="string">'0'</span>;</span><br><span class="line">      textArea.style.border = <span class="string">'none'</span>;</span><br><span class="line">      textArea.style.outline = <span class="string">'none'</span>;</span><br><span class="line">      textArea.style.boxShadow = <span class="string">'none'</span>;</span><br><span class="line">      textArea.style.background = <span class="string">'transparent'</span>;</span><br><span class="line">      textArea.value = text;</span><br><span class="line">      <span class="built_in">document</span>.body.appendChild(textArea);</span><br><span class="line">      textArea.select();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span> {</span><br><span class="line">        <span class="keyword">var</span> successful = <span class="built_in">document</span>.execCommand(<span class="string">'copy'</span>);</span><br><span class="line">        <span class="keyword">var</span> msg = successful ? <span class="string">'成功复制到剪贴板'</span> : <span class="string">'该浏览器不支持点击复制到剪贴板'</span>;</span><br><span class="line">       alert(msg);</span><br><span class="line">      } <span class="keyword">catch</span> (err) {</span><br><span class="line">        alert(<span class="string">'该浏览器不支持点击复制到剪贴板'</span>);</span><br><span class="line">      }</span><br><span class="line"></span><br><span class="line">      <span class="built_in">document</span>.body.removeChild(textArea);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简单原理：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.createElement(&lt;span class=&quot;string&quot;&gt;&quot;textarea&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;textArea.value = text;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;textArea.select();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.execCommand(&lt;span class=&quot;string&quot;&gt;&#39;copy&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.body.removeChild(textArea);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="JS" scheme="http://blog.iwxyi.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>Android线性时间选择器</title>
    <link href="http://blog.iwxyi.com/2019/03/16/Android%E7%BA%BF%E6%80%A7%E6%97%B6%E9%97%B4%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    <id>http://blog.iwxyi.com/2019/03/16/Android线性时间选择器/</id>
    <published>2019-03-16T03:24:00.000Z</published>
    <updated>2019-10-13T03:24:56.587Z</updated>
    
    <content type="html"><![CDATA[<p>build.gradle(Module:app)</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation 'net.codecrafted:lineartimepicker:1.0.0' // 线性日期时间选择器</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><p>日期选择    .java</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> data_tutorial = <span class="keyword">false</span>; <span class="comment">// 是否出现使用帮助</span></span><br><span class="line"><span class="keyword">if</span> (SettingsUtil.getInt(getApplicationContext(), <span class="string">"LinearDatePicker_tutorial"</span>) != <span class="number">1</span>) {</span><br><span class="line">    data_tutorial = <span class="keyword">true</span>;</span><br><span class="line">}</span><br><span class="line">LinearDatePickerDialog.Builder.with(RecordActivity.<span class="keyword">this</span>)</span><br><span class="line">    .setYear(addYear)</span><br><span class="line">    .setMinYear(<span class="number">2000</span>)</span><br><span class="line">    .setMaxYear(<span class="number">2030</span>)</span><br><span class="line">    .setShowTutorial(data_tutorial)</span><br><span class="line">    .setButtonCallback(<span class="keyword">new</span> LinearDatePickerDialog.ButtonCallback() {</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPositive</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> year, <span class="keyword">int</span> month, <span class="keyword">int</span> day)</span> </span>{</span><br><span class="line">            SettingsUtil.setVal(getApplicationContext(), <span class="string">"LinearDataPicker_tutorial"</span>, <span class="number">1</span>);</span><br><span class="line">            <span class="comment">/*...code...*/</span></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNegative</span><span class="params">(DialogInterface dialog)</span> </span>{</span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line">    })</span><br><span class="line">    .build()</span><br><span class="line">    .show();</span><br></pre></td></tr></tbody></table></figure><p>时间选择    .java</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> time_tutorial = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">if</span> (SettingsUtil.getInt(getApplicationContext(), <span class="string">"LinearTimePicker_tutorial"</span>) != <span class="number">1</span>) {</span><br><span class="line">    time_tutorial = <span class="keyword">true</span>;</span><br><span class="line">}</span><br><span class="line">LinearTimePickerDialog dialog = LinearTimePickerDialog.Builder.with(RecordActivity.<span class="keyword">this</span>)</span><br><span class="line">    .setShowTutorial(time_tutorial)</span><br><span class="line">    .setButtonCallback(<span class="keyword">new</span> LinearTimePickerDialog.ButtonCallback() {</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPositive</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> hour, <span class="keyword">int</span> minutes)</span> </span>{</span><br><span class="line">            SettingsUtil.setVal(getApplicationContext(), <span class="string">"LinearDataPicker_tutorial"</span>, <span class="number">1</span>);</span><br><span class="line">            <span class="comment">/*...code...*/</span></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNegative</span><span class="params">(DialogInterface dialog)</span> </span>{</span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line">    })</span><br><span class="line">    .build();</span><br><span class="line">dialog.show();</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;build.gradle(Module:app)&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;implementation &#39;net.codecrafted:lineartimepicker:1.0.0&#39; // 线性日期时间选择器&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="Android" scheme="http://blog.iwxyi.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android简单联网应用</title>
    <link href="http://blog.iwxyi.com/2019/03/16/Android%E7%AE%80%E5%8D%95%E8%81%94%E7%BD%91%E5%BA%94%E7%94%A8/"/>
    <id>http://blog.iwxyi.com/2019/03/16/Android简单联网应用/</id>
    <published>2019-03-16T03:17:00.000Z</published>
    <updated>2019-10-13T11:06:58.454Z</updated>
    
    <content type="html"><![CDATA[<h2 id="解决Handler问题"><a href="#解决Handler问题" class="headerlink" title="解决Handler问题"></a>解决Handler问题</h2><a id="more"></a><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>{ <span class="comment">//注意下面的“PopupActivity”类是MyHandler类所在的外部类，即所在的activity </span></span><br><span class="line">    WeakReference&lt;PopupActivity&gt; mActivity;  </span><br><span class="line">    </span><br><span class="line">    MyHandler(PopupActivity activity) { </span><br><span class="line">        mActivity = <span class="keyword">new</span> WeakReference&lt;PopupActivity&gt;(activity);</span><br><span class="line">    }  </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>{ </span><br><span class="line">        PopupActivity theActivity = mActivity.get();                                                        <span class="keyword">switch</span> (msg.what) { <span class="comment">//此处可以根据what的值处理多条信息</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">0x0001</span>: <span class="comment">//这里可以改变activity中的UI控件的状态 </span></span><br><span class="line">                theActivity.textView.setText(R.string.hello_world);</span><br><span class="line">                <span class="keyword">break</span>; </span><br><span class="line">                }</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0x0002</span>: <span class="comment">//这里可以改变activity中的UI控件的状态</span></span><br><span class="line">                theActivity.textView.setText(R.string.welcome); </span><br><span class="line">                <span class="keyword">break</span>; <span class="comment">/*这里可以有多条要处理信息的操作*/</span> </span><br><span class="line">            <span class="comment">/*... ...*/</span> </span><br><span class="line">        } </span><br><span class="line">    }</span><br><span class="line">}; <span class="comment">//实例化一个MyHandler对象</span></span><br><span class="line"></span><br><span class="line">MyHandler testHandler = <span class="keyword">new</span> MyHandler(<span class="keyword">this</span>); </span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>{ <span class="comment">//这里发送了一个空消息，空消息的what值是0x0001</span></span><br><span class="line">    testHandler.sendEmptyMessage(<span class="number">0x0001</span>); </span><br><span class="line">} </span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>{ <span class="comment">//这里发送了一个空消息，空消息的what值是0x0001</span></span><br><span class="line">    testHandler.sendEmptyMessage(<span class="number">0x0002</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;解决Handler问题&quot;&gt;&lt;a href=&quot;#解决Handler问题&quot; class=&quot;headerlink&quot; title=&quot;解决Handler问题&quot;&gt;&lt;/a&gt;解决Handler问题&lt;/h2&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="Android" scheme="http://blog.iwxyi.com/tags/Android/"/>
    
      <category term="HTTP" scheme="http://blog.iwxyi.com/tags/HTTP/"/>
    
      <category term="多线程" scheme="http://blog.iwxyi.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Android圆形头像控件</title>
    <link href="http://blog.iwxyi.com/2019/03/07/Android%E5%9C%86%E5%BD%A2%E5%A4%B4%E5%83%8F%E6%8E%A7%E4%BB%B6/"/>
    <id>http://blog.iwxyi.com/2019/03/07/Android圆形头像控件/</id>
    <published>2019-03-07T03:27:00.000Z</published>
    <updated>2019-10-13T07:56:11.674Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、自定义控件方式"><a href="#1、自定义控件方式" class="headerlink" title="1、自定义控件方式"></a>1、自定义控件方式</h1><a id="more"></a><h2 id="自定义类："><a href="#自定义类：" class="headerlink" title="自定义类："></a>自定义类：</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.content.res.TypedArray;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Bitmap;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Canvas;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Paint;</span><br><span class="line"><span class="keyword">import</span> android.graphics.PorterDuff;</span><br><span class="line"><span class="keyword">import</span> android.graphics.PorterDuffXfermode;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Rect;</span><br><span class="line"><span class="keyword">import</span> android.graphics.drawable.BitmapDrawable;</span><br><span class="line"><span class="keyword">import</span> android.graphics.drawable.Drawable;</span><br><span class="line"><span class="keyword">import</span> android.graphics.drawable.NinePatchDrawable;</span><br><span class="line"><span class="keyword">import</span> android.util.AttributeSet;</span><br><span class="line"><span class="keyword">import</span> android.widget.ImageView;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.iruiyou.pet.R;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> sgf</span></span><br><span class="line"><span class="comment"> * 自定义圆形头像</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoundImageView</span> <span class="keyword">extends</span> <span class="title">ImageView</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mBorderThickness = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> Context mContext;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> defaultColor = <span class="number">0xFFFFFFFF</span>;</span><br><span class="line">    <span class="comment">// 外圆边框颜色</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mBorderOutsideColor = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 内圆边框颜色</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mBorderInsideColor = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// RoundImageView控件默认的长、宽</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> defaultWidth = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> defaultHeight = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RoundImageView</span><span class="params">(Context context)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">        mContext = context;</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RoundImageView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">        mContext = context;</span><br><span class="line">        <span class="comment">// 设置RoundImageView的属性值，比如颜色，宽度等</span></span><br><span class="line">        setRoundImageViewAttributes(attrs);</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RoundImageView</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyle)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyle);</span><br><span class="line">        mContext = context;</span><br><span class="line">        setRoundImageViewAttributes(attrs);</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 从attr.xml文件中获取属性值，并给RoundImageView设置</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setRoundImageViewAttributes</span><span class="params">(AttributeSet attrs)</span> </span>{</span><br><span class="line">        TypedArray a = mContext.obtainStyledAttributes(attrs,</span><br><span class="line">                R.styleable.round_image_view);</span><br><span class="line">        mBorderThickness = a.getDimensionPixelSize(</span><br><span class="line">                R.styleable.round_image_view_border_width, <span class="number">0</span>);</span><br><span class="line">        mBorderOutsideColor = a.getColor(</span><br><span class="line">                R.styleable.round_image_view_border_outcolor, defaultColor);</span><br><span class="line">        mBorderInsideColor = a.getColor(</span><br><span class="line">                R.styleable.round_image_view_border_incolor, defaultColor);</span><br><span class="line">        a.recycle();</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 具体解释：比如我自定义一个控件，怎么实现呢，以RoundImageView为例，首先是继承ImageView,然后实现其构造函数，在构造函数中，获取attr中的属性值（再次解释：这里获取的具体的这个属性的值是怎么来的呢？比如颜色和宽度，这个在attr.xml中定义了相关的名字，而在使用RoundImageView的xml布局文件中，我们会设置其值，这里需要用的值，就是从那里设置的），并设置在本控件中，然后继承onDraw方法，画出自己想要的图形或者形状即可</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这个是继承的父类的onDraw方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * onDraw和下面的方法不用管，基本和学习自定义没关系，就是实现怎么画圆的，你可以改变下面代码试着画三角形头像，哈哈</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>{</span><br><span class="line">        Drawable drawable = getDrawable();</span><br><span class="line">        <span class="keyword">if</span> (drawable == <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (getWidth() == <span class="number">0</span> || getHeight() == <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">this</span>.measure(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (drawable.getClass() == NinePatchDrawable.class)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        Bitmap b = ((BitmapDrawable) drawable).getBitmap();</span><br><span class="line">        Bitmap bitmap = b.copy(Bitmap.Config.ARGB_8888, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">if</span> (defaultWidth == <span class="number">0</span>) {</span><br><span class="line">            defaultWidth = getWidth();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (defaultHeight == <span class="number">0</span>) {</span><br><span class="line">            defaultHeight = getHeight();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> radius = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 这里的判断是如果内圆和外圆设置的颜色值不为空且不是默认颜色，就定义画两个圆框，分别为内圆和外圆边框</span></span><br><span class="line">        <span class="keyword">if</span> (mBorderInsideColor != defaultColor</span><br><span class="line">                &amp;&amp; mBorderOutsideColor != defaultColor) {</span><br><span class="line">            radius = (defaultWidth &lt; defaultHeight ? defaultWidth</span><br><span class="line">                    : defaultHeight) / <span class="number">2</span> - <span class="number">2</span> * mBorderThickness;</span><br><span class="line">            <span class="comment">// 画内圆</span></span><br><span class="line">            drawCircleBorder(canvas, radius + mBorderThickness / <span class="number">2</span>,</span><br><span class="line">                    mBorderInsideColor);</span><br><span class="line">            <span class="comment">// 画外圆</span></span><br><span class="line">            drawCircleBorder(canvas, radius + mBorderThickness</span><br><span class="line">                    + mBorderThickness / <span class="number">2</span>, mBorderOutsideColor);</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (mBorderInsideColor != defaultColor</span><br><span class="line">                &amp;&amp; mBorderOutsideColor == defaultColor) {<span class="comment">// 这里的是如果内圆边框不为空且颜色值不是默认值，就画一个内圆的边框</span></span><br><span class="line">            radius = (defaultWidth &lt; defaultHeight ? defaultWidth</span><br><span class="line">                    : defaultHeight) / <span class="number">2</span> - mBorderThickness;</span><br><span class="line">            drawCircleBorder(canvas, radius + mBorderThickness / <span class="number">2</span>,</span><br><span class="line">                    mBorderInsideColor);</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (mBorderInsideColor == defaultColor</span><br><span class="line">                &amp;&amp; mBorderOutsideColor != defaultColor) {<span class="comment">// 这里的是如果外圆边框不为空且颜色值不是默认值，就画一个外圆的边框</span></span><br><span class="line">            radius = (defaultWidth &lt; defaultHeight ? defaultWidth</span><br><span class="line">                    : defaultHeight) / <span class="number">2</span> - mBorderThickness;</span><br><span class="line">            drawCircleBorder(canvas, radius + mBorderThickness / <span class="number">2</span>,</span><br><span class="line">                    mBorderOutsideColor);</span><br><span class="line">        } <span class="keyword">else</span> {<span class="comment">// 这种情况是没有设置属性颜色的情况下，即没有边框的情况</span></span><br><span class="line">            radius = (defaultWidth &lt; defaultHeight ? defaultWidth</span><br><span class="line">                    : defaultHeight) / <span class="number">2</span>;</span><br><span class="line">        }</span><br><span class="line">        Bitmap roundBitmap = getCroppedRoundBitmap(bitmap, radius);</span><br><span class="line">        canvas.drawBitmap(roundBitmap, defaultWidth / <span class="number">2</span> - radius, defaultHeight</span><br><span class="line">                / <span class="number">2</span> - radius, <span class="keyword">null</span>);</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取裁剪后的圆形图片</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bmp</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> radius</span></span><br><span class="line"><span class="comment">     *            半径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Bitmap <span class="title">getCroppedRoundBitmap</span><span class="params">(Bitmap bmp, <span class="keyword">int</span> radius)</span> </span>{</span><br><span class="line">        Bitmap scaledSrcBmp;</span><br><span class="line">        <span class="keyword">int</span> diameter = radius * <span class="number">2</span>;</span><br><span class="line">        <span class="comment">// 为了防止宽高不相等，造成圆形图片变形，因此截取长方形中处于中间位置最大的正方形图片</span></span><br><span class="line">        <span class="keyword">int</span> bmpWidth = bmp.getWidth();</span><br><span class="line">        <span class="keyword">int</span> bmpHeight = bmp.getHeight();</span><br><span class="line">        <span class="keyword">int</span> squareWidth = <span class="number">0</span>, squareHeight = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">0</span>, y = <span class="number">0</span>;</span><br><span class="line">        Bitmap squareBitmap;</span><br><span class="line">        <span class="keyword">if</span> (bmpHeight &gt; bmpWidth) {<span class="comment">// 高大于宽</span></span><br><span class="line">            squareWidth = squareHeight = bmpWidth;</span><br><span class="line">            x = <span class="number">0</span>;</span><br><span class="line">            y = (bmpHeight - bmpWidth) / <span class="number">2</span>;</span><br><span class="line">            <span class="comment">// 截取正方形图片</span></span><br><span class="line">            squareBitmap = Bitmap.createBitmap(bmp, x, y, squareWidth,</span><br><span class="line">                    squareHeight);</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (bmpHeight &lt; bmpWidth) {<span class="comment">// 宽大于高</span></span><br><span class="line">            squareWidth = squareHeight = bmpHeight;</span><br><span class="line">            x = (bmpWidth - bmpHeight) / <span class="number">2</span>;</span><br><span class="line">            y = <span class="number">0</span>;</span><br><span class="line">            squareBitmap = Bitmap.createBitmap(bmp, x, y, squareWidth,</span><br><span class="line">                    squareHeight);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            squareBitmap = bmp;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (squareBitmap.getWidth() != diameter</span><br><span class="line">                || squareBitmap.getHeight() != diameter) {</span><br><span class="line">            scaledSrcBmp = Bitmap.createScaledBitmap(squareBitmap, diameter,</span><br><span class="line">                    diameter, <span class="keyword">true</span>);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            scaledSrcBmp = squareBitmap;</span><br><span class="line">        }</span><br><span class="line">        Bitmap output = Bitmap.createBitmap(scaledSrcBmp.getWidth(),</span><br><span class="line">                scaledSrcBmp.getHeight(), Bitmap.Config.ARGB_8888);</span><br><span class="line">        Canvas canvas = <span class="keyword">new</span> Canvas(output);</span><br><span class="line"> </span><br><span class="line">        Paint paint = <span class="keyword">new</span> Paint();</span><br><span class="line">        Rect rect = <span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">0</span>, scaledSrcBmp.getWidth(),</span><br><span class="line">                scaledSrcBmp.getHeight());</span><br><span class="line"> </span><br><span class="line">        paint.setAntiAlias(<span class="keyword">true</span>);</span><br><span class="line">        paint.setFilterBitmap(<span class="keyword">true</span>);</span><br><span class="line">        paint.setDither(<span class="keyword">true</span>);</span><br><span class="line">        canvas.drawARGB(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        canvas.drawCircle(scaledSrcBmp.getWidth() / <span class="number">2</span>,</span><br><span class="line">                scaledSrcBmp.getHeight() / <span class="number">2</span>, scaledSrcBmp.getWidth() / <span class="number">2</span>,</span><br><span class="line">                paint);</span><br><span class="line">        paint.setXfermode(<span class="keyword">new</span> PorterDuffXfermode(PorterDuff.Mode.SRC_IN));</span><br><span class="line">        canvas.drawBitmap(scaledSrcBmp, rect, rect, paint);</span><br><span class="line">        bmp = <span class="keyword">null</span>;</span><br><span class="line">        squareBitmap = <span class="keyword">null</span>;</span><br><span class="line">        scaledSrcBmp = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> output;</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 画边缘的圆，即内圆或者外圆</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawCircleBorder</span><span class="params">(Canvas canvas, <span class="keyword">int</span> radius, <span class="keyword">int</span> color)</span> </span>{</span><br><span class="line">        Paint paint = <span class="keyword">new</span> Paint();</span><br><span class="line">        <span class="comment">/* 去锯齿 */</span></span><br><span class="line">        paint.setAntiAlias(<span class="keyword">true</span>);</span><br><span class="line">        paint.setFilterBitmap(<span class="keyword">true</span>);</span><br><span class="line">        paint.setDither(<span class="keyword">true</span>);</span><br><span class="line">        paint.setColor(color);</span><br><span class="line">        <span class="comment">/* 设置paint的　style　为STROKE：空心 */</span></span><br><span class="line">        paint.setStyle(Paint.Style.STROKE);</span><br><span class="line">        <span class="comment">/* 设置paint的外框宽度 */</span></span><br><span class="line">        paint.setStrokeWidth(mBorderThickness);</span><br><span class="line">        canvas.drawCircle(defaultWidth / <span class="number">2</span>, defaultHeight / <span class="number">2</span>, radius, paint);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="属性文件"><a href="#属性文件" class="headerlink" title="属性文件"></a>属性文件</h2><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">declare-styleable</span> <span class="attr">name</span>=<span class="string">"round_image_view"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"border_width"</span> <span class="attr">format</span>=<span class="string">"dimension"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"border_incolor"</span> <span class="attr">format</span>=<span class="string">"color"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"border_outcolor"</span> <span class="attr">format</span>=<span class="string">"color"</span>&gt;</span><span class="tag">&lt;/<span class="name">attr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">declare-styleable</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="用法："><a href="#用法：" class="headerlink" title="用法："></a>用法：</h2><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">com.iruiyou.pet.utils.RoundImageView</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:id</span>=<span class="string">"@+id/headIv"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:layout_width</span>=<span class="string">"125dp"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:layout_height</span>=<span class="string">"125dp"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:layout_marginTop</span>=<span class="string">"92dp"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:src</span>=<span class="string">"@drawable/head_home"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">loonggg:border_incolor</span>=<span class="string">"#000fff"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">loonggg:border_outcolor</span>=<span class="string">"#fff000"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">loonggg:border_width</span>=<span class="string">"10dp"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">app:layout_constraintLeft_toLeftOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">app:layout_constraintRight_toRightOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure><h1 id="2、使用开源库"><a href="#2、使用开源库" class="headerlink" title="2、使用开源库"></a>2、使用开源库</h1><p>见下方网页</p><p>参考：<a href="https://blog.csdn.net/shenggaofei/article/details/83793536" target="_blank" rel="noopener">https://blog.csdn.net/shenggaofei/article/details/83793536</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1、自定义控件方式&quot;&gt;&lt;a href=&quot;#1、自定义控件方式&quot; class=&quot;headerlink&quot; title=&quot;1、自定义控件方式&quot;&gt;&lt;/a&gt;1、自定义控件方式&lt;/h1&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="Android" scheme="http://blog.iwxyi.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>PHP Redis</title>
    <link href="http://blog.iwxyi.com/2019/03/05/PHP-Redis/"/>
    <id>http://blog.iwxyi.com/2019/03/05/PHP-Redis/</id>
    <published>2019-03-05T08:29:00.000Z</published>
    <updated>2019-10-13T08:31:38.028Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>开始在 PHP 中使用 Redis 前， 我们需要确保已经安装了 redis 服务及 PHP redis 驱动，且你的机器上能正常使用 PHP。 接下来让我们安装 PHP redis 驱动：下载地址为:<a href="https://github.com/phpredis/phpredis/releases" target="_blank" rel="noopener"><strong>https://github.com/phpredis/phpredis/releases</strong></a>。</p><a id="more"></a><h3 id="PHP安装redis扩展"><a href="#PHP安装redis扩展" class="headerlink" title="PHP安装redis扩展"></a>PHP安装redis扩展</h3><p>以下操作需要在下载的 phpredis 目录中完成：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://github.com/phpredis/phpredis/archive/3.1.4.tar.gz</span><br><span class="line">$ cd phpredis-3.1.4                      # 进入 phpredis 目录</span><br><span class="line">$ /usr/local/php/bin/phpize              # php安装后的路径</span><br><span class="line">$ ./configure --with-php-config=/usr/local/php/bin/php-config</span><br><span class="line">$ make &amp;&amp; make install</span><br></pre></td></tr></tbody></table></figure><h3 id="修改php-ini文件"><a href="#修改php-ini文件" class="headerlink" title="修改php.ini文件"></a>修改php.ini文件</h3><figure class="highlight cmd"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/local/php/lib/php.ini</span><br></pre></td></tr></tbody></table></figure><p>增加如下内容:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">extension_dir = "/usr/local/php/lib/php/extensions/no-debug-zts-20090626"</span><br><span class="line"></span><br><span class="line">extension=redis.so</span><br></pre></td></tr></tbody></table></figure><p>安装完成后重启php-fpm 或 apache。查看phpinfo信息，就能看到redis扩展。</p><h2 id="连接到-redis-服务"><a href="#连接到-redis-服务" class="headerlink" title="连接到 redis 服务"></a>连接到 redis 服务</h2><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">//连接本地的 Redis 服务</span></span><br><span class="line">   $redis = <span class="keyword">new</span> Redis();</span><br><span class="line">   $redis-&gt;connect(<span class="string">'127.0.0.1'</span>, <span class="number">6379</span>);</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">"Connection to server successfully"</span>;</span><br><span class="line">         <span class="comment">//查看服务是否运行</span></span><br><span class="line">   <span class="keyword">echo</span> <span class="string">"Server is running: "</span> . $redis-&gt;ping();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>执行脚本，输出结果为：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Connection to server sucessfully</span><br><span class="line">Server is running: PONG</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="Redis-PHP-String-字符串-实例"><a href="#Redis-PHP-String-字符串-实例" class="headerlink" title="Redis PHP String(字符串) 实例"></a>Redis PHP String(字符串) 实例</h2><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   <span class="comment">//连接本地的 Redis 服务</span></span><br><span class="line">   $redis = <span class="keyword">new</span> Redis();</span><br><span class="line">   $redis-&gt;connect(<span class="string">'127.0.0.1'</span>, <span class="number">6379</span>);</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">"Connection to server successfully"</span>;</span><br><span class="line">   <span class="comment">//设置 redis 字符串数据</span></span><br><span class="line">   $redis-&gt;set(<span class="string">"tutorial-name"</span>, <span class="string">"Redis tutorial"</span>);</span><br><span class="line">   <span class="comment">// 获取存储的数据并输出</span></span><br><span class="line">   <span class="keyword">echo</span> <span class="string">"Stored string in redis:: "</span> . $redis-&gt;get(<span class="string">"tutorial-name"</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>执行脚本，输出结果为：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Connection to server sucessfully</span><br><span class="line">Stored string in redis:: Redis tutorial</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="Redis-PHP-List-列表-实例"><a href="#Redis-PHP-List-列表-实例" class="headerlink" title="Redis PHP List(列表) 实例"></a>Redis PHP List(列表) 实例</h2><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   <span class="comment">//连接本地的 Redis 服务</span></span><br><span class="line">   $redis = <span class="keyword">new</span> Redis();</span><br><span class="line">   $redis-&gt;connect(<span class="string">'127.0.0.1'</span>, <span class="number">6379</span>);</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">"Connection to server successfully"</span>;</span><br><span class="line">   <span class="comment">//存储数据到列表中</span></span><br><span class="line">   $redis-&gt;lpush(<span class="string">"tutorial-list"</span>, <span class="string">"Redis"</span>);</span><br><span class="line">   $redis-&gt;lpush(<span class="string">"tutorial-list"</span>, <span class="string">"Mongodb"</span>);</span><br><span class="line">   $redis-&gt;lpush(<span class="string">"tutorial-list"</span>, <span class="string">"Mysql"</span>);</span><br><span class="line">   <span class="comment">// 获取存储的数据并输出</span></span><br><span class="line">   $arList = $redis-&gt;lrange(<span class="string">"tutorial-list"</span>, <span class="number">0</span> ,<span class="number">5</span>);</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">"Stored string in redis"</span>;</span><br><span class="line">   print_r($arList);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>执行脚本，输出结果为：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Connection to server sucessfully</span><br><span class="line">Stored string in redis</span><br><span class="line">Mysql</span><br><span class="line">Mongodb</span><br><span class="line">Redis</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="Redis-PHP-Keys-实例"><a href="#Redis-PHP-Keys-实例" class="headerlink" title="Redis PHP Keys 实例"></a>Redis PHP Keys 实例</h2><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   <span class="comment">//连接本地的 Redis 服务</span></span><br><span class="line">   $redis = <span class="keyword">new</span> Redis();</span><br><span class="line">   $redis-&gt;connect(<span class="string">'127.0.0.1'</span>, <span class="number">6379</span>);</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">"Connection to server successfully"</span>;</span><br><span class="line">   <span class="comment">// 获取数据并输出</span></span><br><span class="line">   $arList = $redis-&gt;keys(<span class="string">"*"</span>);</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">"Stored keys in redis:: "</span>;</span><br><span class="line">   print_r($arList);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>执行脚本，输出结果为：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Connection to server sucessfully</span><br><span class="line">Stored string in redis::</span><br><span class="line">tutorial-name</span><br><span class="line">tutorial-list</span><br></pre></td></tr></tbody></table></figure><hr><blockquote><p>参考：<a href="https://www.runoob.com/redis/redis-php.html" target="_blank" rel="noopener">https://www.runoob.com/redis/redis-php.html</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;开始在 PHP 中使用 Redis 前， 我们需要确保已经安装了 redis 服务及 PHP redis 驱动，且你的机器上能正常使用 PHP。 接下来让我们安装 PHP redis 驱动：下载地址为:&lt;a href=&quot;https://github.com/phpredis/phpredis/releases&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;https://github.com/phpredis/phpredis/releases&lt;/strong&gt;&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="PHP" scheme="http://blog.iwxyi.com/tags/PHP/"/>
    
      <category term="Redis" scheme="http://blog.iwxyi.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>AJAX</title>
    <link href="http://blog.iwxyi.com/2019/02/28/AJAX/"/>
    <id>http://blog.iwxyi.com/2019/02/28/AJAX/</id>
    <published>2019-02-28T07:42:00.000Z</published>
    <updated>2019-10-13T07:43:22.021Z</updated>
    
    <content type="html"><![CDATA[<p>纯粹的 AJAX</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">saveInfo</span>(<span class="params"></span>) </span>{</span><br><span class="line"><span class="keyword">var</span> XHR = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> FD = <span class="keyword">new</span> FormData();</span><br><span class="line"><span class="keyword">var</span> name = <span class="built_in">document</span>.getElementById(<span class="string">"name"</span>).value;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest)</span><br><span class="line">XHR = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.ActiveXObject)</span><br><span class="line">XHR = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line"></span><br><span class="line">FD.append(<span class="string">"name"</span>, name);</span><br><span class="line"></span><br><span class="line">XHR.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span> (XHR.readyState == <span class="number">4</span> &amp;&amp; XHR.status == <span class="number">200</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">var</span> text = XHR.responseText; <span class="comment">// 返回的文本</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">XHR.open(<span class="string">'POST'</span>, <span class="string">'index.php'</span>, <span class="literal">true</span>)</span><br><span class="line">XHR.send(FD);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><hr><p>以云笺保存信息的函数为例：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">saveInfo</span>(<span class="params"></span>) </span>{</span><br><span class="line"><span class="keyword">var</span> XHR;</span><br><span class="line"><span class="keyword">var</span> FD = <span class="keyword">new</span> FormData();</span><br><span class="line"><span class="keyword">var</span> name = <span class="built_in">document</span>.getElementById(<span class="string">"name"</span>).value;</span><br><span class="line"><span class="keyword">var</span> info = <span class="built_in">document</span>.getElementById(<span class="string">"info"</span>).value;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (name == <span class="string">""</span>) <span class="keyword">return</span> ;</span><br><span class="line"><span class="comment">// 去掉首尾空格</span></span><br><span class="line"><span class="keyword">var</span> noblank_name = name.replace(<span class="regexp">/(^\s*)|(\s*$)/g</span>,<span class="string">""</span>);</span><br><span class="line"><span class="keyword">if</span> (noblank_name != name){</span><br><span class="line">name = noblank_name;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"name"</span>).value = name;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">XHR = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest)</span><br><span class="line">{</span><br><span class="line">XHR = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.ActiveXObject)</span><br><span class="line">{</span><br><span class="line">XHR = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">FD.append(<span class="string">"name"</span>, name);</span><br><span class="line">FD.append(<span class="string">"info"</span>, info);</span><br><span class="line"></span><br><span class="line">XHR.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span> (XHR.readyState == <span class="number">4</span> &amp;&amp; XHR.status == <span class="number">200</span>)</span><br><span class="line">{</span><br><span class="line">mdui.snackbar({</span><br><span class="line">message: <span class="string">'保存成功'</span>,</span><br><span class="line">buttonText: <span class="string">'历史'</span>,</span><br><span class="line">onButtonClick: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line"><span class="built_in">window</span>.open(<span class="string">"index.php?h=1&amp;n="</span> + <span class="built_in">encodeURI</span>(name));</span><br><span class="line">},</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">save_time = (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime();</span><br><span class="line">save_text = info;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">XHR.open(<span class="string">'POST'</span>, <span class="string">'index.php'</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">XHR.send(FD);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'info'</span>).focus();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="jQuery用法"><a href="#jQuery用法" class="headerlink" title="jQuery用法"></a>jQuery用法</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实时聊天获取头像例子</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_head</span>(<span class="params">fromid, toid</span>) </span>{</span><br><span class="line">    $.post(</span><br><span class="line">    API_URL+<span class="string">"getHead"</span>,<span class="comment">// 网址</span></span><br><span class="line">        {<span class="string">"fromid"</span>:fromid, <span class="string">"toid"</span>:toid},<span class="comment">// 数据</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>{<span class="comment">// 返回后</span></span><br><span class="line">            from_head = e.from_head;</span><br><span class="line">            to_head = e.to_head;</span><br><span class="line">        }, <span class="string">"json"</span><span class="comment">// 格式是 json</span></span><br><span class="line">    );</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;纯粹的 AJAX&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;saveInfo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; XHR = &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; FD = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; FormData();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; name = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;).value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.XMLHttpRequest)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		XHR = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; XMLHttpRequest();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.ActiveXObject)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		XHR = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ActiveXObject(&lt;span class=&quot;string&quot;&gt;&quot;Microsoft.XMLHTTP&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	FD.append(&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;, name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	XHR.onreadystatechange = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;	&lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (XHR.readyState == &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; &amp;amp;&amp;amp; XHR.status == &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; text = XHR.responseText; &lt;span class=&quot;comment&quot;&gt;// 返回的文本&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	XHR.open(&lt;span class=&quot;string&quot;&gt;&#39;POST&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;index.php&#39;&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	XHR.send(FD);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="JS" scheme="http://blog.iwxyi.com/tags/JS/"/>
    
      <category term="AJAX" scheme="http://blog.iwxyi.com/tags/AJAX/"/>
    
      <category term="jQuery" scheme="http://blog.iwxyi.com/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>Java Lambda表达式简写</title>
    <link href="http://blog.iwxyi.com/2019/02/28/Java-Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%AE%80%E5%86%99/"/>
    <id>http://blog.iwxyi.com/2019/02/28/Java-Lambda表达式简写/</id>
    <published>2019-02-28T05:11:00.000Z</published>
    <updated>2019-10-13T05:12:54.095Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、取代匿名内部类"><a href="#1、取代匿名内部类" class="headerlink" title="1、取代匿名内部类"></a>1、取代匿名内部类</h2><h3 id="无参函数简写"><a href="#无参函数简写" class="headerlink" title="无参函数简写"></a>无参函数简写</h3><p>如果需要新建一个线程，一种常见的写法是这样：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JDK7 匿名内部类写法</span></span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable(){<span class="comment">// 接口名</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>{<span class="comment">// 方法名</span></span><br><span class="line">        System.out.println(<span class="string">"Thread run()"</span>);</span><br><span class="line">    }</span><br><span class="line">}).start();</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><p>使用lambda进行无参函数的简写：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JDK8 Lambda表达式写法</span></span><br><span class="line"><span class="keyword">new</span> Thread(</span><br><span class="line">        () -&gt; System.out.println(<span class="string">"Thread run()"</span>)<span class="comment">// 省略接口名和方法名</span></span><br><span class="line">).start();</span><br></pre></td></tr></tbody></table></figure><p>如果函数体有多行，可以用大括号括起来:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Thread(</span><br><span class="line">        () -&gt; {</span><br><span class="line">            System.out.print(<span class="string">"Hello"</span>);</span><br><span class="line">            System.out.println(<span class="string">" Hoolee"</span>);</span><br><span class="line">        }</span><br><span class="line">).start();</span><br></pre></td></tr></tbody></table></figure><h3 id="有参函数简写"><a href="#有参函数简写" class="headerlink" title="有参函数简写"></a>有参函数简写</h3><p>如果要给一个字符串列表通过自定义比较器，按照字符串长度进行排序，Java 7的书写形式如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JDK7 匿名内部类写法</span></span><br><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">"I"</span>, <span class="string">"love"</span>, <span class="string">"you"</span>, <span class="string">"too"</span>);</span><br><span class="line">Collections.sort(list, <span class="keyword">new</span> Comparator&lt;String&gt;(){<span class="comment">// 接口名</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String s1, String s2)</span></span>{<span class="comment">// 方法名</span></span><br><span class="line">        <span class="keyword">if</span>(s1 == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(s2 == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> s1.length()-s2.length();</span><br><span class="line">    }</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>上述代码通过内部类重载了<code>Comparator</code>接口的<code>compare()</code>方法，实现比较逻辑。采用Lambda表达式可简写如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JDK8 Lambda表达式写法</span></span><br><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">"I"</span>, <span class="string">"love"</span>, <span class="string">"you"</span>, <span class="string">"too"</span>);</span><br><span class="line">Collections.sort(list, (s1, s2) -&gt;{<span class="comment">// 省略参数表的类型</span></span><br><span class="line">    <span class="keyword">if</span>(s1 == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(s2 == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> s1.length()-s2.length();</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><h2 id="自定义函数接口"><a href="#自定义函数接口" class="headerlink" title="自定义函数接口"></a>自定义函数接口</h2><p>自定义函数接口很容易，只需要编写一个只有一个抽象方法的接口即可。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义函数接口</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ConsumerInterface</span>&lt;<span class="title">T</span>&gt;</span>{</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(T t)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>上面代码中的@FunctionalInterface是可选的，但加上该标注编译器会帮你检查接口是否符合函数接口规范。就像加入@Override标注会检查是否重载了函数一样。</p><p>有了上述接口定义，就可以写出类似如下的代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ConsumerInterface&lt;String&gt; consumer = str -&gt; System.out.println(str);</span><br></pre></td></tr></tbody></table></figure><p>进一步的，还可以这样使用：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyStream</span>&lt;<span class="title">T</span>&gt;</span>{</span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; list;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myForEach</span><span class="params">(ConsumerInterface&lt;T&gt; consumer)</span></span>{<span class="comment">// 1</span></span><br><span class="line">        <span class="keyword">for</span>(T t : list){</span><br><span class="line">            consumer.accept(t);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">MyStream&lt;String&gt; stream = <span class="keyword">new</span> MyStream&lt;String&gt;();</span><br><span class="line">stream.myForEach(str -&gt; System.out.println(str));<span class="comment">// 使用自定义函数接口书写Lambda表达式</span></span><br></pre></td></tr></tbody></table></figure><hr><blockquote><p>参考：<a href="https://www.cnblogs.com/CarpenterLee/p/5978721.html" target="_blank" rel="noopener">https://www.cnblogs.com/CarpenterLee/p/5978721.html</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、取代匿名内部类&quot;&gt;&lt;a href=&quot;#1、取代匿名内部类&quot; class=&quot;headerlink&quot; title=&quot;1、取代匿名内部类&quot;&gt;&lt;/a&gt;1、取代匿名内部类&lt;/h2&gt;&lt;h3 id=&quot;无参函数简写&quot;&gt;&lt;a href=&quot;#无参函数简写&quot; class=&quot;headerlink&quot; title=&quot;无参函数简写&quot;&gt;&lt;/a&gt;无参函数简写&lt;/h3&gt;&lt;p&gt;如果需要新建一个线程，一种常见的写法是这样：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// JDK7 匿名内部类写法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Thread(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Runnable(){&lt;span class=&quot;comment&quot;&gt;// 接口名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;span class=&quot;comment&quot;&gt;// 方法名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;Thread run()&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}).start();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="Lambda" scheme="http://blog.iwxyi.com/tags/Lambda/"/>
    
      <category term="Java" scheme="http://blog.iwxyi.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>C++ generate生成</title>
    <link href="http://blog.iwxyi.com/2019/02/28/C-generate%E7%94%9F%E6%88%90/"/>
    <id>http://blog.iwxyi.com/2019/02/28/C-generate生成/</id>
    <published>2019-02-27T23:51:00.000Z</published>
    <updated>2019-10-13T00:00:45.970Z</updated>
    
    <content type="html"><![CDATA[<p>根据首地址和尾地址来赋值：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ForwardIterator</span>, <span class="title">class</span> <span class="title">Generator</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">generate</span>(</span></span><br><span class="line"><span class="class"><span class="title">ForwardIterator</span> _<span class="title">First</span>,</span></span><br><span class="line"><span class="class"><span class="title">ForwardIterator</span> _<span class="title">Last</span>,</span></span><br><span class="line"><span class="class"><span class="title">Generator</span> _<span class="title">Gen</span></span></span><br><span class="line"><span class="class">);</span></span><br></pre></td></tr></tbody></table></figure><p>每次调用该对象，函数为范围的每个元素调用，且不需要返回相同的值。例如，从文件读取或引用和修改本地状态。 生成器的结果类型必须可转换为可用于向前迭代器类型的值范围的。</p><a id="more"></a><p>示例：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; v1 ( <span class="number">5</span> );</span><br><span class="line"><span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt;::iterator Iter1;</span><br><span class="line"></span><br><span class="line">generate ( v1.begin ( ), v1.end ( ) , rand );</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ( Iter1 = v1.begin( ) ; Iter1 != v1.end( ) ; Iter1++ )</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *Iter1 &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>// 根据首地址和元素数量来赋值</p><p><code>template&lt;class OutputIterator, class Diff, class Generator&gt;</code></p><p><code>void generate_n( OutputIterator First, Diff Count, Generator Gen);</code></p><p>参见：VS2015<br><a href="https://msdn.microsoft.com/zh-cn/library/46h7chx6.aspx" target="_blank" rel="noopener">https://msdn.microsoft.com/zh-cn/library/46h7chx6.aspx</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;根据首地址和尾地址来赋值：&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&amp;lt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ForwardIterator&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Generator&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;title&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;generate&lt;/span&gt;(&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;	&lt;span class=&quot;title&quot;&gt;ForwardIterator&lt;/span&gt; _&lt;span class=&quot;title&quot;&gt;First&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;	&lt;span class=&quot;title&quot;&gt;ForwardIterator&lt;/span&gt; _&lt;span class=&quot;title&quot;&gt;Last&lt;/span&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;	&lt;span class=&quot;title&quot;&gt;Generator&lt;/span&gt; _&lt;span class=&quot;title&quot;&gt;Gen&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;每次调用该对象，函数为范围的每个元素调用，且不需要返回相同的值。例如，从文件读取或引用和修改本地状态。 生成器的结果类型必须可转换为可用于向前迭代器类型的值范围的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C++" scheme="http://blog.iwxyi.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Android选取相册图片并压缩</title>
    <link href="http://blog.iwxyi.com/2019/02/27/Android%E9%80%89%E5%8F%96%E7%9B%B8%E5%86%8C%E5%9B%BE%E7%89%87%E5%B9%B6%E5%8E%8B%E7%BC%A9/"/>
    <id>http://blog.iwxyi.com/2019/02/27/Android选取相册图片并压缩/</id>
    <published>2019-02-27T03:25:00.000Z</published>
    <updated>2019-10-13T03:25:45.376Z</updated>
    
    <content type="html"><![CDATA[<p>现在手机中相机的像素越来越高因,手机照的相片就越来越来大, 我们想通过选择相册中图片来显示在界面中,或者进行分享. 因为图片太大的原因很容易造成手机出现OMM而崩溃,一些分享照片的平台对分享图片的大小也有一定的限制.所以我们就必须对从相册选出来的图片进行压缩.</p><a id="more"></a><h2 id="选取图片"><a href="#选取图片" class="headerlink" title="选取图片"></a>选取图片</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 打开系统相册</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">openAlbum</span><span class="params">()</span></span>{</span><br><span class="line">    Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_GET_CONTENT);</span><br><span class="line">    intent.setType(<span class="string">"image/*"</span>);</span><br><span class="line">    <span class="comment">//设置请求码，以便我们区分返回的数据</span></span><br><span class="line">    startActivityForResult(intent, <span class="number">100</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">100</span> == requestCode) {</span><br><span class="line">        <span class="keyword">if</span> (data != <span class="keyword">null</span>) {</span><br><span class="line">            <span class="comment">//获取数据、获取内容解析者对象</span></span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                Bitmap mBitmap = BitmapFactory.decodeStream(</span><br><span class="line">                    getContentResolver().openInputStream(data.getData()));</span><br><span class="line">                imageview.setImageBitmap(mBitmap);</span><br><span class="line"></span><br><span class="line">            } <span class="keyword">catch</span> (FileNotFoundException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="压缩打开的图片"><a href="#压缩打开的图片" class="headerlink" title="压缩打开的图片"></a>压缩打开的图片</h2><p><strong>下面看具体代码:</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 计算位图的采样比例大小</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> options</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> imageView 控件(根据控件的大小进行压缩)</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calculatInSampleSize</span><span class="params">(BitmapFactory.Options options, ImageView imageView)</span> </span>{</span><br><span class="line">     <span class="comment">//获取位图的原宽高</span></span><br><span class="line">     <span class="keyword">final</span> <span class="keyword">int</span> w = options.outWidth;</span><br><span class="line">     <span class="keyword">final</span> <span class="keyword">int</span> h = options.outHeight;</span><br><span class="line"> </span><br><span class="line">     <span class="keyword">if</span> (imageView!=<span class="keyword">null</span>){</span><br><span class="line">         <span class="comment">//获取控件的宽高</span></span><br><span class="line">         <span class="keyword">final</span> <span class="keyword">int</span> reqWidth = imageView.getWidth();</span><br><span class="line">         <span class="keyword">final</span> <span class="keyword">int</span> reqHeight = imageView.getHeight();</span><br><span class="line"> </span><br><span class="line">         <span class="comment">//默认为一(就是不压缩)</span></span><br><span class="line">         <span class="keyword">int</span> inSampleSize = <span class="number">1</span>;</span><br><span class="line">         <span class="comment">//如果原图的宽高比需要的图片宽高大</span></span><br><span class="line">         <span class="keyword">if</span> (w &gt; reqWidth || h &gt; reqHeight) {</span><br><span class="line">             <span class="keyword">if</span> (w &gt; h) {</span><br><span class="line">                 inSampleSize = Math.round((<span class="keyword">float</span>) h / (<span class="keyword">float</span>) reqHeight);</span><br><span class="line">             } <span class="keyword">else</span> {</span><br><span class="line">                 inSampleSize = Math.round((<span class="keyword">float</span>) w / (<span class="keyword">float</span>) reqWidth);</span><br><span class="line">             }</span><br><span class="line">         }</span><br><span class="line"> </span><br><span class="line">         System.out.println(<span class="string">"压缩比为:"</span> + inSampleSize);</span><br><span class="line"> </span><br><span class="line">         <span class="keyword">return</span> inSampleSize;</span><br><span class="line"> </span><br><span class="line">     }<span class="keyword">else</span> {</span><br><span class="line">         <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">     }</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure><p>这里是对图像压缩比的计算,因为我项目的原因,所以我的压缩比计算是通过传入的ImageView的宽高来计算的,如果想根据自己设置的宽高来压缩只要把,传入的参数:<code>ImageView imageView</code>，改成<code>int width,int height</code></p><p>然后再修改方法中相应的代码即可! 这个方法在很多博客中也提到过…</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 将Uri转换成Bitmap</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> uri</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> options</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">decodeBitmap</span><span class="params">(Context context, Uri uri, BitmapFactory.Options options)</span> </span>{</span><br><span class="line">     Bitmap bitmap = <span class="keyword">null</span>;</span><br><span class="line"> </span><br><span class="line">     <span class="keyword">if</span> (uri != <span class="keyword">null</span>) {</span><br><span class="line">         ContentResolver cr = context.getContentResolver();</span><br><span class="line">         InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">         <span class="keyword">try</span> {</span><br><span class="line">             <span class="comment">/**</span></span><br><span class="line"><span class="comment">              * 将图片的Uri地址转换成一个输入流</span></span><br><span class="line"><span class="comment">              */</span></span><br><span class="line">             inputStream = cr.openInputStream(uri);</span><br><span class="line"> </span><br><span class="line">             <span class="comment">/**</span></span><br><span class="line"><span class="comment">              * 将输入流转换成Bitmap</span></span><br><span class="line"><span class="comment">              */</span></span><br><span class="line">             bitmap = BitmapFactory.decodeStream(inputStream, <span class="keyword">null</span>, options);</span><br><span class="line"> </span><br><span class="line">             <span class="keyword">assert</span> inputStream != <span class="keyword">null</span>;</span><br><span class="line">             inputStream.close();</span><br><span class="line">         } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">             e.printStackTrace();</span><br><span class="line">         }</span><br><span class="line">     }</span><br><span class="line">     <span class="keyword">return</span> bitmap;</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure><p>这个方法是将将Uri地址转换成一个Bitmap.  因为我们从相册选择图片后会在 OnActivityResult返回一个Intent对象data,我们通过这个 data的getdata()方法就可以得到一个Uri 地址…</p><p>然后就是最后一个方法了</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 对图片进行重新采样</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> uri 图片的Uri地址</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> imageView</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">compressBitmap</span><span class="params">(Context context, Uri uri, ImageView imageView)</span> </span>{</span><br><span class="line">     BitmapFactory.Options options = <span class="keyword">new</span> BitmapFactory.Options();</span><br><span class="line">     options.inJustDecodeBounds = <span class="keyword">false</span>;</span><br><span class="line">     decodeBitmap(context, uri, options);</span><br><span class="line">     options = <span class="keyword">new</span> BitmapFactory.Options();</span><br><span class="line">     options.inSampleSize = calculatInSampleSize(options, imageView);</span><br><span class="line">     Bitmap bitmap = <span class="keyword">null</span>;</span><br><span class="line"> </span><br><span class="line">     <span class="keyword">try</span> {</span><br><span class="line">         bitmap = decodeBitmap(context, uri, options);</span><br><span class="line">     } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">     }</span><br><span class="line"> </span><br><span class="line">     <span class="keyword">return</span> bitmap;</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure><p>这个方法是将得到Bitmap 通过计算出来的压缩比 进行重新采样返回一个压缩后的Bitmap对象!,也是我们最终调用的方法,方法简单不必多说!</p><p>具体使用:<br>把上面的代码写在一个工具类中,然后在需要使用的地方调用 compressBitmap()即可!</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (requestCode == GALLERY_REQUEST_CODE) {<span class="comment">//是否是从图库返回</span></span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        Uri originalUri = data.getData(); <span class="comment">// 获得图片的uri</span></span><br><span class="line">        <span class="comment">//对图片进行压缩</span></span><br><span class="line">        Bitmap bitmap = BitmapCompress.compressBitmap(getActivity(),originalUri,ivpapers);</span><br><span class="line">        ivpapers.setImageBitmap(bitmap);</span><br><span class="line">        System.out.println(<span class="string">"压缩后图片的高度:"</span>+bitmap.getHeight());</span><br><span class="line">        System.out.println(<span class="string">"压缩后图片的宽度:"</span>+bitmap.getWidth());</span><br><span class="line">    } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><blockquote><p>博参考：<a href="https://blog.csdn.net/qq_23179075/article/details/52261588" target="_blank" rel="noopener">https://blog.csdn.net/qq_23179075/article/details/52261588</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在手机中相机的像素越来越高因,手机照的相片就越来越来大, 我们想通过选择相册中图片来显示在界面中,或者进行分享. 因为图片太大的原因很容易造成手机出现OMM而崩溃,一些分享照片的平台对分享图片的大小也有一定的限制.所以我们就必须对从相册选出来的图片进行压缩.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="Android" scheme="http://blog.iwxyi.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android双指触摸放大图片</title>
    <link href="http://blog.iwxyi.com/2019/02/26/Android%E5%8F%8C%E6%8C%87%E8%A7%A6%E6%91%B8%E6%94%BE%E5%A4%A7%E5%9B%BE%E7%89%87/"/>
    <id>http://blog.iwxyi.com/2019/02/26/Android双指触摸放大图片/</id>
    <published>2019-02-26T03:23:00.000Z</published>
    <updated>2019-10-13T03:24:20.407Z</updated>
    
    <content type="html"><![CDATA[<p><code>View.OnTouchListener</code>，<code>MotionEvent.ACTION_POINTER_DOWN</code>、<code>MotionEvent.ACTION_MOVE</code></p><a id="more"></a><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tongzhen.magnify_test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Matrix;</span><br><span class="line"><span class="keyword">import</span> android.graphics.PointF;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.MotionEvent;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.ImageView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnTouchListener</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ImageView img;</span><br><span class="line">    <span class="comment">// 縮放控制</span></span><br><span class="line">    <span class="keyword">private</span> Matrix savedMatrix = <span class="keyword">new</span> Matrix(); <span class="comment">// 保存按下时的状态</span></span><br><span class="line">    <span class="keyword">private</span> Matrix matrix = <span class="keyword">new</span> Matrix();      <span class="comment">// 每次和按下的状态进行比较</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不同状态的表示：</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NONE = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DRAG = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ZOOM = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mode = NONE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义第一个按下的点，两只接触点的中点，以及两指按下的距离：</span></span><br><span class="line">    <span class="keyword">private</span> PointF startPoint = <span class="keyword">new</span> PointF();</span><br><span class="line">    <span class="keyword">private</span> PointF midPoint = <span class="keyword">new</span> PointF();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> oriDis = <span class="number">1f</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        img = (ImageView) <span class="keyword">this</span>.findViewById(R.id.main_imgZooming);</span><br><span class="line">        img.setOnTouchListener(<span class="keyword">this</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算两个触摸点之间的距离</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">float</span> <span class="title">distance</span><span class="params">(MotionEvent event)</span> </span>{</span><br><span class="line">        <span class="keyword">float</span> x = event.getX(<span class="number">0</span>) - event.getX(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">float</span> y = event.getY(<span class="number">0</span>) - event.getY(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> Float.valueOf(String.valueOf(Math.sqrt(x * x + y * y))) ;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算两个触摸点的中点</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> PointF <span class="title">middle</span><span class="params">(MotionEvent event)</span> </span>{</span><br><span class="line">        <span class="keyword">float</span> x = event.getX(<span class="number">0</span>) + event.getX(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">float</span> y = event.getY(<span class="number">0</span>) + event.getY(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PointF(x / <span class="number">2</span>, y / <span class="number">2</span>);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouch</span><span class="params">(View v, MotionEvent event)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (v == img) {</span><br><span class="line">            ImageView view = (ImageView) v;</span><br><span class="line">            <span class="keyword">switch</span> (event.getAction() &amp; MotionEvent.ACTION_MASK) {</span><br><span class="line">                <span class="comment">// 单指按下</span></span><br><span class="line">                <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">                    matrix.set(view.getImageMatrix());</span><br><span class="line">                    savedMatrix.set(matrix);</span><br><span class="line">                    startPoint.set(event.getX(), event.getY());</span><br><span class="line">                    mode = DRAG;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="comment">// 双指按下</span></span><br><span class="line">                <span class="keyword">case</span> MotionEvent.ACTION_POINTER_DOWN:</span><br><span class="line">                    oriDis = distance(event);</span><br><span class="line">                    <span class="keyword">if</span> (oriDis &gt; <span class="number">10f</span>) {</span><br><span class="line">                        savedMatrix.set(matrix);</span><br><span class="line">                        midPoint = middle(event);</span><br><span class="line">                        mode = ZOOM;</span><br><span class="line">                    }</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="comment">// 手指放开</span></span><br><span class="line">                <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">                <span class="keyword">case</span> MotionEvent.ACTION_POINTER_UP:</span><br><span class="line">                    mode = NONE;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="comment">// 单指滑动事件</span></span><br><span class="line">                <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">                    <span class="keyword">if</span> (mode == DRAG) {</span><br><span class="line">                        <span class="comment">// 是一个手指拖动</span></span><br><span class="line">                        matrix.set(savedMatrix);</span><br><span class="line">                        matrix.postTranslate(event.getX() - startPoint.x, event.getY() - startPoint.y);</span><br><span class="line">                    } <span class="keyword">else</span> <span class="keyword">if</span> (mode == ZOOM) {</span><br><span class="line">                        <span class="comment">// 两个手指滑动</span></span><br><span class="line">                        <span class="keyword">float</span> newDist = distance(event);</span><br><span class="line">                        <span class="keyword">if</span> (newDist &gt; <span class="number">10f</span>) {</span><br><span class="line">                            matrix.set(savedMatrix);</span><br><span class="line">                            <span class="keyword">float</span> scale = newDist / oriDis; <span class="comment">// 压缩比例</span></span><br><span class="line">                            matrix.postScale(scale, scale, midPoint.x, midPoint.y);</span><br><span class="line">                        }</span><br><span class="line">                    }</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span> :</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// 设置ImageView的Matrix</span></span><br><span class="line">            view.setImageMatrix(matrix);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;View.OnTouchListener&lt;/code&gt;，&lt;code&gt;MotionEvent.ACTION_POINTER_DOWN&lt;/code&gt;、&lt;code&gt;MotionEvent.ACTION_MOVE&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="Android" scheme="http://blog.iwxyi.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android动态创建控件</title>
    <link href="http://blog.iwxyi.com/2019/02/26/Android%E5%8A%A8%E6%80%81%E5%88%9B%E5%BB%BA%E6%8E%A7%E4%BB%B6/"/>
    <id>http://blog.iwxyi.com/2019/02/26/Android动态创建控件/</id>
    <published>2019-02-26T03:09:00.000Z</published>
    <updated>2019-10-13T03:11:28.278Z</updated>
    
    <content type="html"><![CDATA[<h2 id="动态创建绝对布局的控件"><a href="#动态创建绝对布局的控件" class="headerlink" title="动态创建绝对布局的控件"></a>动态创建绝对布局的控件</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span> </span>{</span><br><span class="line">    TextView tv = <span class="keyword">new</span> TextView(<span class="keyword">this</span>);</span><br><span class="line">    tv.setText(<span class="string">"TextView的内容"</span>);</span><br><span class="line">    AbsoluteLayout.LayoutParams lp1 = <span class="keyword">new</span> AbsoluteLayout.LayoutParams(</span><br><span class="line">            ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT, <span class="number">0</span>,<span class="number">100</span>);</span><br><span class="line">    absoluteLayout.addView(tv, lp1);</span><br><span class="line">    <span class="comment">//tv.layout(100, 100, 100, 100);</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>如果原来是 LinearLayout 等布局，则可以嵌套在一个 AbsoluteLayout 中</p><a id="more"></a><h2 id="控件移动"><a href="#控件移动" class="headerlink" title="控件移动"></a>控件移动</h2><p>直接 layout 方法就可以，但是有些不能这样移动，于是要用到 LayoutParams：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 动态创建</span></span><br><span class="line">AbsoluteLayout.LayoutParams lp = <span class="keyword">new</span> AbsoluteLayout.LayoutParams(</span><br><span class="line">        ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT, <span class="number">0</span>,<span class="number">100</span>);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LayoutParams layoutParams=tv.getLayoutParams();</span><br><span class="line">layoutParams.height=x;</span><br><span class="line">layoutParams.width=y;</span><br><span class="line">tv.setLayoutParams(layoutParams);</span><br></pre></td></tr></tbody></table></figure><h2 id="来个复杂一点的"><a href="#来个复杂一点的" class="headerlink" title="来个复杂一点的"></a>来个复杂一点的</h2><p>网上找的野教程</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>{</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    &nbsp;</span><br><span class="line">    <span class="comment">//设置界面的布局</span></span><br><span class="line">    RelativeLayout relativeLayout = <span class="keyword">new</span> RelativeLayout(<span class="keyword">this</span>);</span><br><span class="line">    setContentView(relativeLayout);</span><br><span class="line">    &nbsp;</span><br><span class="line">    <span class="comment">//添加一个AbsoluteLayout子布局,并给这个布局添加一个button</span></span><br><span class="line">    AbsoluteLayout abslayout = <span class="keyword">new</span> AbsoluteLayout (<span class="keyword">this</span>);</span><br><span class="line">    abslayout.setId(<span class="number">11</span>);</span><br><span class="line">    Buttonbtn1 = <span class="keyword">new</span> Button(<span class="keyword">this</span>);</span><br><span class="line">    btn1.setText(”thisis a abslayout button”);</span><br><span class="line">    btn1.setId(<span class="number">1</span>);</span><br><span class="line">    AbsoluteLayout.LayoutParams lp0 = <span class="keyword">new</span> AbsoluteLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,</span><br><span class="line">                                      ViewGroup.LayoutParams.WRAP_CONTENT, <span class="number">100</span>, <span class="number">0</span>);</span><br><span class="line">    abslayout.addView(btn1, lp0 );</span><br><span class="line">    <span class="comment">//将这个子布局添加到主布局中</span></span><br><span class="line">    RelativeLayout.LayoutParams lp1 = <span class="keyword">new</span> RelativeLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);</span><br><span class="line">    lp1.addRule(RelativeLayout.ALIGN_PARENT_TOP);</span><br><span class="line">    lp1.addRule(RelativeLayout.CENTER_HORIZONTAL, RelativeLayout.TRUE);</span><br><span class="line">    relativeLayout.addView(abslayout , lp1);</span><br><span class="line">    &nbsp;</span><br><span class="line">    <span class="comment">//再添加一个子布局</span></span><br><span class="line">    RelativeLayout relativeLayout1 = <span class="keyword">new</span> RelativeLayout(<span class="keyword">this</span>);</span><br><span class="line">    Button btn2 = newButton(<span class="keyword">this</span>);</span><br><span class="line">    btn2.setText(”thisis a relativeLayout1 button”);</span><br><span class="line">    btn2.setId(<span class="number">2</span>);</span><br><span class="line">    RelativeLayout.LayoutParams lp2 = <span class="keyword">new</span> RelativeLayout.LayoutParams(ViewGroup.LayoutParams.FILL_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);</span><br><span class="line">    lp2.addRule(RelativeLayout.ALIGN_PARENT_TOP);</span><br><span class="line">    lp2.addRule(RelativeLayout.CENTER_HORIZONTAL, RelativeLayout.TRUE);</span><br><span class="line">    relativeLayout1.addView(btn2 , lp2);</span><br><span class="line">    &nbsp;</span><br><span class="line">    <span class="comment">//将这个布局添加到主布局中</span></span><br><span class="line">    RelativeLayout.LayoutParams lp11 = <span class="keyword">new</span> RelativeLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);</span><br><span class="line">    lp11.addRule(RelativeLayout.BELOW , <span class="number">11</span>);</span><br><span class="line">    relativeLayout.addView(relativeLayout1 , lp11);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>以上代码执行的操作是：</p><p>创建一个<code>RelativeLayout relativeLayou</code><br>创建一个<code>AbsoluteLayout abslayout</code><br>创建一个<code>Button btn1</code><br>把<code>btn1</code>添加到<code>abslayout</code>中，然后再把<code>abslayout</code>添加到<code>relativeLayout</code>中<br>然后又创建了一个<code>RelativeLayout relativeLayout1</code><br>在创建一个<code>Button btn2</code><br>把<code>btn2</code>添加到<code>relativeLayout1</code>上<br>最后把<code>relativeLayout1</code>添加到了<code>relativeLayout</code></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;动态创建绝对布局的控件&quot;&gt;&lt;a href=&quot;#动态创建绝对布局的控件&quot; class=&quot;headerlink&quot; title=&quot;动态创建绝对布局的控件&quot;&gt;&lt;/a&gt;动态创建绝对布局的控件&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;initView&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    TextView tv = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; TextView(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    tv.setText(&lt;span class=&quot;string&quot;&gt;&quot;TextView的内容&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    AbsoluteLayout.LayoutParams lp1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; AbsoluteLayout.LayoutParams(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    absoluteLayout.addView(tv, lp1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//tv.layout(100, 100, 100, 100);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;如果原来是 LinearLayout 等布局，则可以嵌套在一个 AbsoluteLayout 中&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="Android" scheme="http://blog.iwxyi.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android等待对话框</title>
    <link href="http://blog.iwxyi.com/2019/02/23/Android%E7%AD%89%E5%BE%85%E5%AF%B9%E8%AF%9D%E6%A1%86/"/>
    <id>http://blog.iwxyi.com/2019/02/23/Android等待对话框/</id>
    <published>2019-02-23T03:06:00.000Z</published>
    <updated>2019-10-13T03:07:20.464Z</updated>
    
    <content type="html"><![CDATA[<p>导入包(自动)</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.app.ProgressDialog;</span><br></pre></td></tr></tbody></table></figure><p>声明全局变量</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> ProgressDialog progressDialog;</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><p>显示对话框</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">progressDialog = ProgressDialog.show(<span class="keyword">this</span>, <span class="string">"请稍等"</span>, <span class="string">"正在登录"</span>, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br></pre></td></tr></tbody></table></figure><p>关闭对话框</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (progressDialog != <span class="keyword">null</span>)</span><br><span class="line">progressDialog.dismiss();</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;导入包(自动)&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; android.app.ProgressDialog;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;声明全局变量&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; ProgressDialog progressDialog;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="Android" scheme="http://blog.iwxyi.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android Toast获取全局上下文的静态方法</title>
    <link href="http://blog.iwxyi.com/2019/02/21/Android-Toast%E8%8E%B7%E5%8F%96%E5%85%A8%E5%B1%80%E4%B8%8A%E4%B8%8B%E6%96%87%E7%9A%84%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95/"/>
    <id>http://blog.iwxyi.com/2019/02/21/Android-Toast获取全局上下文的静态方法/</id>
    <published>2019-02-21T02:57:00.000Z</published>
    <updated>2019-10-13T02:57:44.388Z</updated>
    
    <content type="html"><![CDATA[<p>用这个方法，toast即可全局使用……</p><p>因为发现 Log 有时候会打印不出来（强转或出错），所以就改用 toast</p><a id="more"></a><hr><p>在Android的清单文件做如下申明：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">application</span> <span class="attr">android:name</span>=<span class="string">"com.xyz.MyApplication"</span>&gt;</span> </span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>然后写这个类：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> <span class="keyword">extends</span> <span class="title">Application</span></span>{ </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Context context; </span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span></span>{ </span><br><span class="line">        <span class="keyword">super</span>.onCreate(); </span><br><span class="line">        MyApplication.context = getApplicationContext(); </span><br><span class="line">    } </span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Context <span class="title">getAppContext</span><span class="params">()</span> </span>{ </span><br><span class="line">        <span class="keyword">return</span> MyApplication.context; </span><br><span class="line">    } </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>调用<code>MyApplication.getAppContext()</code>来静态的获取你应用程序的context。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用这个方法，toast即可全局使用……&lt;/p&gt;
&lt;p&gt;因为发现 Log 有时候会打印不出来（强转或出错），所以就改用 toast&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="Android" scheme="http://blog.iwxyi.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android List BaseAdapter</title>
    <link href="http://blog.iwxyi.com/2019/02/20/Android-List-BaseAdapter/"/>
    <id>http://blog.iwxyi.com/2019/02/20/Android-List-BaseAdapter/</id>
    <published>2019-02-20T02:50:00.000Z</published>
    <updated>2019-10-13T02:51:20.589Z</updated>
    
    <content type="html"><![CDATA[<p><strong>BaseAdapter</strong></p><a id="more"></a><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        ListView lv = findViewById(R.id.lv);</span><br><span class="line">        lv.setAdapter(<span class="keyword">new</span> MyListAdapter()); <span class="comment">// 设置 数据适配器</span></span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 实现 BaseAdapter 方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyListAdapter</span> <span class="keyword">extends</span> <span class="title">BaseAdapter</span> </span>{</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>{</span><br><span class="line">            <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>{</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getItemId</span><span class="params">(<span class="keyword">int</span> position)</span> </span>{</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, ViewGroup parent)</span> </span>{</span><br><span class="line">            TextView tv;</span><br><span class="line">            <span class="keyword">if</span> (convertView == <span class="keyword">null</span>) {</span><br><span class="line">                tv = <span class="keyword">new</span> TextView(MainActivity.<span class="keyword">this</span>);</span><br><span class="line">            } </span><br><span class="line">            <span class="keyword">else</span> {</span><br><span class="line">                tv = (TextView) convertView;</span><br><span class="line">            }</span><br><span class="line">            tv.setText(<span class="string">"索引："</span> + position);</span><br><span class="line">            <span class="keyword">return</span> tv;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;BaseAdapter&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="Android" scheme="http://blog.iwxyi.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android项目精简</title>
    <link href="http://blog.iwxyi.com/2019/02/15/Android%E9%A1%B9%E7%9B%AE%E7%B2%BE%E7%AE%80/"/>
    <id>http://blog.iwxyi.com/2019/02/15/Android项目精简/</id>
    <published>2019-02-15T02:37:00.000Z</published>
    <updated>2019-10-13T02:51:37.358Z</updated>
    
    <content type="html"><![CDATA[<p>Build –&gt; Clean Project</p><p>可以清理出很大一部分的空间</p><a id="more"></a><p>手动删除以下文件或者目录</p><ul><li>Dir : ProjectFolder/<strong>build</strong></li><li>Dir : ProjectFolder/<strong>app/build</strong></li><li>Dir : ProjectFolder/<strong>.gradle</strong></li><li>Dir : ProjectFolder/<strong>.idea</strong></li><li>Dir : ProjectFolder/<strong>captures</strong></li><li>File : ProjectFolder/<strong>*.iml</strong></li><li>File : ProjectFolder/<strong>local.properties</strong></li><li>File : ProjectFolder/<strong>.DS_Store</strong></li><li>File : ProjectFolder/<strong>.externalNativeBuild</strong></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Build –&amp;gt; Clean Project&lt;/p&gt;
&lt;p&gt;可以清理出很大一部分的空间&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="Android" scheme="http://blog.iwxyi.com/tags/Android/"/>
    
      <category term="项目管理" scheme="http://blog.iwxyi.com/tags/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Android PopupMenu弹出菜单</title>
    <link href="http://blog.iwxyi.com/2019/02/14/Android-PopupMenu%E5%BC%B9%E5%87%BA%E8%8F%9C%E5%8D%95/"/>
    <id>http://blog.iwxyi.com/2019/02/14/Android-PopupMenu弹出菜单/</id>
    <published>2019-02-14T02:52:00.000Z</published>
    <updated>2019-10-13T02:53:13.383Z</updated>
    
    <content type="html"><![CDATA[<p>菜单文件</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">menu</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:id</span>=<span class="string">"@+id/exit"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">"退出"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:id</span>=<span class="string">"@+id/set"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">"设置"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:id</span>=<span class="string">"@+id/account"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">"账号"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><a id="more"></a><p>代码文件</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.menutest03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Activity;<span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.MenuInflater;</span><br><span class="line"><span class="keyword">import</span> android.view.MenuItem;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.View.OnClickListener;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.PopupMenu;</span><br><span class="line"><span class="keyword">import</span> android.widget.PopupMenu.OnMenuItemClickListener;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">OnClickListener</span>,<span class="title">OnMenuItemClickListener</span></span>{</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Button button1;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        button1 = (Button)findViewById(R.id.button1);</span><br><span class="line">        button1.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//点击按钮后，加载弹出式菜单</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>{</span><br><span class="line">        <span class="comment">//创建弹出式菜单对象（最低版本11）</span></span><br><span class="line">        PopupMenu popup = <span class="keyword">new</span> PopupMenu(<span class="keyword">this</span>, v);<span class="comment">//第二个参数是绑定的那个view</span></span><br><span class="line">        <span class="comment">//获取菜单填充器</span></span><br><span class="line">        MenuInflater inflater = popup.getMenuInflater();</span><br><span class="line">        <span class="comment">//填充菜单</span></span><br><span class="line">        inflater.inflate(R.menu.main, popup.getMenu());</span><br><span class="line">        <span class="comment">//绑定菜单项的点击事件</span></span><br><span class="line">        popup.setOnMenuItemClickListener(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">//显示(这一行代码不要忘记了)</span></span><br><span class="line">        popup.show(); </span><br><span class="line">        </span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//弹出式菜单的单击事件处理</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onMenuItemClick</span><span class="params">(MenuItem item)</span> </span>{</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="keyword">switch</span> (item.getItemId()) {</span><br><span class="line">        <span class="keyword">case</span> R.id.exit:</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, <span class="string">"退出"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> R.id.set:</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, <span class="string">"设置"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> R.id.account:</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, <span class="string">"账号"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;菜单文件&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;menu&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;xmlns:android&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://schemas.android.com/apk/res/android&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;android:id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@+id/exit&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:title&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;退出&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;android:id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@+id/set&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:title&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;设置&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;android:id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@+id/account&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:title&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;账号&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;menu&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="Android" scheme="http://blog.iwxyi.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Qt生成桌面快捷方式</title>
    <link href="http://blog.iwxyi.com/2019/02/11/Qt%E7%94%9F%E6%88%90%E6%A1%8C%E9%9D%A2%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F/"/>
    <id>http://blog.iwxyi.com/2019/02/11/Qt生成桌面快捷方式/</id>
    <published>2019-02-11T09:02:00.000Z</published>
    <updated>2019-10-13T09:02:44.550Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创建桌面快捷方式"><a href="#创建桌面快捷方式" class="headerlink" title="创建桌面快捷方式"></a>创建桌面快捷方式</h1><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addLinkToDeskTop</span><span class="params">(<span class="keyword">const</span> QString&amp; filename,<span class="keyword">const</span> QString&amp; name)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">     QFile::link(filename, QStandardPaths::writableLocation(QStandardPaths::DesktopLocation).append(<span class="string">"/"</span>).append(name+<span class="string">".lnk"</span>));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><h1 id="删除桌面快捷方式"><a href="#删除桌面快捷方式" class="headerlink" title="删除桌面快捷方式"></a>删除桌面快捷方式</h1><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">delDeskTopLink</span><span class="params">(<span class="keyword">const</span> QString&amp; name)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    QString fileName = QStandardPaths::writableLocation(QStandardPaths::DesktopLocation).append(<span class="string">"/"</span>).append(name+<span class="string">".lnk"</span>);</span><br><span class="line">    <span class="keyword">if</span>(QFile::exists(fileName))</span><br><span class="line">        <span class="keyword">return</span> QFile::remove(fileName);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>其中fileName 为应用程序的程序名 如：C:\test\test.exe</p><hr><blockquote><p>参考：<a href="https://blog.csdn.net/xzpblog/article/details/75172928" target="_blank" rel="noopener">https://blog.csdn.net/xzpblog/article/details/75172928</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;创建桌面快捷方式&quot;&gt;&lt;a href=&quot;#创建桌面快捷方式&quot; class=&quot;headerlink&quot; title=&quot;创建桌面快捷方式&quot;&gt;&lt;/a&gt;创建桌面快捷方式&lt;/h1&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;addLinkToDeskTop&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; QString&amp;amp; filename,&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; QString&amp;amp; name)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     QFile::link(filename, QStandardPaths::writableLocation(QStandardPaths::DesktopLocation).append(&lt;span class=&quot;string&quot;&gt;&quot;/&quot;&lt;/span&gt;).append(name+&lt;span class=&quot;string&quot;&gt;&quot;.lnk&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C++" scheme="http://blog.iwxyi.com/tags/C/"/>
    
      <category term="Qt" scheme="http://blog.iwxyi.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>Android带数据切换Activity</title>
    <link href="http://blog.iwxyi.com/2019/02/11/Android%E5%B8%A6%E6%95%B0%E6%8D%AE%E5%88%87%E6%8D%A2Activity/"/>
    <id>http://blog.iwxyi.com/2019/02/11/Android带数据切换Activity/</id>
    <published>2019-02-11T03:05:00.000Z</published>
    <updated>2019-10-13T03:06:15.043Z</updated>
    
    <content type="html"><![CDATA[<h4 id="当前-Activity-传递数据"><a href="#当前-Activity-传递数据" class="headerlink" title="当前 Activity 传递数据"></a>当前 Activity 传递数据</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Intent activity_change= <span class="keyword">new</span> Intent(Activityanother.<span class="keyword">this</span>, MainActivity.class);    <span class="comment">//切换 Activityanother至MainActivity</span></span><br><span class="line">Bundle bundle = <span class="keyword">new</span> Bundle();<span class="comment">// 创建Bundle对象</span></span><br><span class="line">bundle.putInt(<span class="string">"data"</span>,data );<span class="comment">//  放入data值为int型</span></span><br><span class="line">activity_change.putExtras(bundle);<span class="comment">// 将Bundle对象放入到Intent上</span></span><br><span class="line">startActivity(activity_change);<span class="comment">//  开始跳转</span></span><br></pre></td></tr></tbody></table></figure><p>如果要是 不是int型可以自己put可种类型有很多种put</p><a id="more"></a><h4 id="另一个-Activity读取数据"><a href="#另一个-Activity读取数据" class="headerlink" title="另一个 Activity读取数据"></a>另一个 Activity读取数据</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = getIntent();</span><br><span class="line">data= intent.getExtras().get(<span class="string">"data"</span>);</span><br></pre></td></tr></tbody></table></figure><blockquote><p>注意别忘了在 AndroidManifest 中声明 activity</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;当前-Activity-传递数据&quot;&gt;&lt;a href=&quot;#当前-Activity-传递数据&quot; class=&quot;headerlink&quot; title=&quot;当前 Activity 传递数据&quot;&gt;&lt;/a&gt;当前 Activity 传递数据&lt;/h4&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Intent activity_change= &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Intent(Activityanother.&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, MainActivity.class);    &lt;span class=&quot;comment&quot;&gt;//切换 Activityanother至MainActivity&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Bundle bundle = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Bundle();&lt;span class=&quot;comment&quot;&gt;// 创建Bundle对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bundle.putInt(&lt;span class=&quot;string&quot;&gt;&quot;data&quot;&lt;/span&gt;,data );&lt;span class=&quot;comment&quot;&gt;//  放入data值为int型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;activity_change.putExtras(bundle);&lt;span class=&quot;comment&quot;&gt;// 将Bundle对象放入到Intent上&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;startActivity(activity_change);&lt;span class=&quot;comment&quot;&gt;//  开始跳转&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;如果要是 不是int型可以自己put可种类型有很多种put&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="Android" scheme="http://blog.iwxyi.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android Spinner用法</title>
    <link href="http://blog.iwxyi.com/2019/02/11/Android-Spinner%E7%94%A8%E6%B3%95/"/>
    <id>http://blog.iwxyi.com/2019/02/11/Android-Spinner用法/</id>
    <published>2019-02-11T02:56:00.000Z</published>
    <updated>2019-10-13T02:56:40.351Z</updated>
    
    <content type="html"><![CDATA[<p>常用属性:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">android:spinnerMode <span class="comment">//显示模式 :dropdown和dialog两种</span></span><br><span class="line">android:dropDownWidth=<span class="string">"230dp"</span><span class="comment">//显示弹出框的宽度</span></span><br><span class="line">android:popupBackground=<span class="string">"#66ccff"</span><span class="comment">//显示弹出框的背景颜色</span></span><br><span class="line">android:entries=<span class="string">"@array/week"</span><span class="comment">//添加XML布局</span></span><br><span class="line">android:prompt <span class="comment">//当显示模式为dialog时生效,作用为显示dialog的标题内容</span></span><br></pre></td></tr></tbody></table></figure><p><strong>android:prompt 属性使用常见问题:</strong></p><a id="more"></a><p>设置之后不起作用:prompt属性只有在dialog状态才有用，所以要在xml中，将style设置为Widget.Spinner</p><p>prompt属性要用string下资源，不支持字符直接输入，否则会报错误</p><h3 id="两种写法"><a href="#两种写法" class="headerlink" title="两种写法"></a>两种写法</h3><p><strong>XML文件中设置数据源</strong></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Spinner</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/spinner_arrays"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginBottom</span>=<span class="string">"50dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:dropDownWidth</span>=<span class="string">"230dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:entries</span>=<span class="string">"@array/week"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:popupBackground</span>=<span class="string">"#66ccff"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:spinnerMode</span>=<span class="string">"dropdown"</span>&gt;</span><span class="tag">&lt;/<span class="name">Spinner</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>values/arrays.xml文件</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string-array</span> <span class="attr">name</span>=<span class="string">"week"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span> &gt;</span>星期一<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span> &gt;</span>星期二<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span> &gt;</span>星期三<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span> &gt;</span>星期四<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span> &gt;</span>星期五<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span> &gt;</span>星期六<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span> &gt;</span>星期天<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">string-array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><hr><p><strong>代码中设置数据源</strong></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Spinner</span></span></span><br><span class="line"><span class="tag">         <span class="attr">android:id</span>=<span class="string">"@+id/spinner_code"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">android:spinnerMode</span>=<span class="string">"dropdown"</span>&gt;</span><span class="tag">&lt;/<span class="name">Spinner</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">codeSp = (Spinner) findViewById(R.id.spinner_code);</span><br><span class="line"><span class="keyword">final</span> String[] arr={<span class="string">"深圳"</span>,<span class="string">"上海"</span>,<span class="string">"北京"</span>,<span class="string">"山西"</span>};</span><br><span class="line"><span class="comment">//创建ArrayAdapter对象</span></span><br><span class="line">ArrayAdapter&lt;String&gt; adapter=<span class="keyword">new</span> ArrayAdapter&lt;String&gt;(<span class="keyword">this</span>,android.R.layout.simple_list_item_multiple_choice,arr);</span><br><span class="line">codeSp.setAdapter(adapter);</span><br><span class="line"><span class="comment">/**选项选择监听*/</span></span><br><span class="line">codeSp.setOnItemSelectedListener(<span class="keyword">new</span> AdapterView.OnItemSelectedListener() {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemSelected</span><span class="params">(AdapterView&lt;?&gt; parent, View view, <span class="keyword">int</span> position, <span class="keyword">long</span> id)</span> </span>{</span><br><span class="line">        Toast.makeText(SpinnerTestActivity.<span class="keyword">this</span>, <span class="string">"点击了"</span> + arr[position], Toast.LENGTH_SHORT).show();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNothingSelected</span><span class="params">(AdapterView&lt;?&gt; parent)</span> </span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;常用属性:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;android:spinnerMode &lt;span class=&quot;comment&quot;&gt;//显示模式 :dropdown和dialog两种&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;android:dropDownWidth=&lt;span class=&quot;string&quot;&gt;&quot;230dp&quot;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;//显示弹出框的宽度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;android:popupBackground=&lt;span class=&quot;string&quot;&gt;&quot;#66ccff&quot;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;//显示弹出框的背景颜色&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;android:entries=&lt;span class=&quot;string&quot;&gt;&quot;@array/week&quot;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;//添加XML布局&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;android:prompt &lt;span class=&quot;comment&quot;&gt;//当显示模式为dialog时生效,作用为显示dialog的标题内容&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;android:prompt 属性使用常见问题:&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="Android" scheme="http://blog.iwxyi.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript-学习笔记</title>
    <link href="http://blog.iwxyi.com/2019/02/08/JavaScript-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://blog.iwxyi.com/2019/02/08/JavaScript-学习笔记/</id>
    <published>2019-02-08T07:46:00.000Z</published>
    <updated>2019-10-13T07:46:49.043Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JS-教程"><a href="#JS-教程" class="headerlink" title="JS 教程"></a>JS 教程</h1><h2 id="JS-简介"><a href="#JS-简介" class="headerlink" title="JS 简介"></a>JS 简介</h2><h3 id="写入-HTML-输出"><a href="#写入-HTML-输出" class="headerlink" title="写入 HTML 输出"></a>写入 HTML 输出</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.write(<span class="string">"&lt;h1&gt;This is a heading&lt;/h1&gt;"</span>);</span><br></pre></td></tr></tbody></table></figure><p>您<strong>只能在 HTML 输出中使用 document.write</strong>。如果您在文档加载后使用该方法，会覆盖整个文档。</p><a id="more"></a><h3 id="对事件作出反应"><a href="#对事件作出反应" class="headerlink" title="对事件作出反应"></a>对事件作出反应</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button type=<span class="string">"button"</span> onclick=<span class="string">"alert('Welcome!')"</span>&gt;点击这里&lt;<span class="regexp">/button&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="改变-HTML-内容"><a href="#改变-HTML-内容" class="headerlink" title="改变 HTML 内容"></a>改变 HTML 内容</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x=<span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>)  <span class="comment">//查找元素</span></span><br><span class="line">x.innerHTML=<span class="string">"Hello JavaScript"</span>;    <span class="comment">//改变内容</span></span><br></pre></td></tr></tbody></table></figure><h3 id="改变-HTML-图像"><a href="#改变-HTML-图像" class="headerlink" title="改变 HTML 图像"></a>改变 HTML 图像</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x=<span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>)  <span class="comment">//找到元素</span></span><br><span class="line">x.style.color=<span class="string">"#ff0000"</span>;           <span class="comment">//改变样式</span></span><br></pre></td></tr></tbody></table></figure><h3 id="验证输入"><a href="#验证输入" class="headerlink" title="验证输入"></a>验证输入</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">isNaN</span>(x) {alert(<span class="string">"Not Numeric"</span>)};</span><br></pre></td></tr></tbody></table></figure><p>##JS 实现</p><p>###<code>&lt;script&gt;</code> 标签</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">alert(<span class="string">"My First JavaScript"</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="JavaScript-函数"><a href="#JavaScript-函数" class="headerlink" title="JavaScript 函数"></a>JavaScript 函数</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;button type=<span class="string">"button"</span> onclick=<span class="string">"myFunction()"</span>&gt;Button&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">function myFunction()</span></span><br><span class="line"><span class="regexp">{</span></span><br><span class="line"><span class="regexp">document.getElementById("demo").innerHTML="My First JavaScript Function";</span></span><br><span class="line"><span class="regexp">}</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="外部的-JavaScript"><a href="#外部的-JavaScript" class="headerlink" title="外部的 JavaScript"></a>外部的 JavaScript</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"myScript.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure><p>在 &lt;head&gt; 或 &lt;body&gt; 中引用脚本文件都是可以的。实际运行效果与您在 &lt;script&gt; 标签中编写脚本完全一致。</p><p>提示：<strong>外部脚本不能包含 &lt;script&gt; 标签</strong>。</p><p>##JS 输出</p><p>如需从 JavaScript 访问某个 HTML 元素，您可以使用 document.getElementById(<em>id</em>) 方法。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;我的第一张网页&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;p id="demo"&gt;我的第一个段落&lt;/</span>p&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).innerHTML=<span class="string">"我的第一段 JavaScript"</span>;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">document.write("&lt;p&gt;我的第二段 JavaScript&lt;/</span>p&gt;<span class="string">");</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>访问 id=”demo” 的 HTML 元素，并把它的内容（innerHTML）替换为 “My First JavaScript”。</p><p>如果在文档已完成加载后执行 document.write，整个 HTML 页面将被覆盖（例如使用onclick）</p><h2 id="JS-语句"><a href="#JS-语句" class="headerlink" title="JS 语句"></a>JS 语句</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).innerHTML=<span class="string">"Hello World"</span>;</span><br></pre></td></tr></tbody></table></figure><ul><li><p>用分号来结束语句是可选的</p></li><li><p>对大小写是敏感的</p></li><li><p>会忽略多余的空格</p></li><li><p>可以在<strong>文本字符串</strong>中使用反斜杠 \ 对代码行进行换行</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.write(<span class="string">"Hello \</span></span><br><span class="line"><span class="string">World!"</span>);</span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="JS-注释"><a href="#JS-注释" class="headerlink" title="JS  注释"></a>JS  注释</h3><p>单行注释以 // 开头</p><p>多行注释以 /* 开始，以 */ 结尾</p><h2 id="JS-变量"><a href="#JS-变量" class="headerlink" title="JS 变量"></a>JS 变量</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">0</span>, b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> c = a + b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"MM"</span>,</span><br><span class="line">    ID = <span class="number">110</span>;</span><br></pre></td></tr></tbody></table></figure><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ul><li><p>数字：可以带小数点，也可以不带</p><p>极大或极小的数字可以通过科学（指数）计数法来书写：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> y=<span class="number">123e5</span>;      <span class="comment">// 12300000</span></span><br><span class="line"><span class="keyword">var</span> z=<span class="number">123e-5</span>;     <span class="comment">// 0.00123</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>字符串：用双引号或单引号包围</p></li><li><p>布尔：true 或 false</p></li></ul><h3 id="重新声明变量"><a href="#重新声明变量" class="headerlink" title="重新声明变量"></a>重新声明变量</h3><p>如果重新声明 JavaScript 变量，该<strong>变量的值不会丢失</strong></p><p>在以下两条语句执行后，变量 carname 的值依然是 “Volvo”：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> carname=<span class="string">"Volvo"</span>;</span><br><span class="line"><span class="keyword">var</span> carname;</span><br></pre></td></tr></tbody></table></figure><h3 id="动态类型"><a href="#动态类型" class="headerlink" title="动态类型"></a>动态类型</h3><p>相同的变量可用作不同的类型</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x                <span class="comment">// x 为 undefined</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">6</span>;           <span class="comment">// x 为数字</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="string">"Bill"</span>;      <span class="comment">// x 为字符串</span></span><br></pre></td></tr></tbody></table></figure><p>###数组</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cars=<span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">cars[<span class="number">0</span>]=<span class="string">"Audi"</span>;</span><br><span class="line">cars[<span class="number">1</span>]=<span class="string">"BMW"</span>;</span><br><span class="line">cars[<span class="number">2</span>]=<span class="string">"Volvo"</span>;</span><br></pre></td></tr></tbody></table></figure><p>或者 (condensed array):</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cars=<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"Audi"</span>,<span class="string">"BMW"</span>,<span class="string">"Volvo"</span>);</span><br></pre></td></tr></tbody></table></figure><p>或者 (literal array):</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cars=[<span class="string">"Audi"</span>,<span class="string">"BMW"</span>,<span class="string">"Volvo"</span>];</span><br></pre></td></tr></tbody></table></figure><p><strong>数组下标是基于零的</strong></p><h3 id="JS-对象"><a href="#JS-对象" class="headerlink" title="JS 对象"></a>JS 对象</h3><p>对象由花括号分隔。在括号内部，对象的属性以名称和值对的形式 (name : value) 来定义。属性由逗号分隔：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person={<span class="attr">firstname</span>:<span class="string">"Bill"</span>, <span class="attr">lastname</span>:<span class="string">"Gates"</span>, <span class="attr">id</span>:<span class="number">5566</span>};</span><br></pre></td></tr></tbody></table></figure><p>空格和折行无关紧要。声明可横跨多行：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person={</span><br><span class="line">firstname : <span class="string">"Bill"</span>,</span><br><span class="line">lastname  : <span class="string">"Gates"</span>,</span><br><span class="line">id        :  <span class="number">5566</span></span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>对象属性有两种寻址方式：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name=person.lastname;</span><br><span class="line">name=person[<span class="string">"lastname"</span>];</span><br></pre></td></tr></tbody></table></figure><h4 id="属性和方法"><a href="#属性和方法" class="headerlink" title="属性和方法"></a>属性和方法</h4><p>对象是数据（变量），拥有属性和方法</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> txt = <span class="string">"Hello"</span>;</span><br></pre></td></tr></tbody></table></figure><p>属性：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">txt.length=5</span><br></pre></td></tr></tbody></table></figure><p>方法：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">txt.indexOf()</span><br><span class="line">txt.replace()</span><br><span class="line">txt.search()</span><br></pre></td></tr></tbody></table></figure><h4 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">person=<span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">person.firstname=<span class="string">"Bill"</span>;</span><br><span class="line">person.lastname=<span class="string">"Gates"</span>;</span><br><span class="line">person.age=<span class="number">56</span>;</span><br><span class="line">person.eyecolor=<span class="string">"blue"</span>;</span><br></pre></td></tr></tbody></table></figure><h4 id="访问对象的属性"><a href="#访问对象的属性" class="headerlink" title="访问对象的属性"></a>访问对象的属性</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> message=<span class="string">"Hello world!"</span>;</span><br><span class="line"><span class="keyword">var</span> x=message.toUpperCase();</span><br></pre></td></tr></tbody></table></figure><h3 id="Undefined-和-Null"><a href="#Undefined-和-Null" class="headerlink" title="Undefined 和 Null"></a>Undefined 和 Null</h3><p>Undefined 这个值表示变量不含有值。</p><p>可以通过将变量的值设置为 null 来清空变量。</p><h3 id="声明变量类型"><a href="#声明变量类型" class="headerlink" title="声明变量类型"></a>声明变量类型</h3><p>当您声明新变量时，可以使用关键词 “new” 来声明其类型：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> carname = <span class="keyword">new</span> <span class="built_in">String</span>;</span><br><span class="line"><span class="keyword">var</span> x=        <span class="keyword">new</span> <span class="built_in">Number</span>;</span><br><span class="line"><span class="keyword">var</span> y=        <span class="keyword">new</span> <span class="built_in">Boolean</span>;</span><br><span class="line"><span class="keyword">var</span> cars=     <span class="keyword">new</span> <span class="built_in">Array</span>;</span><br><span class="line"><span class="keyword">var</span> person=   <span class="keyword">new</span> <span class="built_in">Object</span>;</span><br></pre></td></tr></tbody></table></figure><p>JavaScript 变量均为对象。当您声明一个变量时，就创建了一个新的对象。</p><p>下面的所有的代码行均会创初始值为 true 的 Boolean 对象：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myBoolean=<span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> myBoolean=<span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="keyword">var</span> myBoolean=<span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="string">"true"</span>);</span><br><span class="line"><span class="keyword">var</span> myBoolean=<span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="string">"false"</span>);</span><br><span class="line"><span class="keyword">var</span> myBoolean=<span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="string">"Bill Gates"</span>);</span><br></pre></td></tr></tbody></table></figure><h2 id="JS-函数"><a href="#JS-函数" class="headerlink" title="JS 函数"></a>JS 函数</h2><p>函数是由事件驱动的或者当它被调用时执行的可重复使用的代码块。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onclick=<span class="string">"myFunction('Bill Gates','CEO')"</span>&gt;点击这里&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">function myFunction(name,job)</span></span><br><span class="line"><span class="regexp">{</span></span><br><span class="line"><span class="regexp">alert("Welcome " + name + ", the " + job);</span></span><br><span class="line"><span class="regexp">}</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></tbody></table></figure><p>注意：JavaScript 对大小写敏感</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">var</span> x=<span class="number">5</span>;</span><br><span class="line">    <span class="keyword">return</span> x * x;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>return 后，整个 JavaScript 并不会停止执行，仅仅结束函数。</p><h3 id="局部与全局"><a href="#局部与全局" class="headerlink" title="局部与全局"></a>局部与全局</h3><p>在 JavaScript 函数内部声明的变量（使用 var）是<em>局部</em>变量，所以只能在函数内部访问它。（该变量的作用域是局部的）。</p><p>在函数外声明的变量是<strong>全局</strong>变量，网页上的<strong>所有脚本和函数</strong>都能访问它。</p><h3 id="向未声明的变量赋值"><a href="#向未声明的变量赋值" class="headerlink" title="向未声明的变量赋值"></a>向未声明的变量赋值</h3><p>如果您把值赋给尚未声明的变量，该变量将被自动作为<strong>全局变量声明</strong>。</p><p>这条语句：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">carname=<span class="string">"Volvo"</span>;</span><br></pre></td></tr></tbody></table></figure><p>将声明一个<strong>全局</strong>变量 carname，即使它在函数内执行。</p><h2 id="JS-运算符"><a href="#JS-运算符" class="headerlink" title="JS 运算符"></a>JS 运算符</h2><p>算数运算符：+、-、*、/、%、++、–</p><p>赋值运算符：=</p><p>比较运算符：==、===、!=、&gt;、&lt;、&gt;=、&lt;=</p><p>逻辑运算符：&amp;&amp;、||、!</p><p>条件运算符：  (  ) ? a : b</p><p><code>+</code>运算符用于把文本值或字符串变量加起来</p><p><code>===</code> ： x===5 为 true；x===”5” 为 false</p><p>如果把数字与字符串相加，结果将成为字符串</p><h2 id="JS-if-else-与-switch"><a href="#JS-if-else-与-switch" class="headerlink" title="JS if-else 与 switch"></a>JS if-else 与 switch</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( 条件<span class="number">1</span> ){ 执行<span class="number">1</span> }</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( 条件<span class="number">2</span> ) { 执行<span class="number">2</span> }</span><br><span class="line"><span class="keyword">else</span> { 执行<span class="number">3</span> }</span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(n)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">  执行<span class="number">1</span></span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">  执行<span class="number">2</span></span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">  执行<span class="number">3</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>##JS for 和 while 循环</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;cars.length;i++)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">document</span>.write(cars[i] + <span class="string">"&lt;br&gt;"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>###for/in 语句循环遍历对象的属性：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person={<span class="attr">fname</span>:<span class="string">"John"</span>,<span class="attr">lname</span>:<span class="string">"Doe"</span>,<span class="attr">age</span>:<span class="number">25</span>};</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (x <span class="keyword">in</span> person)</span><br><span class="line">{</span><br><span class="line">txt=txt + person[x];</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>###使用 while 循环来显示 cars 数组中的所有值：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cars=[<span class="string">"BMW"</span>,<span class="string">"Volvo"</span>,<span class="string">"Saab"</span>,<span class="string">"Ford"</span>];</span><br><span class="line"><span class="keyword">var</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (cars[i])</span><br><span class="line">{</span><br><span class="line">  <span class="built_in">document</span>.write(cars[i] + <span class="string">"&lt;br&gt;"</span>);</span><br><span class="line">  i++;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">{</span><br><span class="line">    x=x + <span class="string">"The number is "</span> + i + <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">    i++;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">while</span> (i&lt;<span class="number">5</span>);</span><br></pre></td></tr></tbody></table></figure><p>###break 和 continue</p><p><strong>break 语句用于跳出循环。</strong></p><p><strong>continue 用于跳过循环中的一个迭代。</strong></p><h4 id="JS-标签"><a href="#JS-标签" class="headerlink" title="JS 标签"></a>JS 标签</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">label:</span><br><span class="line">语句</span><br></pre></td></tr></tbody></table></figure><p>break 和 continue 语句仅仅是能够跳出代码块的语句</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">break</span> labelname;</span><br><span class="line"></span><br><span class="line"><span class="keyword">continue</span> labelname;</span><br></pre></td></tr></tbody></table></figure><p>continue 语句（带有或不带标签引用）只能用在循环中。</p><p>break 语句（不带标签引用），只能用在循环或 switch 中。</p><p>通过标签引用，break 语句可用于跳出任何 JavaScript 代码块。</p><h2 id="JS-错误"><a href="#JS-错误" class="headerlink" title="JS 错误"></a>JS 错误</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">{</span><br><span class="line">  <span class="keyword">var</span> x=<span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).value;</span><br><span class="line"><span class="comment">// 自定义异常可以是字符串、数字、逻辑值或对象</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isNaN</span>(x)) <span class="keyword">throw</span> <span class="string">"Not a number"</span>;</span><br><span class="line">  <span class="comment">// 在这里运行代码</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">catch</span>(err)</span><br><span class="line">{</span><br><span class="line"><span class="comment">//在这里处理错误</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>如果 getElementById 函数出错，上面的例子也会抛出一个错误</p><h2 id="JS-表单验证"><a href="#JS-表单验证" class="headerlink" title="JS 表单验证"></a>JS 表单验证</h2><h3 id="必填表单"><a href="#必填表单" class="headerlink" title="必填表单"></a>必填表单</h3><p>下面的函数用来检查用户是否已填写表单中的必填（或必选）项目。假如必填或必选项为空，那么警告框会弹出，并且函数的返回值为 false，否则函数的返回值则为 true（意味着数据没有问题）：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validate_required</span>(<span class="params">field, alerttxt</span>)</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">with</span> (field)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="literal">null</span> || value == <span class="string">""</span> )</span><br><span class="line">        {</span><br><span class="line">        alert(alerttxt);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span> </span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validate_form</span>(<span class="params">thisform</span>)</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">with</span> (thisform)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span> (validate_required(email,<span class="string">"Email must be filled out!"</span>)==<span class="literal">false</span>)</span><br><span class="line">        {</span><br><span class="line">          email.focus();<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"submitpage.htm"</span> <span class="attr">onsubmit</span>=<span class="string">"return validate_form(this)"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">Email: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">size</span>=<span class="string">"30"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="Email-验证"><a href="#Email-验证" class="headerlink" title="Email 验证"></a>Email 验证</h3><p>下面的代码检查输入的数据是否符合电子邮件地址的基本语法。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">validate_email</span><span class="params">(field,alerttxt)</span></span></span></span><br><span class="line">{</span><br><span class="line"><span class="actionscript">    <span class="keyword">with</span> (field)</span></span><br><span class="line">    {</span><br><span class="line"><span class="actionscript">        apos=value.indexOf(<span class="string">"@"</span>)</span></span><br><span class="line"><span class="actionscript">        dotpos=value.lastIndexOf(<span class="string">"."</span>)</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span> (apos&lt;<span class="number">1</span>||dotpos-apos&lt;<span class="number">2</span>) </span></span><br><span class="line">        {</span><br><span class="line">       alert(alerttxt);</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line">        }</span><br><span class="line"><span class="actionscript">        <span class="keyword">else</span></span></span><br><span class="line">        {</span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> <span class="literal">true</span></span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">validate_form</span><span class="params">(thisform)</span></span></span></span><br><span class="line">{</span><br><span class="line"><span class="actionscript">    <span class="keyword">with</span> (thisform)</span></span><br><span class="line">    {</span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span> (validate_email(email,<span class="string">"Not a valid e-mail address!"</span>)==<span class="literal">false</span>)</span></span><br><span class="line">        {</span><br><span class="line">            email.focus();</span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"submitpage.htm"</span><span class="attr">onsubmit</span>=<span class="string">"return validate_form(this);"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">Email: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">size</span>=<span class="string">"30"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h1 id="JS-HTML-DOM"><a href="#JS-HTML-DOM" class="headerlink" title="JS HTML DOM"></a>JS HTML DOM</h1><h2 id="DOM-简介"><a href="#DOM-简介" class="headerlink" title="DOM 简介"></a>DOM 简介</h2><p>###HTML DOM （文档对象模型）</p><p>当网页被加载时，浏览器会创建页面的文档对象模型（Document Object Model）。</p><p>HTML DOM 模型被构造为对象的树。</p><p>###HTML DOM 树</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://www.w3school.com.cn/i/ct_htmltree.gif" alt="HTML DOM 树" title="">                </div>                <div class="image-caption">HTML DOM 树</div>            </figure><h3 id="查找-HTML-元素"><a href="#查找-HTML-元素" class="headerlink" title="查找 HTML 元素"></a>查找 HTML 元素</h3><p>有三种方法来做这件事：</p><ul><li><p>通过 id 找到 HTML 元素</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x=<span class="built_in">document</span>.getElementById(<span class="string">"intro"</span>);</span><br></pre></td></tr></tbody></table></figure><p>如果找到该元素，则该方法将以对象（在 x 中）的形式返回该元素。</p><p>如果未找到该元素，则 x 将包含 null。</p></li><li><p>通过标签名找到 HTML 元素<br>​        查找 “main” 中的所有 &lt;p&gt; 元素：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x=<span class="built_in">document</span>.getElementById(<span class="string">"main"</span>);</span><br><span class="line"><span class="keyword">var</span> y=x.getElementsByTagName(<span class="string">"p"</span>);</span><br></pre></td></tr></tbody></table></figure></li><li><p>通过类名找到 HTML 元素<br>​        (在 IE 5,6,7,8 中无效)</p></li></ul><h2 id="DOM-HTML"><a href="#DOM-HTML" class="headerlink" title="DOM HTML"></a>DOM HTML</h2><p><strong>改变 HTML 元素的内容</strong></p><p>1、改变 HTML 输出流 <code>document.write()</code></p><p>2、改变 HTML 内容 <code>document.getElementById(id).innerHTML=new HTML</code></p><p>3、改变 HTML 属性 <code>document.getElementById(id).attribute=new valu</code></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;img id=<span class="string">"image"</span> src=<span class="string">"smiley.gif"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"image"</span>).src=<span class="string">"landscape.jpg"</span>;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="DOM-CSS"><a href="#DOM-CSS" class="headerlink" title="DOM CSS"></a>DOM CSS</h2><p><strong>改变 HTML 元素的样式</strong></p><p><code>document.getElementById(id).style.property=new style</code></p><p>下面的例子会改变 &lt;p&gt; 元素的样式：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;p id=<span class="string">"p2"</span>&gt;Hello World!<span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"p2"</span>).style.color=<span class="string">"blue"</span>;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>本例改变了 id=”id1” 的 HTML 元素的样式，当用户点击按钮时：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 id=<span class="string">"id1"</span>&gt;My Heading <span class="number">1</span>&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;button type="button" onclick="document.getElementById('id1').style.color='red'"&gt;</span></span><br><span class="line"><span class="regexp">点击这里</span></span><br><span class="line"><span class="regexp">&lt;/</span>button&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="DOM-事件"><a href="#DOM-事件" class="headerlink" title="DOM 事件"></a>DOM 事件</h2><p><strong>对 HTML 事件做出反应</strong></p><p>在本例中，当用户在 </p><h1> 元素上点击时，会改变其内容：<p></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 onclick=<span class="string">"this.innerHTML='谢谢!'"</span>&gt;请点击该文本&lt;<span class="regexp">/h1&gt;</span></span><br></pre></td></tr></tbody></table></figure></h1><h3 id="HTML-事件属性"><a href="#HTML-事件属性" class="headerlink" title="HTML 事件属性"></a>HTML 事件属性</h3><p>向 button 元素分配 onclick 事件：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onclick=<span class="string">"displayDate()"</span>&gt;点击这里&lt;<span class="regexp">/button&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="使用-HTML-DOM-来分配事件"><a href="#使用-HTML-DOM-来分配事件" class="headerlink" title="使用 HTML DOM 来分配事件"></a>使用 HTML DOM 来分配事件</h3><p>向 button 元素分配 onclick 事件：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"myBtn"</span>).onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{displayDate()};</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="onload-和-onunload-事件"><a href="#onload-和-onunload-事件" class="headerlink" title="onload 和 onunload 事件"></a>onload 和 onunload 事件</h3><p>onload 和 onunload 事件会在用户进入或离开页面时被触发。</p><p>onload 事件可用于检测访问者的浏览器类型和浏览器版本，并基于这些信息来加载网页的正确版本。</p><p>onload 和 onunload 事件可用于处理 cookie。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;body onload="checkCookies()"&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="onchange-事件"><a href="#onchange-事件" class="headerlink" title="onchange 事件"></a>onchange 事件</h3><p>onchange 事件常结合对输入字段的验证来使用。</p><p>下面是一个如何使用 onchange 的例子。当用户改变输入字段的内容时，会调用 upperCase() 函数。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type="text" id="fname" onchange="upperCase()"&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="onmouseover-和-onmouseout-事件"><a href="#onmouseover-和-onmouseout-事件" class="headerlink" title="onmouseover 和 onmouseout 事件"></a>onmouseover 和 onmouseout 事件</h3><p>onmouseover 和 onmouseout 事件可用于在用户的鼠标移至 HTML 元素上方或移出元素时触发函数。</p><h3 id="onmousedown、onmouseup-以及-onclick-事件"><a href="#onmousedown、onmouseup-以及-onclick-事件" class="headerlink" title="onmousedown、onmouseup 以及 onclick 事件"></a>onmousedown、onmouseup 以及 onclick 事件</h3><p>onmousedown, onmouseup 以及 onclick 构成了鼠标点击事件的所有部分。<br>当点击鼠标按钮时，会触发 onmousedown 事件；<br>当释放鼠标按钮时，会触发 onmouseup 事件；<br>当完成鼠标点击时，会触发 onclick 事件。</p><p>onfocus 和 onblur 事件</p><p>元素（字段，一般是 input 或 a）获得和失去焦点时</p><blockquote><p>让 div 拥有 tab 并具有 onfucus 和 onblur 属性:<br>给元素创建tab属性：tabindex=参数 (这里和z-index类似，计算tab起点)。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="tag">&lt;<span class="name">div</span> <span class="attr">tabindex</span>=<span class="string">"0"</span> <span class="attr">hidefocus</span>=<span class="string">"true"</span> <span class="attr">onfocus</span>=<span class="string">'alert("得到焦点");'</span> <span class="attr">onblur</span>=<span class="string">'alert("失去焦点");'</span> <span class="attr">style</span>=<span class="string">"border:1px solid #ccc;width:200px;height:200px;outline=0;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></tbody></table></figure></blockquote><blockquote><p>定义tab属性后，元素是默认会加上焦点虚线的，那么在 IE 中可以通过 hidefocus=”true” 去除！其他浏览器通过 outline=0 进行去除！</p></blockquote><h2 id="HTML-DOM-元素（节点）"><a href="#HTML-DOM-元素（节点）" class="headerlink" title="HTML DOM 元素（节点）"></a>HTML DOM 元素（节点）</h2><p><strong>添加和删除节点（HTML 元素）</strong></p><h3 id="创建新的-HTML-元素"><a href="#创建新的-HTML-元素" class="headerlink" title="创建新的 HTML 元素"></a>创建新的 HTML 元素</h3><p>必须首先<strong>创建该元素</strong>（元素节点），然后向一个<strong>已存在的元素追加</strong>该元素。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"div1"</span>&gt;</span><br><span class="line">&lt;p id=<span class="string">"p1"</span>&gt;这是一个段落&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">// 创建新的 &lt;p&gt; 元素</span></span><br><span class="line"><span class="keyword">var</span> para=<span class="built_in">document</span>.createElement(<span class="string">"p"</span>);</span><br><span class="line"><span class="comment">// 创建文本节点</span></span><br><span class="line"><span class="keyword">var</span> node=<span class="built_in">document</span>.createTextNode(<span class="string">"这是新段落。"</span>);</span><br><span class="line"><span class="comment">// 向 &lt;p&gt; 元素追加这个文本节点</span></span><br><span class="line">para.appendChild(node);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 找到一个已有的元素</span></span><br><span class="line"><span class="keyword">var</span> element=<span class="built_in">document</span>.getElementById(<span class="string">"div1"</span>);</span><br><span class="line"><span class="comment">// 向这个已有的元素追加新元素</span></span><br><span class="line">element.appendChild(para);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="删除已有的-HTML-元素"><a href="#删除已有的-HTML-元素" class="headerlink" title="删除已有的 HTML 元素"></a>删除已有的 HTML 元素</h3><p>必须首先获得该元素的<strong>父元素</strong></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"div1"</span>&gt;</span><br><span class="line">&lt;p id=<span class="string">"p1"</span>&gt;这是一个段落。&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">// 找到 id="div1" 的元素</span></span><br><span class="line"><span class="keyword">var</span> parent=<span class="built_in">document</span>.getElementById(<span class="string">"div1"</span>);</span><br><span class="line"><span class="comment">// 找到 id="p1" 的 &lt;p&gt; 元素</span></span><br><span class="line"><span class="keyword">var</span> child=<span class="built_in">document</span>.getElementById(<span class="string">"p1"</span>);</span><br><span class="line"><span class="comment">// 从父元素中删除子元素</span></span><br><span class="line">parent.removeChild(child);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>不引用父元素的常用解决方案：找到您希望删除的子元素，然后使用其 <strong>parentNode</strong> 属性来找到父元素：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> child=<span class="built_in">document</span>.getElementById(<span class="string">"p1"</span>);</span><br><span class="line">child.parentNode.removeChild(child);</span><br></pre></td></tr></tbody></table></figure><h1 id="JS-对象-1"><a href="#JS-对象-1" class="headerlink" title="JS 对象"></a>JS 对象</h1><h2 id="JS-对象-2"><a href="#JS-对象-2" class="headerlink" title="JS 对象"></a>JS 对象</h2><p>访问对象属性：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objectName.propertyName</span><br></pre></td></tr></tbody></table></figure><p>调用对象方法：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objectName.methodName()</span><br></pre></td></tr></tbody></table></figure><hr><p>###创建对象</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">person=<span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">person.name=<span class="string">"HHH"</span>;</span><br><span class="line">person.age=<span class="number">55</span>;</span><br></pre></td></tr></tbody></table></figure><p>替代语法（使用对象 literals）：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">person={<span class="attr">name</span>:<span class="string">"HHH"</span>,<span class="attr">age</span>:<span class="number">55</span>};</span><br></pre></td></tr></tbody></table></figure><hr><p>###使用对象构造器</p><p>​    使用函数来构造对象：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params">firstname,lastname,age,eyecolor</span>)</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">this</span>.name=name;</span><br><span class="line">    <span class="keyword">this</span>.age=age;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>一旦您有了对象构造器，就可以创建新的对象实例，就像这样：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> HHH=<span class="keyword">new</span> person(<span class="string">"HHH"</span>,<span class="number">55</span>);</span><br></pre></td></tr></tbody></table></figure><hr><h3 id="把属性添加到对象"><a href="#把属性添加到对象" class="headerlink" title="把属性添加到对象"></a>把属性添加到对象</h3><p>向已有对象添加新属性：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">person.age=<span class="number">56</span>; <span class="comment">// 直接赋值即可</span></span><br></pre></td></tr></tbody></table></figure><h3 id="把方法添加到-JavaScript-对象"><a href="#把方法添加到-JavaScript-对象" class="headerlink" title="把方法添加到 JavaScript 对象"></a>把方法添加到 JavaScript 对象</h3><p>方法只不过是附加在对象上的函数。</p><p>在构造器函数内部定义对象的方法：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params">name,age</span>)</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">this</span>.name=name;</span><br><span class="line">    <span class="keyword">this</span>.age=age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.changeName=changeName;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">changeName</span>(<span class="params">name</span>)</span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">    <span class="keyword">this</span>.name=name;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="JS-数字"><a href="#JS-数字" class="headerlink" title="JS 数字"></a>JS 数字</h2><h2 id="JS-数字-1"><a href="#JS-数字-1" class="headerlink" title="JS 数字"></a>JS 数字</h2><p>所有 JavaScript 数字均为 64 位</p><p>整数（不使用小数点或指数计数法）最多为 15 位。</p><p>小数的最大位数是 17，但是浮点运算并不总是 100% 准确</p><p><strong>属性</strong>：</p><ul><li>MAX VALUE</li><li>MIN VALUE</li><li>NEGATIVE INFINITIVE</li><li>POSITIVE INFINITIVE</li><li>NaN</li><li>prototype</li><li>constructor</li></ul><p><strong>方法</strong>：</p><ul><li>toExponential()</li><li>toFixed()</li><li>toPrecision()</li><li>toString()</li><li>valueOf()</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> y=<span class="number">0377</span>; <span class="comment">// 八进制  前缀 0</span></span><br><span class="line"><span class="keyword">var</span> z=<span class="number">0xFF</span>; <span class="comment">// 十六进制 前缀0x</span></span><br></pre></td></tr></tbody></table></figure><h2 id="JS-字符串"><a href="#JS-字符串" class="headerlink" title="JS 字符串"></a>JS 字符串</h2><p>计算长度 <code>str.length</code></p><p>添加样式 <code>str = s.big() + s.small() + s.bold() + s.italics()</code><br>​        s.blink() 闪动字符串    s.fixed() 打字机文本    strike() 删除线<br>​        s.fontcolor(“Red”)    s.fontsize(16)<br>​        s.toLowerCase()    s.toUpperCase()<br>​        s.sub() 下标    s.sup() 上标</p><p>定位字符串 <code>str.indexOf(s)</code><br>​        定位字符串中某一个指定的字符(串)首次出现的位置，没有则返回 -1</p><p>查找字符串 <code>str.match(s)</code><br>​        查找字符串中特定的字符(串)，如果找到则返回这个字符，否则返回 null</p><p>替换字符串 <code>str.replace(/s1/, "s2")</code><br>​        返回替换后的字符串，原字符串斜杠包裹，新字符串普通</p><h2 id="JS-日期"><a href="#JS-日期" class="headerlink" title="JS 日期"></a>JS 日期</h2><p>当前日期时间 <code>Data()</code> <code>Fri Feb 09 2018 21:21:21 GMT+0800 (中国标准时间)</code></p><p>时间戳（1970/1/1年迄今毫秒数） <code>getTime()</code> <code>1518183016383</code></p><p>###定义日期</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var myDate=new Date()</span><br></pre></td></tr></tbody></table></figure><p>​    注释：Date 对象自动使用当前的日期和时间作为其初始值。</p><p>###操作日期</p><p>​    使用 setFullYear() 设置具体的日期<br>​    注意：表示月份的参数介于 <strong>0 到 11</strong> 之间。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">d.setFullYear(<span class="number">1992</span>,<span class="number">10</span>,<span class="number">3</span>)</span><br><span class="line"><span class="built_in">document</span>.write(d)</span><br></pre></td></tr></tbody></table></figure><p>​    输出结果：<code>Tue Nov 03 1992 21:32:52 GMT+0800 (中国标准时间)</code></p><hr><p>​    设置 5 天后的日期</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myDate=<span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">myDate.setDate(myDate.getDate()+<span class="number">5</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="比较日期"><a href="#比较日期" class="headerlink" title="比较日期"></a>比较日期</h3><p>​    将当前日期与 2008 年 8 月 9 日做比较:</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myDate=<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">myDate.setFullYear(<span class="number">2008</span>,<span class="number">8</span>,<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> today = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (myDate&gt;today) {  }</span><br></pre></td></tr></tbody></table></figure><p>###日期转化</p><p>使用 toUTCString() 将当日的日期（根据 UTC）转换为字符串</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line"><span class="built_in">document</span>.write (d.toUTCString())</span><br></pre></td></tr></tbody></table></figure><p>​    输出结果：<code>Fri, 09 Feb 2018 13:35:52 GMT</code></p><p>今天是星期几</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> d=<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">d.getDay() <span class="comment">// 星期几（0日，6六）</span></span><br></pre></td></tr></tbody></table></figure><p>###网页版动态钟表</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">startTime</span><span class="params">()</span></span></span></span><br><span class="line">{</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> today=<span class="keyword">new</span> <span class="built_in">Date</span>()</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> h=today.getHours()</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> m=today.getMinutes()</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> s=today.getSeconds()</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// add a zero in front of numbers&lt;10</span></span></span><br><span class="line">    m=checkTime(m)</span><br><span class="line">    s=checkTime(s)</span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">'txt'</span>).innerHTML=h+<span class="string">":"</span>+m+<span class="string">":"</span>+s</span></span><br><span class="line"><span class="actionscript">    t=setTimeout(<span class="string">'startTime()'</span>,<span class="number">500</span>)</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">checkTime</span><span class="params">(i)</span></span></span></span><br><span class="line">{</span><br><span class="line"><span class="actionscript">    <span class="keyword">if</span> (i&lt;<span class="number">10</span>) </span></span><br><span class="line"><span class="actionscript">    {i=<span class="string">"0"</span> + i}</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> i</span></span><br><span class="line">}</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">"startTime()"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"txt"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="JS-算数"><a href="#JS-算数" class="headerlink" title="JS 算数"></a>JS 算数</h2><p><strong>Math（算数）对象的作用是：执行常见的算数任务。</strong></p><p>四舍五入 <code>Math.round(x)</code></p><ul><li>Math.round(0.50) == 1</li><li>Math.round(-4.40) == -4</li><li>Math.round(-4.60) == -5</li></ul><p>随机 0 - 1 之间的数 <code>Math.random()</code></p><p>取最大/小值 <code>Math.max()</code>和 <code>Math.min()</code></p><blockquote><p>在 ECMASCript v3 之前，该方法只有两个参数。</p></blockquote><p>下面的例子使用了 Math 对象的 floor() 方法和 random() 来返回一个介于 0 和 10 之间的随机数：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.write(<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">11</span>))</span><br></pre></td></tr></tbody></table></figure><p>JavaScript 提供 8 种可被 Math 对象访问的算数值：</p><ul><li>常数 Math.E</li><li>圆周率 Math.PI</li><li>2 的平方根 Math.SQRT2</li><li>1/2 的平方根 Math.SQRT1_2</li><li>2 的自然对数 Math.LN2</li><li>10 的自然对数 Math.LN10</li><li>以 2 为底的 e 的对数 Math.LOG2E</li><li>以 10 为底的 e 的对数 Math.LOG10E</li></ul><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><h3 id="定义-RegExp"><a href="#定义-RegExp" class="headerlink" title="定义 RegExp"></a>定义 RegExp</h3><p>通过 new 关键词来定义 RegExp 对象。以下代码定义了名为 patt1 的 RegExp 对象，其模式是 “e”：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> patt1=<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"e"</span>); <span class="comment">// 将寻找的是字符 "e"</span></span><br></pre></td></tr></tbody></table></figure><h3 id="RegExp-对象的方法"><a href="#RegExp-对象的方法" class="headerlink" title="RegExp 对象的方法"></a>RegExp 对象的方法</h3><p>RegExp 对象有 3 个方法：test()、exec() 以及 compile()</p><p><code>test()</code> 方法检索字符串中的指定值。返回值是 true 或 false。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> patt1=<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"e"</span>);</span><br><span class="line"><span class="built_in">document</span>.write(patt1.test(<span class="string">"best life"</span>));</span><br></pre></td></tr></tbody></table></figure><p>​    由于该字符串中存在字母 “e”，以上代码的输出将是：true</p><p><code>exec()</code> 方法检索字符串中的指定值。返回值是被找到的值。如果没有发现匹配，则返回 null。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> patt1=<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"e"</span>);</span><br><span class="line"><span class="built_in">document</span>.write(patt1.exec(<span class="string">"The best things in life are free"</span>));</span><br></pre></td></tr></tbody></table></figure><p>​    由于该字符串中存在字母 “e”，以上代码的输出将是：e</p><hr><p>您可以向 RegExp 对象添加第二个参数，以设定检索。例如，如果需要找到所有某个字符的所有存在，则可以使用 “g” 参数 (“global”)。</p><p>在使用 “g” 参数时，exec() 的工作原理如下：</p><ul><li>找到第一个 “e”，并存储其位置</li><li>如果再次运行 exec()，则从存储的位置开始检索，并找到下一个 “e”，并存储其位置</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> patt1=<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"e"</span>,<span class="string">"g"</span>);</span><br><span class="line"><span class="keyword">do</span> {</span><br><span class="line">    result=patt1.exec(<span class="string">"The best things in life are free"</span>);</span><br><span class="line">    <span class="built_in">document</span>.write(result);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">while</span> (result!=<span class="literal">null</span>)</span><br></pre></td></tr></tbody></table></figure><p>由于这个字符串中 6 个 “e” 字母，代码的输出将是：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eeeeeenull</span><br></pre></td></tr></tbody></table></figure><hr><p><code>compile()</code> 方法用于改变 RegExp。既可以改变检索模式，也可以添加或删除第二个参数。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> patt1=<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"e"</span>);</span><br><span class="line"><span class="built_in">document</span>.write(patt1.test(<span class="string">"The best things in life are free"</span>));</span><br><span class="line">patt1.compile(<span class="string">"d"</span>);</span><br><span class="line"><span class="built_in">document</span>.write(patt1.test(<span class="string">"The best things in life are free"</span>));</span><br></pre></td></tr></tbody></table></figure><p>由于字符串中存在 “e”，而没有 “d”，以上代码的输出是：truefalse</p><h1 id="JS-Window"><a href="#JS-Window" class="headerlink" title="JS Window"></a>JS Window</h1><h2 id="Window-尺寸"><a href="#Window-尺寸" class="headerlink" title="Window 尺寸"></a>Window 尺寸</h2><p>有三种方法能够确定浏览器窗口的尺寸（浏览器的视口，不包括工具栏和滚动条）。</p><p>对于Internet Explorer、Chrome、Firefox、Opera 以及 Safari：</p><ul><li>window.innerHeight - 浏览器窗口的内部高度</li><li>window.innerWidth - 浏览器窗口的内部宽度</li></ul><p>对于 Internet Explorer 8、7、6、5：</p><ul><li>document.documentElement.clientHeight</li><li>document.documentElement.clientWidth</li></ul><p>或者</p><ul><li>document.body.clientHeight</li><li>document.body.clientWidth</li></ul><p>显示浏览器窗口的高度和宽度：（涵盖所有浏览器，不包括工具栏/滚动条）：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> w=<span class="built_in">window</span>.innerWidth</span><br><span class="line">|| <span class="built_in">document</span>.documentElement.clientWidth</span><br><span class="line">|| <span class="built_in">document</span>.body.clientWidth;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> h=<span class="built_in">window</span>.innerHeight</span><br><span class="line">|| <span class="built_in">document</span>.documentElement.clientHeight</span><br><span class="line">|| <span class="built_in">document</span>.body.clientHeight;</span><br></pre></td></tr></tbody></table></figure><h3 id="其他-Window-方法"><a href="#其他-Window-方法" class="headerlink" title="其他 Window 方法"></a>其他 Window 方法</h3><ul><li>window.open() - 打开新窗口</li><li>window.close() - 关闭当前窗口</li><li>window.moveTo() - 移动当前窗口</li><li>window.resizeTo() - 调整当前窗口的尺寸</li></ul><h2 id="JS-Screen"><a href="#JS-Screen" class="headerlink" title="JS Screen"></a>JS Screen</h2><p><em>window.screen</em> 对象在编写时可以不使用 window 这个前缀。</p><p>一些属性：</p><ul><li>screen.availWidth - 可用的屏幕宽度</li><li>screen.availHeight - 可用的屏幕高度</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"可用宽度："</span> + screen.availWidth);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="JS-Location"><a href="#JS-Location" class="headerlink" title="JS Location"></a>JS Location</h2><p><em>window.location</em> 对象在编写时可不使用 window 这个前缀。</p><p>一些例子：</p><ul><li>location.href 返回当前页面的 URL</li><li>location.pathname 属性返回 URL 的路径名和文件名</li><li><strong>location.assign()</strong> 方法加载新的文档</li><li>location.hostname 返回 web 主机的域名</li><li>location.port 返回 web 主机的端口 （80 或 443）</li><li>location.protocol 返回所使用的 web 协议（http:// 或 https://）</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">newDoc</span><span class="params">()</span></span></span></span><br><span class="line">{</span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.location.assign(<span class="string">"http://www.w3school.com.cn"</span>)</span></span><br><span class="line">}</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"加载新文档"</span> <span class="attr">onclick</span>=<span class="string">"newDoc()"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="JS-History"><a href="#JS-History" class="headerlink" title="JS History"></a>JS History</h2><p><em>window.history</em> 对象在编写时可不使用 window 这个前缀。</p><p>为了保护用户隐私，对 JavaScript 访问该对象的方法做出了限制。</p><p>一些方法：</p><ul><li>history.back() - 与在浏览器点击后退按钮相同</li><li>history.forward() - 与在浏览器中点击按钮向前相同</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">goBack</span><span class="params">()</span></span></span></span><br><span class="line">{</span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.history.back()</span></span><br><span class="line">}</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"Back"</span> <span class="attr">onclick</span>=<span class="string">"goBack()"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="JS-Navigator"><a href="#JS-Navigator" class="headerlink" title="JS Navigator"></a>JS Navigator</h2><p>window.navigator 对象包含有关访问者浏览器的信息。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"example"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">txt = <span class="string">"&lt;p&gt;Browser CodeName: "</span> + navigator.appCodeName + <span class="string">"&lt;/p&gt;"</span>;</span><br><span class="line">txt+= <span class="string">"&lt;p&gt;Browser Name: "</span> + navigator.appName + <span class="string">"&lt;/p&gt;"</span>;</span><br><span class="line">txt+= <span class="string">"&lt;p&gt;Browser Version: "</span> + navigator.appVersion + <span class="string">"&lt;/p&gt;"</span>;</span><br><span class="line">txt+= <span class="string">"&lt;p&gt;Cookies Enabled: "</span> + navigator.cookieEnabled + <span class="string">"&lt;/p&gt;"</span>;</span><br><span class="line">txt+= <span class="string">"&lt;p&gt;Platform: "</span> + navigator.platform + <span class="string">"&lt;/p&gt;"</span>;</span><br><span class="line">txt+= <span class="string">"&lt;p&gt;User-agent header: "</span> + navigator.userAgent + <span class="string">"&lt;/p&gt;"</span>;</span><br><span class="line">txt+= <span class="string">"&lt;p&gt;User-agent language: "</span> + navigator.systemLanguage + <span class="string">"&lt;/p&gt;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"example"</span>).innerHTML=txt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>警告：来自 navigator 对象的信息具有误导性，不应该被用于检测浏览器版本，这是因为：</p><ul><li>navigator 数据可被浏览器使用者更改</li><li>浏览器无法报告晚于浏览器发布的新操作系统</li></ul><h3 id="浏览器检测"><a href="#浏览器检测" class="headerlink" title="浏览器检测"></a>浏览器检测</h3><p>由于 navigator 可误导浏览器检测，使用对象检测可用来嗅探不同的浏览器。</p><p>由于不同的浏览器支持不同的对象，您可以使用对象来检测浏览器。例如，由于只有 Opera 支持属性 “window.opera”，您可以据此识别出 Opera。</p><p>例子：<code>if (window.opera) {...some action...}</code></p><h2 id="JS-消息框"><a href="#JS-消息框" class="headerlink" title="JS 消息框"></a>JS 消息框</h2><p>警告框 <code>alert("文本")</code> 点击确定按钮才能继续操作</p><p>确认框 <code>confirm("文本")</code> 点击确定或者取消按钮才能继续，返回值 true 和 false</p><p>提示框 <code>prompt("文本","默认值")</code> 输入后点击确认或取消按钮才能继续</p><h2 id="JS-计时"><a href="#JS-计时" class="headerlink" title="JS 计时"></a>JS 计时</h2><p><code>var t = setTimeout("javascript语句",毫秒)</code> 未来的某时执行代码</p><p><code>clearTimeout(setTimeout_variable)</code> 取消 <code>setTimeout()</code></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> t = setTimeout(<span class="string">"alert('5秒')"</span>,<span class="number">5000</span>) <span class="comment">// 5s 后警告框</span></span><br><span class="line">clearTimeout(t) <span class="comment">// 取消 5s 后的警告框</span></span><br></pre></td></tr></tbody></table></figure><h2 id="JS-Cookies"><a href="#JS-Cookies" class="headerlink" title="JS Cookies"></a>JS Cookies</h2><p>创建一个欢迎 Cookies</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 检查 document.cookie 对象中是否存有 cookie</span></span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">getCookie</span><span class="params">(c_name)</span></span></span></span><br><span class="line">{</span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (<span class="built_in">document</span>.cookie.length&gt;<span class="number">0</span>)</span></span><br><span class="line">    {</span><br><span class="line"><span class="javascript">        c_start=<span class="built_in">document</span>.cookie.indexOf(c_name + <span class="string">"="</span>)</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span> (c_start!=<span class="number">-1</span>)</span></span><br><span class="line">        { </span><br><span class="line">            c_start=c_start + c_name.length+1 </span><br><span class="line"><span class="javascript">            c_end=<span class="built_in">document</span>.cookie.indexOf(<span class="string">";"</span>,c_start)</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (c_end==<span class="number">-1</span>) c_end=<span class="built_in">document</span>.cookie.length</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="built_in">unescape</span>(<span class="built_in">document</span>.cookie.substring(c_start,c_end))</span></span><br><span class="line">        } </span><br><span class="line">    }</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> <span class="string">""</span></span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="comment">// 将天数转换为有效的日期，然后，我们将 cookie 名称、值及其过期日期存入 document.cookie 对象。</span></span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">setCookie</span><span class="params">(c_name,value,expiredays)</span></span></span></span><br><span class="line">{</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> exdate=<span class="keyword">new</span> <span class="built_in">Date</span>()</span></span><br><span class="line">    exdate.setDate(exdate.getDate()+expiredays)</span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.cookie=c_name+ <span class="string">"="</span> +<span class="built_in">escape</span>(value)+</span></span><br><span class="line"><span class="actionscript">    ((expiredays==<span class="literal">null</span>) ? <span class="string">""</span> : <span class="string">";expires="</span>+exdate.toGMTString())</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="comment">// 如果 cookie 已设置则显示欢迎词，否则显示提示框来要求用户输入名字</span></span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">checkCookie</span><span class="params">()</span></span></span></span><br><span class="line">{</span><br><span class="line"><span class="actionscript">    username=getCookie(<span class="string">'username'</span>)</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">if</span> (username!=<span class="literal">null</span> &amp;&amp; username!=<span class="string">""</span>)</span></span><br><span class="line">    {</span><br><span class="line"><span class="actionscript">      alert(<span class="string">'Welcome again '</span>+username+<span class="string">'!'</span>)</span></span><br><span class="line">    }</span><br><span class="line"><span class="actionscript">    <span class="keyword">else</span> </span></span><br><span class="line">    {</span><br><span class="line"><span class="actionscript">        username=prompt(<span class="string">'Please enter your name:'</span>,<span class="string">""</span>)</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span> (username!=<span class="literal">null</span> &amp;&amp; username!=<span class="string">""</span>)</span></span><br><span class="line">        {</span><br><span class="line"><span class="actionscript">          setCookie(<span class="string">'username'</span>,username,<span class="number">365</span>)</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onLoad</span>=<span class="string">"checkCookie()"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h1 id="JS-库"><a href="#JS-库" class="headerlink" title="JS 库"></a>JS 库</h1><h2 id="JS-框架（库，helper）"><a href="#JS-框架（库，helper）" class="headerlink" title="JS 框架（库，helper）"></a>JS 框架（库，helper）</h2><p>一些广受欢迎的 JavaScript 框架：</p><ul><li><strong>jQuery</strong>：使用 CSS 选择器来访问和操作网页上的 HTML 元素（DOM 对象），同时提供 companion UI（用户界面）和插件</li><li>Prototype：提供用于执行常见 web 任务的简单 API；提供类和继承</li><li>MooTools：提供了可使常见的 JavaScript 编程更为简单的 API，也含有一些轻量级的效果和动画函数</li></ul><p>其他一些在上面未涉及的框架：</p><p><em>YUI</em> - Yahoo! User Interface Framework，涵盖大量函数的大型库，从简单的 JavaScript 功能到完整的 internet widget。</p><p><em>Ext JS</em> - 可定制的 widget，用于构建富因特网应用程序（rich Internet applications）。</p><p><em>Dojo</em> - 用于 DOM 操作、事件、widget 等的工具包。</p><p><em>script.aculo.us</em> - 开源的 JavaScript 框架，针对可视效果和界面行为。</p><p><em>UIZE</em> - Widget、AJAX、DOM、模板等等。</p><h3 id="CDN-内容分发网络"><a href="#CDN-内容分发网络" class="headerlink" title="CDN - 内容分发网络"></a>CDN - 内容分发网络</h3><p>如果许多不同的网站使用相同的 JavaScript 框架，那么把框架库存放在一个通用的位置供每个网页分享就变得很有意义了。</p><p>CDN (Content Delivery Network) 解决了这个问题。CDN 是包含可分享代码库的服务器网络。</p><p>Google 为一系列 JavaScript 库提供了免费的 CDN，包括：</p><ul><li>jQuery</li><li>Prototype</li><li>MooTools</li><li>Dojo</li><li>Yahoo! YUI</li></ul><p>如需在您的网页中使用 JavaScript 框架库，只需在 <code>&lt;script&gt;</code> 标签中引用该库即可：<em>见下方例子</em></p><h2 id="JS-jQuery"><a href="#JS-jQuery" class="headerlink" title="JS jQuery"></a>JS jQuery</h2><p>引用 jQuery</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"https://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>主要的 jQuery 函数是 $() 函数（jQuery 函数）。</p><p>jQuery 允许您通过 CSS 选择器来选取元素。</p><p>示例：分配一个函数以处理窗口加载事件：</p><p><strong>JavaScript 方式</strong>：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">var</span> obj=<span class="built_in">document</span>.getElementById(<span class="string">"h01"</span>);</span><br><span class="line">    obj.innerHTML=<span class="string">"Hello jQuery"</span>;</span><br><span class="line">}</span><br><span class="line">onload=myFunction;</span><br></pre></td></tr></tbody></table></figure><p><strong>jQuery 方式</strong>：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">$(<span class="string">"#h01"</span>).html(<span class="string">"Hello jQuery"</span>);</span><br><span class="line">}</span><br><span class="line">$(<span class="built_in">document</span>).ready(myFunction);</span><br></pre></td></tr></tbody></table></figure><p>由于在 JavaScript 中函数就是变量，因此可以把 myFunction 作为变量传递给 jQuery 的 ready 方法。</p><p>提示：jQuery 返回 jQuery 对象，与已传递的 DOM 对象不同。jQuery 对象拥有的属性和方法，与 DOM 对象的不同。不能在 jQuery 对象上使用 HTML DOM 的属性和方法。</p><p><strong>jQuery 允许链接（链式语法）</strong></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">$(<span class="string">"#h01"</span>).attr(<span class="string">"style"</span>,<span class="string">"color:red"</span>).html(<span class="string">"Hello jQuery"</span>)</span><br><span class="line">}</span><br><span class="line">$(<span class="built_in">document</span>).ready(myFunction);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;h1 id="h01"&gt;&lt;/</span>h1&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="JS-Prototype"><a href="#JS-Prototype" class="headerlink" title="JS Prototype"></a>JS Prototype</h2><p>引用 Prototype：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"http://ajax.googleapis.com/ajax/libs/prototype/1.7.1.0/prototype.js"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>与 jQuery 类似，Prototype 也有自己的 $() 函数。</p><p>$() 函数接受 HTML DOM 元素的 id 值（或 DOM 元素），并会向 DOM 对象添加新的功能。</p><p>与 jQuery 不同，Prototype 没有用以取代 window.onload() 的 ready() 方法。相反，Prototype 会向浏览器及 HTML DOM 添加扩展。</p><p>示例：分配一个函数以处理窗口加载事件：</p><p><strong>JavaScript 方式</strong>：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">var</span> obj=<span class="built_in">document</span>.getElementById(<span class="string">"h01"</span>);</span><br><span class="line">    obj.innerHTML=<span class="string">"Hello Prototype"</span>;</span><br><span class="line">}</span><br><span class="line">onload=myFunction;</span><br></pre></td></tr></tbody></table></figure><p><strong>Prototype 方式</strong>：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">$(<span class="string">"h01"</span>).insert(<span class="string">"Hello Prototype!"</span>);</span><br><span class="line">}</span><br><span class="line">Event.observe(<span class="built_in">window</span>,<span class="string">"load"</span>,myFunction);</span><br></pre></td></tr></tbody></table></figure><p>Event.observe() 接受三个参数：</p><ul><li>您希望处理的 HTML DOM 或 BOM（浏览器对象模型）对象</li><li>您希望处理的事件</li><li>您希望调用的函数</li></ul><p>与 jQuery 相同，Prototype 允许链式语法：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">$(<span class="string">"h01"</span>).writeAttribute(<span class="string">"style"</span>,<span class="string">"color:red"</span>).insert(<span class="string">"Hello Prototype!"</span>);</span><br><span class="line">}</span><br><span class="line">Event.observe(<span class="built_in">window</span>,<span class="string">"load"</span>,myFunction);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;h1 id="h01"&gt;&lt;/</span>h1&gt;</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JS-教程&quot;&gt;&lt;a href=&quot;#JS-教程&quot; class=&quot;headerlink&quot; title=&quot;JS 教程&quot;&gt;&lt;/a&gt;JS 教程&lt;/h1&gt;&lt;h2 id=&quot;JS-简介&quot;&gt;&lt;a href=&quot;#JS-简介&quot; class=&quot;headerlink&quot; title=&quot;JS 简介&quot;&gt;&lt;/a&gt;JS 简介&lt;/h2&gt;&lt;h3 id=&quot;写入-HTML-输出&quot;&gt;&lt;a href=&quot;#写入-HTML-输出&quot; class=&quot;headerlink&quot; title=&quot;写入 HTML 输出&quot;&gt;&lt;/a&gt;写入 HTML 输出&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.write(&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;h1&amp;gt;This is a heading&amp;lt;/h1&amp;gt;&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;您&lt;strong&gt;只能在 HTML 输出中使用 document.write&lt;/strong&gt;。如果您在文档加载后使用该方法，会覆盖整个文档。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="JS" scheme="http://blog.iwxyi.com/tags/JS/"/>
    
      <category term="学习笔记" scheme="http://blog.iwxyi.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>JS判断是否为微信客户端</title>
    <link href="http://blog.iwxyi.com/2019/02/08/JS%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E4%B8%BA%E5%BE%AE%E4%BF%A1%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
    <id>http://blog.iwxyi.com/2019/02/08/JS判断是否为微信客户端/</id>
    <published>2019-02-08T07:41:00.000Z</published>
    <updated>2019-10-13T07:42:01.795Z</updated>
    
    <content type="html"><![CDATA[<p><strong>方法一：（</strong>微信官方js判断做法）</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ua = navigator.userAgent.toLowerCase();</span><br><span class="line"><span class="keyword">var</span> isWeixin = ua.indexOf(<span class="string">'micromessenger'</span>) != <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span> (isWeixin) {</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;      </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><p><strong>方法二：</strong>（js判断做法）</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_weixn</span>(<span class="params"></span>)</span>{  </span><br><span class="line">    <span class="keyword">var</span> ua = navigator.userAgent.toLowerCase();  </span><br><span class="line">    <span class="keyword">if</span>(ua.match(<span class="regexp">/MicroMessenger/i</span>)==<span class="string">"micromessenger"</span>) {  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">    } <span class="keyword">else</span> {  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">    }  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>方法三：</strong>（js判断做法）</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> is_weixin = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{<span class="keyword">return</span> navigator.userAgent.toLowerCase().indexOf(<span class="string">'micromessenger'</span>) !== <span class="number">-1</span>})();</span><br><span class="line"><span class="keyword">if</span>(is_weixin){</span><br><span class="line">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    });</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    });</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>方法四：</strong>（利用PHP判断）</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_weixin</span><span class="params">()</span></span>{  </span><br><span class="line">    <span class="keyword">if</span> ( strpos($_SERVER[<span class="string">'HTTP_USER_AGENT'</span>], <span class="string">'MicroMessenger'</span>) !== <span class="keyword">false</span> ) {  <span class="comment">//strpos() 函数查找字符串在另一字符串中第一次出现的位置。</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;  </span><br><span class="line">    }    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;方法一：（&lt;/strong&gt;微信官方js判断做法）&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ua = navigator.userAgent.toLowerCase();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; isWeixin = ua.indexOf(&lt;span class=&quot;string&quot;&gt;&#39;micromessenger&#39;&lt;/span&gt;) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (isWeixin) {&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;      &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="JS" scheme="http://blog.iwxyi.com/tags/JS/"/>
    
      <category term="微信小程序" scheme="http://blog.iwxyi.com/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>搭建SSR</title>
    <link href="http://blog.iwxyi.com/2019/02/04/%E6%90%AD%E5%BB%BASSR/"/>
    <id>http://blog.iwxyi.com/2019/02/04/搭建SSR/</id>
    <published>2019-02-04T05:53:00.000Z</published>
    <updated>2019-10-13T06:15:28.401Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一键搭建"><a href="#一键搭建" class="headerlink" title="一键搭建"></a>一键搭建</h2><a id="more"></a><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssrmu.sh &amp;&amp; chmod +x ssrmu.sh &amp;&amp; bash ssrmu.sh</span><br><span class="line">1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">10</span><br><span class="line">2</span><br><span class="line">n</span><br><span class="line">5</span><br><span class="line">n</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="手动搭建SSR"><a href="#手动搭建SSR" class="headerlink" title="手动搭建SSR"></a>手动搭建SSR</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install wget</span><br><span class="line">wget -N --no-check-certificate https://softs.fun/Bash/ssr.sh &amp;&amp; chmod +x ssr.sh &amp;&amp; bash ssr.sh</span><br></pre></td></tr></tbody></table></figure><h4 id="备用下载地址"><a href="#备用下载地址" class="headerlink" title="备用下载地址"></a>备用下载地址</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssrmu.sh &amp;&amp; chmod +x ssrmu.sh &amp;&amp; bash ssrmu.sh</span><br></pre></td></tr></tbody></table></figure><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash ssr.sh</span><br></pre></td></tr></tbody></table></figure><h2 id="谷歌BBR加速"><a href="#谷歌BBR加速" class="headerlink" title="谷歌BBR加速"></a>谷歌BBR加速</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum -y install wget</span><br><span class="line">wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh</span><br><span class="line">chmod +x bbr.sh</span><br><span class="line">./bbr.sh</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一键搭建&quot;&gt;&lt;a href=&quot;#一键搭建&quot; class=&quot;headerlink&quot; title=&quot;一键搭建&quot;&gt;&lt;/a&gt;一键搭建&lt;/h2&gt;
    
    </summary>
    
    
      <category term="搭建" scheme="http://blog.iwxyi.com/categories/%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="服务器" scheme="http://blog.iwxyi.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Qt on Android 错误整理</title>
    <link href="http://blog.iwxyi.com/2019/01/26/Qt-on-Android-%E9%94%99%E8%AF%AF%E6%95%B4%E7%90%86/"/>
    <id>http://blog.iwxyi.com/2019/01/26/Qt-on-Android-错误整理/</id>
    <published>2019-01-26T09:44:00.000Z</published>
    <updated>2019-10-13T09:45:56.793Z</updated>
    
    <content type="html"><![CDATA[<h1 id="stdlib-h-No-such-file-or-directory"><a href="#stdlib-h-No-such-file-or-directory" class="headerlink" title="stdlib.h: No such file or directory"></a>stdlib.h: No such file or directory</h1><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">E:\Install\android-ndk-r16b\sources\cxx-stl\gnu-libstdc++\4.9\include\cstdlib:72: error: stdlib.h: No such file or directory</span><br><span class="line"> #include &lt;stdlib.h&gt;</span><br></pre></td></tr></tbody></table></figure><p>解决办法：换个版本的 NDK（低版本无用的话，64位换成32位）</p><p>例如：Qt-on-android5.7，ant是1.9.11，ndk是r12b</p><a id="more"></a><blockquote><p>参考：<a href="https://q.cnblogs.com/q/106250/" target="_blank" rel="noopener">https://q.cnblogs.com/q/106250/</a></p></blockquote><h1 id="过程试图写入的管道不存在"><a href="#过程试图写入的管道不存在" class="headerlink" title="过程试图写入的管道不存在"></a>过程试图写入的管道不存在</h1><p>在编译Android项目时，可能会出现警告提示：<br>​    过程试图写入的管道不存在。</p><ol><li><p>观察离警告最近一次命令是：<br>C:\Qt\Qt5.7.1forAndroid\5.7\android_armv7\bin\androiddeployqt.exe –input D:/QtWorkspace/Android/build-First-Android_for_armeabi_v7a_GCC_4_9_Qt_5_7_1-Debug/android-libFirst.so-deployment-settings.json –output D:/QtWorkspace/Android/build-First-Android_for_armeabi_v7a_GCC_4_9_Qt_5_7_1-Debug/android-build –deployment bundled –android-platform android-26 –jdk C:/Java/jdk1.8.0_131 –ant C:/apache-ant-1.9.9/bin/ant.bat</p></li><li><p>为androiddeployqt.exe添加选项–verbose，<br>C:\Qt\Qt5.7.1forAndroid\5.7\android_armv7\bin\androiddeployqt.exe –verbose –input D:/QtWorkspace/Android/build-First-Android_for_armeabi_v7a_GCC_4_9_Qt_5_7_1-Debug/android-libFirst.so-deployment-settings.json –output D:/QtWorkspace/Android/build-First-Android_for_armeabi_v7a_GCC_4_9_Qt_5_7_1-Debug/android-build –deployment bundled –android-platform android-26 –jdk C:/Java/jdk1.8.0_131 –ant C:/apache-ant-1.9.9/bin/ant.bat</p><p>将这条命令在PowerShell上运行，会发现离“过程试图写入的管道不存在。”的最近一条命令是：<br>D:/Android/sdk/tools/android.bat update project –path D:/QtWorkspace/Android/build-First-Android_for_armeabi_v7a_GCC_4_9_Qt_5_7_1-Debug/android-build/ –target android-26 –name QtApp</p></li><li><p>同样在PowerShell上运行这条命令，发现提示：</p></li></ol><hr><p>  The “android” command is deprecated.<br>  For manual SDK, AVD, and project management, please use Android Studio.<br>  For command-line tools, use tools\bin\sdkmanager.bat<br>  and tools\bin\avdmanager.bat</p><hr><p>  意思是，android sdk tools不再支持android.bat这条命令了。</p><ol start="4"><li>在网上用“The “android” command is deprecated.”搜索，发现 <a href="http://forum.cocos.com/t/creator1-4-1-android/45151" target="_blank" rel="noopener">http://forum.cocos.com/t/creator1-4-1-android/45151</a> 这篇帖子，其中蓝色孤舟给出了详细的说明，大意是新版本的android sdk tools不再支持android.bat这条命令，需要将android sdk tools降级。他同时提供了windows和mac上的版本为25.2.3的android sdk tools。<br>下载并覆盖android studio的原有tools，编译就会成功了。</li></ol><blockquote><p>参考：<a href="https://blog.csdn.net/jupipe_guanly/article/details/75462085?utm_source=blogxgwz1" target="_blank" rel="noopener">https://blog.csdn.net/jupipe_guanly/article/details/75462085?utm_source=blogxgwz1</a></p></blockquote><h1 id="No-suitable-Java-found"><a href="#No-suitable-Java-found" class="headerlink" title="No suitable Java found."></a>No suitable Java found.</h1><p>使用上面方法的第三条，发现：</p><blockquote><p>No suitable Java found. In order to properly use the Android Developer<br>Tools, you need a suitable version of Java JDK installed on your system. We recommend that you install the JDK version of JavaSE, available here:</p></blockquote><p>遇到此问题时，将  你的SDK解压后的文件名\tools\lib下的find_java替换为版本r16版中的find_java，下载地址 <a href="http://tekeye.biz/download/find_java.zip" target="_blank" rel="noopener">http://tekeye.biz/download/find_java.zip</a>，原因，网上查找说应该是r17以上的版本重写了find_java.bat</p><blockquote><p>参考：<a href="http://blog.sina.com.cn/s/blog_9285741101019m5h.html" target="_blank" rel="noopener">http://blog.sina.com.cn/s/blog_9285741101019m5h.html</a></p></blockquote><h1 id="‘android–1’-does-not-exist-in-SDK"><a href="#‘android–1’-does-not-exist-in-SDK" class="headerlink" title="‘android–1’ does not exist in SDK"></a>‘android–1’ does not exist in SDK</h1><p>Warning: Android platform ‘android–1’ does not exist in SDK.</p><p>没有设置 Android SDK</p><p>（但是我有遇到无法设置 android build SDK 的情况，解决方法是设置里直接换了个 SDK）</p><blockquote><p>参考：<a href="https://www.cnblogs.com/okgogo2000/p/9257808.html" target="_blank" rel="noopener">https://www.cnblogs.com/okgogo2000/p/9257808.html</a></p></blockquote><h1 id="aidl-exe-系统找不到指定的文件"><a href="#aidl-exe-系统找不到指定的文件" class="headerlink" title="aidl.exe 系统找不到指定的文件"></a>aidl.exe 系统找不到指定的文件</h1><p><code>E:\Install\sdk\tools\ant\build.xml:564: Execute failed: java.io.IOException: Cannot run program "E:\Install\sdk\platform-tools\aidl.exe" (in directory "D:\Qt\AndroidTest\RunAndroidx86\android-build"): CreateProcess error=2, 系统找不到指定的文件。</code></p><p><code>sdk/build-tools/28.0.3/</code> 里面的文件 复制到 <code>platform-tools/</code> 里面（不知道要不要覆盖，反正结果还是编译出错）</p><h1 id="不再支持源选项-5-1-5"><a href="#不再支持源选项-5-1-5" class="headerlink" title="不再支持源选项 5 / 1.5"></a>不再支持源选项 5 / 1.5</h1><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[javac] Compiling 5 source files to D:\Qt\AndroidTest\RunAndroidx86\android-build\bin\classes</span><br><span class="line">[javac] 错误: 不再支持源选项 5。请使用 6 或更高版本。</span><br><span class="line">[javac] 错误: 不再支持目标选项 1.5。请使用 1.6 或更高版本。</span><br></pre></td></tr></tbody></table></figure><p>在 <code>\sdk\tools\ant\build.xml</code> 文件中搜索 <code>1.5</code>，改成 <code>1.8</code>。<code>1.6</code> 还是会警告过时。</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- compilation options --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"java.encoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"java.target"</span> <span class="attr">value</span>=<span class="string">"1.5"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"java.source"</span> <span class="attr">value</span>=<span class="string">"1.5"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"java.compilerargs"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span></span><br></pre></td></tr></tbody></table></figure><h1 id="下载-Gradle-卡住"><a href="#下载-Gradle-卡住" class="headerlink" title="下载 Gradle 卡住"></a>下载 Gradle 卡住</h1><p>1、先保证程序在windows下能正常运行，即MinGW编译通过</p><p>2、进入如图位置，点击create templates,对弹出的提示确认。系统会自动建立一些配置文件</p><p>3、此时，进入如下界面，点开文件build.gradle，修改如图所示，即可顺利编译成功。但记得电脑能上网。</p><p>修改：屏蔽<code>jcenter()</code>  添加一行<code>maven{ url 'https://maven.aliyun.com/repository/jcenter' }</code>，记住，下面还有一个<code>jcenter()</code>,同样屏蔽处理</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;stdlib-h-No-such-file-or-directory&quot;&gt;&lt;a href=&quot;#stdlib-h-No-such-file-or-directory&quot; class=&quot;headerlink&quot; title=&quot;stdlib.h: No such file or directory&quot;&gt;&lt;/a&gt;stdlib.h: No such file or directory&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;E:\Install\android-ndk-r16b\sources\cxx-stl\gnu-libstdc++\4.9\include\cstdlib:72: error: stdlib.h: No such file or directory&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; #include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;解决办法：换个版本的 NDK（低版本无用的话，64位换成32位）&lt;/p&gt;
&lt;p&gt;例如：Qt-on-android5.7，ant是1.9.11，ndk是r12b&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="Android" scheme="http://blog.iwxyi.com/tags/Android/"/>
    
      <category term="整理" scheme="http://blog.iwxyi.com/tags/%E6%95%B4%E7%90%86/"/>
    
      <category term="C++" scheme="http://blog.iwxyi.com/tags/C/"/>
    
      <category term="Qt" scheme="http://blog.iwxyi.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET文件操作</title>
    <link href="http://blog.iwxyi.com/2019/01/24/ASP-NET%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    <id>http://blog.iwxyi.com/2019/01/24/ASP-NET文件操作/</id>
    <published>2019-01-24T13:09:00.000Z</published>
    <updated>2019-10-12T13:11:05.049Z</updated>
    
    <content type="html"><![CDATA[<p>以文件为例,如果对文件夹操作,基本上将File换为Directory即可<br>(例:<code>FileInfo file = new FileInfo(Path);</code>与<code>DirectoryInfo directory = new DirectoryInfo (Path);</code>)</p><a id="more"></a><p><strong>1获取文件信息</strong></p><p>在知道文件相对路径的情形,下面代码可以获取文件的详细信息</p><figure class="highlight c#"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fileinfo</span>(<span class="params"><span class="keyword">string</span> Path</span>)</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    Path = Server.MapPath(Path);<span class="comment">//获取文件的物理路径</span></span><br><span class="line">    FileInfo file = <span class="keyword">new</span> FileInfo(Path);<span class="comment">//实例该路径文件信息</span></span><br><span class="line">    <span class="keyword">var</span> length=file.Length;<span class="comment">//文件大小,字节</span></span><br><span class="line">    <span class="keyword">var</span> name = file.Name;<span class="comment">//文件名</span></span><br><span class="line">    <span class="keyword">var</span> fullname = file.FullName;<span class="comment">//文件路径</span></span><br><span class="line">    <span class="keyword">var</span> extension = file.Extension;<span class="comment">//文件后缀名</span></span><br><span class="line">    ......</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>获取的信息还有创建时间,最后访问时间等等,可以自行研究</p><p><strong>2新建文件</strong></p><p>新建一个文件。（Create 后会一直占用，最好加上 Dispose）</p><figure class="highlight c#"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">NewFile</span>(<span class="params"><span class="keyword">string</span> filePath</span>)</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    filePath=Server.MapPath(filePath);<span class="comment">//获取想创建文件的物理路径</span></span><br><span class="line">    <span class="keyword">if</span> (System.IO.File.Exists(newfilepath))</span><br><span class="line">    {</span><br><span class="line">        <span class="comment">//判断新建的文件是否已经存在</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"文件已经存在"</span>)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    System.IO.File.Create(newfilepath);<span class="comment">//创建</span></span><br><span class="line">    ......</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>3复制文件,移动(剪切)文件,重命名文件</strong></p><p>复制文件:</p><figure class="highlight c#"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Copy</span>(<span class="params"><span class="keyword">string</span> Path,<span class="keyword">string</span> targetPath</span>)</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    Path = Server.MapPath(Path);<span class="comment">//原文件的物理路径</span></span><br><span class="line">    targetPath = Server.MapPath(targetPath);<span class="comment">//复制到的新位置物理路径</span></span><br><span class="line">    <span class="comment">//判断到的新地址是否存在重命名文件</span></span><br><span class="line">    <span class="keyword">if</span> (System.IO.File.Exists(targetPath))</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"存在同名文件"</span>);<span class="comment">//抛出异常</span></span><br><span class="line">    }        </span><br><span class="line">     System.IO.File.Copy(Path,targetPath);<span class="comment">//复制到新位置,不允许覆盖现有文件</span></span><br><span class="line">    .......</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>移动文件,重命名:</p><figure class="highlight c#"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">MoveOrRename</span>(<span class="params"><span class="keyword">string</span> Path,<span class="keyword">string</span> targetPath</span>)</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    Path = Server.MapPath(Path);<span class="comment">//原文件的物理路径</span></span><br><span class="line">    targetPath = Server.MapPath(targetPath);<span class="comment">//移动到的新位置的物理路径(如果还是当前文件夹,则会重命名文件)</span></span><br><span class="line">    <span class="comment">//判断到的新地址是否存在重命名文件</span></span><br><span class="line">    <span class="keyword">if</span> (System.IO.File.Exists(targetPath))</span><br><span class="line">    {</span><br><span class="line">        <span class="comment">//判断是新位置是否存在同名(判断重命名是狗和其他文件冲突)</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"已经存在同名文件"</span>);</span><br><span class="line">    }</span><br><span class="line">    System.IO.File.Move(Path,targetPath);<span class="comment">//2个文件在不同目录则是移动,如果在相同目录下则是重命名</span></span><br><span class="line">    ......</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>复制文件不会删除,移动或者重命名(方法相同,就是目标位置不同)会删除原文件.</p><p> <strong>4上传文件</strong></p><figure class="highlight c#"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">HttpPost</span>]<span class="comment">//通过Post请求接收前台传来的文件数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ActionResult <span class="title">UploadFile</span>(<span class="params"><span class="keyword">string</span> dirPath</span>)</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">var</span> filepath = Server.MapPath(Path);<span class="comment">//获取上传的文件存入目录的物理路径</span></span><br><span class="line">    <span class="keyword">var</span> file = Request.Files[<span class="string">"file"</span>];<span class="comment">//获取文件内容</span></span><br><span class="line">    <span class="keyword">if</span> (file == <span class="literal">null</span> || file.ContentLength == <span class="number">0</span>)</span><br><span class="line">    {</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"文件不存在"</span>);<span class="comment">//简单判断下文件</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">var</span> newfilepath = Server.MapPath(dirPath + <span class="string">"\\"</span> + file.FileName);<span class="comment">//获取文件名的物理路径</span></span><br><span class="line">    <span class="comment">//判断要上传的文件是否与目录中的文件重命名</span></span><br><span class="line">    <span class="keyword">if</span> (System.IO.File.Exists(newfilepath))</span><br><span class="line">    {</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"文件不存在"</span>);<span class="comment">//简单判断下文件是否存在</span></span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//文件存放到指定的文件中 ;</span></span><br><span class="line">    file.SaveAs(newfilepath);</span><br><span class="line">    ......</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>会自动创建存有该类容和命名的文件,不用多此一举去创建一个新文件再放入内容.</p><p> <strong>5遍历当前目录和其子目录所有文件</strong></p><figure class="highlight c#"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">string</span>[] <span class="title">GetFiles</span>(<span class="params"><span class="keyword">string</span> dir, <span class="keyword">string</span> regexPattern = <span class="literal">null</span>, <span class="keyword">bool</span> recurse = <span class="literal">true</span>, <span class="keyword">bool</span> throwEx = <span class="literal">false</span></span>)</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="comment">//recurse:是否递归</span></span><br><span class="line">    <span class="comment">//throwEx:是否报出异常</span></span><br><span class="line">    List&lt;<span class="keyword">string</span>&gt; lst = <span class="keyword">new</span> List&lt;<span class="keyword">string</span>&gt;();</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">string</span> item <span class="keyword">in</span> Directory.GetFileSystemEntries(dir))</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">bool</span> isFile = (System.IO.File.GetAttributes(item) &amp; FileAttributes.Directory) != FileAttributes.Directory;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (isFile &amp;&amp; (regexPattern == <span class="literal">null</span> || Regex.IsMatch(Path.GetFileName(item), regexPattern, RegexOptions.IgnoreCase | RegexOptions.Multiline)))</span><br><span class="line">                {</span><br><span class="line">                    lst.Add(item);</span><br><span class="line">                }</span><br><span class="line"></span><br><span class="line">                <span class="comment">//递归</span></span><br><span class="line">                <span class="keyword">if</span> (recurse &amp;&amp; !isFile)</span><br><span class="line">                {</span><br><span class="line">                    lst.AddRange(GetFiles(item, regexPattern, <span class="literal">true</span>));</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">catch</span> { <span class="keyword">if</span> (throwEx) { <span class="keyword">throw</span>; } }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">catch</span> { <span class="keyword">if</span> (throwEx) { <span class="keyword">throw</span>; } }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> lst.ToArray();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p> 这个不多说,网上找到的代码,亲测有效</p><h3 id="System-IO-File-Create-不会自动释放，一定要Dispose"><a href="#System-IO-File-Create-不会自动释放，一定要Dispose" class="headerlink" title="System.IO.File.Create 不会自动释放，一定要Dispose"></a><a href="https://www.cnblogs.com/LCX/p/4307845.html" target="_blank" rel="noopener">System.IO.File.Create 不会自动释放，一定要Dispose</a></h3><p>这样会导致W3P进程一直占用这个文件</p><p><code>System.IO.File.Create(HttpContext.Current.Server.MapPath(strName));</code></p><p>最好加上<code>Dispose()</code></p><p><code>System.IO.File.Create(HttpContext.Current.Server.MapPath(strName)).Dispose();</code></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以文件为例,如果对文件夹操作,基本上将File换为Directory即可&lt;br&gt;(例:&lt;code&gt;FileInfo file = new FileInfo(Path);&lt;/code&gt;与&lt;code&gt;DirectoryInfo directory = new DirectoryInfo (Path);&lt;/code&gt;)&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="ASP.NET" scheme="http://blog.iwxyi.com/tags/ASP-NET/"/>
    
      <category term="文件" scheme="http://blog.iwxyi.com/tags/%E6%96%87%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Qt加快编译速度</title>
    <link href="http://blog.iwxyi.com/2019/01/24/Qt%E5%8A%A0%E5%BF%AB%E7%BC%96%E8%AF%91%E9%80%9F%E5%BA%A6/"/>
    <id>http://blog.iwxyi.com/2019/01/24/Qt加快编译速度/</id>
    <published>2019-01-24T08:58:00.000Z</published>
    <updated>2019-10-13T08:59:51.074Z</updated>
    
    <content type="html"><![CDATA[<h2 id="设置多核编译"><a href="#设置多核编译" class="headerlink" title="设置多核编译"></a>设置多核编译</h2><p>1.查看是否已经安装了jom工具：C:\Qt\Qt5.4.1\Tools\QtCreator\bin\jom.exe</p><p>2.项目添加参数-j 4【4是cpu的核数，我的是i5，只有四个核心】</p><a id="more"></a><p>菜单栏-&gt;工具-&gt; 选项-&gt;构建与运行-&gt;构建套件-&gt;点击自动检测内容-&gt;在同一页面找到 Environment -&gt;点击change -&gt;在弹出的窗口 添加 <code>MAKEFLAGS=-j4</code> 即可</p><p>-j4:表示 CPU 两个核数进行编译</p><blockquote><p>注：现在最新版 Qt Creator 已经自带满核了</p></blockquote><h2 id="使用预编译头"><a href="#使用预编译头" class="headerlink" title="使用预编译头"></a>使用预编译头</h2><p>“用Qt写的程序编译比MFC慢”的说法是错误的。单位代码行数编译Qt远比MFC快得多，因为Qt库的头文件设计非常好，尽量都使用了前置声明，避免了头文件嵌套，几乎所有类都使用了公有类和私有类的设计，把没必要公开的声明放到私有头文件里，避免了编译时引入过多代码。而MFC没有这样的设计。<br>至于大家感觉MFC快主要原因是MFC工程默认打开了编译预处理头文件（PCH），但是这是VC编译器的特性，所有C++程序都可以用，不是MFC特有，Qt也可以使用 PCH。<br>方法很简单，在你的 .pro 文件中加入一行</p><blockquote><p>PRECOMPILED_HEADER = stable.h</p></blockquote><p>指定 Stable.h这个头文件作为编译预处理文件，MFC里这个文件一般叫stdafx.h。然后在 stable.h里 包含你所用到的所有 Qt 头文件，如果你用了很多qt的类可以直接包含所有<br>比如 ：</p><blockquote><p>#include <qtcore><br>#include <qtgui></qtgui></qtcore></p></blockquote><p>这两个文件里又包含了几乎所有Qt常用类。不用担心，即使包含了所有头文件也没关系，有了PCH再多头文件也没影响。<br>如果你还想编译再快点，可以在 .pro里加入下面一行</p><blockquote><p>QMAKE_CXXFLAGS += /MP</p></blockquote><p>指定/mp编译选项，编译器将使用并行编译，同时起多个编译进程并行编译不同的cpp<br>而且QT这种引入PCH的方法比MFC的好，由于MFC的PCH选项是每个工程逐个指定的，很容易被某些人搞坏，我曾经无数次修复PCH问题，但是Qt的选项是写在.pro里的，写一次就永远不会错。<br>MFC一旦弄坏了PCH，编译也慢得令人发指。</p><hr><blockquote><p>参考：<a href="https://www.cnblogs.com/findumars/p/7220069.html" target="_blank" rel="noopener">https://www.cnblogs.com/findumars/p/7220069.html</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;设置多核编译&quot;&gt;&lt;a href=&quot;#设置多核编译&quot; class=&quot;headerlink&quot; title=&quot;设置多核编译&quot;&gt;&lt;/a&gt;设置多核编译&lt;/h2&gt;&lt;p&gt;1.查看是否已经安装了jom工具：C:\Qt\Qt5.4.1\Tools\QtCreator\bin\jom.exe&lt;/p&gt;
&lt;p&gt;2.项目添加参数-j 4【4是cpu的核数，我的是i5，只有四个核心】&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C++" scheme="http://blog.iwxyi.com/tags/C/"/>
    
      <category term="Qt" scheme="http://blog.iwxyi.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>Qt发送邮件</title>
    <link href="http://blog.iwxyi.com/2019/01/23/Qt%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/"/>
    <id>http://blog.iwxyi.com/2019/01/23/Qt发送邮件/</id>
    <published>2019-01-23T10:47:00.000Z</published>
    <updated>2019-10-13T10:47:59.403Z</updated>
    
    <content type="html"><![CDATA[<p>太难了，卒</p><p>参考博客:<a href="http://www.qtcn.org/bbs/read-htm-tid-56050.html" target="_blank" rel="noopener">http://www.qtcn.org/bbs/read-htm-tid-56050.html</a></p><p>里面有个下载的工具包，包含了api和使用示例。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;太难了，卒&lt;/p&gt;
&lt;p&gt;参考博客:&lt;a href=&quot;http://www.qtcn.org/bbs/read-htm-tid-56050.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.qtcn.org/bbs/read-h
      
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C++" scheme="http://blog.iwxyi.com/tags/C/"/>
    
      <category term="Qt" scheme="http://blog.iwxyi.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>Qt多显示器</title>
    <link href="http://blog.iwxyi.com/2019/01/21/Qt%E5%A4%9A%E6%98%BE%E7%A4%BA%E5%99%A8/"/>
    <id>http://blog.iwxyi.com/2019/01/21/Qt多显示器/</id>
    <published>2019-01-21T10:46:00.000Z</published>
    <updated>2019-10-13T10:47:19.833Z</updated>
    
    <content type="html"><![CDATA[<p>先放官方文档链接：QDesktopWidget - Qt5 Reference</p><p>在只有一个显示器的时候，获得显示器分辨率的方法是</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">miRPos = QApplication::desktop()-&gt;screenGeometry().width(); <span class="comment">//原来的写法,奇怪的变量名先无视</span></span><br></pre></td></tr></tbody></table></figure><a id="more"></a><p>然而实际发现无论如何这个得到的分辨率都是主显示器的完整分辨率。然后查了Qt的Reference，才发现，这个的原型是</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> QRect QDesktopWidget::screenGeometry(<span class="keyword">int</span> screen = <span class="number">-1</span>) <span class="keyword">const</span></span><br></pre></td></tr></tbody></table></figure><p>其中的参数就是显示器的id，默认是-1，如果是多个显示器，则显示器编号依次为0（主显示器）,1,2,3…额，这个编号和你在设置里看到的编号没一点关系 :)</p><p>如图，这是我目前的显示设置情况，其中标识为2的显示器是主显示器，1则是扩展显示器。而实际上，我们通过</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">QDesktopWidget * desktop = QApplication::desktop();</span><br><span class="line"><span class="keyword">int</span> curMonitor = desktop-&gt;screenNumber ( <span class="keyword">this</span> ); <span class="comment">// 参数是一个QWidget*</span></span><br></pre></td></tr></tbody></table></figure><p>获得到的当前所在屏幕的编号来看，设置中标识为2的实际上是0，标识为1的实际是1.也就是说，系统设置中标识的编号和这里真的是一点关系都没有啦。</p><p>当我们获取到显示器编号后，就可以通过这个来获取当前所在屏幕的分辨率啦。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QRect rect = desktop-&gt;screenGeometry(curMonitor);</span><br></pre></td></tr></tbody></table></figure><p>这时rect.width和rect.height就是当前屏幕的分辨率了。而rect.x和rect.y是什么呢？回到刚刚的我的显示器设置情况的图，我们可以用上面的函数获取主(编号为2的)显示器rect.x和rect.y，你会发现rect.x=0,rect.y=0。可见，整个显示器“坐标”是以主显示器左上角为（0,0）点的。在扩展(此处编号为1的)显示器获得到的rect.x=-1366,rect.y=161说明这个就是那个扩展显示器左上角的坐标了。那么我们就很容易通过这个来计算我们所需要的屏幕坐标了。</p><p>我的需求是让这个仿osu的mini窗口的最右端和当前屏幕最右侧对齐，上端和当前屏幕上端保持25px的边距。那么就应该这样做。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">miRPos = rect.x() + rect.width(); <span class="comment">//当前屏幕最右侧的位置，别吐槽这个变量名了（╯－＿－）╯╧╧</span></span><br><span class="line"><span class="keyword">this</span>-&gt;setGeometry(miRPos - <span class="keyword">this</span>-&gt;width() , rect.y() + <span class="number">25</span>, <span class="keyword">this</span>-&gt;width(), <span class="keyword">this</span>-&gt;height());</span><br></pre></td></tr></tbody></table></figure><p>然后我突然发现我是个奇葩的例外，因为我在小的显示器上打游戏的时候通常任务栏会挡住游戏窗体，于是我把任务栏拖到右面了…那么上面所得到的结果，窗体则始终会和屏幕的最右面对齐并忽视任务栏的存在，如果翻过reference的话，你会发现这个问题非常好解决，只需要把 screenGeometry() 换成 availableGeometry() 就行了。这个获取到的就是当前显示器的可用部分了，在windows下就是不包括任务栏了。</p><p>或许你在没创建widget的时候就想要获取一个分辨率信息用于初始化或者别的作用了，你可以通过 curMonitor = desktop-&gt;primaryScreen(); 初始化显示器编号为主显示器的编号并由此获取主显示器的相关信息，或者通过其他提供的函数来达到你自己的目的。哦对了，好像curMonitor初始化为-1的时候获取到的也始终是主显示器的大小。毕竟默认值嘛。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;先放官方文档链接：QDesktopWidget - Qt5 Reference&lt;/p&gt;
&lt;p&gt;在只有一个显示器的时候，获得显示器分辨率的方法是&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;miRPos = QApplication::desktop()-&amp;gt;screenGeometry().width(); &lt;span class=&quot;comment&quot;&gt;//原来的写法,奇怪的变量名先无视&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C++" scheme="http://blog.iwxyi.com/tags/C/"/>
    
      <category term="Qt" scheme="http://blog.iwxyi.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>Qt窗口出现在屏幕中央（支持多显示器））</title>
    <link href="http://blog.iwxyi.com/2019/01/21/Qt%E7%AA%97%E5%8F%A3%E5%87%BA%E7%8E%B0%E5%9C%A8%E5%B1%8F%E5%B9%95%E4%B8%AD%E5%A4%AE%EF%BC%88%E6%94%AF%E6%8C%81%E5%A4%9A%E6%98%BE%E7%A4%BA%E5%99%A8%EF%BC%89%EF%BC%89/"/>
    <id>http://blog.iwxyi.com/2019/01/21/Qt窗口出现在屏幕中央（支持多显示器））/</id>
    <published>2019-01-21T08:55:00.000Z</published>
    <updated>2019-10-13T08:56:55.676Z</updated>
    
    <content type="html"><![CDATA[<p>多显示器获取到的是全部屏幕的中央，有时候会卡在两个显示器的中间</p><p>用以下方法解决：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> * argv[])</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="function">QApplication <span class="title">app</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line">    Window window;<span class="comment">//这个类继承自QWidget</span></span><br><span class="line">    window.move((app.desktop()-&gt;width()&nbsp;- window.width())&nbsp;/&nbsp;<span class="number">2</span>,&nbsp;(app.desktop()-&gt;height()&nbsp;- window.height())&nbsp;/&nbsp;<span class="number">2</span>); </span><br><span class="line">    window.show();</span><br><span class="line">    <span class="keyword">return</span> app.exec();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><p>（实测好像并不能分多个显示器……）</p><hr><blockquote><p>参考：<a href="https://blog.csdn.net/u011288190/article/details/78143422" target="_blank" rel="noopener">https://blog.csdn.net/u011288190/article/details/78143422</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;多显示器获取到的是全部屏幕的中央，有时候会卡在两个显示器的中间&lt;/p&gt;
&lt;p&gt;用以下方法解决：&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; * argv[])&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;QApplication &lt;span class=&quot;title&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(argc, argv)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Window window;&lt;span class=&quot;comment&quot;&gt;//这个类继承自QWidget&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    window.move((app.desktop()-&amp;gt;width()&amp;nbsp;- window.width())&amp;nbsp;/&amp;nbsp;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&amp;nbsp;(app.desktop()-&amp;gt;height()&amp;nbsp;- window.height())&amp;nbsp;/&amp;nbsp;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    window.show();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; app.exec();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C++" scheme="http://blog.iwxyi.com/tags/C/"/>
    
      <category term="Qt" scheme="http://blog.iwxyi.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>Android ToggleButton开关设置图片</title>
    <link href="http://blog.iwxyi.com/2019/01/18/Android-ToggleButton%E5%BC%80%E5%85%B3%E8%AE%BE%E7%BD%AE%E5%9B%BE%E7%89%87/"/>
    <id>http://blog.iwxyi.com/2019/01/18/Android-ToggleButton开关设置图片/</id>
    <published>2019-01-18T02:58:00.000Z</published>
    <updated>2019-10-13T03:00:00.415Z</updated>
    
    <content type="html"><![CDATA[<h1 id="图片设置开关"><a href="#图片设置开关" class="headerlink" title="图片设置开关"></a>图片设置开关</h1><ol><li>准备开关不同状态的两张图片放入drawable中。</li><li>xml文件中添加代码：</li></ol><a id="more"></a><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ToggleButton</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/switch1"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">"@android:color/transparent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:button</span>=<span class="string">"@drawable/btn_backgrounds"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:checked</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:textOff</span>=<span class="string">""</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:textOn</span>=<span class="string">""</span> /&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">android:button="@drawable/btn_backgrounds"是自己定义的android selector文件：</span><br><span class="line"><span class="tag">&lt;<span class="name">selector</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:state_checked</span>=<span class="string">"true"</span> <span class="attr">android:drawable</span>=<span class="string">"@drawable/toggle_btn_on"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">"@drawable/toggle_btn_off"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">selector</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>之后在java文件中声明ToggleButton控件并且实例化，添加点击事件：</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自己出创建的内部类，监听按钮点击事件</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> cyf</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyOnCheckedChangeListener</span> <span class="keyword">implements</span> <span class="title">OnCheckedChangeListener</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCheckedChanged</span><span class="params">(CompoundButton arg0, <span class="keyword">boolean</span> arg1)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (arg1) {</span><br><span class="line">            <span class="comment">// 开</span></span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="comment">// 关    </span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="4"><li>添加监听：</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">switch1.setOnCheckedChangeListener((OnCheckedChangeListener) <span class="keyword">new</span> MyOnCheckedChangeListener());</span><br></pre></td></tr></tbody></table></figure><blockquote><p>参考：<a href="https://www.cnblogs.com/yunfang/p/5485390.html" target="_blank" rel="noopener">https://www.cnblogs.com/yunfang/p/5485390.html</a></p></blockquote><h1 id="自定义动画"><a href="#自定义动画" class="headerlink" title="自定义动画"></a>自定义动画</h1><p>Github 项目地址：<a href="https://github.com/xiaosong520/SwitchButtonDemo.git" target="_blank" rel="noopener">https://github.com/xiaosong520/SwitchButtonDemo.git</a></p><p>步骤：</p><p>1.创建SwitchButton类添加到自己的项目中：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@TODO</span>&lt;自定义选择开关按钮&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 小嵩</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2016-8-5 09:57:29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwitchButton</span> <span class="keyword">extends</span> <span class="title">View</span></span>{</span><br><span class="line"><span class="comment">/** 圆角大小*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">float</span> radius;</span><br><span class="line"><span class="comment">/** 开启颜色*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> onColor = Color.parseColor(<span class="string">"#4ebb7f"</span>);</span><br><span class="line"><span class="comment">/** 关闭颜色*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> offBorderColor = Color.parseColor(<span class="string">"#dadbda"</span>);</span><br><span class="line"><span class="comment">/** 灰色带颜色*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> offColor = Color.parseColor(<span class="string">"#ffffff"</span>);</span><br><span class="line"><span class="comment">/** 手柄颜色*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> spotColor = Color.parseColor(<span class="string">"#ffffff"</span>);</span><br><span class="line"><span class="comment">/** 边框颜色*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> borderColor = offBorderColor;</span><br><span class="line"><span class="comment">/** 画笔*/</span></span><br><span class="line"><span class="keyword">private</span> Paint paint ;</span><br><span class="line"><span class="comment">/** 开关状态*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> toggleOn = <span class="keyword">false</span>;</span><br><span class="line"><span class="comment">/** 边框大小*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> borderWidth = <span class="number">2</span>;</span><br><span class="line"><span class="comment">/** 垂直中心*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">float</span> centerY;</span><br><span class="line"><span class="comment">/** 按钮的开始和结束位置*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">float</span> startX, endX;</span><br><span class="line"><span class="comment">/** 手柄X位置的最小和最大值*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">float</span> spotMinX, spotMaxX;</span><br><span class="line"><span class="comment">/**手柄大小 */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> spotSize ;</span><br><span class="line"><span class="comment">/** 手柄X位置*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">float</span> spotX;</span><br><span class="line"><span class="comment">/** 关闭时内部灰色带高度*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">float</span> offLineWidth;</span><br><span class="line"><span class="comment">/** */</span></span><br><span class="line"><span class="keyword">private</span> RectF rect = <span class="keyword">new</span> RectF();</span><br><span class="line"><span class="comment">/** 默认使用动画*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> defaultAnimate = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> OnToggleChanged listener;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">SwitchButton</span><span class="params">(Context context)</span> </span>{</span><br><span class="line"><span class="keyword">super</span>(context);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SwitchButton</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>{</span><br><span class="line"><span class="keyword">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">setup(attrs);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SwitchButton</span><span class="params">(Context context, AttributeSet attrs)</span> </span>{</span><br><span class="line"><span class="keyword">super</span>(context, attrs);</span><br><span class="line">setup(attrs);</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setup</span><span class="params">(AttributeSet attrs)</span> </span>{</span><br><span class="line">paint = <span class="keyword">new</span> Paint(Paint.ANTI_ALIAS_FLAG);</span><br><span class="line">paint.setStyle(Style.FILL);</span><br><span class="line">paint.setStrokeCap(Cap.ROUND);</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.setOnClickListener(<span class="keyword">new</span> OnClickListener() {</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View arg0)</span> </span>{</span><br><span class="line">toggle(defaultAnimate);</span><br><span class="line">}</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">TypedArray typedArray = getContext().obtainStyledAttributes(attrs, R.styleable.SwitchButton);</span><br><span class="line">offBorderColor = typedArray.getColor(R.styleable.SwitchButton_offBorderColor, offBorderColor);</span><br><span class="line">onColor = typedArray.getColor(R.styleable.SwitchButton_onColor, onColor);</span><br><span class="line">spotColor = typedArray.getColor(R.styleable.SwitchButton_spotColor, spotColor);</span><br><span class="line">offColor = typedArray.getColor(R.styleable.SwitchButton_offColor, offColor);</span><br><span class="line">borderWidth = typedArray.getDimensionPixelSize(R.styleable.SwitchButton_borderWidth, borderWidth);</span><br><span class="line">defaultAnimate = typedArray.getBoolean(R.styleable.SwitchButton_animate, defaultAnimate);</span><br><span class="line">typedArray.recycle();</span><br><span class="line"></span><br><span class="line">borderColor = offBorderColor;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">toggle</span><span class="params">()</span> </span>{</span><br><span class="line">toggle(<span class="keyword">true</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">toggle</span><span class="params">(<span class="keyword">boolean</span> animate)</span> </span>{</span><br><span class="line">toggleOn = !toggleOn;</span><br><span class="line">takeEffect(animate);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(listener != <span class="keyword">null</span>){</span><br><span class="line">listener.onToggle(toggleOn);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">toggleOn</span><span class="params">()</span> </span>{</span><br><span class="line">setToggleOn();</span><br><span class="line"><span class="keyword">if</span>(listener != <span class="keyword">null</span>){</span><br><span class="line">listener.onToggle(toggleOn);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">toggleOff</span><span class="params">()</span> </span>{</span><br><span class="line">setToggleOff();</span><br><span class="line"><span class="keyword">if</span>(listener != <span class="keyword">null</span>){</span><br><span class="line">listener.onToggle(toggleOn);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置显示成打开样式，不会触发toggle事件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setToggleOn</span><span class="params">()</span> </span>{</span><br><span class="line">setToggleOn(<span class="keyword">true</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> animate</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setToggleOn</span><span class="params">(<span class="keyword">boolean</span> animate)</span></span>{</span><br><span class="line">toggleOn = <span class="keyword">true</span>;</span><br><span class="line">takeEffect(animate);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置显示成关闭样式，不会触发toggle事件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setToggleOff</span><span class="params">()</span> </span>{</span><br><span class="line">setToggleOff(<span class="keyword">true</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setToggleOff</span><span class="params">(<span class="keyword">boolean</span> animate)</span> </span>{</span><br><span class="line">toggleOn = <span class="keyword">false</span>;</span><br><span class="line">takeEffect(animate);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">takeEffect</span><span class="params">(<span class="keyword">boolean</span> animate)</span> </span>{</span><br><span class="line"><span class="keyword">if</span>(animate){</span><br><span class="line">slide();</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line">calculateEffect(toggleOn ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> widthMode = MeasureSpec.getMode(widthMeasureSpec);</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> heightMode = MeasureSpec.getMode(heightMeasureSpec);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> widthSize = MeasureSpec.getSize(widthMeasureSpec);</span><br><span class="line"><span class="keyword">int</span> heightSize = MeasureSpec.getSize(heightMeasureSpec);</span><br><span class="line"></span><br><span class="line">Resources r = Resources.getSystem();</span><br><span class="line"><span class="keyword">if</span>(widthMode == MeasureSpec.UNSPECIFIED || widthMode == MeasureSpec.AT_MOST){</span><br><span class="line">widthSize = (<span class="keyword">int</span>) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, <span class="number">50</span>, r.getDisplayMetrics());</span><br><span class="line">widthMeasureSpec = MeasureSpec.makeMeasureSpec(widthSize, MeasureSpec.EXACTLY);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(heightMode == MeasureSpec.UNSPECIFIED || heightSize == MeasureSpec.AT_MOST){</span><br><span class="line">heightSize = (<span class="keyword">int</span>) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, <span class="number">30</span>, r.getDisplayMetrics());</span><br><span class="line">heightMeasureSpec = MeasureSpec.makeMeasureSpec(heightSize, MeasureSpec.EXACTLY);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">int</span> bottom)</span> </span>{</span><br><span class="line"><span class="keyword">super</span>.onLayout(changed, left, top, right, bottom);</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> width = getWidth();</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> height = getHeight();</span><br><span class="line"></span><br><span class="line">radius = Math.min(width, height) * <span class="number">0.5f</span>;</span><br><span class="line">centerY = radius;</span><br><span class="line">startX = radius;</span><br><span class="line">endX = width - radius;</span><br><span class="line">spotMinX = startX + borderWidth;</span><br><span class="line">spotMaxX = endX - borderWidth;</span><br><span class="line">spotSize = height - <span class="number">4</span> * borderWidth;</span><br><span class="line">spotX = toggleOn ? spotMaxX : spotMinX;</span><br><span class="line">offLineWidth = <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">slide</span><span class="params">()</span></span>{</span><br><span class="line">Animation animation = <span class="keyword">new</span> Animation() {</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">applyTransformation</span><span class="params">(<span class="keyword">float</span> interpolatedTime,</span></span></span><br><span class="line"><span class="function"><span class="params">Transformation t)</span> </span>{</span><br><span class="line"><span class="keyword">if</span>(toggleOn){</span><br><span class="line">calculateEffect(interpolatedTime);</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line">calculateEffect(<span class="number">1</span>-interpolatedTime);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">};</span><br><span class="line">animation.setDuration(<span class="number">200</span>);</span><br><span class="line">clearAnimation();</span><br><span class="line">startAnimation(animation);</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">clamp</span><span class="params">(<span class="keyword">int</span> value, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>{</span><br><span class="line"><span class="keyword">return</span> Math.min(Math.max(value, low), high);</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(Canvas canvas)</span> </span>{</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">rect.set(<span class="number">0</span>, <span class="number">0</span>, getWidth(), getHeight());</span><br><span class="line">paint.setColor(borderColor);</span><br><span class="line">canvas.drawRoundRect(rect, radius, radius, paint);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(offLineWidth &gt; <span class="number">0</span>){</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">float</span> cy = offLineWidth * <span class="number">0.5f</span>;</span><br><span class="line">rect.set(spotX - cy, centerY - cy, endX + cy, centerY + cy);</span><br><span class="line">paint.setColor(offColor);</span><br><span class="line">canvas.drawRoundRect(rect, cy, cy, paint);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">rect.set(spotX - <span class="number">1</span> - radius, centerY - radius, spotX + <span class="number">1.1f</span> + radius, centerY + radius);</span><br><span class="line">paint.setColor(borderColor);</span><br><span class="line">canvas.drawRoundRect(rect, radius, radius, paint);</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">float</span> spotR = spotSize * <span class="number">0.5f</span>;</span><br><span class="line">rect.set(spotX - spotR, centerY - spotR, spotX + spotR, centerY + spotR);</span><br><span class="line">paint.setColor(spotColor);</span><br><span class="line">canvas.drawRoundRect(rect, spotR, spotR, paint);</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">calculateEffect</span><span class="params">(<span class="keyword">final</span> <span class="keyword">double</span> value)</span> </span>{</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">float</span> mapToggleX = (<span class="keyword">float</span>) mapValueFromRangeToRange(value, <span class="number">0</span>, <span class="number">1</span>, spotMinX, spotMaxX);</span><br><span class="line">spotX = mapToggleX;</span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> mapOffLineWidth = (<span class="keyword">float</span>) mapValueFromRangeToRange(<span class="number">1</span> - value, <span class="number">0</span>, <span class="number">1</span>, <span class="number">10</span>, spotSize);</span><br><span class="line"></span><br><span class="line">offLineWidth = mapOffLineWidth;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> fb = Color.blue(onColor);</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> fr = Color.red(onColor);</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> fg = Color.green(onColor);</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> tb = Color.blue(offBorderColor);</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> tr = Color.red(offBorderColor);</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> tg = Color.green(offBorderColor);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sb = (<span class="keyword">int</span>) mapValueFromRangeToRange(<span class="number">1</span> - value, <span class="number">0</span>, <span class="number">1</span>, fb, tb);</span><br><span class="line"><span class="keyword">int</span> sr = (<span class="keyword">int</span>) mapValueFromRangeToRange(<span class="number">1</span> - value, <span class="number">0</span>, <span class="number">1</span>, fr, tr);</span><br><span class="line"><span class="keyword">int</span> sg = (<span class="keyword">int</span>) mapValueFromRangeToRange(<span class="number">1</span> - value, <span class="number">0</span>, <span class="number">1</span>, fg, tg);</span><br><span class="line"></span><br><span class="line">sb = clamp(sb, <span class="number">0</span>, <span class="number">255</span>);</span><br><span class="line">sr = clamp(sr, <span class="number">0</span>, <span class="number">255</span>);</span><br><span class="line">sg = clamp(sg, <span class="number">0</span>, <span class="number">255</span>);</span><br><span class="line"></span><br><span class="line">borderColor = Color.rgb(sr, sg, sb);</span><br><span class="line"></span><br><span class="line">postInvalidate();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnToggleChanged</span></span>{</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> on</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onToggle</span><span class="params">(<span class="keyword">boolean</span> on)</span></span>;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnToggleChanged</span><span class="params">(OnToggleChanged onToggleChanged)</span> </span>{</span><br><span class="line">listener = onToggleChanged;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAnimate</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="keyword">return</span> defaultAnimate;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAnimate</span><span class="params">(<span class="keyword">boolean</span> animate)</span> </span>{</span><br><span class="line"><span class="keyword">this</span>.defaultAnimate = animate;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Map a value within a given range to another range.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> value the value to map</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> fromLow the low end of the range the value is within</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> fromHigh the high end of the range the value is within</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> toLow the low end of the range to map to</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> toHigh the high end of the range to map to</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> the mapped value</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">mapValueFromRangeToRange</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="keyword">double</span> value,</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="keyword">double</span> fromLow,</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="keyword">double</span> fromHigh,</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="keyword">double</span> toLow,</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="keyword">double</span> toHigh)</span> </span>{</span><br><span class="line">    <span class="keyword">double</span> fromRangeSize = fromHigh - fromLow;</span><br><span class="line">    <span class="keyword">double</span> toRangeSize = toHigh - toLow;</span><br><span class="line">    <span class="keyword">double</span> valueScale = (value - fromLow) / fromRangeSize;</span><br><span class="line">    <span class="keyword">return</span> toLow + (valueScale * toRangeSize);</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>2.在项目res - values目录下 - 找到 attrs.xml 文件，在resource中间添加如下代码：（文件名好像无所谓）</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">declare-styleable</span> <span class="attr">name</span>=<span class="string">"SwitchButton"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"borderWidth"</span> <span class="attr">format</span>=<span class="string">"dimension"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">attr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"offBorderColor"</span> <span class="attr">format</span>=<span class="string">"reference|color"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">attr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"offColor"</span> <span class="attr">format</span>=<span class="string">"reference|color"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">attr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"onColor"</span> <span class="attr">format</span>=<span class="string">"reference|color"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">attr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"spotColor"</span> <span class="attr">format</span>=<span class="string">"reference|color"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">attr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"animate"</span> <span class="attr">format</span>=<span class="string">"reference|boolean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">attr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">declare-styleable</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>以及 colors.xml 文件：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 白色 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"common_white"</span>&gt;</span>#FFFFFF<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 浅灰色 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"light_gray"</span>&gt;</span>#DDDDDD<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 浅蓝色 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"common_light_blue"</span>&gt;</span>#039AE3<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>3.在XML布局文件中使用控件（路径引用需改成SwitchButton类所在目录）：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">com.yourpath.SwitchButton</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/switchButton"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"45dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"25dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:borderWidth</span>=<span class="string">"0.8dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:offBorderColor</span>=<span class="string">"@color/light_gray"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:offColor</span>=<span class="string">"@color/common_white"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:onColor</span>=<span class="string">"@color/common_light_blue"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:spotColor</span>=<span class="string">"@color/common_white"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:animate</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_margin</span>=<span class="string">"20dp"</span> /&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>  控件的属性介绍：</p><ul><li>borderWidth  描边宽度</li><li>offBorderColor 关闭状态下描边的颜色</li><li>offColor 关闭状态的颜色</li><li>onColor  打开状态的颜色</li><li>spotColor 控件中间的圆点的颜色</li><li>animate 是否打开动画效果</li></ul><p>4.在Activity中使用：</p><p>4.1绑定控件：<br>如果使用ButterKinfe库的话：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bind</span>(R.id.switchButton) SwitchButton switchButton;</span><br></pre></td></tr></tbody></table></figure><p>findViewById的方式:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SwitchButton switchButton = (SwitchButton)findViewById(R.id.switchButton);</span><br></pre></td></tr></tbody></table></figure><p>4.2使用控件：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">switchButton.setToggleOn(<span class="keyword">false</span>);<span class="comment">//默认打开。如果参数传false,则打开页面初始化时不会有动画效果(改变状态还是会有动画) </span></span><br><span class="line">switchButton.setOnToggleChanged(<span class="keyword">new</span> SwitchButton.OnToggleChanged(){      </span><br><span class="line">    <span class="meta">@Override</span>      </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onToggle</span><span class="params">(<span class="keyword">boolean</span> isOn)</span> </span>{      </span><br><span class="line">      <span class="comment">//处理自己的逻辑     </span></span><br><span class="line">      showToast( <span class="string">"SwitchButton"</span>+isOn);    </span><br><span class="line">    } </span><br><span class="line">  });</span><br></pre></td></tr></tbody></table></figure><hr><blockquote><p>参考：<a href="https://blog.csdn.net/qq_22393017/article/details/52198453" target="_blank" rel="noopener">https://blog.csdn.net/qq_22393017/article/details/52198453</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;图片设置开关&quot;&gt;&lt;a href=&quot;#图片设置开关&quot; class=&quot;headerlink&quot; title=&quot;图片设置开关&quot;&gt;&lt;/a&gt;图片设置开关&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;准备开关不同状态的两张图片放入drawable中。&lt;/li&gt;
&lt;li&gt;xml文件中添加代码：&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="Android" scheme="http://blog.iwxyi.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET-学习笔记</title>
    <link href="http://blog.iwxyi.com/2019/01/15/ASP-NET-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://blog.iwxyi.com/2019/01/15/ASP-NET-学习笔记/</id>
    <published>2019-01-15T13:11:00.000Z</published>
    <updated>2019-10-12T23:17:36.838Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ASP-NET-简介"><a href="#ASP-NET-简介" class="headerlink" title="ASP.NET 简介"></a>ASP.NET 简介</h1><p>ASP.NET 是新一代的 ASP。它无法兼容经典 ASP，但 ASP.NET 可以引用 ASP。</p><a id="more"></a><p>ASP.NET 页面需要编译，因此比经典 ASP 更快。</p><p>ASP.NET 拥有更好的语言支持，大量用户控件，基于 XML 的组件，以及对用户认证的整合。</p><p>ASP.NET 页面的扩展名是 .aspx，通常由 VB (Visual Basic) 或 C# (C sharp) 编写。</p><p>ASP.NET 中的用户控件可以通过不同的语言进行编写，包括 C++ 和 Java。</p><p>当浏览器请求 ASP.NET 文件时，ASP.NET 引擎读取该文件，编译并执行文件中的脚本，然后以纯 HTML 向浏览器返回结果。</p><p>扩展名</p><ul><li>ASP 文件的文件扩展名是 .asp</li><li>ASP.NET 文件的文件扩展名是 .aspx</li><li>ASP.NET 文件使用 C# 语法的文件扩展名是 .cshtml</li><li>ASP.NET 文件使用 Razor VB 语法的文件扩展名是 .vbhtml</li></ul><h1 id="WP-教程"><a href="#WP-教程" class="headerlink" title="WP 教程"></a>WP 教程</h1><p>Web Pages 是三种 ASP.NET 编程模型中的一种，用于创建 ASP.NET 网站和 web 应用程序。</p><p>其他两种编程模型是 Web Forms 和 MVC (Model, View, Controller)。</p><p>Web Pages 是最简单的 ASP.NET 网页开发编程模型。它提供了一种简单的方法将 HTML、CSS、JavaScript 以及服务器代码结合起来。</p><h2 id="WP-Razor"><a href="#WP-Razor" class="headerlink" title="WP Razor"></a>WP Razor</h2><ul><li>Razor 是一种向网页添加基于服务器的代码的标记语法</li><li>Razor 拥有传统 ASP.NET 标记的能力，但是更易学习，更易使用</li><li>Razor 是一种类似 ASP 和 PHP 的服务器端标记语法</li><li>Razor 支持 C# 和 Visual Basic 编程语言</li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;The time is @DateTime.Now&lt;/p&gt;</span><br></pre></td></tr></tbody></table></figure><p>包含常规的 HTML 标记，此外还包含：由 @ 标记的 Razor 代码。</p><hr><p><strong>C# 的主要 Razor 语法规则</strong></p><ul><li>Razor 代码块由 @{ … } 包围</li><li>行内表达式（变量和函数）以 @ 开始</li><li>代码语句以分号结束</li><li>变量通过 var 关键词进行声明</li><li>字符串用引用来包围</li><li>C# 代码对大小写敏感</li><li>C# 文件的扩展名是 .cshtml</li></ul><p><strong>实例</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 单行代码块 --&gt;</span><br><span class="line">@{ var myMessage = "Hello World"; }</span><br><span class="line"></span><br><span class="line">&lt;!-- 行内表达式或变量 --&gt;</span><br><span class="line">&lt;p&gt;The value of myMessage is: @myMessage&lt;/p&gt; </span><br><span class="line"></span><br><span class="line">&lt;!-- 多行代码块 --&gt;</span><br><span class="line">@{</span><br><span class="line">var greeting = "Welcome to our site!";</span><br><span class="line">var weekDay = DateTime.Now.DayOfWeek;</span><br><span class="line">var greetingMessage = greeting + " Today is: " + weekDay;</span><br><span class="line">}</span><br><span class="line">&lt;p&gt;The greeting is: @greetingMessage&lt;/p&gt;</span><br></pre></td></tr></tbody></table></figure><hr><p><strong>VB 的主要 Razor 语法规则</strong></p><ul><li>Razor 代码块由 @Code … End 包围</li><li>行内表达式（变量和函数）以 @ 开始</li><li>变量通过 Dim 关键词进行声明</li><li>字符串用引用来包围</li><li>C# 代码对大小写不敏感</li><li>C# 文件的扩展名是 .vbhtml</li></ul><p><strong>实例</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 单行代码块 --&gt;</span><br><span class="line">@Code dim myMessage = "Hello World" End Code</span><br><span class="line"> </span><br><span class="line">&lt;!-- 行内表达式或变量 --&gt;</span><br><span class="line">&lt;p&gt;The value of myMessage is: @myMessage&lt;/p&gt; </span><br><span class="line"> </span><br><span class="line">&lt;!-- 多行代码块 --&gt;</span><br><span class="line">@Code</span><br><span class="line">dim greeting = "Welcome to our site!" </span><br><span class="line">dim weekDay = DateTime.Now.DayOfWeek </span><br><span class="line">dim greetingMessage = greeting &amp; " Today is: " &amp; weekDay</span><br><span class="line">End Code </span><br><span class="line"></span><br><span class="line">&lt;p&gt;The greeting is: @greetingMessage&lt;/p&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="WP-布局"><a href="#WP-布局" class="headerlink" title="WP 布局"></a>WP 布局</h2><p>###内容快</p><p>使用 <code>@RenderPage()</code> 方法从不同的文件导入内容。</p><p>内容块（来自另一个文件）能够被输入网页中的任意位置，并可包含文本、标记和代码，就像任何常规的网页那样。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    @RenderPage("header.cshtml")</span><br><span class="line">    &lt;h1&gt;Hello Web Pages&lt;/h1&gt; </span><br><span class="line">    &lt;p&gt;This is a paragraph&lt;/p&gt;</span><br><span class="line">    @RenderPage("footer.cshtml")</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="布局页面"><a href="#布局页面" class="headerlink" title="布局页面"></a>布局页面</h3><p>创建一致外观的另一种方法是使用布局网页。布局网页包含网页的结构，而不是内容。当网页（内容页）链接到布局页时，它会根据布局页（模板）来显示。</p><p>布局页类似普通的网页，但是会<strong>在引用内容页的位置调用 <code>@RenderBody()</code> 方法</strong>。</p><p>每个内容页必须以 <code>Layout</code> 指令开头。</p><p>布局网页：Layout.cshtml</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;p&gt;This is header text&lt;/p&gt;</span><br><span class="line">    @RenderBody()</span><br><span class="line">    &lt;p&gt;© 2012 W3School. All rights reserved.&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p>任意网页：（被包含在布局网页中）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@{Layout="Layout.cshtml";}</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;Welcome to W3Schools&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;</span><br><span class="line">Lorem ipsum dolor sit amet, consectetur adipisicing elit,sed do eiusmod tempor </span><br><span class="line">incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud </span><br><span class="line">exercitation ullamco laborisnisi ut aliquip ex ea commodo consequat.</span><br><span class="line">&lt;/p&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="防止代码泄露"><a href="#防止代码泄露" class="headerlink" title="防止代码泄露"></a>防止代码泄露</h3><p>名称以下划线开头的文件无法通过 web 来浏览。</p><p>隐藏敏感信息（数据库密码、电邮密码等）的常用方法是把这些信息保存在名为 “_AppStart” 的独立文件中</p><h4 id="AppStart-cshtml"><a href="#AppStart-cshtml" class="headerlink" title="_AppStart.cshtml"></a>_AppStart.cshtml</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@{</span><br><span class="line">    WebMail.SmtpServer = "mailserver.example.com";</span><br><span class="line">    WebMail.EnableSsl = true;</span><br><span class="line">    WebMail.UserName = "username@example.com";</span><br><span class="line">    WebMail.Password = "your-password";</span><br><span class="line">    WebMail.From = "your-name-here@example.com";</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="WP-文件夹"><a href="#WP-文件夹" class="headerlink" title="WP 文件夹"></a>WP 文件夹</h2><p>ASP.NET 网页的典型文件夹结构：</p><ul><li>“Account” 文件夹包含登录和安全文件</li><li>“App_Data” 文件包含数据库和数据文件</li><li>“Images” 文件夹包含图片</li><li>“Scripts” 文件夹包含浏览器脚本</li><li>“Shared” 文件夹包含通用文件（比如布局和样式文件）</li></ul><h3 id="物理文件结构"><a href="#物理文件结构" class="headerlink" title="物理文件结构"></a>物理文件结构</h3><p>类似：<code>C:\Johnny\Documents\MyWebSites\Demo\Images</code></p><h3 id="URL-和路径"><a href="#URL-和路径" class="headerlink" title="URL 和路径"></a>URL 和路径</h3><p>URL 用于从 web 访问文件：</p><p><code>http://www.w3school.com.cn/html5/html5_intro.asp</code></p><p>URL 在服务器上对应的文件是：</p><p><code>C:\MyWebSites\htm5\html5_intro.asp</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">URL       http://www.w3school.com.cn/html/html5_intro.asp</span><br><span class="line">服务器名w3school</span><br><span class="line">虚拟路径/html/html5_intro.asp</span><br><span class="line">物理路径C:\MyWebSites\w3school\/html/html5_intro.asp</span><br></pre></td></tr></tbody></table></figure><h3 id="操作符"><a href="#操作符" class="headerlink" title="~ 操作符"></a>~ 操作符</h3><p>如需在编程代码中规定虚拟根目录，请使用 ~ 操作符。</p><p>如果您使用 ~ 操作符，而不是路径，就能够在不改变任何代码的情况下，将网站移动到不同的文件夹或位置：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var myImagesFolder = "~/images";</span><br><span class="line">var myStyleSheet = "~/styles/StyleSheet.css";</span><br></pre></td></tr></tbody></table></figure><h3 id="Server-MapPath-方法"><a href="#Server-MapPath-方法" class="headerlink" title="Server.MapPath 方法"></a>Server.MapPath 方法</h3><p>Server.MapPath 方法将虚拟路径 (/default.cshtml) 转换为服务器能够理解的物理路径 (C:\Johnny\MyWebSited\Demo\default.cshtml)。</p><p>当需要打开位于服务器上的数据文件时，您就会用到该方法（数据文件只能通过完整的物理路径来访问）：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var pathName = "~/dataFile.txt";</span><br><span class="line">var fileName = Server.MapPath(pathName);</span><br></pre></td></tr></tbody></table></figure><h3 id="Href-方法"><a href="#Href-方法" class="headerlink" title="Href 方法"></a>Href 方法</h3><p>Href 方法把代码中的路径转换为浏览器能够理解的路径（浏览器无法理解 ~ 操作符）。</p><p>您使用 Href 方法来创建指向资源（比如图片和 CSS 文件）的路径。</p><p>您会经常在 HTML 、&lt;a&gt;、&lt;img&gt; 以及 &lt;link&gt; 元素中用到该方法：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@{var myStyleSheet = "~/Shared/Site.css";}</span><br><span class="line"></span><br><span class="line">&lt;!-- 创建指向 CSS 文件的链接 --&gt;</span><br><span class="line">&lt;link rel="stylesheet" type="text/css" href="@Href(myStyleSheet)" /&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 同上 : --&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="WP-全局"><a href="#WP-全局" class="headerlink" title="WP 全局"></a>WP 全局</h2><h3 id="Web-启动之前：-AppStart"><a href="#Web-启动之前：-AppStart" class="headerlink" title="Web 启动之前：_AppStart"></a>Web 启动之前：_AppStart</h3><p>假如站点根目录中名为 _AppStart 的页面存在，ASP.NET 会在站点内的任何页面被请求之前首先运行这个页面。</p><p>通常 _AppStart 用于启动代码和全局值的初始化，比如计数器和全局名称。</p><p>注释 1：_AppStart 的文件扩展名应与网页相同，比如 _AppStart.cshtml。</p><p>注释 2：_AppStart 有下划线前缀。正因如此，用户才无法直接查看该文件</p><h3 id="每张页面之前：-PageStart"><a href="#每张页面之前：-PageStart" class="headerlink" title="每张页面之前：_PageStart"></a>每张页面之前：_PageStart</h3><p>就像在站点启动前运行 _AppStart 那样，您能够在每个文件夹中的任意页面之前运行代码。</p><p>对于 web 中的每个文件夹，您能够添加名为 _PageStart 的文件。</p><p>通常 _PageStart 用于设置文件夹中所有页面的布局文件，或者在运行页面之前检查用户登录。</p><blockquote><p>当请求到来时，ASP.NET 检查 _AppStart 是否存在。如果存在，并且这是对站点的第一次请求，则运行 _AppStart。</p><p>然后 ASP.NET 检查 _PageStart 是否存在。如果存在，则运行 _PageStart，在被请求的页面之前。</p><p>如果您在 _PageStart 内部引用了对 RunPage() 的调用，那么您可以规定在何处运行被请求的页面。否则，_PageStart 在被请求页面之前运行。</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ASP-NET-简介&quot;&gt;&lt;a href=&quot;#ASP-NET-简介&quot; class=&quot;headerlink&quot; title=&quot;ASP.NET 简介&quot;&gt;&lt;/a&gt;ASP.NET 简介&lt;/h1&gt;&lt;p&gt;ASP.NET 是新一代的 ASP。它无法兼容经典 ASP，但 ASP.NET 可以引用 ASP。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="ASP.NET" scheme="http://blog.iwxyi.com/tags/ASP-NET/"/>
    
      <category term="学习笔记" scheme="http://blog.iwxyi.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Qt QtextEdit高度自适应</title>
    <link href="http://blog.iwxyi.com/2019/01/15/Qt-QtextEdit%E9%AB%98%E5%BA%A6%E8%87%AA%E9%80%82%E5%BA%94/"/>
    <id>http://blog.iwxyi.com/2019/01/15/Qt-QtextEdit高度自适应/</id>
    <published>2019-01-15T12:03:00.000Z</published>
    <updated>2019-10-13T12:04:38.728Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QTextEdit *editor = <span class="keyword">new</span> QTextEdit(<span class="keyword">this</span>);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connect(editor-&gt;document(),SIGNAL(contentsChanged()),<span class="keyword">this</span>,SLOT(textAreaChanged()));</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> slots:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">textAreaChanged</span><span class="params">()</span></span>{</span><br><span class="line">QTextDocument *document=qobject_cast&lt;QTextDocument*&gt;(sender());  </span><br><span class="line">document-&gt;adjustSize();  </span><br><span class="line"><span class="keyword">if</span>(document){  </span><br><span class="line">    QTextEdit *editor=qobject_cast&lt;QTextEdit*&gt;(document-&gt;parent()-&gt;parent());  </span><br><span class="line">    <span class="keyword">if</span> (editor){  </span><br><span class="line">        <span class="keyword">int</span> newheight = document-&gt;size().rheight()+<span class="number">10</span>;  </span><br><span class="line">        <span class="keyword">if</span> (newheight != editor-&gt;height()){  </span><br><span class="line">            editor-&gt;setFixedHeight(newheight);  </span><br><span class="line">        }  </span><br><span class="line">    }  </span><br><span class="line">} </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;QTextEdit *editor = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; QTextEdit(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;connect(editor-&amp;gt;document(),SIGNAL(contentsChanged()),&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;,SLOT(textAreaChanged()));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C++" scheme="http://blog.iwxyi.com/tags/C/"/>
    
      <category term="Qt" scheme="http://blog.iwxyi.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>安装Workerman</title>
    <link href="http://blog.iwxyi.com/2019/01/15/%E5%AE%89%E8%A3%85Workerman/"/>
    <id>http://blog.iwxyi.com/2019/01/15/安装Workerman/</id>
    <published>2019-01-15T08:40:00.000Z</published>
    <updated>2019-10-13T08:41:36.802Z</updated>
    
    <content type="html"><![CDATA[<ol><li>首先通过 composer 安装，切换到项目根目录，输入命令</li></ol><p><code>composer require topthink/think-worker</code></p><a id="more"></a><p>如果遇见错误：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Using version ^6.3 for guzzlehttp/guzzle</span><br><span class="line">./composer.json has been updated</span><br><span class="line">Loading composer repositories with package information</span><br><span class="line">Updating dependencies (including require-dev)</span><br><span class="line">Your requirements could not be resolved to an installable set of packages.</span><br></pre></td></tr></tbody></table></figure><p>解决办法：在composer.json中添加以下<br>“minimum-stability”: “dev”, //这个遇上require时完全可以用上</p><ol start="2"><li>如果需要在window下做服务端，还需要</li></ol><p><code>composer require workerman/workerman-for-win</code></p><p>首先要明白composer之后workerman是安装到哪去了，安装到tp5项目下vendor目录中</p><p>运行出现错误PHP Fatal error: Call to undefined function Workerman\Lib\pcntl_signal()，需要删除vendor\workerman\workerman，防止命名覆盖</p><blockquote><p>参考：<a href="https://www.100txy.com/index.php/article/139.html" target="_blank" rel="noopener">https://www.100txy.com/index.php/article/139.html</a><br>常见错误解决方法：<a href="https://blog.csdn.net/qq_32642039/article/details/78292685" target="_blank" rel="noopener">https://blog.csdn.net/qq_32642039/article/details/78292685</a><br>composer 安装速度太慢：<a href="https://packagist.laravel-china.org/" target="_blank" rel="noopener">https://packagist.laravel-china.org/</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;首先通过 composer 安装，切换到项目根目录，输入命令&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;composer require topthink/think-worker&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="PHP" scheme="http://blog.iwxyi.com/tags/PHP/"/>
    
      <category term="Workerman" scheme="http://blog.iwxyi.com/tags/Workerman/"/>
    
  </entry>
  
  <entry>
    <title>安装composer</title>
    <link href="http://blog.iwxyi.com/2019/01/15/%E5%AE%89%E8%A3%85composer/"/>
    <id>http://blog.iwxyi.com/2019/01/15/安装composer/</id>
    <published>2019-01-15T08:39:00.000Z</published>
    <updated>2019-10-13T08:40:49.520Z</updated>
    
    <content type="html"><![CDATA[<p>PHP 的一个包管理工具</p><a id="more"></a><p>官网：<a href="https://getcomposer.org/download/" target="_blank" rel="noopener">https://getcomposer.org/download/</a></p><p>下载 exe，点击安装</p><p>选择 PHP.exe 所在的路径</p><p>上次出现的问题是：引用 php5.12 的几个 dll 出错，把 PHP 5.12 所在的文件夹改个名字就好了……<br>命名选了其他版本，不知道为什么会用到这个地方。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;PHP 的一个包管理工具&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="PHP" scheme="http://blog.iwxyi.com/tags/PHP/"/>
    
      <category term="Workerman" scheme="http://blog.iwxyi.com/tags/Workerman/"/>
    
  </entry>
  
  <entry>
    <title>Qt打包发布应用</title>
    <link href="http://blog.iwxyi.com/2019/01/14/Qt%E6%89%93%E5%8C%85%E5%8F%91%E5%B8%83%E5%BA%94%E7%94%A8/"/>
    <id>http://blog.iwxyi.com/2019/01/14/Qt打包发布应用/</id>
    <published>2019-01-14T09:48:00.000Z</published>
    <updated>2019-10-13T09:49:22.577Z</updated>
    
    <content type="html"><![CDATA[<h2 id="windeployqt-exe"><a href="#windeployqt-exe" class="headerlink" title="windeployqt.exe"></a>windeployqt.exe</h2><p>路径：<code>D:\IDE\Qt5.12.3\5.12.3\mingw73_32\bin</code></p><p>命令：<code>windeployqt.exe app.exe</code></p><a id="more"></a><p>写作天下打包命令：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\IDE\Qt5.13.1\5.13.1\mingw73_32\bin\windeployqt.exe WriterFly.exe</span><br></pre></td></tr></tbody></table></figure><ul><li>使用 UPX 压缩工具减小体积</li><li>使用 Enigma Virtual Box 打包成单独一个文件</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;windeployqt-exe&quot;&gt;&lt;a href=&quot;#windeployqt-exe&quot; class=&quot;headerlink&quot; title=&quot;windeployqt.exe&quot;&gt;&lt;/a&gt;windeployqt.exe&lt;/h2&gt;&lt;p&gt;路径：&lt;code&gt;D:\IDE\Qt5.12.3\5.12.3\mingw73_32\bin&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;命令：&lt;code&gt;windeployqt.exe app.exe&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="项目管理" scheme="http://blog.iwxyi.com/tags/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
      <category term="Qt" scheme="http://blog.iwxyi.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>Qt使用HTTPS（SSL）</title>
    <link href="http://blog.iwxyi.com/2019/01/13/Qt%E4%BD%BF%E7%94%A8HTTPS%EF%BC%88SSL%EF%BC%89/"/>
    <id>http://blog.iwxyi.com/2019/01/13/Qt使用HTTPS（SSL）/</id>
    <published>2019-01-13T11:03:00.000Z</published>
    <updated>2019-10-13T11:04:19.161Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、简述"><a href="#一、简述" class="headerlink" title="一、简述"></a>一、简述</h2><p>在使用Qt发送HTTP请求中一般使用的链接都是<strong>http://</strong>前缀，而有的服务器支持 <strong>https://</strong>前缀的链接，而Qt本身是支持<strong>https</strong>的，但是<strong>https访问</strong>需要用到<strong>SSL认证</strong>，而QT默认是不支持<strong>SSL认证</strong>，所以在Qt中使用<strong>https</strong>需要进行SSL认证。实现非常容易，简单几步即可完成。</p><a id="more"></a><h2 id="二、HTTPS和HTTP的区别"><a href="#二、HTTPS和HTTP的区别" class="headerlink" title="二、HTTPS和HTTP的区别"></a>二、HTTPS和HTTP的区别</h2><h3 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h3><blockquote><p>超文本传输协议HTTP被用于在Web浏览器和网站服务器之间传递信息。HTTP协议以明文方式发送内容，不提供任何方式的数据加密，如果攻击者截取了Web浏览器和网站服务器之间的传输报文，就可以直接读懂其中的信息，因此HTTP协议不适合传输一些敏感信息，比如信用卡号、密码等。</p><p>为了解决HTTP协议的这一缺陷，需要使用另一种协议：安全套接字层超文本传输协议HTTPS。为了数据传输的安全，HTTPS在HTTP的基础上加入了SSL协议，SSL依靠证书来验证服务器的身份，并为浏览器和服务器之间的通信加密。</p></blockquote><h3 id="2、区别"><a href="#2、区别" class="headerlink" title="2、区别"></a>2、区别</h3><blockquote><p>https协议需要到ca申请证书，一般免费证书很少，需要交费。</p><p>http是超文本传输协议，信息是明文传输，https 则是具有安全性的ssl加密传输协议。</p><p>http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。</p><p>http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。</p></blockquote><h2 id="三、如何进行SSL认证"><a href="#三、如何进行SSL认证" class="headerlink" title="三、如何进行SSL认证"></a>三、如何进行SSL认证</h2><p>1、首先，因为需要Openssl支持，使用SSL进行认证，所以需要对应的库文件 <strong>libeay32.dll</strong>和<strong>ssleay32.dll</strong>。需要下载<strong>libeay32.dll</strong> 和 <strong>ssleay32.dll</strong>两个库文件，将这两个库文件拷贝到程序生成目录下（即生成exe的同级目录）或者拷贝到QtNetwork模块的库文件目录中。</p><p>2、在发送HTTP请求之前加上如下代码</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">onSendHttpsRequest</span><span class="params">(QString url)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    QNetworkAccessManager* pManager = <span class="keyword">new</span> QNetworkAccessManager(<span class="keyword">this</span>);</span><br><span class="line">    QNetworkRequest request;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送https请求前准备工作;</span></span><br><span class="line">    QSslConfiguration config;</span><br><span class="line">    QSslConfiguration conf = request.sslConfiguration();</span><br><span class="line">    conf.setPeerVerifyMode(QSslSocket::VerifyNone);</span><br><span class="line">    conf.setProtocol(QSsl::TlsV1SslV3);</span><br><span class="line">    request.setSslConfiguration(conf);</span><br><span class="line"></span><br><span class="line">    request.setUrl(QUrl(url));       <span class="comment">// "https://www.temp.com"</span></span><br><span class="line">    QNetworkReply *pReply = pManager-&gt;post(request, bytePost);</span><br><span class="line"></span><br><span class="line">    connect(pReply , SIGNAL(finished()) , <span class="keyword">this</span> , SLOT(onFinished());</span><br><span class="line">    connect(pReply , SIGNAL(error(QNetworkReply::NetworkError)) , <span class="keyword">this</span> , SLOT(onError(QNetworkReply::NetworkError)));</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求完成;</span></span><br><span class="line"><span class="keyword">void</span> onFinished()</span><br><span class="line">{</span><br><span class="line">    QNetworkReply *pReplay = qobject_cast&lt;QNetworkReply*&gt;(sender());</span><br><span class="line">    <span class="comment">// 保存接受的数据;</span></span><br><span class="line">    QByteArray replyContent = pReplay-&gt;readAll();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求失败;</span></span><br><span class="line"><span class="keyword">void</span> onError(QNetworkReply::NetworkError errorCode)</span><br><span class="line">{</span><br><span class="line">    QNetworkReply *pReplay = qobject_cast&lt;QNetworkReply*&gt;(sender());</span><br><span class="line">    <span class="comment">// 输出错误码及错误信息;</span></span><br><span class="line">    qDebug()&lt;&lt; errorCode;</span><br><span class="line">    qDebug()&lt;&lt; pReplay-&gt;errorString();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="关于两个库文件下载"><a href="#关于两个库文件下载" class="headerlink" title="关于两个库文件下载"></a>关于两个库文件下载</h3><p>1、在 <a href="http://slproweb.com/products/Win32OpenSSL.html" target="_blank" rel="noopener">http://slproweb.com/products/Win32OpenSSL.html</a> 中下载 Win32 OpenSSL进行安装，将bin目录下面的库拷贝出来放到生成程序exe同级目录下即可。</p><p>2、 <a href="http://download.csdn.net/detail/goforwardtostep/9709448" target="_blank" rel="noopener">libeay32.dll 、 ssleay32.dll动态链接库 </a>直接在我的资源中进行下载。</p><p>3、<strong>使用everything本地搜索，很多程序可能都有……建议用Qt的MinGW自带的。</strong></p><hr><blockquote><p>参考：<a href="http://blog.csdn.net/goforwardtostep/article/details/53588961" target="_blank" rel="noopener">http://blog.csdn.net/goforwardtostep/article/details/53588961</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、简述&quot;&gt;&lt;a href=&quot;#一、简述&quot; class=&quot;headerlink&quot; title=&quot;一、简述&quot;&gt;&lt;/a&gt;一、简述&lt;/h2&gt;&lt;p&gt;在使用Qt发送HTTP请求中一般使用的链接都是&lt;strong&gt;http://&lt;/strong&gt;前缀，而有的服务器支持 &lt;strong&gt;https://&lt;/strong&gt;前缀的链接，而Qt本身是支持&lt;strong&gt;https&lt;/strong&gt;的，但是&lt;strong&gt;https访问&lt;/strong&gt;需要用到&lt;strong&gt;SSL认证&lt;/strong&gt;，而QT默认是不支持&lt;strong&gt;SSL认证&lt;/strong&gt;，所以在Qt中使用&lt;strong&gt;https&lt;/strong&gt;需要进行SSL认证。实现非常容易，简单几步即可完成。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C++" scheme="http://blog.iwxyi.com/tags/C/"/>
    
      <category term="Qt" scheme="http://blog.iwxyi.com/tags/Qt/"/>
    
      <category term="HTTPS" scheme="http://blog.iwxyi.com/tags/HTTPS/"/>
    
  </entry>
  
  <entry>
    <title>Qt使用HTTP</title>
    <link href="http://blog.iwxyi.com/2019/01/13/Qt%E4%BD%BF%E7%94%A8HTTP/"/>
    <id>http://blog.iwxyi.com/2019/01/13/Qt使用HTTP/</id>
    <published>2019-01-13T11:01:00.000Z</published>
    <updated>2019-10-13T11:04:37.074Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、HTTP协议"><a href="#一、HTTP协议" class="headerlink" title="一、HTTP协议"></a>一、HTTP协议</h2><p>Qt网络模块提供的API可以实现基于HTTP(Hyper Text Transport Protocol)协议的应用程序。此外, Qt还可以实现多种基于协议的应用程序, 如位于OSI 7层应用层的FTP、DNS、SNMP。</p><a id="more"></a><p>Qt4.x版本提供了QHttp和QFtp类以支持HTTP和FTP协议。从Qt 5.0 版本开始, 删除了QHttp 和 QFtp 类, 通过QNetworkReply、QNetworkAccessManager、QNetworkRequest类实现基于HTTP和FTP协议的应用程序。除了HTTP和FTP协议外, 该类还可以实现高层(OSI 7层中的上层)网络应用程序。</p><p>① QNetworkRequest类, 通过网络请求是使用。而且, 可以请求包含头信息和加密(encryption)的头信息。 QNetworkRequest可以通过URL上传和下载HTTP、FTP的本地文件。</p><p>② QNetworkAccessManager  类用于管理网络请求和响应, 可以在网络上管理请求 和 响应的设置, 使用代理和缓存,处理网络请求和响应过程中触发的信号。</p><p>③ QNetworkReply类用于在网络上处理响应, 它是QIODevice的子类, 支持同步异步的方式。</p><h2 id="二、代码示例"><a href="#二、代码示例" class="headerlink" title="二、代码示例"></a>二、代码示例</h2><p>头文件：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*头文件*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> NETWORKWIDGET_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NETWORKWIDGET_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtNetwork/QNetworkAccessManager&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtNetwork/QNetworkRequest&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtNetwork/QNetworkReply&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtWidgets/QWidget&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTextCodec&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QString&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QUrl&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ui_networkWidget.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">networkWidget</span> :</span> <span class="keyword">public</span> QWidget</span><br><span class="line">{</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    networkWidget(QWidget *parent = <span class="number">0</span>);</span><br><span class="line">    ~networkWidget();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Q_SLOTS:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">slot_replayFinished</span><span class="params">(QNetworkReply *reply)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Ui::networkWidgetClass ui;</span><br><span class="line"></span><br><span class="line">    QNetworkAccessManager *m_manager;</span><br><span class="line">    <span class="comment">//QNetworkReply *m_replay;</span></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// NETWORKWIDGET_H</span></span></span><br></pre></td></tr></tbody></table></figure><p>源文件：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*实现文件*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"networkWidget.h"</span></span></span><br><span class="line"></span><br><span class="line">networkWidget::networkWidget(QWidget *parent)</span><br><span class="line">    : QWidget(parent)</span><br><span class="line">{</span><br><span class="line">    ui.setupUi(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>-&gt;setWindowFlags(Qt::FramelessWindowHint);</span><br><span class="line">    m_manager = <span class="keyword">new</span> QNetworkAccessManager(<span class="keyword">this</span>);<span class="comment">//新建QNetworkAccessManager对象</span></span><br><span class="line">    connect(m_manager, SIGNAL(finished(QNetworkReply    *)), <span class="keyword">this</span>, SLOT(slot_replayFinished(QNetworkReply*))); <span class="comment">//关联信号和槽 </span></span><br><span class="line">    m_manager-&gt;get(QNetworkRequest(QUrl(<span class="string">"http://apistore.baidu.com/microservice/weather?cityid=成都"</span>)));<span class="comment">//发送请求</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">networkWidget::~networkWidget()</span><br><span class="line">{</span><br><span class="line">    </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> networkWidget::slot_replayFinished(QNetworkReply *reply)</span><br><span class="line">{</span><br><span class="line">    QTextCodec *codec = QTextCodec::codecForName(<span class="string">"utf8"</span>);</span><br><span class="line">        <span class="comment">//使用utf8编码, 这样可以显示中文</span></span><br><span class="line">    QString str = codec-&gt;toUnicode(reply-&gt;readAll());</span><br><span class="line">    ui.textBrowser-&gt;setText(str);</span><br><span class="line">    reply-&gt;deleteLater();<span class="comment">//最后要释放replay对象</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>main 文件</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"networkWidget.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtWidgets/QApplication&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="function">QApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line">    networkWidget w;</span><br><span class="line">    w.show();</span><br><span class="line">    <span class="keyword">return</span> a.exec();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、HTTP协议&quot;&gt;&lt;a href=&quot;#一、HTTP协议&quot; class=&quot;headerlink&quot; title=&quot;一、HTTP协议&quot;&gt;&lt;/a&gt;一、HTTP协议&lt;/h2&gt;&lt;p&gt;Qt网络模块提供的API可以实现基于HTTP(Hyper Text Transport Protocol)协议的应用程序。此外, Qt还可以实现多种基于协议的应用程序, 如位于OSI 7层应用层的FTP、DNS、SNMP。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="HTTP" scheme="http://blog.iwxyi.com/tags/HTTP/"/>
    
      <category term="C++" scheme="http://blog.iwxyi.com/tags/C/"/>
    
      <category term="Qt" scheme="http://blog.iwxyi.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>Qt连接MySQL</title>
    <link href="http://blog.iwxyi.com/2019/01/13/Qt%E8%BF%9E%E6%8E%A5MySQL/"/>
    <id>http://blog.iwxyi.com/2019/01/13/Qt连接MySQL/</id>
    <published>2019-01-13T10:59:00.000Z</published>
    <updated>2019-10-13T11:00:18.743Z</updated>
    
    <content type="html"><![CDATA[<p>复制文件：</p><p><strong>libmysql.dll</strong><br>libmysql.lib<br>mysqlclient.lib</p><p>到：</p><p><code>D:\Qt\Qt5.6.1\5.6\mingw49_32\bin</code></p><a id="more"></a><p>到 MySQL 安装文件夹里面可以找到这些文件</p><p>如果出现问题，那就是版本（32/64）不对……去 <a href="https://dev.mysql.com/downloads/connector/c/" target="_blank" rel="noopener">https://dev.mysql.com/downloads/connector/c/</a> 上下载对应版本</p><hr><p>Pro 文件加上：</p><p><code>QT += core gui sql</code></p><p>Main 文件：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mainwindow.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDebug&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtSql/QSqlDatabase&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtSql/QSqlQuery&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtSql/QSql&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QStringList&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="function">QApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line">    </span><br><span class="line">    QStringList drivers = QSqlDatabase::drivers();</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"支持的数据库驱动："</span> &lt;&lt; drivers;</span><br><span class="line"></span><br><span class="line">    QSqlDatabase db = QSqlDatabase::addDatabase(<span class="string">"QMYSQL"</span>);</span><br><span class="line">    db.setHostName(<span class="string">"localhost"</span>);</span><br><span class="line">    db.setDatabaseName(<span class="string">"test"</span>);</span><br><span class="line">    db.setUserName(<span class="string">"root"</span>);</span><br><span class="line">    db.setPassword(<span class="string">"root"</span>);</span><br><span class="line">    <span class="keyword">if</span> (db.open())</span><br><span class="line">qDebug() &lt;&lt; <span class="string">"连接成功"</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">qDebug() &lt;&lt; <span class="string">"连接失败"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> a.exec();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;复制文件：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;libmysql.dll&lt;/strong&gt;&lt;br&gt;libmysql.lib&lt;br&gt;mysqlclient.lib&lt;/p&gt;
&lt;p&gt;到：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;D:\Qt\Qt5.6.1\5.6\mingw49_32\bin&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C++" scheme="http://blog.iwxyi.com/tags/C/"/>
    
      <category term="MySQL" scheme="http://blog.iwxyi.com/tags/MySQL/"/>
    
      <category term="Qt" scheme="http://blog.iwxyi.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>Qt主线程中联网</title>
    <link href="http://blog.iwxyi.com/2019/01/13/Qt%E4%B8%BB%E7%BA%BF%E7%A8%8B%E4%B8%AD%E8%81%94%E7%BD%91/"/>
    <id>http://blog.iwxyi.com/2019/01/13/Qt主线程中联网/</id>
    <published>2019-01-13T09:05:00.000Z</published>
    <updated>2019-10-13T11:06:35.302Z</updated>
    
    <content type="html"><![CDATA[<p>在主线程中联网，不使用多线程</p><p>（注意会卡主线程）</p><a id="more"></a><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">QUrl <span class="title">url</span><span class="params">(ui-&gt;lineEdit-&gt;text())</span></span>;</span><br><span class="line">QNetworkAccessManager manager;</span><br><span class="line">QEventLoop loop;</span><br><span class="line">QTextCodec* codec;</span><br><span class="line">QNetworkReply* reply;</span><br><span class="line"></span><br><span class="line">reply = manager.get(QNetworkRequest(url));</span><br><span class="line"><span class="comment">//请求结束并下载完成后，退出子事件循环</span></span><br><span class="line">connect(reply, SIGNAL(finished()), &amp;loop, SLOT(quit()));</span><br><span class="line"><span class="comment">//开启子事件循环</span></span><br><span class="line">loop.exec();</span><br><span class="line"></span><br><span class="line">QString codeContent = reply-&gt;readAll();</span><br><span class="line"></span><br><span class="line"><span class="comment">//一定要注意编码问题，否则很容易出现乱码的  </span></span><br><span class="line"><span class="comment">//codec = QTextCodec::codecForHtml(codeContent.toAscii());</span></span><br><span class="line"><span class="comment">//codeContent = codec-&gt;toUnicode(codeContent.toAscii());</span></span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在主线程中联网，不使用多线程&lt;/p&gt;
&lt;p&gt;（注意会卡主线程）&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="HTTP" scheme="http://blog.iwxyi.com/tags/HTTP/"/>
    
      <category term="多线程" scheme="http://blog.iwxyi.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="C++" scheme="http://blog.iwxyi.com/tags/C/"/>
    
      <category term="Qt" scheme="http://blog.iwxyi.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>PHP取网页源码</title>
    <link href="http://blog.iwxyi.com/2019/01/13/PHP%E5%8F%96%E7%BD%91%E9%A1%B5%E6%BA%90%E7%A0%81/"/>
    <id>http://blog.iwxyi.com/2019/01/13/PHP取网页源码/</id>
    <published>2019-01-13T08:11:00.000Z</published>
    <updated>2019-10-13T11:05:58.345Z</updated>
    
    <content type="html"><![CDATA[<h2 id="取HTTP网页源码"><a href="#取HTTP网页源码" class="headerlink" title="取HTTP网页源码"></a>取HTTP网页源码</h2><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ret = file_get_contents(<span class="string">'要采集的网页URL'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 若需要从页面中获取内容，可以用正则匹配</span></span><br><span class="line">$begin=change_match_string(<span class="string">'匹配开头的字符串'</span>);</span><br><span class="line">$end=change_match_string(<span class="string">'匹配结尾的字符串'</span>);</span><br><span class="line">$p = <span class="string">"{$begin}(.*){$end}"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用正则进行匹配，[0]是全部，1开始是括号的</span></span><br><span class="line"><span class="keyword">if</span> (preg_match($p,$ret,$rs))</span><br><span class="line"><span class="keyword">return</span> $rs[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><p>乱码编码转换（网址表单）：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$getcontent = iconv(<span class="string">"gb2312"</span>, <span class="string">"utf-8"</span>,$contents);</span><br></pre></td></tr></tbody></table></figure><p>乱码网页编码</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$html = iconv(<span class="string">'gb2312'</span>, <span class="string">'utf-8//IGNORE'</span>,$html);</span><br></pre></td></tr></tbody></table></figure><h2 id="取HTTPS网页源码"><a href="#取HTTPS网页源码" class="headerlink" title="取HTTPS网页源码"></a>取HTTPS网页源码</h2><p>若用 <code>file_get_contents()</code> 函数会报错： </p><p>file_get_contents(): Unable to find the wrapper “https” - did you forget to enable it when you configured PHP</p><p>所以用函数：<code>curl_setopt()</code></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">header(<span class="string">"Content-Type: text/html;charset=utf-8"</span>);</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getHttps</span><span class="params">($url)</span></span>{    </span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    $ch = curl_init();</span><br><span class="line">    <span class="comment">//设置选项，包括URL</span></span><br><span class="line">    curl_setopt($ch, CURLOPT_URL, $url);</span><br><span class="line">    curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">    curl_setopt($ch, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line">    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, <span class="keyword">FALSE</span>); <span class="comment">// https请求 不验证证书和hosts</span></span><br><span class="line">    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, <span class="keyword">FALSE</span>);</span><br><span class="line"></span><br><span class="line">    $output = curl_exec($ch); <span class="comment">//执行并获取HTML文档内容</span></span><br><span class="line">    $str = htmlspecialchars($output);<span class="comment">//转换为源代码形式</span></span><br><span class="line">    <span class="comment">//释放curl句柄</span></span><br><span class="line">    curl_close($ch);</span><br><span class="line">    <span class="keyword">return</span>  $str ;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">$url =<span class="string">'https://www.hao123.com/index.html'</span>; </span><br><span class="line"><span class="keyword">echo</span> getHttps($url);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;取HTTP网页源码&quot;&gt;&lt;a href=&quot;#取HTTP网页源码&quot; class=&quot;headerlink&quot; title=&quot;取HTTP网页源码&quot;&gt;&lt;/a&gt;取HTTP网页源码&lt;/h2&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ret = file_get_contents(&lt;span class=&quot;string&quot;&gt;&#39;要采集的网页URL&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 若需要从页面中获取内容，可以用正则匹配&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$begin=change_match_string(&lt;span class=&quot;string&quot;&gt;&#39;匹配开头的字符串&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$end=change_match_string(&lt;span class=&quot;string&quot;&gt;&#39;匹配结尾的字符串&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$p = &lt;span class=&quot;string&quot;&gt;&quot;{$begin}(.*){$end}&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 使用正则进行匹配，[0]是全部，1开始是括号的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (preg_match($p,$ret,$rs))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; $rs[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="PHP" scheme="http://blog.iwxyi.com/tags/PHP/"/>
    
      <category term="HTTP" scheme="http://blog.iwxyi.com/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>Spring框架入门-学习笔记</title>
    <link href="http://blog.iwxyi.com/2019/01/13/Spring%E6%A1%86%E6%9E%B6%E5%85%A5%E9%97%A8/"/>
    <id>http://blog.iwxyi.com/2019/01/13/Spring框架入门/</id>
    <published>2019-01-13T05:23:00.000Z</published>
    <updated>2019-10-13T05:25:33.959Z</updated>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>　　Spring框架是个轻量级的Java EE框架。所谓轻量级，是指不依赖于容器就能运行的。Struts、Hibernate也是轻量级的。 </p><p>　　Spring以IoC、AOP为主要思想，其中IoC，Inversion of Control 指控制反转或反向控制。在Spring框架中我们通过配置创建类对象，由Spring在运行阶段实例化、组装对象。AOP，Aspect Oriented Programming，面向切面编程，其思想是在执行某些代码前执行另外的代码，使程序更灵活、扩展性更好，可以随便地添加、删除某些功能。Servlet中的Filter便是一种AOP思想的实现。 </p><a id="more"></a><p>　　Spring同时也是一个“一站式”框架，即Spring在JavaEE的三层架构[表现层（Web层）、业务逻辑层（Service层）、数据访问层（DAO层）]中，每一层均提供了不同的解决技术。如下：</p><ul><li>表现层（Web层）：Spring MVC</li><li>业务逻辑层（Service层）：Spring的IoC</li><li>数据访问层（DAO层）：Spring的jdbcTemplate</li></ul><h1 id="Spring中的IoC操作"><a href="#Spring中的IoC操作" class="headerlink" title="Spring中的IoC操作"></a>Spring中的IoC操作</h1><p>　　将对象的创建交由Spring框架进行管理。<br>　　IoC操作分为：IoC配置文件方式和IoC的注解方式。</p><h2 id="IoC入门案例"><a href="#IoC入门案例" class="headerlink" title="IoC入门案例"></a>IoC入门案例</h2><p>（1）导入Spring框架中的相关jar包，这里只导入Spring的Core模块（Core模块是框架的核心类库）下的jar包（使用IoC的基本操作，并不需要导入Spring的所有jar包，只导入<code>spring-beans</code>、<code>spring-core</code>、<code>spring-context</code>、<code>spring-expression</code>这4个jar包），以及 支持日志输出的 commons-logging 和 log4j 的jar包；<br>（2）创建一个普通的Java类，并在该类中创建方法，如下：<br>　　User.java</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package com.wm103.ioc;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by DreamBoy on 2018/3/17.</span><br><span class="line"> */</span><br><span class="line">public class User {</span><br><span class="line">    public void add() {</span><br><span class="line">        System.out.println("User Add Method.");</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() {</span><br><span class="line">        return "This is a user object.";</span><br><span class="line">    }</span><br><span class="line">}123456789101112131415</span><br></pre></td></tr></tbody></table></figure><p>（3）创建Spring的配置文件，进行Bean的配置<br>　　<strong>Spring的核心配置文件名称和位置不是固定的。但官方件建议将该核心配置文件放在src目录下，且命名为 applicationContext.xml。</strong><br>　　这里为了方便，将核心配置文件放在src目录下，并命名为 applicationContext.xml，内容如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line">&lt;beans xmlns="http://www.springframework.org/schema/beans"</span><br><span class="line">       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"</span><br><span class="line">       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"&gt;</span><br><span class="line">    &lt;bean id="user" class="com.wm103.ioc.User"&gt;&lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;123456</span><br></pre></td></tr></tbody></table></figure><p>（４）编写测试类进行测试，通过配置文件创建类对象<br>　　TestIoC.java</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">package com.wm103.ioc;</span><br><span class="line"></span><br><span class="line">import org.junit.Test;</span><br><span class="line">import org.springframework.context.ApplicationContext;</span><br><span class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by DreamBoy on 2018/3/17.</span><br><span class="line"> */</span><br><span class="line">public class TestIoc {</span><br><span class="line">    @Test</span><br><span class="line">    public void runUser() {</span><br><span class="line">        // 1. 加载Spring配置文件，根据创建对象</span><br><span class="line">        ApplicationContext context = new ClassPathXmlApplicationContext("applicationContext.xml");</span><br><span class="line">        // 2. 得到配置创建的对象</span><br><span class="line">        User user = (User) context.getBean("user");</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        user.add();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">123456789101112131415161718192021</span><br></pre></td></tr></tbody></table></figure><h1 id="Spring的bean管理（配置文件）"><a href="#Spring的bean管理（配置文件）" class="headerlink" title="Spring的bean管理（配置文件）"></a>Spring的bean管理（配置文件）</h1><h2 id="Bean实例化的方式"><a href="#Bean实例化的方式" class="headerlink" title="Bean实例化的方式"></a>Bean实例化的方式</h2><p>　　在Spring中通过配置文件创建对象。<br>　　Bean实例化三种方式实现：<br>（1）使用类的无参数构造创建，如：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 等同于 user = new com.wm103.ioc.User(); --&gt;</span><br><span class="line">&lt;bean id="user" class="com.wm103.ioc.User"&gt;&lt;/bean&gt;12</span><br></pre></td></tr></tbody></table></figure><p>（2）使用静态工厂创建<br>　　如果一个Bean不能通过new直接实例化，而是通过工厂类的某个静态方法创建的，需要把<code>&lt;bean&gt;</code>的<code>class</code>属性配置为工厂类。如：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 等同于 user = com.wm103.ioc.UserFactory.createInstance(); --&gt;</span><br><span class="line">&lt;bean id="user" class="com.wm103.ioc.UserFactory" factory-method="createInstance"&gt;&lt;/bean&gt;12</span><br></pre></td></tr></tbody></table></figure><p>（3）使用实例工厂创建<br>　　如果一个Bean不能通过new直接实例化，而是通过工厂类的某个实例方法创建的，需要先配置工厂的<code>&lt;bean&gt;</code>标签，然后在需要创建的对象的bean标签的<code>factory-bean</code>属性配置为工厂类对象，<code>factory-method</code>属性配置为产生实例的方法。如：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 等同于 userFactory = new com.wm103.ioc.UserFactory(); --&gt;</span><br><span class="line">&lt;bean id="userFactory" class="com.wm103.ioc.UserFactory"&gt;&lt;/bean&gt;</span><br><span class="line">&lt;!-- 等同于 user = userFactory.createInstance(); --&gt;</span><br><span class="line">&lt;bean id="user" factory-bean="userFactory" factory-method="createInstance"&gt;&lt;/bean&gt;1234</span><br></pre></td></tr></tbody></table></figure><h2 id="Bean标签的常用属性"><a href="#Bean标签的常用属性" class="headerlink" title="Bean标签的常用属性"></a>Bean标签的常用属性</h2><p>（1）id属性：用于指定配置对象的名称，不能包含特殊符号。<br>（2）class属性：创建对象所在类的全路径。<br>（3）name属性：功能同id属性一致。但是在name属性值中可以包含特殊符号。<br>（4）scope属性</p><ul><li>singleton：默认值，单例<br>单例模式下，在程序下只有一个实例。非单态模式下，每次请求该Bean，都会生成一个新的对象。</li><li>prototype：多例</li><li>request：创建对象后将对象存放到request域</li><li>session：创建对象后将对象存放到session域</li><li>globalSession：创建对象后将对象存放到globalSession域</li></ul><h2 id="属性注入"><a href="#属性注入" class="headerlink" title="属性注入"></a>属性注入</h2><p>　　属性注入指创建对象时，向类对象的属性设置属性值。<br>　　在Spring框架中支持set方法注入和有参构造函数注入，即创建对象后通过set方法设置属性或采用有参构造函数创建对象并初始化属性。</p><h3 id="使用有参构造函数注入属性"><a href="#使用有参构造函数注入属性" class="headerlink" title="使用有参构造函数注入属性"></a>使用有参构造函数注入属性</h3><p>　　案例：<br>　　Student.java 提供有参的构造方法</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package com.wm103.ioc;</span><br><span class="line">public class Student {</span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    public Student(String name) {</span><br><span class="line">        this.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() {</span><br><span class="line">        return "Student{" +</span><br><span class="line">                "name='" + name + '\'' +</span><br><span class="line">                '}';</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">12345678910111213141516</span><br></pre></td></tr></tbody></table></figure><p>　　bean的配置：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id="student" class="com.wm103.ioc.Student"&gt;</span><br><span class="line">    &lt;constructor-arg name="name" value="DreamBoy"&gt;&lt;/constructor-arg&gt;</span><br><span class="line">&lt;/bean&gt;123</span><br></pre></td></tr></tbody></table></figure><p>　　创建Student对象进行测试：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void runStudent() {</span><br><span class="line">    // 1. 加载Spring配置文件，根据创建对象</span><br><span class="line">    ApplicationContext context = new ClassPathXmlApplicationContext("applicationContext.xml");</span><br><span class="line">    // 2. 得到配置创建的对象</span><br><span class="line">    Student student = (Student) context.getBean("student");</span><br><span class="line">    System.out.println(student);</span><br><span class="line">}12345678</span><br></pre></td></tr></tbody></table></figure><h3 id="使用set方法注入属性"><a href="#使用set方法注入属性" class="headerlink" title="使用set方法注入属性"></a>使用set方法注入属性</h3><p>　　案例：<br>　　Teacher.java 提供属性的set方法</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package com.wm103.ioc;</span><br><span class="line">public class Teacher {</span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) {</span><br><span class="line">        this.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() {</span><br><span class="line">        return "Teacher{" +</span><br><span class="line">                "name='" + name + '\'' +</span><br><span class="line">                '}';</span><br><span class="line">    }</span><br><span class="line">}123456789101112131415</span><br></pre></td></tr></tbody></table></figure><p>　　bean的配置：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id="teacher" class="com.wm103.ioc.Teacher"&gt;</span><br><span class="line">    &lt;property name="name" value="Teacher Wu"&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;123</span><br></pre></td></tr></tbody></table></figure><p>　　创建Teacher对象进行测试：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void runTeacher() {</span><br><span class="line">    // 1. 加载Spring配置文件，根据创建对象</span><br><span class="line">    ApplicationContext context = new ClassPathXmlApplicationContext("applicationContext.xml");</span><br><span class="line">    // 2. 得到配置创建的对象</span><br><span class="line">    Teacher teacher = (Teacher) context.getBean("teacher");</span><br><span class="line">    System.out.println(teacher);</span><br><span class="line">}12345678</span><br></pre></td></tr></tbody></table></figure><h2 id="注入对象类型属性"><a href="#注入对象类型属性" class="headerlink" title="注入对象类型属性"></a>注入对象类型属性</h2><p>　　以三层架构中的service层和dao层为例，为了让service层使用dao层的类创建的对象，需要将dao对象注入到service层类中。具体实现过程中如下：<br>（1）创建service类、dao层接口、dao类，如下：<br>UserService.java</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package com.wm103.exp;</span><br><span class="line">public class UserService {</span><br><span class="line">    private UserDao userDao; // 声明为接口类型，降低service层与dao层的耦合度，不依赖于dao层的具体实现</span><br><span class="line"></span><br><span class="line">    public void setUserDao(UserDao userDao) {</span><br><span class="line">        this.userDao = userDao;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public void add() {</span><br><span class="line">        System.out.println("UserService Add...");</span><br><span class="line">        this.userDao.add();</span><br><span class="line">    }</span><br><span class="line">}12345678910111213</span><br></pre></td></tr></tbody></table></figure><p>UserDao.java</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">package com.wm103.exp;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 暴露给service层的接口</span><br><span class="line"> * Created by DreamBoy on 2018/3/17.</span><br><span class="line"> */</span><br><span class="line">public interface UserDao {</span><br><span class="line">    void add();</span><br><span class="line">}123456789</span><br></pre></td></tr></tbody></table></figure><p>UserDaoImpl.java</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">package com.wm103.exp;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 接口UserDao的具体实现</span><br><span class="line"> * Created by DreamBoy on 2018/3/17.</span><br><span class="line"> */</span><br><span class="line">public class UserDaoImpl implements UserDao {</span><br><span class="line">    @Override</span><br><span class="line">    public void add() {</span><br><span class="line">        System.out.println("UserDaoImpl Add...");</span><br><span class="line">    }</span><br><span class="line">}123456789101112</span><br></pre></td></tr></tbody></table></figure><p>（2）在配置文件中注入关系，如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 配置service和dao对象 --&gt;</span><br><span class="line">&lt;!-- 因为service依赖于dao，所以先进行dao对象的bean配置 --&gt;</span><br><span class="line">&lt;bean id="userDaoImpl" class="com.wm103.exp.UserDaoImpl"&gt;&lt;/bean&gt;</span><br><span class="line">&lt;bean id="userService" class="com.wm103.exp.UserService"&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">        注入dao对象</span><br><span class="line">        name属性值为：service中的某一属性名称</span><br><span class="line">        ref属性值为：被引用的对象对应的bean标签的id属性值</span><br><span class="line">     --&gt;</span><br><span class="line">    &lt;property name="userDao" ref="userDaoImpl"&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;1234567891011</span><br></pre></td></tr></tbody></table></figure><p>（3）创建测试方法进行测试，如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void runUserService() {</span><br><span class="line">    // 1. 加载Spring配置文件，根据创建对象</span><br><span class="line">    ApplicationContext context = new ClassPathXmlApplicationContext("applicationContext.xml");</span><br><span class="line">    // 2. 得到配置创建的对象</span><br><span class="line">    UserService userService = (UserService) context.getBean("userService");</span><br><span class="line">    userService.add();</span><br><span class="line">}12345678</span><br></pre></td></tr></tbody></table></figure><h2 id="p名称空间注入属性"><a href="#p名称空间注入属性" class="headerlink" title="p名称空间注入属性"></a>p名称空间注入属性</h2><p>　　之前提到了一种set方法的属性注入方式，这里将介绍另一种属性注入的方式，名为 p名称空间注入。对比set方法的属性注入方式，核心配置文件配置修改如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line">&lt;beans xmlns="http://www.springframework.org/schema/beans"</span><br><span class="line">       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"</span><br><span class="line">       xmlns:p="http://www.springframework.org/schema/p"</span><br><span class="line">       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"&gt;</span><br><span class="line">    &lt;bean id="teacher" class="com.wm103.ioc.Teacher" p:name="Teacher Wu"&gt;&lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;1234567</span><br></pre></td></tr></tbody></table></figure><h2 id="注入复杂类型属性"><a href="#注入复杂类型属性" class="headerlink" title="注入复杂类型属性"></a>注入复杂类型属性</h2><p>　　对象注入复杂类型属性，如数组、List、Map、Properties。<br>　　案例：<br>　　PropertyDemo.java</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">package com.wm103.ioc;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import java.util.Properties;</span><br><span class="line"></span><br><span class="line">public class PropertyDemo {</span><br><span class="line">    private String[] arrs;</span><br><span class="line">    private List&lt;String&gt; list;</span><br><span class="line">    private Map&lt;String, String&gt; map;</span><br><span class="line">    private Properties properties;</span><br><span class="line"></span><br><span class="line">    public String[] getArrs() {</span><br><span class="line">        return arrs;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public void setArrs(String[] arrs) {</span><br><span class="line">        this.arrs = arrs;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public List&lt;String&gt; getList() {</span><br><span class="line">        return list;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public void setList(List&lt;String&gt; list) {</span><br><span class="line">        this.list = list;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public Map&lt;String, String&gt; getMap() {</span><br><span class="line">        return map;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public void setMap(Map&lt;String, String&gt; map) {</span><br><span class="line">        this.map = map;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public Properties getProperties() {</span><br><span class="line">        return properties;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public void setProperties(Properties properties) {</span><br><span class="line">        this.properties = properties;</span><br><span class="line">    }</span><br><span class="line">}1234567891011121314151617181920212223242526272829303132333435363738394041424344</span><br></pre></td></tr></tbody></table></figure><p>　　bean配置文件，内容如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line">&lt;beans xmlns="http://www.springframework.org/schema/beans"</span><br><span class="line">       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"</span><br><span class="line">       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"&gt;</span><br><span class="line">    &lt;bean id="prop" class="com.wm103.ioc.PropertyDemo"&gt;</span><br><span class="line">        &lt;!-- 注入数组 --&gt;</span><br><span class="line">        &lt;property name="arrs"&gt;</span><br><span class="line">            &lt;list&gt;</span><br><span class="line">                &lt;value&gt;Value 1 of Array&lt;/value&gt;</span><br><span class="line">                &lt;value&gt;Value 2 of Array&lt;/value&gt;</span><br><span class="line">                &lt;value&gt;Value 3 of Array&lt;/value&gt;</span><br><span class="line">            &lt;/list&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;!-- 注入List集合 --&gt;</span><br><span class="line">        &lt;property name="list"&gt;</span><br><span class="line">            &lt;list&gt;</span><br><span class="line">                &lt;value&gt;Value 1 of List&lt;/value&gt;</span><br><span class="line">                &lt;value&gt;Value 2 of List&lt;/value&gt;</span><br><span class="line">                &lt;value&gt;Value 3 of List&lt;/value&gt;</span><br><span class="line">            &lt;/list&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;!-- 注入Map集合 --&gt;</span><br><span class="line">        &lt;property name="map"&gt;</span><br><span class="line">            &lt;map&gt;</span><br><span class="line">                &lt;entry key="key1" value="Value 1 of Map"&gt;&lt;/entry&gt;</span><br><span class="line">                &lt;entry key="key2" value="Value 2 of Map"&gt;&lt;/entry&gt;</span><br><span class="line">                &lt;entry key="key3" value="Value 3 of Map"&gt;&lt;/entry&gt;</span><br><span class="line">            &lt;/map&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;!-- 注入Properties --&gt;</span><br><span class="line">        &lt;property name="properties"&gt;</span><br><span class="line">            &lt;props&gt;</span><br><span class="line">                &lt;prop key="username"&gt;root&lt;/prop&gt;</span><br><span class="line">                &lt;prop key="password"&gt;123456&lt;/prop&gt;</span><br><span class="line">            &lt;/props&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;1234567891011121314151617181920212223242526272829303132333435363738</span><br></pre></td></tr></tbody></table></figure><p>　　创建PropertyDemo对象进行测试：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void runPropertyDemo() {</span><br><span class="line">    ApplicationContext context = new ClassPathXmlApplicationContext("applicationContext.xml");</span><br><span class="line">    PropertyDemo pd = (PropertyDemo) context.getBean("prop");</span><br><span class="line">    System.out.println(pd);</span><br><span class="line">    System.out.println(Arrays.toString(pd.getArrs()));</span><br><span class="line">    System.out.println(pd.getList());</span><br><span class="line">    System.out.println(pd.getMap());</span><br><span class="line">    System.out.println(pd.getProperties());</span><br><span class="line">}12345678910</span><br></pre></td></tr></tbody></table></figure><h1 id="IoC和DI的区别"><a href="#IoC和DI的区别" class="headerlink" title="IoC和DI的区别"></a>IoC和DI的区别</h1><p>　　IoC，控制反转，将传统的对象创建流程转变为交由框架进行创建和管理。在Spring中，对象的创建交给Spring进行配置。它包括依赖注入。<br>　　DI，依赖注入，向类的属性设置值。<br>　　IoC与DI的关系：依赖注入不能单独存在，需要在IoC基础之上完成操作。</p><h1 id="Spring的bean管理（注解）"><a href="#Spring的bean管理（注解）" class="headerlink" title="Spring的bean管理（注解）"></a>Spring的bean管理（注解）</h1><p>　　注解是代码中特殊的标记，使用注解可以完成特定的功能。注解可以使用在类、方法或属性上，写法如：<code>@注解名称(属性名称=属性值)</code>。<br>　　Spring的bean管理注解方式，案例如下。</p><h2 id="Spring注解开发准备"><a href="#Spring注解开发准备" class="headerlink" title="Spring注解开发准备"></a>Spring注解开发准备</h2><p>（1）导入jar包：</p><ul><li>导入基本的jar包：<code>commons-logging</code>、<code>log4j</code>、<code>spring-beans</code>、<code>spring-context</code>、<code>spring-core</code>、<code>spring-expression</code>相关jar包。</li><li>导入AOP的jar包：<code>spring-aop</code>jar包。</li></ul><p>（2）创建类、方法<br>　　User.java</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">package com.wm103.anno;</span><br><span class="line"></span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">public class User {</span><br><span class="line">    public void add() {</span><br><span class="line">        System.out.println("User Add Method.");</span><br><span class="line">    }</span><br><span class="line">}123456789</span><br></pre></td></tr></tbody></table></figure><p>（3）创建Spring配置文件，引入约束；并开启注解扫描<br>　　bean1.xml</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line">&lt;beans xmlns="http://www.springframework.org/schema/beans"</span><br><span class="line">       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"</span><br><span class="line">       xmlns:context="http://www.springframework.org/schema/context"</span><br><span class="line">       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--</span><br><span class="line">        开启注解扫描</span><br><span class="line">            （1）到包中扫描类、方法、属性上是否有注解</span><br><span class="line">     --&gt;</span><br><span class="line">    &lt;context:component-scan base-package="com.wm103"&gt;&lt;/context:component-scan&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--</span><br><span class="line">            （2）只扫描属性上的注解</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;!--&lt;context:annotation-config&gt;&lt;/context:annotation-config&gt;--&gt;</span><br><span class="line">&lt;/beans&gt;123456789101112131415161718</span><br></pre></td></tr></tbody></table></figure><h2 id="注解创建对象"><a href="#注解创建对象" class="headerlink" title="注解创建对象"></a>注解创建对象</h2><p>　　在创建对象的类上面使用注解实现，如：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Component(value="user")</span><br><span class="line">public class User {12</span><br></pre></td></tr></tbody></table></figure><p>　　创建测试类 TestAnno.java和测试方法，如：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package com.wm103.anno;</span><br><span class="line"></span><br><span class="line">import org.junit.Test;</span><br><span class="line">import org.springframework.context.ApplicationContext;</span><br><span class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line">public class TestAnno {</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void runUser() {</span><br><span class="line">        ApplicationContext context = new ClassPathXmlApplicationContext("bean1.xml");</span><br><span class="line">        User user = (User) context.getBean("user");</span><br><span class="line">        user.add();</span><br><span class="line">    }</span><br><span class="line">}123456789101112131415</span><br></pre></td></tr></tbody></table></figure><p>　　除了上述提到的 <code>@Component</code>注解外，Spring中还提供了<code>@Component</code>的3个衍生注解，其功能就目前来说是一致的，均是为了创建对象。</p><ul><li><p>@Controller ：WEB层</p></li><li><p>@Service ：业务层</p></li><li><p>@Repository ：持久层</p><p>以单例或多实例方式创建对象，默认为单例，多例对象设置注解如下：</p></li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Component(value="user")</span><br><span class="line">@Scope(value="prototype")</span><br><span class="line">public class User {123</span><br></pre></td></tr></tbody></table></figure><h2 id="注解注入属性"><a href="#注解注入属性" class="headerlink" title="注解注入属性"></a>注解注入属性</h2><p>　　案例：创建Service类和Dao类，并在Service中注入Dao对象。如下：<br>（1）创建Dao和Service对象<br>　　UserDao.java</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">package com.wm103.anno;</span><br><span class="line"></span><br><span class="line">import org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line">@Repository(value="userDao")</span><br><span class="line">public class UserDao {</span><br><span class="line">    public void add() {</span><br><span class="line">        System.out.println("UserDao Add Method.");</span><br><span class="line">    }</span><br><span class="line">}12345678910</span><br></pre></td></tr></tbody></table></figure><p>　　UserService.java</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package com.wm103.anno;</span><br><span class="line"></span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line">@Service(value="userService")</span><br><span class="line">public class UserService {</span><br><span class="line">    public void add() {</span><br><span class="line">        System.out.println("UserService Add Method.");</span><br><span class="line">        userDao.add();</span><br><span class="line">    }</span><br><span class="line">}12345678910111213</span><br></pre></td></tr></tbody></table></figure><p>（2）在Service类中定义UserDao类型的属性，并使用注解完成对象的注入<br><code>@Autowired</code>：自动注入或自动装配，是根据类名去找到类对应的对象来完成注入的。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">private UserDao userDao;12</span><br></pre></td></tr></tbody></table></figure><p>或者 <code>@Resource</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Resource(name="userDao")</span><br><span class="line">private UserDao userDao;12</span><br></pre></td></tr></tbody></table></figure><p>　　其中该注解的name属性值为注解创建Dao对象的value属性的值。<br>　　这两种注解方式都不一定要为需要注入的属性定义set方法。<br>（3）创建测试方法</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void runUserService() {</span><br><span class="line">    ApplicationContext context = new ClassPathXmlApplicationContext("bean1.xml");</span><br><span class="line">    UserService userService = (UserService) context.getBean("userService");</span><br><span class="line">    userService.add();</span><br><span class="line">}123456</span><br></pre></td></tr></tbody></table></figure><hr><p>注：<strong>配置文件和注解混合使用</strong><br>1）创建对象的操作一般使用配置文件方式实现；<br>2）注入属性的操作一般使用注解方式实现。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;　　Spring框架是个轻量级的Java EE框架。所谓轻量级，是指不依赖于容器就能运行的。Struts、Hibernate也是轻量级的。 &lt;/p&gt;
&lt;p&gt;　　Spring以IoC、AOP为主要思想，其中IoC，Inversion of Control 指控制反转或反向控制。在Spring框架中我们通过配置创建类对象，由Spring在运行阶段实例化、组装对象。AOP，Aspect Oriented Programming，面向切面编程，其思想是在执行某些代码前执行另外的代码，使程序更灵活、扩展性更好，可以随便地添加、删除某些功能。Servlet中的Filter便是一种AOP思想的实现。 &lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="学习笔记" scheme="http://blog.iwxyi.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Spring" scheme="http://blog.iwxyi.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Qt调用DLL</title>
    <link href="http://blog.iwxyi.com/2019/01/10/Qt%E8%B0%83%E7%94%A8DLL/"/>
    <id>http://blog.iwxyi.com/2019/01/10/Qt调用DLL/</id>
    <published>2019-01-10T09:49:00.000Z</published>
    <updated>2019-10-13T09:50:12.757Z</updated>
    
    <content type="html"><![CDATA[<h3 id="静态链接库（-lib-dll）"><a href="#静态链接库（-lib-dll）" class="headerlink" title="静态链接库（.lib+.dll）"></a>静态链接库（.lib+.dll）</h3><p>声明：** 事先我已经自己动手写了一个简单的dll文件(myDLL.dll),C版接口的。首先，从dll中导出了导入库(.lib)文件，dll中有两个函数，原型如下：</p><p>   void HelloWorld();     //函数内部调用Win32 API,功能是弹出一个helloworld提示框<br>   int add(int a,int b);  //实现两个数相加，并返回结果</p><p> 下面分别通过显示调用和隐式调用两种方法，来模拟Qt如何调用外部dll文件中的功能函数，follow me….</p><a id="more"></a><p><strong>预备知识：</strong></p><p>​     1、如果在没有导入库文件(.lib)，而只有头文件(.h)与动态链接库(.dll)时，我们才需要显示调用，如果这三个文件都全的话，我们就可以使用简单方便的隐式调用。</p><p>​     2、通常Windows下程序显示调用dll的步骤分为三步(三个函数)：<code>LoadLibrary()</code>、<code>GetProcAdress()</code>、<code>FreeLibrary()</code></p><p> 其中，<code>LoadLibrary()</code> 函数用来载入指定的dll文件，加载到调用程序的内存中(DLL没有自己的内存！)</p><p>​         <code>GetProcAddress()</code> 函数检索指定的动态链接库(DLL)中的输出库函数地址，以备调用</p><p>​         <code>FreeLibrary()</code> 释放dll所占空间 </p><p>*<em>1、显式调用 *</em></p><p>​      Qt提供了一个 QLibrary 类供显示调用。下面给出一个完整的例子：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QLibrary&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDebug&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QMessageBox&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"dll.h"</span>             <span class="comment">//引入头文件</span></span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*Fun)</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>)</span></span>; <span class="comment">//定义函数指针，以备调用</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="function">QApplication <span class="title">app</span><span class="params">(argc,argv)</span></span>;</span><br><span class="line">    <span class="function">QLibrary <span class="title">mylib</span><span class="params">(<span class="string">"myDLL.dll"</span>)</span></span>;   <span class="comment">//声明所用到的dll文件</span></span><br><span class="line">    <span class="keyword">int</span> result;</span><br><span class="line">    <span class="keyword">if</span> (mylib.load())              <span class="comment">//判断是否正确加载</span></span><br><span class="line">    {</span><br><span class="line">        QMessageBox::information(<span class="literal">NULL</span>,<span class="string">"OK"</span>,<span class="string">"DLL load is OK!"</span>);</span><br><span class="line">        Fun open=(Fun)mylib.resolve(<span class="string">"add"</span>);    <span class="comment">//援引 add() 函数</span></span><br><span class="line">        <span class="keyword">if</span> (open)                  <span class="comment">//是否成功连接上 add() 函数</span></span><br><span class="line">        {</span><br><span class="line">            QMessageBox::information(<span class="literal">NULL</span>,<span class="string">"OK"</span>,<span class="string">"Link to Function is OK!"</span>);</span><br><span class="line">            result=open(<span class="number">5</span>,<span class="number">6</span>);      <span class="comment">//这里函数指针调用dll中的 add() 函数</span></span><br><span class="line">            qDebug()&lt;&lt;result;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            QMessageBox::information(<span class="literal">NULL</span>,<span class="string">"NO"</span>,<span class="string">"Linke to Function is not OK!!!!"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        QMessageBox::information(<span class="literal">NULL</span>,<span class="string">"NO"</span>,<span class="string">"DLL is not loaded!"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;  <span class="comment">//加载失败则退出28}</span></span><br></pre></td></tr></tbody></table></figure><p> myDLL.dll为自定义的dll文件，将其复制到程序的输出目录下就可以调用。显然，显示调用代码书写量巨大，实在不方便。</p><p><strong>2、隐式调用</strong></p><p>​    这个时候我们需要三个文件，头文件(.h)、导入库文件(.lib)、动态链接库(.dll)，具体步骤如下：</p><p><strong>1、</strong>首先我们把 .h 与 .lib/.a 文件复制到程序当前目录下，然后再把dll文件复制到程序的输出目录，</p><p><strong>2、</strong>下面我们在pro文件中，添加 .lib 文件的位置： <code>LIBS+= -L D:/hitempt/api/ -l myDLL</code></p><p>​         -L 参数指定 .lib/.a 文件的位置</p><p>​         -l  参数指定导入库文件名(不要加扩展名) （注：这是小写的L，不是hijk的大写i）</p><p>​         另外，导入库文件的路径中，反斜杠用的是向右倾斜的 </p><p><strong>3、</strong>在程序中include头文件(我试验用的dll是用C写的，因此要用 <strong>extern “C” { #include “dll.h” }</strong> )</p><p> 下面是隐式调用的实例代码：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDebug&gt;</span></span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span>    <span class="comment">//由于是C版的dll文件，在C++中引入其头文件要加extern "C" {},注意</span></span><br><span class="line">{</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"dll.h"</span></span></span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argv ,<span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">       <span class="function">QApplication <span class="title">app</span><span class="params">(argv,argv)</span></span>;</span><br><span class="line">       HelloWordl();          <span class="comment">//调用Win32 API 弹出helloworld对话框</span></span><br><span class="line">       qDebug()&lt;&lt;add(<span class="number">5</span>,<span class="number">6</span>);    <span class="comment">// dll 中我自己写的一个加法函数</span></span><br><span class="line">       <span class="keyword">return</span> <span class="number">0</span>;  <span class="comment">//完成使命后，直接退出，不让它进入事件循环</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="动态链接库（-a-dll）"><a href="#动态链接库（-a-dll）" class="headerlink" title="动态链接库（.a+.dll）"></a>动态链接库（.a+.dll）</h1><p>只需要修改 .pro 文件即可</p><p>首先是链接libcurl.dll，格式如下：</p><p><code>LIBS +=-L E:/1/web/bin -llibcurl</code></p><p>这里要注意的是语句最后要先加上 -l 如何再加上动态链接库的名字，不要带后缀。</p><p>接着是链接libcurldll.a，格式如下：</p><p><code>LIBS +=E:/1/web/lib/libcurldll.a</code></p><p>代码里面依旧需要 include 对应库的头文件</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>imcompact：32位和64位不兼容（至少是不兼容），用对应的QT重新编译库的源代码一遍</p><p>can find：找不到，名字错了</p><p>运行直接崩溃：用同一套 .a 和 .dll</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;静态链接库（-lib-dll）&quot;&gt;&lt;a href=&quot;#静态链接库（-lib-dll）&quot; class=&quot;headerlink&quot; title=&quot;静态链接库（.lib+.dll）&quot;&gt;&lt;/a&gt;静态链接库（.lib+.dll）&lt;/h3&gt;&lt;p&gt;声明：** 事先我已经自己动手写了一个简单的dll文件(myDLL.dll),C版接口的。首先，从dll中导出了导入库(.lib)文件，dll中有两个函数，原型如下：&lt;/p&gt;
&lt;p&gt;   void HelloWorld();     //函数内部调用Win32 API,功能是弹出一个helloworld提示框&lt;br&gt;   int add(int a,int b);  //实现两个数相加，并返回结果&lt;/p&gt;
&lt;p&gt; 下面分别通过显示调用和隐式调用两种方法，来模拟Qt如何调用外部dll文件中的功能函数，follow me….&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C++" scheme="http://blog.iwxyi.com/tags/C/"/>
    
      <category term="Qt" scheme="http://blog.iwxyi.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>Qt Socket通信</title>
    <link href="http://blog.iwxyi.com/2019/01/08/Qt-Socket%E9%80%9A%E4%BF%A1/"/>
    <id>http://blog.iwxyi.com/2019/01/08/Qt-Socket通信/</id>
    <published>2019-01-08T09:46:00.000Z</published>
    <updated>2019-10-13T09:47:20.987Z</updated>
    
    <content type="html"><![CDATA[<p>QT的TCP Socket通信仍然有服务端、客户端之分。服务端通过监听某个端口来监听是否有客户端连接到来，如果有连接到来，则建立新的SOCKET连接；客户端通过IP和PORT连接服务端，当成功建立连接之后，就可进行数据的收发了。需要注意的是，在QT中，QT把SOCKET当成输入输出流来对待的，数据的收发是通过read()和write()来进行的，需要与我们常见的send()与recv()进行区分。</p><p>要在QT进行SOCKET通信，需要在 工程名.pro 文件中输入 <code>QT += network</code></p><a id="more"></a><h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><p>在服务端，建立SOCKET通信需要用到两个类QTcpServer和QTcpSocket。其中QTcpServer是用来建立QT的Server端对象，QTcpSocket是用来建立SOCKET通信的Socket套接字对象。通信建立流程如下所示。</p><h3 id="1-建立QTcpServer类的对象"><a href="#1-建立QTcpServer类的对象" class="headerlink" title="1.建立QTcpServer类的对象"></a>1.建立QTcpServer类的对象</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">QTcpServer* mp_TCPServer ;</span><br><span class="line">mp_TCPServer = <span class="keyword">new</span> QTcpServer();</span><br></pre></td></tr></tbody></table></figure><h3 id="2-监听"><a href="#2-监听" class="headerlink" title="2.监听"></a>2.监听</h3><p>QT中，通过listen()建立对端口的监听。使用方式如下：mp_TCPServer-&gt;listen(地址类型， 端口号);</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> port = ui-&gt;m_portLineEdit-&gt;text().toInt();<span class="comment">//获得端口号</span></span><br><span class="line"><span class="keyword">if</span>(!mp_TCPServer-&gt;listen(QHostAddress::Any, port))</span><br><span class="line">{</span><br><span class="line">     QMessageBox::information(<span class="keyword">this</span>, <span class="string">"QT网络通信"</span>, <span class="string">"服务器端监听失败！"</span>);</span><br><span class="line">     <span class="keyword">return</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>其中，QHostAddress定义了集中特殊的IP地址，如</p><ul><li>QHostAddress::Null表示一个空地址；</li><li>QHostAddress::LocalHost表示IPv4的本机地址127.0.0.1；</li><li>QHostAddress::LocalHostIPv6表示IPv6的本机地址；</li><li>QHostAddress::Broadcast表示广播地址255.255.255.255；</li><li>QHostAddress::Any表示IPv4的任意地址；</li><li>QHostAddress::AnyIPv6表示IPv6的任意地址。</li></ul><h3 id="3-关联接收连接信号与槽函数"><a href="#3-关联接收连接信号与槽函数" class="headerlink" title="3.关联接收连接信号与槽函数"></a>3.关联接收连接信号与槽函数</h3><p>服务端通过信号 SIGNAL:newConnection() 来判断是否接收到了新的连接，当服务端接收到一个客户端的连接时，就会触发信号newConnection()，此时调用相应的槽函数（如自定义函数：ServerNewConnection()）保存新接收到的连接；所以需要在服务端监听端口之后建立信号与槽函数的连接。通过connect函数建立联系：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connect(mp_TCPServer, SIGNAL(newConnection()), <span class="keyword">this</span>, SLOT(ServerNewConnection()));</span><br></pre></td></tr></tbody></table></figure><p>在ServerNewConnection()函数中，通过nextPendingConnection()函数获得连接客户端的SOCKET套接字：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mp_TCPSocket = mp_TCPServer-&gt;nextPendingConnection();</span><br></pre></td></tr></tbody></table></figure><h3 id="4-接收数据"><a href="#4-接收数据" class="headerlink" title="4.接收数据"></a>4.接收数据</h3><p>在QT中QT通过信号SIGNAL:readyRead()来判断是否有数据传入，当客户端向服务端成功发送数据之后，就会在服务端触发readyRead()信号，此时通过调用相应的自定义的槽函数（如：ServerReadData()）保存接收到的数据；通过connect函数建立信号readyRead()与槽函数ServerReadData()的连接：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connect(mp_TCPSocket, SIGNAL(readyRead()), <span class="keyword">this</span>, SLOT(ServerReadData()));</span><br></pre></td></tr></tbody></table></figure><p>在接收函数ServerReadData()函数中通过read()函数获取数据：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mp_TCPSocket-&gt;read(buffer, <span class="number">1024</span>);</span><br></pre></td></tr></tbody></table></figure><p>需要注意的是read()函数有多个重载函数，保存接收数据的数据类型可以是QByteArray也可以是char<em>类型，根据个人习惯或者任务需求选择合适的read()函数。不过，为了保持一致性，建议选择char</em>类型，一是因为数据类型容易识别；二是因为熟悉C\C++语言开发的对char*应该比较熟悉，防止使用上的错误。</p><h3 id="5-发送数据"><a href="#5-发送数据" class="headerlink" title="5.发送数据"></a>5.发送数据</h3><p>在QT中，通过write函数向外部发送数据：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> sendRe = mp_TCPSocket-&gt;write(sendMsgChar, <span class="built_in">strlen</span>(sendMsgChar));</span><br><span class="line"><span class="keyword">if</span>( <span class="number">-1</span> == sendRe)</span><br><span class="line">{</span><br><span class="line">   QMessageBox::information(<span class="keyword">this</span>, <span class="string">"QT网络通信"</span>, <span class="string">"服务端发送数据失败！"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><h3 id="1-建立QTcpSocket类的对象"><a href="#1-建立QTcpSocket类的对象" class="headerlink" title="1.建立QTcpSocket类的对象"></a>1.建立QTcpSocket类的对象</h3><p>建立Socket的套接字：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">QTcpSocket* mp_clientSocket;</span><br><span class="line">mp_clientSocket = <span class="keyword">new</span> QTcpSocket();</span><br></pre></td></tr></tbody></table></figure><h3 id="2-连接服务端"><a href="#2-连接服务端" class="headerlink" title="2.连接服务端"></a>2.连接服务端</h3><p>客户端通过connectToHost(IP, Port)函数连接服务端</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mp_clientSocket-&gt;connectToHost(ip, port);</span><br></pre></td></tr></tbody></table></figure><h3 id="3-接收数据"><a href="#3-接收数据" class="headerlink" title="3.接收数据"></a>3.接收数据</h3><p>客户端接收数据与服务端接收数据的机制是相同的。通过readyRead()信号是否被触发来判断是否有数据传入，如果该信号被触发，则调用自定义函数（如：ClientRecvData()）来保存接收到的数据。通过connect()函数，将信号readyRead()与槽函数ClientRecvData()建立映射关系。</p><p>在槽函数ClientRecvData()中通过read()函数接收数据，具体使用方法请参考服务端接收数据。</p><h3 id="4-发送数据"><a href="#4-发送数据" class="headerlink" title="4.发送数据"></a>4.发送数据</h3><p>客户端发送数据也是通过write()函数来实现，具体使用方法请参考<em>服务端发送数据</em></p><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><h2 id="服务端示例"><a href="#服务端示例" class="headerlink" title="服务端示例"></a>服务端示例</h2><h3 id="1-在sockettcpserver-h中添加具体如下代码："><a href="#1-在sockettcpserver-h中添加具体如下代码：" class="headerlink" title="1.在sockettcpserver.h中添加具体如下代码："></a>1.在sockettcpserver.h中添加具体如下代码：</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Ui::SocketTCPServer *ui;</span><br><span class="line"> </span><br><span class="line">    QTcpServer *mp_TCPServer;</span><br><span class="line">    QTcpSocket *mp_TCPSocket;</span><br><span class="line"><span class="keyword">private</span> slots:</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnBtnInitSocket</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnBtnSendData</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ServerReadData</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ServerNewConnection</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sServerDisConnection</span><span class="params">()</span></span>;</span><br></pre></td></tr></tbody></table></figure><h3 id="2-在构造函数中添加如下代码："><a href="#2-在构造函数中添加如下代码：" class="headerlink" title="2.在构造函数中添加如下代码："></a>2.在构造函数中添加如下代码：</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ui-&gt;m_portLineEdit-&gt;setText(<span class="string">"5550"</span>);</span><br><span class="line">    connect(ui-&gt;m_initSocketBtn, SIGNAL(clicked()), <span class="keyword">this</span>, SLOT(OnBtnInitSocket()));</span><br><span class="line">    connect(ui-&gt;m_sendData, SIGNAL(clicked()), <span class="keyword">this</span>, SLOT(OnBtnSendData()));</span><br></pre></td></tr></tbody></table></figure><h3 id="3-ServerNewConnection-具体实现："><a href="#3-ServerNewConnection-具体实现：" class="headerlink" title="3.ServerNewConnection()具体实现："></a>3.ServerNewConnection()具体实现：</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取客户端连接</span></span><br><span class="line">    mp_TCPSocket = mp_TCPServer-&gt;nextPendingConnection();</span><br><span class="line">    <span class="keyword">if</span>(!mp_TCPSocket)</span><br><span class="line">    {</span><br><span class="line">        QMessageBox::information(<span class="keyword">this</span>, <span class="string">"QT网络通信"</span>, <span class="string">"未正确获取客户端连接！"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">        QMessageBox::information(<span class="keyword">this</span>, <span class="string">"QT网络通信"</span>, <span class="string">"成功接受客户端的连接"</span>);</span><br><span class="line">        connect(mp_TCPSocket, SIGNAL(readyRead()), <span class="keyword">this</span>, SLOT(ServerReadData()));</span><br><span class="line">        connect(mp_TCPSocket, SIGNAL(disconnected()), <span class="keyword">this</span>, SLOT(sServerDisConnection()));</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><h3 id="4-ServerReadData-具体实现："><a href="#4-ServerReadData-具体实现：" class="headerlink" title="4.ServerReadData()具体实现："></a>4.ServerReadData()具体实现：</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> buffer[<span class="number">1024</span>] = {<span class="number">0</span>};</span><br><span class="line">    mp_TCPSocket-&gt;read(buffer, <span class="number">1024</span>);</span><br><span class="line">    <span class="keyword">if</span>( <span class="built_in">strlen</span>(buffer) &gt; <span class="number">0</span>)</span><br><span class="line">    {</span><br><span class="line">        QString showNsg = buffer;</span><br><span class="line">        ui-&gt;m_recvDataTextEdit-&gt;append(showNsg);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">        QMessageBox::information(<span class="keyword">this</span>, <span class="string">"QT网络通信"</span>, <span class="string">"未正确接收数据"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><h3 id="5-OnBtnInitSocket-具体实现："><a href="#5-OnBtnInitSocket-具体实现：" class="headerlink" title="5.OnBtnInitSocket()具体实现："></a>5.OnBtnInitSocket()具体实现：</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mp_TCPServer = <span class="keyword">new</span> QTcpServer();</span><br><span class="line">    <span class="keyword">int</span> port = ui-&gt;m_portLineEdit-&gt;text().toInt();</span><br><span class="line">    <span class="keyword">if</span>(!mp_TCPServer-&gt;listen(QHostAddress::Any, port))</span><br><span class="line">    {</span><br><span class="line">        QMessageBox::information(<span class="keyword">this</span>, <span class="string">"QT网络通信"</span>, <span class="string">"服务器端监听失败！"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">        QMessageBox::information(<span class="keyword">this</span>, <span class="string">"QT网络通信"</span>, <span class="string">"服务器监听成功！"</span>);</span><br><span class="line">    }</span><br><span class="line">    connect(mp_TCPServer, SIGNAL(newConnection()), <span class="keyword">this</span>, SLOT(ServerNewConnection()));</span><br></pre></td></tr></tbody></table></figure><h3 id="6-OnBtnSendData-具体实现："><a href="#6-OnBtnSendData-具体实现：" class="headerlink" title="6.OnBtnSendData()具体实现："></a>6.OnBtnSendData()具体实现：</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> sendMsgChar[<span class="number">1024</span>] = {<span class="number">0</span>};</span><br><span class="line">    QString sendMsg = ui-&gt;m_inputTextEdit-&gt;toPlainText();</span><br><span class="line">    <span class="keyword">if</span>(sendMsg.isEmpty())</span><br><span class="line">    {</span><br><span class="line">        QMessageBox::information(<span class="keyword">this</span>, <span class="string">"QT网络通信"</span>, <span class="string">"发送数据为空，请输入数据"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    strcpy_s(sendMsgChar, sendMsg.toStdString().c_str());</span><br><span class="line">    <span class="keyword">if</span>(mp_TCPSocket-&gt;isValid())</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> sendRe = mp_TCPSocket-&gt;write(sendMsgChar, <span class="built_in">strlen</span>(sendMsgChar));</span><br><span class="line">        <span class="keyword">if</span>( <span class="number">-1</span> == sendRe)</span><br><span class="line">        {</span><br><span class="line">            QMessageBox::information(<span class="keyword">this</span>, <span class="string">"QT网络通信"</span>, <span class="string">"服务端发送数据失败！"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">        QMessageBox::information(<span class="keyword">this</span>, <span class="string">"QT网络通信"</span>, <span class="string">"套接字无效！"</span>);</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><h3 id="7-sServerDisConnection-具体实现："><a href="#7-sServerDisConnection-具体实现：" class="headerlink" title="7.sServerDisConnection()具体实现："></a>7.sServerDisConnection()具体实现：</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">QMessageBox::information(<span class="keyword">this</span>, <span class="string">"QT网络通信"</span>, <span class="string">"与客户端的连接断开"</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br></pre></td></tr></tbody></table></figure><h2 id="客户端示例"><a href="#客户端示例" class="headerlink" title="客户端示例"></a>客户端示例</h2><h3 id="1-在sockettcpclient-h中添加如下代码："><a href="#1-在sockettcpclient-h中添加如下代码：" class="headerlink" title="1.在sockettcpclient.h中添加如下代码："></a>1.在sockettcpclient.h中添加如下代码：</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> slots:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">on_m_connectServerBtn_clicked</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">on_pushButton_2_clicked</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ClientRecvData</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Ui::SocketTCPClient *ui;</span><br><span class="line"> </span><br><span class="line">    QTcpSocket *mp_clientSocket;</span><br></pre></td></tr></tbody></table></figure><h3 id="2-在构造函数中添加如下代码：-1"><a href="#2-在构造函数中添加如下代码：-1" class="headerlink" title="2.在构造函数中添加如下代码："></a>2.在构造函数中添加如下代码：</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ui-&gt;m_serverIPLineEdit-&gt;setText(<span class="string">"127.0.0.1"</span>);</span><br><span class="line">    ui-&gt;m_serverPortLineEdit_2-&gt;setText(<span class="string">"5550"</span>);</span><br></pre></td></tr></tbody></table></figure><h3 id="3-on-m-connectServerBtn-clicked-函数具体实现如下："><a href="#3-on-m-connectServerBtn-clicked-函数具体实现如下：" class="headerlink" title="3.on_m_connectServerBtn_clicked()函数具体实现如下："></a>3.on_m_connectServerBtn_clicked()函数具体实现如下：</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mp_clientSocket = <span class="keyword">new</span> QTcpSocket();</span><br><span class="line">    QString ip = ui-&gt;m_serverIPLineEdit-&gt;text();\</span><br><span class="line">    <span class="keyword">int</span> port = ui-&gt;m_serverPortLineEdit_2-&gt;text().toInt();</span><br><span class="line">    mp_clientSocket-&gt;connectToHost(ip, port);</span><br><span class="line">    <span class="keyword">if</span>(!mp_clientSocket-&gt;waitForConnected(<span class="number">30000</span>))</span><br><span class="line">    {</span><br><span class="line">        QMessageBox::information(<span class="keyword">this</span>, <span class="string">"QT网络通信"</span>, <span class="string">"连接服务端失败！"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">     connect(mp_clientSocket, SIGNAL(readyRead()), <span class="keyword">this</span>, SLOT(ClientRecvData()));</span><br></pre></td></tr></tbody></table></figure><h3 id="4-on-pushButton-2-clicked-函数具体实现如下："><a href="#4-on-pushButton-2-clicked-函数具体实现如下：" class="headerlink" title="4.on_pushButton_2_clicked()函数具体实现如下："></a>4.on_pushButton_2_clicked()函数具体实现如下：</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取TextEdit控件中的内容</span></span><br><span class="line">   QString sendMsg = ui-&gt;m_sendTextEdit-&gt;toPlainText();</span><br><span class="line">   <span class="keyword">char</span> sendMsgChar[<span class="number">1024</span>] = {<span class="number">0</span>};</span><br><span class="line">   strcpy_s(sendMsgChar, sendMsg.toStdString().c_str());</span><br><span class="line">   <span class="keyword">int</span> sendRe = mp_clientSocket-&gt;write(sendMsgChar, <span class="built_in">strlen</span>(sendMsgChar));</span><br><span class="line">   <span class="keyword">if</span>(sendRe == <span class="number">-1</span>)</span><br><span class="line">   {</span><br><span class="line">        QMessageBox::information(<span class="keyword">this</span>, <span class="string">"QT网络通信"</span>, <span class="string">"向服务端发送数据失败！"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure><h3 id="5-ClientRecvData-函数具体实现如下："><a href="#5-ClientRecvData-函数具体实现如下：" class="headerlink" title="5.ClientRecvData()函数具体实现如下："></a>5.ClientRecvData()函数具体实现如下：</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将接收内容存储到字符串中</span></span><br><span class="line">    <span class="keyword">char</span> recvMsg[<span class="number">1024</span>] = {<span class="number">0</span>};</span><br><span class="line">    <span class="keyword">int</span> recvRe = mp_clientSocket-&gt;read(recvMsg, <span class="number">1024</span>);</span><br><span class="line">    <span class="keyword">if</span>(recvRe == <span class="number">-1</span>)</span><br><span class="line">    {</span><br><span class="line">        QMessageBox::information(<span class="keyword">this</span>, <span class="string">"QT网络通信"</span>, <span class="string">"接收服务端数据失败！"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    QString showQstr = recvMsg;</span><br><span class="line">    ui-&gt;m_recvTextEdit_2-&gt;setText(showQstr);</span><br></pre></td></tr></tbody></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>连接服务器<br><code>m_tcpSocket-&gt;connectToHost(“127.0.0.1”, 9877);</code><br><code>connected = m_tcpSocket-&gt;waitForConnected();</code><br>只有使用<code>waitForConnected()</code>后,<code>QTcpSocket</code>才真正尝试连接服务器，并返回是否连接的结果。</li><li>写数据<br><code>m_tcpSocket-&gt;write(str.toStdString().c_str(), strlen(str.toStdString().c_str()));</code><br><code>m_tcpSocket-&gt;waitForBytesWritten();</code><br>当使用<code>waitForBytesWritten()</code>后，<code>QTcpSocket</code>才真正发送数据。<br><code>m_tcpSocket-&gt;write(str1.toStdString().c_str(), strlen(str1.toStdString().c_str()));</code><br><code>m_tcpSocket-&gt;write(str2.toStdString().c_str(), strlen(str2.toStdString().c_str()));</code><br>的结果是发送了<code>str1str2</code></li><li>断开与服务器的连接<br><code>m_tcpSocket-&gt;disconnectFromHost()</code><br><code>m_tcpSocket-&gt;waitForDisconnected()</code></li><li>善于使用QTcpSocket的SIGNAL：<code>connected()</code>，<code>disconnected()</code>，<code>error(QAbstractSocket::SocketError)</code><br>配合自定义私有开关变量 <code>bool connected</code>，<code>QTimer</code>可以实现自动重连接等逻辑。</li></ol><hr><blockquote><p>参考：<a href="https://blog.csdn.net/bailang_zhizun/article/details/78327974" target="_blank" rel="noopener">https://blog.csdn.net/bailang_zhizun/article/details/78327974</a></p><p>总结：<a href="https://blog.csdn.net/u011125673/article/details/50474491" target="_blank" rel="noopener">https://blog.csdn.net/u011125673/article/details/50474491</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;QT的TCP Socket通信仍然有服务端、客户端之分。服务端通过监听某个端口来监听是否有客户端连接到来，如果有连接到来，则建立新的SOCKET连接；客户端通过IP和PORT连接服务端，当成功建立连接之后，就可进行数据的收发了。需要注意的是，在QT中，QT把SOCKET当成输入输出流来对待的，数据的收发是通过read()和write()来进行的，需要与我们常见的send()与recv()进行区分。&lt;/p&gt;
&lt;p&gt;要在QT进行SOCKET通信，需要在 工程名.pro 文件中输入 &lt;code&gt;QT += network&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C++" scheme="http://blog.iwxyi.com/tags/C/"/>
    
      <category term="Qt" scheme="http://blog.iwxyi.com/tags/Qt/"/>
    
      <category term="Socket" scheme="http://blog.iwxyi.com/tags/Socket/"/>
    
  </entry>
  
  <entry>
    <title>Android切换Activity并返回数据</title>
    <link href="http://blog.iwxyi.com/2019/01/03/Android%E5%88%87%E6%8D%A2Activity/"/>
    <id>http://blog.iwxyi.com/2019/01/03/Android切换Activity/</id>
    <published>2019-01-03T03:19:00.000Z</published>
    <updated>2019-10-13T03:21:14.123Z</updated>
    
    <content type="html"><![CDATA[<h2 id="切换Activity"><a href="#切换Activity" class="headerlink" title="切换Activity"></a>切换Activity</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent(LoginActivity.<span class="keyword">this</span>, MainActivity.class);</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></tbody></table></figure><h2 id="给子Activity传递数据"><a href="#给子Activity传递数据" class="headerlink" title="给子Activity传递数据"></a>给子Activity传递数据</h2><p>如果给新启动的子Activity传递数据，只需要在Intent对象中加入key-value，key为准备传递数据的字符指示名称，value为准备传递的数据</p><a id="more"></a><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">intent.putExtra(<span class="string">"KEY"</span>,data);</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState); </span><br><span class="line">        <span class="keyword">int</span> data= getIntent().getIntExtra(<span class="string">"KEY"</span>); <span class="comment">// DataType用需要的数据类型</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="从子Activity返回数据"><a href="#从子Activity返回数据" class="headerlink" title="从子Activity返回数据"></a>从子Activity返回数据</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">intent.putExtra(“KEY”, data);</span><br><span class="line">setResult(RESULT_OK, intent);</span><br><span class="line"><span class="keyword">this</span>.finish();</span><br></pre></td></tr></tbody></table></figure><p>setResult(RESULT_OK, intent) 设置子Activity要返回父Activity（打开新Activity的Activity）的信息，RESULT_OK为int值，表子Activity成功执行完毕，intent里面就是包含要返回的数据。</p><p>记得要关闭哦 finish()在父Activity中如果要接收子Activity的返回结果，需要使用 startActivityForResult(intent, requestCode)打开子Activity，并且要重写 onActivityResult方法</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*............*/</span></span><br><span class="line">Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, DrugLibActivity.class);</span><br><span class="line">startActivityForResult(intent, <span class="number">10</span>);</span><br><span class="line"><span class="comment">/*............*/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">10</span> == requestCode) {</span><br><span class="line">        <span class="keyword">int</span> index = data.getIntExtra(KEY,<span class="number">0</span>);</span><br><span class="line">    } </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>如果在同一个Activity中有多个地方可调用 startActivityForResult 打开多个子 Activity 的情况，那你应该在 onActivityResult 返回时判断 requestCode，这样你就能搞清楚是哪个子Activity返回了数据。</p><hr><blockquote><p>参考：<a href="https://www.cnblogs.com/dw039/p/7411210.html" target="_blank" rel="noopener">https://www.cnblogs.com/dw039/p/7411210.html</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;切换Activity&quot;&gt;&lt;a href=&quot;#切换Activity&quot; class=&quot;headerlink&quot; title=&quot;切换Activity&quot;&gt;&lt;/a&gt;切换Activity&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Intent intent = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Intent(LoginActivity.&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, MainActivity.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;startActivity(intent);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;给子Activity传递数据&quot;&gt;&lt;a href=&quot;#给子Activity传递数据&quot; class=&quot;headerlink&quot; title=&quot;给子Activity传递数据&quot;&gt;&lt;/a&gt;给子Activity传递数据&lt;/h2&gt;&lt;p&gt;如果给新启动的子Activity传递数据，只需要在Intent对象中加入key-value，key为准备传递数据的字符指示名称，value为准备传递的数据&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="Android" scheme="http://blog.iwxyi.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Qt QPlainTextEdit用法</title>
    <link href="http://blog.iwxyi.com/2018/12/31/Qt-QPlainTextEdit%E7%94%A8%E6%B3%95/"/>
    <id>http://blog.iwxyi.com/2018/12/31/Qt-QPlainTextEdit用法/</id>
    <published>2018-12-31T09:40:00.000Z</published>
    <updated>2019-10-13T09:40:53.104Z</updated>
    
    <content type="html"><![CDATA[<p>QTextEditor 和 QPlainTextEditor 在一定程度上通用的</p><h2 id="获取文本"><a href="#获取文本" class="headerlink" title="获取文本"></a>获取文本</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">toPlainText();</span><br></pre></td></tr></tbody></table></figure><h2 id="设置文本"><a href="#设置文本" class="headerlink" title="设置文本"></a>设置文本</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setPlainText(QString);</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><h2 id="获取行数"><a href="#获取行数" class="headerlink" title="获取行数"></a>获取行数</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">num = QString::number(plainTextEdit-&gt;document()-&gt;lineCount()); <span class="comment">// 获取行数</span></span><br><span class="line">str = plainTextEdit-&gt;document()-&gt;findBlockByLineNumber(<span class="number">2</span>).text(); <span class="comment">// 获取某一行</span></span><br></pre></td></tr></tbody></table></figure><h2 id="获取光标所在行文本"><a href="#获取光标所在行文本" class="headerlink" title="获取光标所在行文本"></a>获取光标所在行文本</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">QTextCursor cursor = textEditor-&gt;textCursor();</span><br><span class="line"><span class="keyword">int</span> lineNumber = cursor.blockNumber();<span class="comment">//获取光标所在列用cursor.columnNumber();</span></span><br><span class="line"></span><br><span class="line">QTextBlock textBlock = QTextEdit::document()-&gt;findBlockByLineNumber(lineNumber);<span class="comment">//通过行号找到指定行 数据块</span></span><br><span class="line">QString selectLine = textBlock.text();<span class="comment">//将得到的数据存入一个字符串。</span></span><br></pre></td></tr></tbody></table></figure><h2 id="内容改变信号"><a href="#内容改变信号" class="headerlink" title="内容改变信号"></a>内容改变信号</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">textChanged()</span><br></pre></td></tr></tbody></table></figure><p>在<code>setText()</code>时也会触发，如果要屏蔽，在setText()前调用<code>QObject::blockSignals(true)</code>,setText()后调用<code>QObject::blockSignals(false)</code></p><h2 id="光标位置改变信号"><a href="#光标位置改变信号" class="headerlink" title="光标位置改变信号"></a>光标位置改变信号</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cursorPositionChanged()</span><br></pre></td></tr></tbody></table></figure><h2 id="设置光标行列"><a href="#设置光标行列" class="headerlink" title="设置光标行列"></a>设置光标行列</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setCursorPos</span><span class="params">(<span class="keyword">int</span> row,<span class="keyword">int</span> col)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">const</span> QTextBlock block = QTextEdit::document()-&gt;findBlockByLineNumber(row<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span>(block.isValid())</span><br><span class="line">    {</span><br><span class="line">        QTextCursor cursor = QTextEdit::textCursor();</span><br><span class="line">        cursor.setPosition(block.position()+col<span class="number">-1</span>);</span><br><span class="line">        setTextCursor(cursor);</span><br><span class="line">        ensureCursorVisible();</span><br><span class="line">    }</span><br><span class="line">    setFocus();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="光标在一行中的-字符-位置"><a href="#光标在一行中的-字符-位置" class="headerlink" title="光标在一行中的(字符?)位置"></a>光标在一行中的(字符?)位置</h2><p>这里的nCursor其实就是我们一个文本在一行中的位置</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">QTextCursor tc = myTextEdit-&gt;textCursor();</span><br><span class="line"><span class="keyword">int</span> nCurpos = tc.position() - tc.block().position();</span><br></pre></td></tr></tbody></table></figure><h2 id="光标移动"><a href="#光标移动" class="headerlink" title="光标移动"></a>光标移动</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">QTextCursor textCursor= ui.translationInput-&gt;textCursor(); <span class="comment">// 获取光标</span></span><br><span class="line"><span class="comment">/* 这里是针对光标的修改操作 */</span></span><br><span class="line">ui.translationInput-&gt;setTextCursor(textCursor); <span class="comment">// 修改光标后设置成编辑框光标</span></span><br></pre></td></tr></tbody></table></figure><h3 id="移动到行首"><a href="#移动到行首" class="headerlink" title="移动到行首"></a>移动到行首</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">QTextCursor textCursor= ui.translationInput-&gt;textCursor();</span><br><span class="line">textCursor.movePosition(QTextCursor::Left, QTextCursor::MoveAnchor, <span class="number">4</span>); <span class="comment">// 行首</span></span><br><span class="line">ui.translationInput-&gt;setTextCursor(textCursor);</span><br></pre></td></tr></tbody></table></figure><h3 id="移动到文末"><a href="#移动到文末" class="headerlink" title="移动到文末"></a>移动到文末</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">textCursor.movePosition(QTextCursor::Left, QTextCursor::MoveAnchor, <span class="number">4</span>); <span class="comment">// 全文尾</span></span><br></pre></td></tr></tbody></table></figure><h3 id="移动到指定字符"><a href="#移动到指定字符" class="headerlink" title="移动到指定字符"></a>移动到指定字符</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">textCursor.setPosition(<span class="number">20</span>);</span><br></pre></td></tr></tbody></table></figure><h3 id="右移一个单词"><a href="#右移一个单词" class="headerlink" title="右移一个单词"></a>右移一个单词</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">textCursor.movePosition(QTextCursor::NextWord, QTextCursor::KeepAnchor);</span><br></pre></td></tr></tbody></table></figure><h2 id="删除光标前一个字符"><a href="#删除光标前一个字符" class="headerlink" title="删除光标前一个字符"></a>删除光标前一个字符</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">QTextEdit editer; <span class="comment">// 这个是目标 Editor</span></span><br><span class="line">QTextCursor cursor = editer.textCursor(); <span class="comment">// 获取当前文本光标</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断当前是否选中了文本，如果选中了文本则取消选中的文本，再删除前一个字符</span></span><br><span class="line"><span class="keyword">if</span>(cursor.hasSelection())</span><br><span class="line">cursor.clearSelection();</span><br><span class="line"></span><br><span class="line">cursor.deletePreviousChar(); <span class="comment">//删除前一个字符</span></span><br><span class="line"></span><br><span class="line">editer.setTextCursor(cursor); <span class="comment">//设置当前的光标为更改后的光标</span></span><br></pre></td></tr></tbody></table></figure><h2 id="设置行高和行间距"><a href="#设置行高和行间距" class="headerlink" title="设置行高和行间距"></a>设置行高和行间距</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">QTextCursor textCursor = ui-&gt;textEdit-&gt;textCursor();</span><br><span class="line"></span><br><span class="line">QTextBlockFormat textBlockFormat;</span><br><span class="line">textBlockFormat.setLineHeight(<span class="number">40</span>, QTextBlockFormat::FixedHeight); <span class="comment">// 设置固定行高</span></span><br><span class="line">textBlockFormat.setBottomMargin(<span class="number">10</span>); <span class="comment">// 设置两行之间的空白高度</span></span><br><span class="line">textCursor.setBlockFormat(textBlockFormat);</span><br><span class="line"></span><br><span class="line">ui-&gt;textEdit-&gt;setTextCursor(textCursor);</span><br></pre></td></tr></tbody></table></figure><h2 id="文字进行加粗操作"><a href="#文字进行加粗操作" class="headerlink" title="文字进行加粗操作"></a>文字进行加粗操作</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">QTextCursor currentTextCursor = currentTextEdit-&gt;textCursor();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!currentTextCursor.hasSelection())</span><br><span class="line">{</span><br><span class="line">currentTextCursor.insertText(<span class="string">"**"</span> + tr(<span class="string">"Boldface"</span>) + <span class="string">"**"</span>);</span><br><span class="line">currentTextCursor.movePosition (QTextCursor::Left, QTextCursor::MoveAnchor, <span class="number">2</span>);</span><br><span class="line">currentTextCursor.movePosition (QTextCursor::WordLeft, QTextCursor::KeepAnchor, <span class="number">1</span>);</span><br><span class="line">currentTextEdit-&gt;setTextCursor (currentTextCursor);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line">currentTextCursor.insertText (<span class="string">"**"</span> +currentTextCursor.selectedText() + <span class="string">"**"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="高亮光标所在行"><a href="#高亮光标所在行" class="headerlink" title="高亮光标所在行"></a>高亮光标所在行</h2><p>使用到qtextedit中的cursorPostionChanged（），这个信号将会在光标移动时实时发送。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">QTextEdit *edit = (QTextEdit *)tab-&gt;widget(tab-&gt;currentIndex());</span><br><span class="line">connect(edit,SIGNAL(cursorPositionChanged()), <span class="keyword">this</span>,SLOT(onCurrentLineHighLight()));</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> MainWindow::onCurrentLineHighLight()</span><br><span class="line">{</span><br><span class="line">    QTextEdit *edit = (QTextEdit *)tab-&gt;currentWidget();</span><br><span class="line">    QList&lt;QTextEdit::ExtraSelection&gt; extraSelection;</span><br><span class="line">    QTextEdit::ExtraSelection selection;</span><br><span class="line">    QColor lineColor = QColor(Qt::gray).lighter(<span class="number">150</span>);</span><br><span class="line">    selection.format.setBackground(lineColor);</span><br><span class="line">    selection.format.setProperty(</span><br><span class="line">        QTextFormat::FullWidthSelection,<span class="literal">true</span>);</span><br><span class="line">    selection.cursor = edit-&gt;textCursor();</span><br><span class="line">    selection.cursor.clearSelection();</span><br><span class="line">    <span class="comment">//将刚设置的 selection追加到链表当中</span></span><br><span class="line">   extraSelection.append(selection);</span><br><span class="line">   edit-&gt;setExtraSelections(extraSelection);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="设置部分字体颜色"><a href="#设置部分字体颜色" class="headerlink" title="设置部分字体颜色"></a>设置部分字体颜色</h2><p>只能设置选中区域的字体颜色</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">QTextCursor textCursor = ui-&gt;plainTextEdit-&gt;textCursor();</span><br><span class="line"><span class="keyword">if</span> (textCursor.hasSelection())</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> start = textCursor.selectionStart();</span><br><span class="line"><span class="keyword">int</span> end = textCursor.selectionEnd();</span><br><span class="line">QTextCharFormat f;<span class="comment">// = textCursor.charFormat(); // 返回前一个字的格式（没必要）</span></span><br><span class="line">f.setForeground(QBrush(QColor(<span class="number">128</span>,<span class="number">128</span>,<span class="number">128</span>, <span class="number">20</span>)));</span><br><span class="line">textCursor.setCharFormat(f);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;QTextEditor 和 QPlainTextEditor 在一定程度上通用的&lt;/p&gt;
&lt;h2 id=&quot;获取文本&quot;&gt;&lt;a href=&quot;#获取文本&quot; class=&quot;headerlink&quot; title=&quot;获取文本&quot;&gt;&lt;/a&gt;获取文本&lt;/h2&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;toPlainText();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;设置文本&quot;&gt;&lt;a href=&quot;#设置文本&quot; class=&quot;headerlink&quot; title=&quot;设置文本&quot;&gt;&lt;/a&gt;设置文本&lt;/h2&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;setPlainText(QString);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C++" scheme="http://blog.iwxyi.com/tags/C/"/>
    
      <category term="Qt" scheme="http://blog.iwxyi.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>SSR+FCM</title>
    <link href="http://blog.iwxyi.com/2018/12/27/SSR-FCM/"/>
    <id>http://blog.iwxyi.com/2018/12/27/SSR-FCM/</id>
    <published>2018-12-27T06:03:00.000Z</published>
    <updated>2019-10-13T06:15:36.771Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SSR-FCM"><a href="#SSR-FCM" class="headerlink" title="SSR+FCM"></a>SSR+FCM</h1><h2 id="SSR-BBR"><a href="#SSR-BBR" class="headerlink" title="SSR+BBR"></a>SSR+BBR</h2><h3 id="BBR-加速"><a href="#BBR-加速" class="headerlink" title="BBR 加速"></a>BBR 加速</h3><p>因为安装BBR重启后SSR会失效，需要重新安装，所以先安装BBR</p><blockquote><p>实测 vultr 使用 BBR 加速的话，会经常出现连不上的情况</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum -y install wget</span><br><span class="line">wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh</span><br><span class="line">chmod +x bbr.sh</span><br><span class="line">./bbr.sh</span><br></pre></td></tr></tbody></table></figure><ul><li>（回车）</li><li>（任意按键重启）</li></ul><a id="more"></a><h3 id="SSR"><a href="#SSR" class="headerlink" title="SSR"></a>SSR</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssrmu.sh &amp;&amp; chmod +x ssrmu.sh &amp;&amp; bash ssrmu.sh</span><br></pre></td></tr></tbody></table></figure><ul><li>数字：1</li><li>IP　：（回车）</li><li>用户：（回车）</li><li>端口：（回车）</li><li>密码：（回车）</li><li>加密：10</li><li>协议：2</li><li>旧版：n</li><li>混淆：5</li><li>原版：n</li><li>设备：（回车）</li><li>限速：（回车）</li><li>总速：（回车）</li><li>流量：（回车）</li><li>禁端：（回车）</li><li>确认：y</li></ul><h3 id="搭建参数"><a href="#搭建参数" class="headerlink" title="搭建参数"></a>搭建参数</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">10</span><br><span class="line">2</span><br><span class="line">n</span><br><span class="line">5</span><br><span class="line">n</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="FCM-for-Mojo-WebQQ"><a href="#FCM-for-Mojo-WebQQ" class="headerlink" title="FCM-for-Mojo::WebQQ"></a>FCM-for-Mojo::WebQQ</h2><p>先进行一键安装，装好大体环境</p><p>然后再分布安装，去除bug</p><p>别忘了后面修复错误的命令</p><h3 id="一键安装"><a href="#一键安装" class="headerlink" title="一键安装"></a>一键安装</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install git -y</span><br><span class="line">git clone https://github.com/null-ecp/FFM-one-step.git &amp;&amp; source ~/FFM-one-step/GCM.sh</span><br></pre></td></tr></tbody></table></figure><ul><li>1</li><li>y</li><li>1</li><li>1</li></ul><h3 id="分步安装"><a href="#分步安装" class="headerlink" title="分步安装"></a>分步安装</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br><span class="line">yum install -y perl-Crypt-OpenSSL-RSA perl-Crypt-OpenSSL-Bignum</span><br><span class="line">cpanm Webqq::Encryption</span><br><span class="line">curl -sL https://rpm.nodesource.com/setup_9.x | bash -</span><br><span class="line">yum -y install nodejs</span><br><span class="line">git clone https://github.com/RikkaApps/FCM-for-Mojo-Server.git</span><br><span class="line">cd FCM-for-Mojo-Server</span><br><span class="line">cp config.example.js config.js</span><br><span class="line">npm install</span><br><span class="line">screen -S qq</span><br><span class="line">npm start</span><br></pre></td></tr></tbody></table></figure><h3 id="修复12月6日"><a href="#修复12月6日" class="headerlink" title="修复12月6日"></a>修复12月6日</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/sjdy521/Mojo-Webqq</span><br><span class="line">cd Mojo-Webqq</span><br><span class="line">perl Makefile.PL</span><br><span class="line">make install</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SSR-FCM&quot;&gt;&lt;a href=&quot;#SSR-FCM&quot; class=&quot;headerlink&quot; title=&quot;SSR+FCM&quot;&gt;&lt;/a&gt;SSR+FCM&lt;/h1&gt;&lt;h2 id=&quot;SSR-BBR&quot;&gt;&lt;a href=&quot;#SSR-BBR&quot; class=&quot;headerlink&quot; title=&quot;SSR+BBR&quot;&gt;&lt;/a&gt;SSR+BBR&lt;/h2&gt;&lt;h3 id=&quot;BBR-加速&quot;&gt;&lt;a href=&quot;#BBR-加速&quot; class=&quot;headerlink&quot; title=&quot;BBR 加速&quot;&gt;&lt;/a&gt;BBR 加速&lt;/h3&gt;&lt;p&gt;因为安装BBR重启后SSR会失效，需要重新安装，所以先安装BBR&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;实测 vultr 使用 BBR 加速的话，会经常出现连不上的情况&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yum -y install wget&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;chmod +x bbr.sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;./bbr.sh&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;（回车）&lt;/li&gt;
&lt;li&gt;（任意按键重启）&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="搭建" scheme="http://blog.iwxyi.com/categories/%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="服务器" scheme="http://blog.iwxyi.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Qt小技巧</title>
    <link href="http://blog.iwxyi.com/2018/12/24/Qt%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>http://blog.iwxyi.com/2018/12/24/Qt小技巧/</id>
    <published>2018-12-24T11:11:00.000Z</published>
    <updated>2019-10-13T11:14:42.766Z</updated>
    
    <content type="html"><![CDATA[<p><strong>鼠标点击 QListWidget 的 item</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">currentItem = <span class="keyword">this</span>-&gt;itemAt(mapFromGlobal(QCursor::pos())); <span class="comment">// 不管左键右键都能获取</span></span><br></pre></td></tr></tbody></table></figure><a id="more"></a><p><strong>判断点击区域是否在某个控件里面</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NameEdit-&gt;rect().contains(event-&gt;pos())</span><br></pre></td></tr></tbody></table></figure><p>QMap插入同样key，会覆盖原来的</p><p><strong>Lambda 临时函数</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connect(ui-&gt;listWidget,&amp;QListWidget::currentRowChanged,[=](<span class="keyword">int</span> curindex){ qDebug()&lt;&lt;curindex&lt;&lt;<span class="built_in">endl</span>; });</span><br></pre></td></tr></tbody></table></figure><p><strong>QLabel设置字体颜色</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">QLabel *label = <span class="keyword">new</span> QLabel(tr(<span class="string">"Hello Qt!"</span>));</span><br><span class="line">QPalette pe;</span><br><span class="line">pe.setColor(QPalette::WindowText,Qt::white); <span class="comment">// 这两行不能合并（构造函数能接受这样的参数）</span></span><br><span class="line">label-&gt;setPalette(pe);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setStyleSheet(<span class="string">"color:red;"</span>);</span><br></pre></td></tr></tbody></table></figure><p><strong>QSettings 无法保存</strong></p><p>出于效率的原因，setValue 不会立既写入（如注册表，INI, XML）, 要立既写入可以用<code>sync()</code>函数。</p><p><strong>判断按键修饰符</strong></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> isShortcut = ((e-&gt;modifiers() &amp; Qt::ControlModifier) &amp;&amp; e-&gt;key() == Qt::Key_E);</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> ctrlOrShift = e-&gt;modifiers() &amp; (Qt::ControlModifier | Qt::ShiftModifier);</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> hasModifier = (e-&gt;modifiers() != Qt::NoModifier) &amp;&amp; !ctrlOrShift;</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;鼠标点击 QListWidget 的 item&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;currentItem = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;-&amp;gt;itemAt(mapFromGlobal(QCursor::pos())); &lt;span class=&quot;comment&quot;&gt;// 不管左键右键都能获取&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="整理" scheme="http://blog.iwxyi.com/tags/%E6%95%B4%E7%90%86/"/>
    
      <category term="C++" scheme="http://blog.iwxyi.com/tags/C/"/>
    
      <category term="Qt" scheme="http://blog.iwxyi.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>Qt QCompleter用法</title>
    <link href="http://blog.iwxyi.com/2018/12/24/Qt-QCompleter%E7%94%A8%E6%B3%95/"/>
    <id>http://blog.iwxyi.com/2018/12/24/Qt-QCompleter用法/</id>
    <published>2018-12-24T09:33:00.000Z</published>
    <updated>2019-10-13T11:36:57.868Z</updated>
    
    <content type="html"><![CDATA[<h2 id="在光标后面弹出"><a href="#在光标后面弹出" class="headerlink" title="在光标后面弹出"></a>在光标后面弹出</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">QRect cr = cursorRect();</span><br><span class="line">cr.setWidth(c-&gt;popup()-&gt;sizeHintForColumn(<span class="number">0</span>)</span><br><span class="line">            + c-&gt;popup()-&gt;verticalScrollBar()-&gt;sizeHint().width());</span><br><span class="line">c-&gt;complete(cr);</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><h2 id="TAG"><a href="#TAG" class="headerlink" title="TAG"></a>TAG</h2><p>在自动补全的后面添加一个用来标志类别的小tag</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">QStandardItemModel *m = <span class="keyword">new</span> QStandardItemModel(words.count(), <span class="number">2</span>, completer); <span class="comment">// 设置为两列</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; words.count(); ++i) {</span><br><span class="line">    QModelIndex countryIdx = m-&gt;index(i, <span class="number">0</span>);</span><br><span class="line">    QModelIndex symbolIdx = m-&gt;index(i, <span class="number">1</span>);</span><br><span class="line">    QString country = words[i].mid(<span class="number">0</span>, words[i].length() - <span class="number">2</span>).trimmed();</span><br><span class="line">    QString symbol = words[i].right(<span class="number">2</span>);</span><br><span class="line">    m-&gt;setData(countryIdx, country);</span><br><span class="line">    m-&gt;setData(symbolIdx, symbol);</span><br><span class="line">}</span><br><span class="line">completer-&gt;setModel(m);</span><br></pre></td></tr></tbody></table></figure><h2 id="Model-示例"><a href="#Model-示例" class="headerlink" title="Model 示例"></a>Model 示例</h2><p>文件路径全部显示的model</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileSystemModel</span> :</span> <span class="keyword">public</span> QFileSystemModel</span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    FileSystemModel(QObject *parent = <span class="number">0</span>);</span><br><span class="line">    <span class="function">QVariant <span class="title">data</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;index, <span class="keyword">int</span> role = Qt::DisplayRole)</span> <span class="keyword">const</span> Q_DECL_OVERRIDE</span>;</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">FileSystemModel::FileSystemModel(QObject *parent)</span><br><span class="line">    : QFileSystemModel(parent)</span><br><span class="line">{</span><br><span class="line">}</span><br><span class="line">QVariant FileSystemModel::data(<span class="keyword">const</span> QModelIndex &amp;index, <span class="keyword">int</span> role) <span class="keyword">const</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span> (role == Qt::DisplayRole &amp;&amp; index.column() == <span class="number">0</span>) {</span><br><span class="line">        QString path  = QDir::toNativeSeparators(filePath(index));</span><br><span class="line">        <span class="keyword">if</span> (path.endsWith(QDir::separator()))</span><br><span class="line">            path.chop(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> path;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> QFileSystemModel::data(index, role);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="焦点设置"><a href="#焦点设置" class="headerlink" title="焦点设置"></a>焦点设置</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> TextEdit::focusInEvent(QFocusEvent *e)</span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span> (c) c-&gt;setWidget(<span class="keyword">this</span>);</span><br><span class="line">    QTextEdit::focusInEvent(e);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="选中事件"><a href="#选中事件" class="headerlink" title="选中事件"></a>选中事件</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> MainWindow::sloHighlight(<span class="keyword">const</span> QModelIndex &amp;index)</span><br><span class="line">{</span><br><span class="line">    QAbstractItemModel *completionModel = completer-&gt;completionModel();</span><br><span class="line">    QAbstractProxyModel *proxy = qobject_cast&lt;QAbstractProxyModel *&gt;(completionModel);</span><br><span class="line">    <span class="keyword">if</span> (!proxy)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    QModelIndex sourceIndex = proxy-&gt;mapToSource(index);</span><br><span class="line">    treeView-&gt;selectionModel()-&gt;select(sourceIndex, QItemSelectionModel::ClearAndSelect | QItemSelectionModel::Rows);</span><br><span class="line">    treeView-&gt;scrollTo(index);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;在光标后面弹出&quot;&gt;&lt;a href=&quot;#在光标后面弹出&quot; class=&quot;headerlink&quot; title=&quot;在光标后面弹出&quot;&gt;&lt;/a&gt;在光标后面弹出&lt;/h2&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;QRect cr = cursorRect();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cr.setWidth(c-&amp;gt;popup()-&amp;gt;sizeHintForColumn(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            + c-&amp;gt;popup()-&amp;gt;verticalScrollBar()-&amp;gt;sizeHint().width());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c-&amp;gt;complete(cr);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C++" scheme="http://blog.iwxyi.com/tags/C/"/>
    
      <category term="Qt" scheme="http://blog.iwxyi.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>解决Ubuntu安装包不存在问题</title>
    <link href="http://blog.iwxyi.com/2018/12/23/%E8%A7%A3%E5%86%B3Ubuntu%E5%AE%89%E8%A3%85vim%E7%9A%84Package-vim-has-no-installation-candidate%E9%97%AE%E9%A2%98/"/>
    <id>http://blog.iwxyi.com/2018/12/23/解决Ubuntu安装vim的Package-vim-has-no-installation-candidate问题/</id>
    <published>2018-12-23T05:56:00.000Z</published>
    <updated>2019-10-13T05:57:47.083Z</updated>
    
    <content type="html"><![CDATA[<h1 id="解决Ubuntu安装vim的Package-vim-has-no-installation-candidate问题"><a href="#解决Ubuntu安装vim的Package-vim-has-no-installation-candidate问题" class="headerlink" title="解决Ubuntu安装vim的Package vim has no installation candidate问题"></a>解决Ubuntu安装vim的Package vim has no installation candidate问题</h1><p>当输入<code>sudo apt-get install vim-gtk</code>时<br>出现了下面问题：</p><a id="more"></a><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">nigel@yq-ubuntu:~/worksp$ sudo apt-get install vim-gtk</span><br><span class="line">Reading package lists... Done</span><br><span class="line">Building dependency tree      </span><br><span class="line">Reading state information... Done</span><br><span class="line">Package vim-gtk is not available, but is referred to by another package.</span><br><span class="line">This may mean that the package is missing, has been obsoleted, or</span><br><span class="line">is only available from another source</span><br><span class="line">E: Package 'vim-gtk' has no installation candidate</span><br></pre></td></tr></tbody></table></figure><p>解决办法就是修改软件源设置</p><ol><li>备份源文件，cp -i /etc/apt/sources.list /etc/apt/sources.list_backup</li><li>打开sources.list，root@ubuntu:/etc/apt# gedit sources.list</li><li>在源文件中加入如下阿里巴巴的阿里云服务器的地址并保存。（当然也可以是其他公司的地址）</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">deb http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse</span><br></pre></td></tr></tbody></table></figure><ol start="4"><li>更新：apt-get update</li><li>更新后，再安装vim，sudo apt-get install vim</li></ol><p>这样问题就解决了。</p><hr><h2 id="163源"><a href="#163源" class="headerlink" title="163源"></a>163源</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">deb http://mirrors.163.com/ubuntu/ trusty main restricted universe multiverse</span><br><span class="line">deb http://mirrors.163.com/ubuntu/ trusty-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.163.com/ubuntu/ trusty-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.163.com/ubuntu/ trusty-proposed main restricted universe multiverse</span><br><span class="line">deb http://mirrors.163.com/ubuntu/ trusty-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.163.com/ubuntu/ trusty main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.163.com/ubuntu/ trusty-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.163.com/ubuntu/ trusty-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.163.com/ubuntu/ trusty-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.163.com/ubuntu/ trusty-backports main restricted universe multiverse</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;解决Ubuntu安装vim的Package-vim-has-no-installation-candidate问题&quot;&gt;&lt;a href=&quot;#解决Ubuntu安装vim的Package-vim-has-no-installation-candidate问题&quot; class=&quot;headerlink&quot; title=&quot;解决Ubuntu安装vim的Package vim has no installation candidate问题&quot;&gt;&lt;/a&gt;解决Ubuntu安装vim的Package vim has no installation candidate问题&lt;/h1&gt;&lt;p&gt;当输入&lt;code&gt;sudo apt-get install vim-gtk&lt;/code&gt;时&lt;br&gt;出现了下面问题：&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="Linux" scheme="http://blog.iwxyi.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>MySQL百万级以上数据常识</title>
    <link href="http://blog.iwxyi.com/2018/12/20/MySQL%E7%99%BE%E4%B8%87%E7%BA%A7%E4%BB%A5%E4%B8%8A%E6%95%B0%E6%8D%AE%E5%B8%B8%E8%AF%86/"/>
    <id>http://blog.iwxyi.com/2018/12/20/MySQL百万级以上数据常识/</id>
    <published>2018-12-20T05:33:00.000Z</published>
    <updated>2019-10-13T06:10:54.062Z</updated>
    
    <content type="html"><![CDATA[<p>最近的项目需要用到实现节点的管理规模达到百万规模，需要用数据库对中间数据以及最后的结果进行存储，存储规模可以达到千万级别。初步实现了10万节点数据的存储，但是访问速度实在太慢，查阅相关的资料，发现导致节点插入时间非常慢的原因：</p><a id="more"></a><ol><li>连接数据库的问题：建立连接和关闭连接的次数太多，导致IO访问次数太频繁。</li><li>应该使用批量插入和批量修改的方法，而不是有一条数据就进行插入，这样会导致访问数据库的实际特别的慢。</li><li>在建立库的时候要建立适当的索引：如主键、外键、唯一等，优化查询效率。</li></ol><p>​       具体的讨论见此处的链接：<a href="http://www.oschina.net/question/1859_62586?sort=default&amp;p=3#answers" target="_blank" rel="noopener">http://www.oschina.net/question/1859_62586?sort=default&amp;p=3#answers</a></p><p>​       该链接中的一些讨论可以提供思路~</p><hr><p>​       另外转载的内容如下：</p><p>最近一段时间参与的项目要操作百万级数据量的数据，普通SQL查询效率呈直线下降，而且如果where中的查询条件较多时，其查询速度简直无法容忍。之前数据量小的时候，查询语句的好坏不会对执行时间有什么明显的影响，所以忽略了许多细节性的问题。</p><p>经测试对一个包含400多万条记录的表执行一条件查询，其查询时间竟然高达40几秒，相信这么高的查询延时，任何用户都会抓狂。因此如何提高sql语句查询效率，显得十分重要。以下是结合网上流传比较广泛的几个查询语句优化方法：</p><h2 id="索引不会生效的情况"><a href="#索引不会生效的情况" class="headerlink" title="索引不会生效的情况"></a>索引不会生效的情况</h2><p><strong>首先，数据量大的时候，应尽量避免全表扫描，应考虑在 where 及 order by 涉及的列上建立索引，建索引可以大大加快数据的检索速度。 但是，有些情况索引是不会起效的：</strong></p><ol><li><p>应尽量避免在 where 子句中使用!=或&lt;&gt;操作符，否则将引擎放弃使用索引而进行全表扫描。</p></li><li><p>应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：<br>​     <code>select id from t where num is null</code><br>可以在num上设置默认值0，确保表中num列没有null值，然后这样查询：<br>​    <code>select id from t where num=0</code></p></li><li><p>尽量避免在 where 子句中使用 or 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，如：<br>​     <code>select id from t where num=10 or num=20</code><br>可以这样查询：<br>​     <code>select id from t where num=10 ​     union all ​     select id from t where num=20</code></p></li><li><p>下面的查询也将导致全表扫描：</p><p><code>select id from t where name like ‘%abc%’</code></p></li></ol><p>​    若要提高效率，可以考虑全文检索。</p><ol start="5"><li>in 和 not in 也要慎用，否则会导致全表扫描，如：<br>​     <code>select id from t where num in(1,2,3)</code><br>对于连续的数值，能用 between 就不要用 in 了：<br>​     `select id from t where num between 1 and 3</li><li>如果在 where 子句中使用参数，也会导致全表扫描。因为SQL只有在运行时才会解析局部变量，但优化程序不能将访问计划的选择推迟到运行时；它必须在编译时进行选择。然而，如果在编译时建立访问计划，变量的值还是未知的，因而无法作为索引选择的输入项。如下面语句将进行全表扫描：<br>​     <code>select id from t where num=@num</code><br>可以改为强制查询使用索引：<br>​     <code>select id from t with(index(索引名)) where num=@num</code></li><li>应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。如：<br>​     <code>select id from t where num/2=100</code><br>应改为:<br>​     <code>select id from t where num=100*2</code></li><li>应尽量避免在where子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：<br>​     <code>select id from t where substring(name,1,3)=’abc’–name</code>以abc开头的id<br>​     <code>select id from t where datediff(day,createdate,’2005-11-30′)=0–’2005-11-30′</code>生成的id<br>​     应改为:<br>​     <code>select id from t where name like ‘abc%’</code><br>​     <code>select id from t where createdate&gt;=’2005-11-30′ and createdate&lt;’2005-12-1′</code></li><li>不要在 where 子句中的“=”左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引。</li><li>在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用，并且应尽可能的让字段顺序与索引顺序相一致。</li><li>不要写一些没有意义的查询，如需要生成一个空表结构：<br>​     <code>select col1,col2 into #t from t where 1=0</code><br>这类代码不会返回任何结果集，但是会消耗系统资源的，应改成这样：<br>​    <code>create table #t(…)</code></li><li>很多时候用 exists 代替 in 是一个好的选择：<br>​     <code>select num from a where num in(select num from b)</code><br>用下面的语句替换：<br>​     <code>select num from a where exists(select 1 from b where num=a.num)</code></li></ol><h2 id="建索引需要注意的地方"><a href="#建索引需要注意的地方" class="headerlink" title="建索引需要注意的地方"></a>建索引需要注意的地方</h2><ol><li>并不是所有索引对查询都有效，SQL是根据表中数据来进行查询优化的，当索引列有大量数据重复时，SQL查询可能不会去利用索引，如一表中有字段 sex，male、female几乎各一半，那么即使在sex上建了索引也对查询效率起不了作用。</li><li>索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有必要。</li><li>应尽可能的避免更新 clustered 索引数据列，因为 clustered 索引数据列的顺序就是表记录的物理存储顺序，一旦该列值改变将导致整个表记录的顺序的调整，会耗费相当大的资源。若应用系统需要频繁更新 clustered 索引数据列，那么需要考虑是否应将该索引建为 clustered 索引。</li></ol><h2 id="其他需要注意的地方"><a href="#其他需要注意的地方" class="headerlink" title="其他需要注意的地方"></a>其他需要注意的地方</h2><ol><li>尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。这是因为引擎在处理查询和连接时会逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了。</li><li>任何地方都不要使用 select * from t ，用具体的字段列表代替“*”，不要返回用不到的任何字段。</li><li>尽量使用表变量来代替临时表。如果表变量包含大量数据，请注意索引非常有限（只有主键索引）。</li><li>避免频繁创建和删除临时表，以减少系统表资源的消耗。</li><li>临时表并不是不可使用，适当地使用它们可以使某些例程更有效，例如，当需要重复引用大型表或常用表中的某个数据集时。但是，对于一次性事件，最好使用导出表。</li><li>在新建临时表时，如果一次性插入数据量很大，那么可以使用 select into 代替 create table，避免造成大量 log ，以提高速度；如果数据量不大，为了缓和系统表的资源，应先create table，然后insert。</li><li>如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先 truncate table ，然后 drop table ，这样可以避免系统表的较长时间锁定。</li><li>尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过1万行，那么就应该考虑改写。</li><li>使用基于游标的方法或临时表方法之前，应先寻找基于集的解决方案来解决问题，基于集的方法通常更有效。</li><li>与临时表一样，游标并不是不可使用。对小型数据集使用 FAST_FORWARD 游标通常要优于其他逐行处理方法，尤其是在必须引用几个表才能获得所需的数据时。在结果集中包括“合计”的例程通常要比使用游标执行的速度快。如果开发时间允许，基于游标的方法和基于集的方法都可以尝试一下，看哪一种方法的效果更好。</li><li>在所有的存储过程和触发器的开始处设置 SET NOCOUNT ON ，在结束时设置 SET NOCOUNT OFF 。无需在执行存储过程和触发器的每个语句后向客户端发送 DONE_IN_PROC 消息。</li><li>尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。</li><li>尽量避免大事务操作，提高系统并发能力。</li></ol><hr><blockquote><p>参考：<a href="https://blog.csdn.net/lynnucas/article/details/50265325" target="_blank" rel="noopener">https://blog.csdn.net/lynnucas/article/details/50265325</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近的项目需要用到实现节点的管理规模达到百万规模，需要用数据库对中间数据以及最后的结果进行存储，存储规模可以达到千万级别。初步实现了10万节点数据的存储，但是访问速度实在太慢，查阅相关的资料，发现导致节点插入时间非常慢的原因：&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="MySQL" scheme="http://blog.iwxyi.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>C语言CRC校验算法</title>
    <link href="http://blog.iwxyi.com/2018/12/20/C%E8%AF%AD%E8%A8%80CRC%E6%A0%A1%E9%AA%8C%E7%AE%97%E6%B3%95/"/>
    <id>http://blog.iwxyi.com/2018/12/20/C语言CRC校验算法/</id>
    <published>2018-12-20T00:20:00.000Z</published>
    <updated>2019-10-13T00:22:28.838Z</updated>
    
    <content type="html"><![CDATA[<p><code>CRC32</code> C语言版</p><a id="more"></a><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> crc32tab[] = {</span><br><span class="line"> <span class="number">0x00000000</span>L, <span class="number">0x77073096</span>L, <span class="number">0xee0e612c</span>L, <span class="number">0x990951ba</span>L,</span><br><span class="line"> <span class="number">0x076dc419</span>L, <span class="number">0x706af48f</span>L, <span class="number">0xe963a535</span>L, <span class="number">0x9e6495a3</span>L,</span><br><span class="line"> <span class="number">0x0edb8832</span>L, <span class="number">0x79dcb8a4</span>L, <span class="number">0xe0d5e91e</span>L, <span class="number">0x97d2d988</span>L,</span><br><span class="line"> <span class="number">0x09b64c2b</span>L, <span class="number">0x7eb17cbd</span>L, <span class="number">0xe7b82d07</span>L, <span class="number">0x90bf1d91</span>L,</span><br><span class="line"> <span class="number">0x1db71064</span>L, <span class="number">0x6ab020f2</span>L, <span class="number">0xf3b97148</span>L, <span class="number">0x84be41de</span>L,</span><br><span class="line"> <span class="number">0x1adad47d</span>L, <span class="number">0x6ddde4eb</span>L, <span class="number">0xf4d4b551</span>L, <span class="number">0x83d385c7</span>L,</span><br><span class="line"> <span class="number">0x136c9856</span>L, <span class="number">0x646ba8c0</span>L, <span class="number">0xfd62f97a</span>L, <span class="number">0x8a65c9ec</span>L,</span><br><span class="line"> <span class="number">0x14015c4f</span>L, <span class="number">0x63066cd9</span>L, <span class="number">0xfa0f3d63</span>L, <span class="number">0x8d080df5</span>L,</span><br><span class="line"> <span class="number">0x3b6e20c8</span>L, <span class="number">0x4c69105e</span>L, <span class="number">0xd56041e4</span>L, <span class="number">0xa2677172</span>L,</span><br><span class="line"> <span class="number">0x3c03e4d1</span>L, <span class="number">0x4b04d447</span>L, <span class="number">0xd20d85fd</span>L, <span class="number">0xa50ab56b</span>L,</span><br><span class="line"> <span class="number">0x35b5a8fa</span>L, <span class="number">0x42b2986c</span>L, <span class="number">0xdbbbc9d6</span>L, <span class="number">0xacbcf940</span>L,</span><br><span class="line"> <span class="number">0x32d86ce3</span>L, <span class="number">0x45df5c75</span>L, <span class="number">0xdcd60dcf</span>L, <span class="number">0xabd13d59</span>L,</span><br><span class="line"> <span class="number">0x26d930ac</span>L, <span class="number">0x51de003a</span>L, <span class="number">0xc8d75180</span>L, <span class="number">0xbfd06116</span>L,</span><br><span class="line"> <span class="number">0x21b4f4b5</span>L, <span class="number">0x56b3c423</span>L, <span class="number">0xcfba9599</span>L, <span class="number">0xb8bda50f</span>L,</span><br><span class="line"> <span class="number">0x2802b89e</span>L, <span class="number">0x5f058808</span>L, <span class="number">0xc60cd9b2</span>L, <span class="number">0xb10be924</span>L,</span><br><span class="line"> <span class="number">0x2f6f7c87</span>L, <span class="number">0x58684c11</span>L, <span class="number">0xc1611dab</span>L, <span class="number">0xb6662d3d</span>L,</span><br><span class="line"> <span class="number">0x76dc4190</span>L, <span class="number">0x01db7106</span>L, <span class="number">0x98d220bc</span>L, <span class="number">0xefd5102a</span>L,</span><br><span class="line"> <span class="number">0x71b18589</span>L, <span class="number">0x06b6b51f</span>L, <span class="number">0x9fbfe4a5</span>L, <span class="number">0xe8b8d433</span>L,</span><br><span class="line"> <span class="number">0x7807c9a2</span>L, <span class="number">0x0f00f934</span>L, <span class="number">0x9609a88e</span>L, <span class="number">0xe10e9818</span>L,</span><br><span class="line"> <span class="number">0x7f6a0dbb</span>L, <span class="number">0x086d3d2d</span>L, <span class="number">0x91646c97</span>L, <span class="number">0xe6635c01</span>L,</span><br><span class="line"> <span class="number">0x6b6b51f4</span>L, <span class="number">0x1c6c6162</span>L, <span class="number">0x856530d8</span>L, <span class="number">0xf262004e</span>L,</span><br><span class="line"> <span class="number">0x6c0695ed</span>L, <span class="number">0x1b01a57b</span>L, <span class="number">0x8208f4c1</span>L, <span class="number">0xf50fc457</span>L,</span><br><span class="line"> <span class="number">0x65b0d9c6</span>L, <span class="number">0x12b7e950</span>L, <span class="number">0x8bbeb8ea</span>L, <span class="number">0xfcb9887c</span>L,</span><br><span class="line"> <span class="number">0x62dd1ddf</span>L, <span class="number">0x15da2d49</span>L, <span class="number">0x8cd37cf3</span>L, <span class="number">0xfbd44c65</span>L,</span><br><span class="line"> <span class="number">0x4db26158</span>L, <span class="number">0x3ab551ce</span>L, <span class="number">0xa3bc0074</span>L, <span class="number">0xd4bb30e2</span>L,</span><br><span class="line"> <span class="number">0x4adfa541</span>L, <span class="number">0x3dd895d7</span>L, <span class="number">0xa4d1c46d</span>L, <span class="number">0xd3d6f4fb</span>L,</span><br><span class="line"> <span class="number">0x4369e96a</span>L, <span class="number">0x346ed9fc</span>L, <span class="number">0xad678846</span>L, <span class="number">0xda60b8d0</span>L,</span><br><span class="line"> <span class="number">0x44042d73</span>L, <span class="number">0x33031de5</span>L, <span class="number">0xaa0a4c5f</span>L, <span class="number">0xdd0d7cc9</span>L,</span><br><span class="line"> <span class="number">0x5005713c</span>L, <span class="number">0x270241aa</span>L, <span class="number">0xbe0b1010</span>L, <span class="number">0xc90c2086</span>L,</span><br><span class="line"> <span class="number">0x5768b525</span>L, <span class="number">0x206f85b3</span>L, <span class="number">0xb966d409</span>L, <span class="number">0xce61e49f</span>L,</span><br><span class="line"> <span class="number">0x5edef90e</span>L, <span class="number">0x29d9c998</span>L, <span class="number">0xb0d09822</span>L, <span class="number">0xc7d7a8b4</span>L,</span><br><span class="line"> <span class="number">0x59b33d17</span>L, <span class="number">0x2eb40d81</span>L, <span class="number">0xb7bd5c3b</span>L, <span class="number">0xc0ba6cad</span>L,</span><br><span class="line"> <span class="number">0xedb88320</span>L, <span class="number">0x9abfb3b6</span>L, <span class="number">0x03b6e20c</span>L, <span class="number">0x74b1d29a</span>L,</span><br><span class="line"> <span class="number">0xead54739</span>L, <span class="number">0x9dd277af</span>L, <span class="number">0x04db2615</span>L, <span class="number">0x73dc1683</span>L,</span><br><span class="line"> <span class="number">0xe3630b12</span>L, <span class="number">0x94643b84</span>L, <span class="number">0x0d6d6a3e</span>L, <span class="number">0x7a6a5aa8</span>L,</span><br><span class="line"> <span class="number">0xe40ecf0b</span>L, <span class="number">0x9309ff9d</span>L, <span class="number">0x0a00ae27</span>L, <span class="number">0x7d079eb1</span>L,</span><br><span class="line"> <span class="number">0xf00f9344</span>L, <span class="number">0x8708a3d2</span>L, <span class="number">0x1e01f268</span>L, <span class="number">0x6906c2fe</span>L,</span><br><span class="line"> <span class="number">0xf762575d</span>L, <span class="number">0x806567cb</span>L, <span class="number">0x196c3671</span>L, <span class="number">0x6e6b06e7</span>L,</span><br><span class="line"> <span class="number">0xfed41b76</span>L, <span class="number">0x89d32be0</span>L, <span class="number">0x10da7a5a</span>L, <span class="number">0x67dd4acc</span>L,</span><br><span class="line"> <span class="number">0xf9b9df6f</span>L, <span class="number">0x8ebeeff9</span>L, <span class="number">0x17b7be43</span>L, <span class="number">0x60b08ed5</span>L,</span><br><span class="line"> <span class="number">0xd6d6a3e8</span>L, <span class="number">0xa1d1937e</span>L, <span class="number">0x38d8c2c4</span>L, <span class="number">0x4fdff252</span>L,</span><br><span class="line"> <span class="number">0xd1bb67f1</span>L, <span class="number">0xa6bc5767</span>L, <span class="number">0x3fb506dd</span>L, <span class="number">0x48b2364b</span>L,</span><br><span class="line"> <span class="number">0xd80d2bda</span>L, <span class="number">0xaf0a1b4c</span>L, <span class="number">0x36034af6</span>L, <span class="number">0x41047a60</span>L,</span><br><span class="line"> <span class="number">0xdf60efc3</span>L, <span class="number">0xa867df55</span>L, <span class="number">0x316e8eef</span>L, <span class="number">0x4669be79</span>L,</span><br><span class="line"> <span class="number">0xcb61b38c</span>L, <span class="number">0xbc66831a</span>L, <span class="number">0x256fd2a0</span>L, <span class="number">0x5268e236</span>L,</span><br><span class="line"> <span class="number">0xcc0c7795</span>L, <span class="number">0xbb0b4703</span>L, <span class="number">0x220216b9</span>L, <span class="number">0x5505262f</span>L,</span><br><span class="line"> <span class="number">0xc5ba3bbe</span>L, <span class="number">0xb2bd0b28</span>L, <span class="number">0x2bb45a92</span>L, <span class="number">0x5cb36a04</span>L,</span><br><span class="line"> <span class="number">0xc2d7ffa7</span>L, <span class="number">0xb5d0cf31</span>L, <span class="number">0x2cd99e8b</span>L, <span class="number">0x5bdeae1d</span>L,</span><br><span class="line"> <span class="number">0x9b64c2b0</span>L, <span class="number">0xec63f226</span>L, <span class="number">0x756aa39c</span>L, <span class="number">0x026d930a</span>L,</span><br><span class="line"> <span class="number">0x9c0906a9</span>L, <span class="number">0xeb0e363f</span>L, <span class="number">0x72076785</span>L, <span class="number">0x05005713</span>L,</span><br><span class="line"> <span class="number">0x95bf4a82</span>L, <span class="number">0xe2b87a14</span>L, <span class="number">0x7bb12bae</span>L, <span class="number">0x0cb61b38</span>L,</span><br><span class="line"> <span class="number">0x92d28e9b</span>L, <span class="number">0xe5d5be0d</span>L, <span class="number">0x7cdcefb7</span>L, <span class="number">0x0bdbdf21</span>L,</span><br><span class="line"> <span class="number">0x86d3d2d4</span>L, <span class="number">0xf1d4e242</span>L, <span class="number">0x68ddb3f8</span>L, <span class="number">0x1fda836e</span>L,</span><br><span class="line"> <span class="number">0x81be16cd</span>L, <span class="number">0xf6b9265b</span>L, <span class="number">0x6fb077e1</span>L, <span class="number">0x18b74777</span>L,</span><br><span class="line"> <span class="number">0x88085ae6</span>L, <span class="number">0xff0f6a70</span>L, <span class="number">0x66063bca</span>L, <span class="number">0x11010b5c</span>L,</span><br><span class="line"> <span class="number">0x8f659eff</span>L, <span class="number">0xf862ae69</span>L, <span class="number">0x616bffd3</span>L, <span class="number">0x166ccf45</span>L,</span><br><span class="line"> <span class="number">0xa00ae278</span>L, <span class="number">0xd70dd2ee</span>L, <span class="number">0x4e048354</span>L, <span class="number">0x3903b3c2</span>L,</span><br><span class="line"> <span class="number">0xa7672661</span>L, <span class="number">0xd06016f7</span>L, <span class="number">0x4969474d</span>L, <span class="number">0x3e6e77db</span>L,</span><br><span class="line"> <span class="number">0xaed16a4a</span>L, <span class="number">0xd9d65adc</span>L, <span class="number">0x40df0b66</span>L, <span class="number">0x37d83bf0</span>L,</span><br><span class="line"> <span class="number">0xa9bcae53</span>L, <span class="number">0xdebb9ec5</span>L, <span class="number">0x47b2cf7f</span>L, <span class="number">0x30b5ffe9</span>L,</span><br><span class="line"> <span class="number">0xbdbdf21c</span>L, <span class="number">0xcabac28a</span>L, <span class="number">0x53b39330</span>L, <span class="number">0x24b4a3a6</span>L,</span><br><span class="line"> <span class="number">0xbad03605</span>L, <span class="number">0xcdd70693</span>L, <span class="number">0x54de5729</span>L, <span class="number">0x23d967bf</span>L,</span><br><span class="line"> <span class="number">0xb3667a2e</span>L, <span class="number">0xc4614ab8</span>L, <span class="number">0x5d681b02</span>L, <span class="number">0x2a6f2b94</span>L,</span><br><span class="line"> <span class="number">0xb40bbe37</span>L, <span class="number">0xc30c8ea1</span>L, <span class="number">0x5a05df1b</span>L, <span class="number">0x2d02ef8d</span>L</span><br><span class="line">};</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">crc32</span><span class="params">( <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> *buf, <span class="keyword">unsigned</span> <span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">     <span class="keyword">unsigned</span> <span class="keyword">int</span> i, crc;</span><br><span class="line">     crc = <span class="number">0xFFFFFFFF</span>;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">     <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">      crc = crc32tab[(crc ^ buf[i]) &amp; <span class="number">0xff</span>] ^ (crc &gt;&gt; <span class="number">8</span>);</span><br><span class="line"> </span><br><span class="line">     <span class="keyword">return</span> crc^<span class="number">0xFFFFFFFF</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><blockquote><p>参考：<a href="https://blog.csdn.net/gongmin856/article/details/77101397" target="_blank" rel="noopener">https://blog.csdn.net/gongmin856/article/details/77101397</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;CRC32&lt;/code&gt; C语言版&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C" scheme="http://blog.iwxyi.com/tags/C/"/>
    
      <category term="密码学" scheme="http://blog.iwxyi.com/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>Android漂亮的对话框sweet-alert</title>
    <link href="http://blog.iwxyi.com/2018/12/19/Android%E6%BC%82%E4%BA%AE%E7%9A%84%E5%AF%B9%E8%AF%9D%E6%A1%86sweet-alert/"/>
    <id>http://blog.iwxyi.com/2018/12/19/Android漂亮的对话框sweet-alert/</id>
    <published>2018-12-19T03:17:00.000Z</published>
    <updated>2019-10-13T03:18:33.398Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>首先在app的build.gradle中添加依赖<br><code>compile 'com.github.f0ris.sweetalert:library:1.5.1'</code></p><a id="more"></a></li><li><p>这个时候同步一下项目会报一个错误，解决办法</p><ol><li>在AndroidManifest.xml中manifest根标签添加<br><code>xmlns:tools="http://schemas.android.com/tools"</code></li><li>在application标签下添加<br><code>tools:replace="android:icon,android:theme,android:allowBackup"</code></li></ol></li><li><p>使用代码</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SweetAlertDialog pDialog = <span class="keyword">new</span> SweetAlertDialog(<span class="keyword">this</span>, SweetAlertDialog.PROGRESS_TYPE);</span><br><span class="line">pDialog.getProgressHelper().setBarColor(Color.parseColor(<span class="string">"#A5DC86"</span>));</span><br><span class="line">pDialog.setTitleText(<span class="string">"Loading"</span>);</span><br><span class="line">pDialog.setCancelable(<span class="keyword">false</span>);</span><br><span class="line">pDialog.show();</span><br></pre></td></tr></tbody></table></figure></li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//你可以通过SweetAlertDialog.getProgressHelper()调用materialish-progress中下面这些方法，来动态改变进度条的样式</span></span><br><span class="line"> </span><br><span class="line">resetCount()</span><br><span class="line">isSpinning()</span><br><span class="line">spin()</span><br><span class="line">stopSpinning()</span><br><span class="line">getProgress()</span><br><span class="line">setProgress(<span class="keyword">float</span> progress)</span><br><span class="line">setInstantProgress(<span class="keyword">float</span> progress)</span><br><span class="line">getCircleRadius()</span><br><span class="line">setCircleRadius(<span class="keyword">int</span> circleRadius)</span><br><span class="line">getBarWidth()</span><br><span class="line">setBarWidth(<span class="keyword">int</span> barWidth)</span><br><span class="line">getBarColor()</span><br><span class="line">setBarColor(<span class="keyword">int</span> barColor)</span><br><span class="line">getRimWidth()</span><br><span class="line">setRimWidth(<span class="keyword">int</span> rimWidth)</span><br><span class="line">getRimColor()</span><br><span class="line">setRimColor(<span class="keyword">int</span> rimColor)</span><br><span class="line">getSpinSpeed()</span><br><span class="line">setSpinSpeed(<span class="keyword">float</span> spinSpeed)</span><br><span class="line"> </span><br><span class="line"><span class="comment">//只显示标题：</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">new</span> SweetAlertDialog(<span class="keyword">this</span>)</span><br><span class="line">    .setTitleText(<span class="string">"Here's a message!"</span>)</span><br><span class="line">    .show();</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示标题和内容：</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">new</span> SweetAlertDialog(<span class="keyword">this</span>)</span><br><span class="line">    .setTitleText(<span class="string">"Here's a message!"</span>)</span><br><span class="line">    .setContentText(<span class="string">"It's pretty, isn't it?"</span>)</span><br><span class="line">    .show();</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示异常样式：</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">new</span> SweetAlertDialog(<span class="keyword">this</span>, SweetAlertDialog.ERROR_TYPE)</span><br><span class="line">    .setTitleText(<span class="string">"Oops..."</span>)</span><br><span class="line">    .setContentText(<span class="string">"Something went wrong!"</span>)</span><br><span class="line">    .show();</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示警告样式：</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">new</span> SweetAlertDialog(<span class="keyword">this</span>, SweetAlertDialog.WARNING_TYPE)</span><br><span class="line">    .setTitleText(<span class="string">"Are you sure?"</span>)</span><br><span class="line">    .setContentText(<span class="string">"Won't be able to recover this file!"</span>)</span><br><span class="line">    .setConfirmText(<span class="string">"Yes,delete it!"</span>)</span><br><span class="line">    .show();</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示成功完成样式：</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">new</span> SweetAlertDialog(<span class="keyword">this</span>, SweetAlertDialog.SUCCESS_TYPE)</span><br><span class="line">    .setTitleText(<span class="string">"Good job!"</span>)</span><br><span class="line">    .setContentText(<span class="string">"You clicked the button!"</span>)</span><br><span class="line">    .show();</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义头部图像：</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">new</span> SweetAlertDialog(<span class="keyword">this</span>, SweetAlertDialog.CUSTOM_IMAGE_TYPE)</span><br><span class="line">    .setTitleText(<span class="string">"Sweet!"</span>)</span><br><span class="line">    .setContentText(<span class="string">"Here's a custom image."</span>)</span><br><span class="line">    .setCustomImage(R.drawable.custom_img)</span><br><span class="line">    .show();</span><br><span class="line"></span><br><span class="line"><span class="comment">//确认事件绑定：</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">new</span> SweetAlertDialog(<span class="keyword">this</span>, SweetAlertDialog.WARNING_TYPE)</span><br><span class="line">    .setTitleText(<span class="string">"Are you sure?"</span>)</span><br><span class="line">    .setContentText(<span class="string">"Won't be able to recover this file!"</span>)</span><br><span class="line">    .setConfirmText(<span class="string">"Yes,delete it!"</span>)</span><br><span class="line">    .setConfirmClickListener(<span class="keyword">new</span> SweetAlertDialog.OnSweetClickListener() {</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(SweetAlertDialog sDialog)</span> </span>{</span><br><span class="line">            sDialog.dismissWithAnimation();</span><br><span class="line">        }</span><br><span class="line">    })</span><br><span class="line">    .show();</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示取消按钮及事件绑定：</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">new</span> SweetAlertDialog(<span class="keyword">this</span>, SweetAlertDialog.WARNING_TYPE)</span><br><span class="line">    .setTitleText(<span class="string">"Are you sure?"</span>)</span><br><span class="line">    .setContentText(<span class="string">"Won't be able to recover this file!"</span>)</span><br><span class="line">    .setCancelText(<span class="string">"No,cancel plx!"</span>)</span><br><span class="line">    .setConfirmText(<span class="string">"Yes,delete it!"</span>)</span><br><span class="line">    .showCancelButton(<span class="keyword">true</span>)</span><br><span class="line">    .setCancelClickListener(<span class="keyword">new</span> SweetAlertDialog.OnSweetClickListener() {</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(SweetAlertDialog sDialog)</span> </span>{</span><br><span class="line">            sDialog.cancel();</span><br><span class="line">        }</span><br><span class="line">    })</span><br><span class="line">    .show();</span><br><span class="line"></span><br><span class="line"><span class="comment">//确认后切换对话框样式：</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">new</span> SweetAlertDialog(<span class="keyword">this</span>, SweetAlertDialog.WARNING_TYPE)</span><br><span class="line">    .setTitleText(<span class="string">"Are you sure?"</span>)</span><br><span class="line">    .setContentText(<span class="string">"Won't be able to recover this file!"</span>)</span><br><span class="line">    .setConfirmText(<span class="string">"Yes,delete it!"</span>)</span><br><span class="line">    .setConfirmClickListener(<span class="keyword">new</span> SweetAlertDialog.OnSweetClickListener() {</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(SweetAlertDialog sDialog)</span> </span>{</span><br><span class="line">            sDialog</span><br><span class="line">                .setTitleText(<span class="string">"Deleted!"</span>)</span><br><span class="line">                .setContentText(<span class="string">"Your imaginary file has been deleted!"</span>)</span><br><span class="line">                .setConfirmText(<span class="string">"OK"</span>)</span><br><span class="line">                .setConfirmClickListener(<span class="keyword">null</span>)</span><br><span class="line">                .changeAlertType(SweetAlertDialog.SUCCESS_TYPE);</span><br><span class="line">        }</span><br><span class="line">    })</span><br><span class="line">    .show();</span><br></pre></td></tr></tbody></table></figure><hr><blockquote><p>参考：<a href="https://blog.csdn.net/taa1007/article/details/79551928" target="_blank" rel="noopener">https://blog.csdn.net/taa1007/article/details/79551928</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;首先在app的build.gradle中添加依赖&lt;br&gt;&lt;code&gt;compile &#39;com.github.f0ris.sweetalert:library:1.5.1&#39;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="Android" scheme="http://blog.iwxyi.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android-学习笔记</title>
    <link href="http://blog.iwxyi.com/2018/12/19/Android-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://blog.iwxyi.com/2018/12/19/Android-学习笔记/</id>
    <published>2018-12-19T02:29:00.000Z</published>
    <updated>2019-10-13T02:34:09.949Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><h3 id="adb-命令"><a href="#adb-命令" class="headerlink" title="adb 命令"></a>adb 命令</h3><ul><li>adb kill-server 杀死模拟器</li><li>adb start-server 启动模拟器</li><li>cd desktop 进入桌面文件夹</li><li>adb install path/x.apk 安装应用</li><li>adb uninstall com.xxx 卸载应用</li><li>adb shell   进入linux指令（ctrl+C退出）</li><li># ls 列出目录下所有文件（夹）清单</li><li>adb pull a.txt 从手机中导出文件</li><li>adb push a.txt /mnt/sdcard 把一个文件导入到手机</li><li>monkey 1000 随机点模拟器1000次（冒烟测试（压力测试））<a id="more"></a></li></ul><h2 id="简易拨号应用"><a href="#简易拨号应用" class="headerlink" title="简易拨号应用"></a>简易拨号应用</h2><h3 id="设置按钮点击事件的四种方式"><a href="#设置按钮点击事件的四种方式" class="headerlink" title="设置按钮点击事件的四种方式"></a>设置按钮点击事件的四种方式</h3><h4 id="1、内部类"><a href="#1、内部类" class="headerlink" title="1、内部类"></a>1、内部类</h4><p>使用 onClickListener() 类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">btn = (Button) findViewById(R.id.button1); <span class="comment">// 找到按钮</span></span><br><span class="line">btn.setOnClickListener(<span class="keyword">new</span> MyClickListener()); <span class="comment">// 设置按钮点击事件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 MainActivity 里面再定义一个类去实现 按钮需要的接口类型</span></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClickListener</span> <span class="keyword">implements</span> <span class="title">OnClickListener</span></span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>{ <span class="comment">// 当按钮被单击的时候调用</span></span><br><span class="line">      System.out.println(<span class="string">"按钮被点击了"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="2、匿名内部类"><a href="#2、匿名内部类" class="headerlink" title="2、匿名内部类"></a>2、<strong>匿名内部类</strong></h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">btn.setOnClickListener(<span class="keyword">new</span> OnClickListener(){</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span></span>{</span><br><span class="line">      <span class="comment">// code process</span></span><br><span class="line">    }</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><h4 id="3、setOnClickListener-this"><a href="#3、setOnClickListener-this" class="headerlink" title="3、setOnClickListener(this)"></a>3、setOnClickListener(<strong>this</strong>)</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">onClickListener</span></span>{</span><br><span class="line">  <span class="comment">// 注意:接口所属的包名有多个，不能选错：onClickListener - android.view.View</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">      btn.setOnClickListener(<span class="keyword">this</span>); <span class="comment">// 适用于多个按钮使用同一个事件的情况</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span></span>{</span><br><span class="line">        <span class="keyword">switch</span> (v.getID()){ <span class="comment">// 可根据参数来判断按钮</span></span><br><span class="line">          <span class="keyword">case</span> R.id.btn1 :</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> R.id.btn2 :</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="4、布局中的-onClick"><a href="#4、布局中的-onClick" class="headerlink" title="4、布局中的 onClick"></a>4、布局中的 onClick</h4><p>在 AndroidManiFest 中设置 attribute（属性）</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;Button</span><br><span class="line"><span class="comment">//……</span></span><br><span class="line">android:onClick=<span class="string">"myClick"</span> /&gt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myClick</span><span class="params">(View v)</span></span>{ <span class="comment">// 方法名必须和 attribute 的 onClick 属性一致</span></span><br><span class="line">  <span class="comment">// Kabloey</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="获取-EdiText-文本内容"><a href="#获取-EdiText-文本内容" class="headerlink" title="获取 EdiText 文本内容"></a>获取 EdiText 文本内容</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ed = (EditText) findViewById(R.id.editText1);</span><br><span class="line">String str = ed.getText().toString().trim(); <span class="comment">// trim()去空格</span></span><br><span class="line"><span class="keyword">if</span> (str.equals(<span class="string">""</span>)){ <span class="comment">// 如果文本为空</span></span><br><span class="line">Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"文本不能为空"</span>, <span class="number">1</span>).show(); <span class="comment">// 弹出吐司</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>判断文本是否为空的API：<code>TextUtils.isEmpty(str)</code></p><h3 id="吐司-Toast"><a href="#吐司-Toast" class="headerlink" title="吐司 Toast"></a>吐司 Toast</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Toast.makeText(context<span class="comment">/*上下文，可用 this,指当前的activity,即context*/</span>,</span><br><span class="line">               text, duration).show();</span><br></pre></td></tr></tbody></table></figure><p>注意：如果是在自定义的类例如 MyClickListener 中，context 不能是 <code>this</code><br>context 可以改成：<code>MainActivity.this</code><br>duration 弹出时长，参数有：</p><ul><li>Toast.LENGTH_LONG    值为1<ul><li>Toast.LENGTH_SHORT值为0</li></ul></li></ul><p>最后别忘了弹出吐司： <code>.show()</code></p><h3 id="意图-Intent"><a href="#意图-Intent" class="headerlink" title="意图 Intent"></a>意图 Intent</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent(); <span class="comment">// 创建一个意图对象</span></span><br><span class="line">intent.setAction(Intent.ACTION_CALL); <span class="comment">// 设置动作：打电话</span></span><br><span class="line">intent.setData(Uri.parse(<span class="string">"tel:"</span> + num)); <span class="comment">// 设置数据：tel:119</span></span><br><span class="line">startActivity(intent); <span class="comment">// 开启意图：调用电话进行拨号（注意：权限 android.permission.CALL_PHONE）</span></span><br></pre></td></tr></tbody></table></figure><h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a><strong>布局</strong></h2><h3 id="1、线性布局"><a href="#1、线性布局" class="headerlink" title="1、线性布局"></a>1、线性布局</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">android:orientation="horizontal" // 水平的（默认）</span><br><span class="line">android:orientation="vertitcal" // 竖直的</span><br><span class="line">android:layout_width="match_parent" // 填充父</span><br><span class="line">android:layout_height="wrap_content" // 自适应</span><br><span class="line">android:paddingBottom="@dimen/activity_vertical_margin" // 控件内部内容（文字）位置</span><br><span class="line">android:marginLeft="10dp" // 控件整体左边留空 10 像素</span><br></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 总体布局 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLaout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:toos</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">tools:context</span>=<span class="string">".MainActivity"</span> &gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 内部控件布局 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLaout</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="2、相对布局"><a href="#2、相对布局" class="headerlink" title="2、相对布局"></a>2、相对布局</h3><p>控件默认左上角，需手动确定相对关系</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">android:id="@+id/btn2" // 添加一个 ID</span><br><span class="line">android:layout_below="@id/btn1" // 在 btn1 的下面（即当前控件的的上面）</span><br><span class="line">android:layout_toRightOf="@id/btn3" // 在 btn3 的右边</span><br><span class="line">android:layout_alignParentRgiht="true" // 在布局的最右边</span><br><span class="line">android:layout_alignBottom="@id/bt4" // 与 bt4 底部对齐</span><br></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 控件布局 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="3、帧布局"><a href="#3、帧布局" class="headerlink" title="3、帧布局"></a>3、帧布局</h3><p>一层一层显示，后面的Frame在前面的Frame上面（默认窗口左上角）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:layout_gravity="center"</span><br></pre></td></tr></tbody></table></figure><ul><li><p>center 居中</p></li><li><p>center_vertical 垂直居中</p></li><li><p>center_horizontal 水平居中</p></li></ul><h3 id="4、表格布局"><a href="#4、表格布局" class="headerlink" title="4、表格布局"></a>4、表格布局</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TableLayout</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line">&lt;!--代表一行--&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">TableRow</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span> &gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--加入第一个控件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"所有控件开头都是大写的"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:textColoe</span>=<span class="string">"#ff0000"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--加入第二个控件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_marginLeft</span>=<span class="string">"10dp"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:text</span>=<span class="string">"这是第二列"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">"18sp"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">TableRow</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">TableRow</span>&gt;</span> <span class="comment">&lt;!-- 第二行 --&gt;</span> <span class="tag">&lt;/<span class="name">TableRow</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TableRow</span>&gt;</span> <span class="comment">&lt;!-- 第三行 --&gt;</span> <span class="tag">&lt;/<span class="name">TableRow</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">TableLayout</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="5、绝对布局"><a href="#5、绝对布局" class="headerlink" title="5、绝对布局"></a>5、绝对布局</h3><blockquote><p>absolution 已经废弃了</p></blockquote><h3 id="权重"><a href="#权重" class="headerlink" title="权重"></a>权重</h3><p>只能在线性布局中使用，平分布局。</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">TextView</span> <span class="attr">android:layout_weight</span>=<span class="string">"2"</span>/&gt;</span> <span class="comment">&lt;!--占三分之二--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">TextView</span> <span class="attr">android:layout_weight</span>=<span class="string">"1"</span>/&gt;</span> <span class="comment">&lt;!--占三分之一--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="单位"><a href="#单位" class="headerlink" title="单位"></a>单位</h3><ul><li>px    像素（不适配屏幕，不建议使用）<ul><li><strong>dp</strong>自动适应屏幕的单位（px的替代单位）</li><li><strong>sp</strong>控件文字大小 textSize</li></ul></li></ul><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><ol><li><p>定义一个类继承 <strong>AndroidTestCase</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.test.AndroidTestCase</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalcTest</span> <span class="keyword">extends</span> <span class="title">AndroidTestCase</span> </span>{</span><br><span class="line"><span class="comment">// 写测试方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">    Calc calc = <span class="keyword">new</span> Calc(); <span class="comment">// 这时已经写好的待测试类</span></span><br><span class="line">    <span class="keyword">int</span> result = calc.add(<span class="number">5</span>, <span class="number">3</span>);</span><br><span class="line">    </span><br><span class="line">    assertEquals(<span class="number">8</span><span class="comment">/*expected*/</span>, result<span class="comment">/*actual*/</span>); <span class="comment">// 期望与实际进行对比</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>在清单文件（AndroidManifest） 中加入 <strong>uses-library</strong> 和 <strong>instrumentation</strong>：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android...</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">application</span> <span class="attr">android:icon</span>=<span class="string">"@drawable/icon"</span><span class="attr">...</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 配置函数库 （application 里面） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-library</span> <span class="attr">android:name</span>=<span class="string">"android.test.runner"</span> /&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">uses-sdk</span> <span class="attr">android:minSdkVersion</span>=<span class="string">"6"</span> /&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- 测试指令集 （application 外面） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">instrumentation</span> <span class="attr">android:name</span>=<span class="string">"android.test.InstrumentationTestRunner"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:targetPackage</span>=<span class="string">"应用包名"</span> <span class="attr">android:lable</span>=<span class="string">"标题（可省）"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><pre><code>\&lt;application android:icon="@drawable/icon"...&gt;    ***\&lt;uses-library android:name="android.test.runner" /&gt;***\&lt;/application&gt;***&lt;instrumentation android:name="android.test.InstrumentationTestRunner"***    ***android:targetPackage="cn.itcast.action" android:lable="Tests for My APP" /&gt;***</code></pre></li><li><p>Run As : <strong>Android JUnit Test</strong></p></li><li><p>加入误相减，console 会出现：junit.framework.AssertionFailedError: expected:&lt;8&gt; but was &lt;2&gt;</p><p>可根据不同的错误级别来显示</p></li></ol><h3 id="日志猫"><a href="#日志猫" class="headerlink" title="日志猫"></a>日志猫</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Log.v(tag<span class="comment">/*一般是 类名*/</span>, msg); <span class="comment">// v 级别（和 println 一样）绿</span></span><br><span class="line">Log.i(tag<span class="comment">/*一般是 类名*/</span>, msg); <span class="comment">// info 级别----绿</span></span><br><span class="line">Log.d(tag<span class="comment">/*一般是 类名*/</span>, msg); <span class="comment">// debug 级别----蓝</span></span><br><span class="line">Log.w(tag<span class="comment">/*一般是 类名*/</span>, msg); <span class="comment">// warn 级别 ----黄</span></span><br><span class="line">Log.e(tag<span class="comment">/*一般是 类名*/</span>, msg); <span class="comment">// error 级别 ----红</span></span><br></pre></td></tr></tbody></table></figure><h2 id="文件存储操作"><a href="#文件存储操作" class="headerlink" title="文件存储操作"></a>文件存储操作</h2><pre><code>过程：File -&gt; FileStream -&gt; write / read &amp; read_buffer -&gt; close</code></pre><blockquote><p>向SD卡写数据需要存储权限<br>AndroidManiFest 增加权限：android.permission.WRITE_EXTERNAL_STORAGE</p></blockquote><h3 id="txt读写例程：绝对路径"><a href="#txt读写例程：绝对路径" class="headerlink" title="txt读写例程：绝对路径"></a>txt读写例程：绝对路径</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInfoUtiles</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 写入到文件</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">saveInfo</span><span class="params">(String username, String password)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        {</span><br><span class="line">            String result = username + <span class="string">"&amp;"</span> + password;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建 File类 指定数据存储的位置</span></span><br><span class="line">            File file = <span class="keyword">new</span> File(<span class="string">"/data/data/包名/info.txt"</span>);</span><br><span class="line">            <span class="comment">// 创建一个文件输出流</span></span><br><span class="line">            FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">            fos.write(result.getBytes());</span><br><span class="line">            fos.close();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">catch</span> (Exception e)</span><br><span class="line">        {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从文件读出</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, String&gt; <span class="title">readInfo</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        {</span><br><span class="line">            Map&lt;String, String&gt; maps = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">            File file = <span class="keyword">new</span> File(<span class="string">"/data/data/包名/info.txt"</span>);</span><br><span class="line">            FileInputStream fis = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">            BufferedReader bufr = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(fis));</span><br><span class="line">            String content = bufr.readLine(); <span class="comment">// 读取一行</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 分割文本</span></span><br><span class="line">            String[] splits = content.split(<span class="string">"&amp;"</span>);</span><br><span class="line">            String name = splits[<span class="number">0</span>];</span><br><span class="line">            String pwd = splits[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 把数据放到 Map 中</span></span><br><span class="line">            maps.put(<span class="string">"username"</span>, name);</span><br><span class="line">            maps.put(<span class="string">"password"</span>, pwd);</span><br><span class="line"></span><br><span class="line">            fis.close();</span><br><span class="line">            <span class="keyword">return</span> maps;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">catch</span> (Exception e)</span><br><span class="line">        {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用存入</span></span><br><span class="line"><span class="keyword">if</span> (UserInfoUtils.saveInfo(username, password))</span><br><span class="line">{</span><br><span class="line">    ...</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用取出</span></span><br><span class="line">Map&lt;String, String&gt; maps = UserInfoUtils.readInfo();</span><br><span class="line"><span class="keyword">if</span> (maps != <span class="keyword">null</span>)</span><br><span class="line">{</span><br><span class="line">    String name = maps.get(<span class="string">"username"</span>);</span><br><span class="line">    String pwd = maps.get(<span class="string">"password"</span>);</span><br><span class="line">    ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="API-获取内部路径"><a href="#API-获取内部路径" class="headerlink" title="API 获取内部路径"></a>API 获取内部路径</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用API获取路径</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">saveInfo</span><span class="params">(Context context, String username, String password)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">// path = "/data/data/包名/files/"</span></span><br><span class="line">    String path = context.getFilesDir().getpath();</span><br><span class="line">    <span class="comment">// 用 path/info.txt 代替原来的 路径常量</span></span><br><span class="line">    File file = <span class="keyword">new</span> File(path, <span class="string">"info.txt"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 和前面一样的</span></span><br><span class="line">    FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">    fos.write(result.getBytes());</span><br><span class="line">    fos.close();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line">UserInfoUtils.saveInfo(MainActivity.<span class="keyword">this</span>, username, password);</span><br><span class="line">UserInfoUtils.readInfo(MainActivity.<span class="keyword">this</span>);</span><br></pre></td></tr></tbody></table></figure><h3 id="context-获取内部路径"><a href="#context-获取内部路径" class="headerlink" title="context 获取内部路径"></a>context 获取内部路径</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用上下文直接获取 FileOutputStream （类似API）</span></span><br><span class="line">FileOutputStream fos = context.openFileOutput(<span class="string">"info,txt"</span>, <span class="number">0</span><span class="comment">/*模式，4种*/</span>);</span><br><span class="line"></span><br><span class="line">fos.write(result.getBytes());</span><br><span class="line">fos.close();</span><br></pre></td></tr></tbody></table></figure><h3 id="Environment-获取SD卡路径"><a href="#Environment-获取SD卡路径" class="headerlink" title="Environment 获取SD卡路径"></a>Environment 获取SD卡路径</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sdPath = "/mnt/sdcard"</span></span><br><span class="line">String sdPath = Environment.getExternalStorageDirectory().getPath();</span><br><span class="line">File file = <span class="keyword">new</span> File(sdPath, <span class="string">"info.txt"</span>);</span><br></pre></td></tr></tbody></table></figure><h3 id="判断SD卡是否可用"><a href="#判断SD卡是否可用" class="headerlink" title="判断SD卡是否可用"></a>判断SD卡是否可用</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( Environment.MEDIA_MOUNTED.equals( Environment.getExternalStorageState() ) ) {</span><br><span class="line">  Toast.makeText(getApplicationContext(), <span class="string">"SD卡可用"</span>, <span class="number">1</span>).show();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="获取SD卡的可用空间"><a href="#获取SD卡的可用空间" class="headerlink" title="获取SD卡的可用空间"></a>获取SD卡的可用空间</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">File file = Envirinment.getExternalStorageDirectory();</span><br><span class="line"><span class="keyword">long</span> total = file.getTotalSpace(); <span class="comment">// 总空间（单位：byte）</span></span><br><span class="line"><span class="keyword">long</span> usable = file.getUsableSpace(); <span class="comment">// 可用空间（单位：byte）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//转换数据格式为可视化文本</span></span><br><span class="line">String Total = Formatter.formatFileSize(<span class="keyword">this</span>, total); <span class="comment">// this 是当前的 MainActivity</span></span><br><span class="line">String Usable = Formatter.formatFileSize(<span class="keyword">this</span>, usable); <span class="comment">// 每大于900则除以1024</span></span><br></pre></td></tr></tbody></table></figure><h3 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h3><p><strong>四种模式</strong></p><ul><li>MODE_PRIVATE  —  值为0</li><li>MODE_APPEND  —</li><li>MODE_WORLD_READABLE  r–</li><li>MODE_WORLD_WRITEABLE -w-</li></ul><p><strong>Linux文件权限表示：十位数</strong></p><ul><li>第一位：文件的类型 ( 例如：文件夹 d )</li><li>2-4位：用户的权限</li><li>5-7位：用户所在的组的权限</li><li>8-10位：其他用户的权限</li></ul><p><strong>r w x</strong></p><ul><li>r  可读</li><li>w 可写</li><li>x  可执行</li></ul><p>rw-   &lt;=&gt;  110  &lt;=&gt;  6</p><p><strong>改变文件权限</strong></p><p>Linux下的chhmod命令：<br>chmod 764 a.txt        // 文件权限为：rwx rw- r–<br>​                              111 110 100 == 7 6 4</p><h2 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h2><h3 id="保存设置文件-SharedPreferences"><a href="#保存设置文件-SharedPreferences" class="headerlink" title="保存设置文件 SharedPreferences"></a>保存设置文件 SharedPreferences</h3><p>（必须得会）</p><p>Sharedpreferences setting = getSharedPreferences(name, mode);<br>name:任意    mode:同上，4种模式<br>会自动生成：/data/data/包名/shared_prefs/name.xml 文件</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">SharedPreferences sp = <span class="keyword">new</span> SharedPreferences(<span class="string">"config"</span>, <span class="number">0</span>); <span class="comment">// 文件名为 config.xml  模式为 private 0</span></span><br><span class="line"><span class="comment">// 若改成"config.txt", 则会生成 config.txt.xml 文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 sp 的编辑器</span></span><br><span class="line">Editor edit = sp.edit();</span><br><span class="line">edit.putString(<span class="string">"username"</span>, username);  <span class="comment">// key, value</span></span><br><span class="line">edit.putInt(<span class="string">"Age"</span>, age); <span class="comment">// edit.putXXX  有多种类型可选</span></span><br><span class="line">edit.putFloat(<span class="string">"PI"</span>, <span class="number">3.14</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 记得关闭 edit （提交）</span></span><br><span class="line">edit.commit();</span><br></pre></td></tr></tbody></table></figure><p>SharedPreferences.getString(key, defaultValue /*默认的，找不到时*/ );</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SharedPreferences sp = getSharedPreferences(<span class="string">"config"</span>, <span class="number">0</span>);</span><br><span class="line">sp.getString(<span class="string">"username"</span>, <span class="string">""</span>);</span><br></pre></td></tr></tbody></table></figure><p>对应的 xml 内容</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encodeing="UTF-8" standalone="true"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span>myname<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"Age"</span>&gt;</span>20<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="手动构建-xml-文件"><a href="#手动构建-xml-文件" class="headerlink" title="手动构建 xml 文件"></a>手动构建 xml 文件</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">build_xml</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明数组（其中 Sms 是自定义 class）</span></span><br><span class="line">    List&lt;Sms&gt; smsLists = <span class="keyword">new</span> ArrayList&lt;Sms&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建 sb 对象</span></span><br><span class="line">    StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开始组拼 xml 文件头(注意转移双引号)</span></span><br><span class="line">    sb.append(<span class="string">"&lt;?xml version=\"1.0\" encodeing=\"UTF-8\" ?&gt;"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开始组拼 xml 根节点</span></span><br><span class="line">    sb.append(<span class="string">"&lt;smss&gt;"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开始组建 xml 节点 （任意循环增加）</span></span><br><span class="line">    <span class="keyword">for</span> (Sms sms : smsLists)</span><br><span class="line">    {</span><br><span class="line">        sb.append(<span class="string">"&lt;num&gt;"</span>);</span><br><span class="line">        sb.append(<span class="string">"110"</span>);</span><br><span class="line">        sb.append(<span class="string">"&lt;/num&gt;"</span>);</span><br><span class="line"></span><br><span class="line">        sb.append(<span class="string">"&lt;people&gt;"</span>);</span><br><span class="line">        sb.append(<span class="string">"小明"</span>);</span><br><span class="line">        sb.append(<span class="string">"&lt;/people&gt;"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    sb.append(<span class="string">"&lt;/smss&gt;"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存到 SD卡 上</span></span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    {</span><br><span class="line">        File file = <span class="keyword">new</span> File(Environment.getExternalStorageDirectory().getPath(), <span class="string">"backup.xml"</span>);</span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">        fos.write(sb, .toString().getBytes());</span><br><span class="line">        fos.close(); <span class="comment">// 关闭流</span></span><br><span class="line">        <span class="comment">// 注意写入到SD卡权限：WRITE_EXTERNAL_STORAGE</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">catch</span> ( Exception e)</span><br><span class="line">    {</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="xml序列化器-xmlSerializer"><a href="#xml序列化器-xmlSerializer" class="headerlink" title="xml序列化器 xmlSerializer"></a>xml序列化器 xmlSerializer</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">{</span><br><span class="line">    <span class="comment">// 通过 Xml 类获取 XmlSerializer 类的实例</span></span><br><span class="line">    XmlSerializer sl = Xml.newSerializer();</span><br><span class="line">    <span class="comment">// 设置参数：XML文件路径</span></span><br><span class="line">    File file = <span class="keyword">new</span> File(Environment.getExternalStorageDirectory().getPath(), <span class="string">"backup2.xml"</span>);</span><br><span class="line">    FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">    sl.setOutput(fos, <span class="string">"utf-8"</span>); <span class="comment">// 文件流与编码</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开始写 xml 文档开头</span></span><br><span class="line">    sl.startDocument(<span class="string">"utf-8"</span>, <span class="keyword">true</span><span class="comment">/*standalone, 表示是一个独立的xml文件，没有其他文件的约束*/</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// xml 的根节点，namespace = null</span></span><br><span class="line">    sl.startTag(<span class="keyword">null</span>, <span class="string">"smss"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环写xml数据</span></span><br><span class="line">    <span class="keyword">for</span> (Sms sms : smsLists)</span><br><span class="line">    {</span><br><span class="line">        sl.startTag(<span class="keyword">null</span>, <span class="string">"sms"</span>);</span><br><span class="line"></span><br><span class="line">        sl.startTag(<span class="keyword">null</span>, <span class="string">"num"</span>);</span><br><span class="line">        sl.text(<span class="string">"110"</span>);</span><br><span class="line">        sl.endTag(<span class="keyword">null</span>, <span class="string">"num"</span>);</span><br><span class="line"></span><br><span class="line">        sl.startTag(<span class="keyword">null</span>, <span class="string">"people"</span>);</span><br><span class="line">        sl.text(<span class="string">"小明"</span>);</span><br><span class="line">        sl.endTag(<span class="keyword">null</span>, <span class="string">"people"</span>);</span><br><span class="line"></span><br><span class="line">        sl.endTag(<span class="keyword">null</span>, <span class="string">"sms"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    sl.endTag(numll, <span class="string">"smss"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 写文档结尾</span></span><br><span class="line">    sl.endDocument();</span><br><span class="line">    fos.close(); <span class="comment">// 关闭流</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="xml的解析"><a href="#xml的解析" class="headerlink" title="xml的解析"></a>xml的解析</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 目标 xml 文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">weather</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">channel</span> <span class="attr">id</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">city</span>&gt;</span>背景<span class="tag">&lt;/<span class="name">cith</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">temp</span>&gt;</span>25<span class="tag">&lt;/<span class="name">temp</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">channel</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">channel</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">channel</span>&gt;</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">weather</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用：</span></span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">{</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取 Assets 的文件</span></span><br><span class="line">    InputStream inputStream = getAssets().open(<span class="string">"weather.xml"</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;Channel&gt; weatherlists = WeatherParser.parserXml(inputstream);</span><br><span class="line"></span><br><span class="line">    StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">    <span class="keyword">for</span> (Channel channel : weatherlists)</span><br><span class="line">    {</span><br><span class="line">        sb.append(channel.toString());</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    System.out.println(sb.toString());</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// WeatherParser类的parserXml方法：</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Channel&gt; <span class="title">parserXml</span><span class="params">(InputStream in)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    {</span><br><span class="line">        List&lt;Channel&gt; weather: ists = <span class="keyword">null</span>;</span><br><span class="line">        Channel channel = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取解析的实例</span></span><br><span class="line">        XmlPullParser parser = Xml.newPullParser();</span><br><span class="line">        <span class="comment">// 设置解析参数(in是输入流)</span></span><br><span class="line">        parser.setInput(in, <span class="string">"utf-8"</span>);</span><br><span class="line">        <span class="comment">// 获取事件类型</span></span><br><span class="line">        <span class="keyword">int</span> type = parser.getEventType();</span><br><span class="line">        <span class="keyword">while</span> (type != XmlPullParser.END_DOCUMENT <span class="comment">/*==1*/</span>)</span><br><span class="line">        {</span><br><span class="line">            <span class="comment">// 具体判断解析到哪个节点</span></span><br><span class="line">            <span class="keyword">switch</span> (type)</span><br><span class="line">            {</span><br><span class="line">            <span class="comment">// 具体判断一下 解析到哪个开始标志</span></span><br><span class="line">            <span class="keyword">case</span> XmlPullParser.START_TAG : <span class="comment">// 解析开始标志</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="string">"weather"</span>.equals(parser.getName()))</span><br><span class="line">                {</span><br><span class="line">                    <span class="comment">// 创建一个集合对象</span></span><br><span class="line">                    weatherLists = <span class="keyword">new</span> ArrayList&lt;Channel&gt;();</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"channel"</span>.equals(parser.getName()))</span><br><span class="line">                {</span><br><span class="line">                    <span class="comment">// 创建Channel对象</span></span><br><span class="line">                    channel = <span class="keyword">new</span> Channel();</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 获取ID：第1个数，下标0</span></span><br><span class="line">                    String id = parser.getAttributeValue(<span class="number">0</span>)</span><br><span class="line">                                channel.setId(id); <span class="comment">// 自定义类的方法</span></span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"city"</span>.equals(parser.getName()))</span><br><span class="line">                {</span><br><span class="line">                    <span class="comment">// 获取city的数据</span></span><br><span class="line">                    String city = parser.getText();</span><br><span class="line">                    channel.setCity(city);</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"temp"</span>.equals(parser.getName()))</span><br><span class="line">                {</span><br><span class="line">                    <span class="comment">// 获取temp的数据</span></span><br><span class="line">                    String temp = parser.getText();</span><br><span class="line">                    channel.setTemp(temp);</span><br><span class="line">                }</span><br><span class="line"></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> XmlPullParser.END_TAG : <span class="comment">// 解析结束标志</span></span><br><span class="line">                <span class="comment">// 判断要解析的结束标签</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="string">"channel"</span>.equals(parser.getName()))</span><br><span class="line">                {</span><br><span class="line">                    <span class="comment">// 把 Javabean 对象存到集合中</span></span><br><span class="line">                    weatherLists.add(channel);</span><br><span class="line"></span><br><span class="line">                }</span><br><span class="line"></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 不停地向下解析</span></span><br><span class="line">            parser.next();</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> weatherLists;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">catch</span> ( Exception e ) { }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><h3 id="sqlite-数据库初始化"><a href="#sqlite-数据库初始化" class="headerlink" title="sqlite 数据库初始化"></a>sqlite 数据库初始化</h3><h4 id="SQLiteOpenHelper"><a href="#SQLiteOpenHelper" class="headerlink" title="SQLiteOpenHelper"></a>SQLiteOpenHelper</h4><p><strong>SQLiteOpenHelper类</strong> 用来管理数据库的创建 ，创建子类来继承它</p><p><strong>db.execSQL(string sql)</strong>  执行SQL语句</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.database.sqlite.SQLiteDababase;</span><br><span class="line"><span class="keyword">import</span> android.database.sqlite.SQLiteOpenHelper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyOpenHelper</span> <span class="keyword">extends</span> <span class="title">SQLiteOpenHelper</span> </span>{</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 需要添加无参构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyOpenHelper</span><span class="params">(Context context)</span> </span>{</span><br><span class="line">       <span class="comment">// 创建数据库，上下文、名字、cursor对象（结果集/游标）、数据库版本（从1开始）</span></span><br><span class="line">      <span class="keyword">super</span>(context, <span class="string">"test.db"</span>, <span class="keyword">null</span>, <span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据库第一次创建的时候用（仅一次），特别适合做表结构的初始化</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(SQLiteDatabase db)</span> </span>{</span><br><span class="line">        <span class="comment">// 创建表的结构</span></span><br><span class="line">        db.execSQL(<span class="string">"create table info( _id integer primary key autoincrement, name varchar(20) )"</span>);</span><br><span class="line">        <span class="comment">// SQLite数据库底层不区分数据类型，但是SQL语句还是得照写声明类别（所有SQL语句都一样）</span></span><br><span class="line">        <span class="comment">// integer 也是用 string 来存储，varchar(20) 可以存更长的 string</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 数据库升级的时候调用（不能降级，会出错）</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onUpgrade</span><span class="params">(SQLiteDatabase db, <span class="keyword">int</span> oldVersion, <span class="keyword">int</span> newVersion)</span> </span>{</span><br><span class="line"><span class="comment">//例如：升级 info表 添加 phone字段</span></span><br><span class="line">      db.execSQL(<span class="string">"alter table info add phone varchar(20)"</span>);</span><br><span class="line">    } </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="MainActivity部分"><a href="#MainActivity部分" class="headerlink" title="MainActivity部分"></a>MainActivity部分</h4><p>数据库路径：<strong>/data/data/包名/databases/数据库名字.db</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line"><span class="keyword">private</span> MyOpenHelp myOpenHelper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建数据库（包名），触发 构造方法、onCreate() 事件</span></span><br><span class="line">        myOpenHelper = <span class="keyword">new</span> MyOpenHelper(getApplicationContext());</span><br><span class="line">        <span class="comment">// 创建（第一次）或打开数据库</span></span><br><span class="line">        SQLiteDatabase sqLiteDatabase = myOpenHelper.getWriteableDatabase();</span><br><span class="line">        <span class="comment">// 创建（第一次）或打开数据库；如果磁盘已满则返回只读</span></span><br><span class="line">        <span class="comment">// SQLiteDatabase readableDatabase = myOpenHelper.getReadableDatabase();</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="执行SQL语句"><a href="#执行SQL语句" class="headerlink" title="执行SQL语句"></a>执行SQL语句</h3><h4 id="execSQL"><a href="#execSQL" class="headerlink" title="execSQL"></a>execSQL</h4><p>void execSQL(sql, bindArgs); // 修改语句，无返回值</p><p>SQLiteDatabase execSQL(sql); // 查找语句，有返回值</p><figure class="highlight sql"><figcaption><span>lite</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> info(<span class="keyword">name</span>, phone) <span class="keyword">values</span>(<span class="string">"Tom"</span>, <span class="string">"110"</span>); <span class="comment">-- 两个斜杠表示注释</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> info <span class="keyword">where</span> <span class="keyword">name</span> = <span class="string">"Tom"</span>l</span><br><span class="line"><span class="keyword">update</span> info <span class="keyword">set</span> phone = <span class="string">"120"</span> <span class="keyword">where</span> <span class="keyword">name</span> = <span class="string">"Tom"</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>, phone <span class="keyword">from</span> info;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 执行 SQL语句</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="comment">// 获取数据库对象</span></span><br><span class="line">    SQLiteDatabase db = myOpenHelper.getWritableDatabase();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行增加一条的SQL语句</span></span><br><span class="line">    db.execSQL(<span class="string">"insert into info (name, phone) values(?, ?)"</span>, <span class="keyword">new</span> Object[] {<span class="string">"Tim"</span>, <span class="string">"119"</span>});</span><br><span class="line">    <span class="comment">// 执行删除语句</span></span><br><span class="line">    db.execSQL(<span class="string">"delete from info where name=?"</span>, <span class="keyword">new</span> Object[] {<span class="string">"Tom"</span>}<span class="comment">/*bindArgs*/</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据库用完需关闭（官方建议关闭，但是不关可提升效率）</span></span><br><span class="line">    db.close();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="Cursor"><a href="#Cursor" class="headerlink" title="Cursor"></a>Cursor</h4><ul><li>int getCount() 行数    getColumnCount() 列数</li><li>String getString(int columnIndex)</li><li>boolean moveToNext()    moveToFirst()    moveToLast()    moveToPosition(int position)    moveToPrevious()</li><li>String[] getColumnNames() 所有列的名字</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    SQLiteDatabase db = myOpenHelper.getReadableDatabase(); <span class="comment">// 只读就行了</span></span><br><span class="line"></span><br><span class="line">    Cursor cursor = db.rawQuery(<span class="string">"select * from info"</span>, <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">if</span> (cursor != <span class="keyword">null</span> &amp;&amp; cursor.getCount() &gt; <span class="number">0</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">while</span> (cursor.moveToNext())</span><br><span class="line">        {</span><br><span class="line">            String name = cursor.getString(<span class="number">1</span>); <span class="comment">// 这一行第二列的值</span></span><br><span class="line">            System.out.println(<span class="string">"name:"</span> + name);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="SQL优缺点"><a href="#SQL优缺点" class="headerlink" title="SQL优缺点"></a>SQL优缺点</h4><p>缺点</p><ul><li>SQL语句容易写错</li><li>没有返回值，结果不容易判断</li></ul><p>优点</p><ul><li>多表查询（自由、功能强）</li></ul><h4 id="sqlite3"><a href="#sqlite3" class="headerlink" title="sqlite3"></a>sqlite3</h4><h5 id="命令行SQL语句"><a href="#命令行SQL语句" class="headerlink" title="命令行SQL语句"></a>命令行SQL语句</h5><p>开启shell <code>adb shell</code></p><p>定位到目录 <code># cd /data/data/包名/databases</code></p><p>打开数据库 <code># sqlite3 数据库名字.db</code></p><p>sqlite&gt; <code>SQL语句</code>    （不包括前面的sqlite&gt;）</p><h5 id="改变DOS编码"><a href="#改变DOS编码" class="headerlink" title="改变DOS编码"></a>改变DOS编码</h5><blockquote><p>如果中文乱码，点击cmd属性，看编码是否为UTF-8（默认GBK）</p></blockquote><p>改成GBK <code>chcp 936</code> </p><p>改成UTF-8 <code>chcp 65001</code></p><blockquote><p>chcp: <u>ch</u>ar <u>c</u>hange <u>p</u>age</p></blockquote><h3 id="谷歌封装好的数据库API"><a href="#谷歌封装好的数据库API" class="headerlink" title="谷歌封装好的数据库API"></a>谷歌封装好的数据库API</h3><p>原理是组拼SQL语句</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    SQLiteDatabase db = myOpenHelper.getWritableDatabase();</span><br><span class="line"></span><br><span class="line">    ContentValues values = <span class="keyword">new</span> ContentValues();</span><br><span class="line">    values.put(<span class="string">"name"</span>, <span class="string">"Tom"</span>);</span><br><span class="line">    values.put(<span class="string">"phone"</span>, <span class="string">"110"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加记录：表名、null、map数组：名字=&gt;值。返回 long -1失败 或 行号（1开始）</span></span><br><span class="line">    <span class="keyword">long</span> num = db.insert(<span class="string">"info"</span>, <span class="keyword">null</span>, values);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除记录：表名、条件、条件值。返回 int 影响的行数， 0 为没有删除</span></span><br><span class="line">    <span class="keyword">int</span> num = db.delete(<span class="string">"info"</span>, <span class="string">"name=?"</span>, <span class="keyword">new</span> String[] {<span class="string">"Tom"</span>});</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新记录：表名、map数组、条件、条件值。 返回 int 影响的行数</span></span><br><span class="line">    <span class="keyword">int</span> num = db.update(<span class="string">"info"</span>, values, <span class="string">"name=?"</span>, <span class="keyword">new</span> String[] {<span class="string">"Tom"</span>});</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询：表名、查询的列String[]（null为全部列）、条件、条件值String[]、分组、过滤条件、排序</span></span><br><span class="line">    <span class="comment">// 选择查询的列（参数二）：new String[]{"name", "phone"}</span></span><br><span class="line">    Cursor cursor = db.query(<span class="string">"info"</span>, <span class="keyword">null</span>, <span class="string">"name=?"</span>, <span class="keyword">new</span> String[] {<span class="string">"Tom"</span>}, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">if</span> (cursor != <span class="keyword">null</span> &amp;&amp; cursor.getCount() &gt; <span class="number">0</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">while</span>(cursor.moveToNext())</span><br><span class="line">        {</span><br><span class="line">            String name = cursor.getString(<span class="number">0</span>); <span class="comment">// 第一列（name）</span></span><br><span class="line">            String phone = cursor.getString(<span class="number">1</span>); <span class="comment">// 第二列（phone）</span></span><br><span class="line">            System.out.println(<span class="string">"name="</span> + name + <span class="string">" phone="</span> + phone);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    db.close();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>优点</p><ul><li>写法简单</li><li>有返回值</li></ul><p>缺点</p><ul><li>多张表不容易查询</li></ul><h3 id="数据库的事物"><a href="#数据库的事物" class="headerlink" title="数据库的事物"></a>数据库的事物</h3><p>例如：转账，需要取出、存入同时成功</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(Veiw v)</span></span>{</span><br><span class="line">    SQLiteDatabase db = myOpenHelper.getReadableDatabase();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用事物进行操作</span></span><br><span class="line">    db.beginTransaction();</span><br><span class="line">    <span class="keyword">try</span>{</span><br><span class="line">        <span class="comment">// 实现逻辑，即SQL语句</span></span><br><span class="line">        db.execSQL(<span class="string">"update ac_mon set money = money - 100 where name = ?"</span>, <span class="keyword">new</span> String[]{<span class="string">"userA"</span>});</span><br><span class="line">        <span class="comment">/* int i = 10 / 0; // 运行中断 */</span></span><br><span class="line">        db.execSQL(<span class="string">"update ac_mon set money = money + 100 where name = ?"</span>, <span class="keyword">new</span> String[]{<span class="string">"userB"</span>});</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 给当前事物设置一个成功的标记</span></span><br><span class="line">        db.setTansactionSuccessful();</span><br><span class="line">    } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">      Toast.makeText(getApplicationContext(), <span class="string">"服务器忙，请稍后再试"</span>, <span class="number">1</span>).show();</span><br><span class="line">    } <span class="keyword">finally</span> {</span><br><span class="line">      db.endTransaction(); <span class="comment">// 关闭事物</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="ListView"><a href="#ListView" class="headerlink" title="ListView"></a>ListView</h2><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><h4 id="1、布局：activity-main"><a href="#1、布局：activity-main" class="headerlink" title="1、布局：activity_main"></a>1、布局：activity_main</h4><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ListView</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:id</span>=<span class="string">"@+id/lv"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:layout_witdh</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:fastScrollEnabled</span>=<span class="string">"true"</span>&gt;</span> <span class="comment">&lt;!--快速滚动条--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ListView</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="2、设置Adapter"><a href="#2、设置Adapter" class="headerlink" title="2、设置Adapter"></a>2、设置Adapter</h4><p>连接到数据适配器：<code>setAdapter()</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>{</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle saveInstanceState)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 找到控件</span></span><br><span class="line">        ListView lv = (ListView) findViewById(R.id.lv);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 显示数据（数据来源于数据适配器）</span></span><br><span class="line">        lv.setAdapter(<span class="keyword">new</span> MyListAdapter());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="3、实现BaseAdapter方法"><a href="#3、实现BaseAdapter方法" class="headerlink" title="3、实现BaseAdapter方法"></a>3、实现BaseAdapter方法</h4><p><strong>BaseAdapter</strong></p><p>可以放到上面的 MainActivity 类的代码里面，作为类中类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyListAdapter</span> <span class="keyword">extends</span> <span class="title">BaseAdapter</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 项目数量</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="number">4</span>; <span class="comment">/*item数量，自定义*/</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对应的对象</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对应的ID</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getItemID</span><span class="params">(<span class="keyword">int</span> position)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取一个view，用来显示每个item的数据</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, ViewGroup parent)</span> </span>{</span><br><span class="line">        TextView tv = <span class="keyword">new</span> TextView(MainActivity.<span class="keyword">this</span><span class="comment">/*当前类*/</span>);</span><br><span class="line">        tv.setText(<span class="string">"索引："</span> + position);</span><br><span class="line">        <span class="keyword">return</span> tv; <span class="comment">// return null 的话会报错</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="错误提示"><a href="#错误提示" class="headerlink" title="错误提示"></a>错误提示</h4><p><code>Attempt to invoke virtual method 'int android.view.View.getImportantForAccessibility()' on a null object reference</code></p><p>原因是 getView() 返回值为空……</p><h4 id="结果示例"><a href="#结果示例" class="headerlink" title="结果示例"></a>结果示例</h4><p><code>getCount()</code>控制条目数量。当数量=4时：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>{ <span class="keyword">return</span> <span class="number">4</span>; }</span><br></pre></td></tr></tbody></table></figure><p>结果：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">索引：0</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">索引：1</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">索引：2</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">索引：3</span><br></pre></td></tr></tbody></table></figure><p>每个item都是一个TextView，其由<code>getView()</code>方法决定</p><h4 id="显示数据的原理"><a href="#显示数据的原理" class="headerlink" title="显示数据的原理"></a>显示数据的原理</h4><p><strong>MVC</strong></p><p>Javaweb:</p><ul><li>m : mode 数据</li><li>v : view 视图 jsp</li><li>c : controller 控制 sevlet</li></ul><p>Android:</p><ul><li>m : mode 数据(javabean)</li><li>v : listview</li><li>c : adapter</li></ul><h3 id="ListView优化"><a href="#ListView优化" class="headerlink" title="ListView优化"></a>ListView优化</h3><h4 id="getView-方法说明"><a href="#getView-方法说明" class="headerlink" title="getView() 方法说明"></a>getView() 方法说明</h4><p>只有在屏幕上显示（包括只显示一点点）的item才会触发<code>getView()</code>方法。<br>滚动时新显示的条目也会触发。<br>快速滚动加载大量View可能会导致内存溢出（Out Of Memory）。</p><h4 id="convertView-缓存机制"><a href="#convertView-缓存机制" class="headerlink" title="convertView 缓存机制"></a>convertView 缓存机制</h4><p>item并不是滚动完就销毁。<br>使用 <code>convertView</code> 历史缓存可避免内存溢出。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, ViewGroup parent)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"></span><br><span class="line">    TextView tv;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (convertView == <span class="keyword">null</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="comment">// 缓存对象为空，创建新的 view 对象</span></span><br><span class="line">        tv = <span class="keyword">new</span> TextView(MainActivity.<span class="keyword">this</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">        <span class="comment">// 使用历史缓存对象</span></span><br><span class="line">        tv = (TextView) convertView;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    tv.setText(<span class="string">"索引："</span> + position);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> tv;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>复用历史缓存对象：一开始时是真的创建可见范围内的对象，滚动上去后，新出现（底部）的对象实际上是复用已经加载好但是看不见了的（顶部）的对象。根据 <code>position</code> 调用 <code>getView()</code> 方法。</p><blockquote><p>例如，快速滚动时加载100个item，不用缓存需要创建100个TextView。使用 convertView 后，只需要设置TextView的值就好了。</p></blockquote><h4 id="List高度设置"><a href="#List高度设置" class="headerlink" title="List高度设置"></a>List高度设置</h4><p>能否设置成 <code>layout_height="wrap_content"</code> ？</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ListView</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span> <span class="comment">&lt;!--这是正常的--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ListView</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>改成<code>android:layout_height="wrap_content"</code>后，无法确定高度，校验很多次，重复调用 <code>getView()</code> 方法，严重影响性能。</p><h3 id="复杂的ListView"><a href="#复杂的ListView" class="headerlink" title="复杂的ListView"></a>复杂的ListView</h3><p>┍━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┑<br>│ ┌───────┐   <strong>这里是项目标题，字…</strong>   │<br>│ │    Image    │      <code>这个部分是项目相对应</code>  │<br>│ └───────┘  <code>的信息内容</code>                     │<br>┕━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┙</p><h4 id="1、Layout：activity-main"><a href="#1、Layout：activity-main" class="headerlink" title="1、Layout：activity_main"></a>1、Layout：activity_main</h4><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ListView</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:id</span>=<span class="string">"@+id/lv"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_witdh</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ListView</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="2、Layout-item（xml）"><a href="#2、Layout-item（xml）" class="headerlink" title="2、Layout : item（xml）"></a>2、Layout : item（xml）</h4><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_witdh</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span> &gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/iv_icon"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:src</span>=<span class="string">"@drawable/ic_launcher"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/tv_title"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span>    // 左边与父容器右边的距离</span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_toRightOf</span>=<span class="string">"@id/iv_icon"</span> // 图片右边</span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">"3dp"</span> // 顶部留空</span></span><br><span class="line"><span class="tag">        <span class="attr">android:singleLine</span>=<span class="string">"true"</span> // 单行显示</span></span><br><span class="line"><span class="tag">        <span class="attr">android:ellipsize</span>=<span class="string">"end"</span>   // 显示开头，末尾三个点。<span class="attr">start</span>值相反</span></span><br><span class="line"><span class="tag">        <span class="attr">androi:textColor</span>=<span class="string">"#000000"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textsize</span>=<span class="string">"20sp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"这个里项目标题，字体加粗加黑"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/tv_message"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_toRightOf</span>=<span class="string">"@id/iv_icon"</span> // 图片右边</span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_below</span>=<span class="string">"@id/tv_text"</span>     // 标题下面</span></span><br><span class="line"><span class="tag">        <span class="attr">android:singleLine</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:ellipsize</span>=<span class="string">"end"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">androi:textColor</span>=<span class="string">"#666666"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textsize</span>=<span class="string">"15sp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"这个里项目标题，字体加粗加黑"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="3、BaseAdapter：打气筒"><a href="#3、BaseAdapter：打气筒" class="headerlink" title="3、BaseAdapter：打气筒"></a>3、BaseAdapter：打气筒</h4><p><code>View View.inflate(context, resource, root)</code> 方法（打气筒）<br>介绍：创建新的View对象，把布局资源（xml 文件）折换成一个 View 对象，放到父容器中，并返回这个 View 对象</p><ul><li>context : <code>getApplicationContext()</code>，或 <code>this</code></li><li>resource : 定义的布局文件 R.id.xxx</li><li>root : null，或者待放入的容器(ViewGroup)</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle saveInstanceState)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 找到控件</span></span><br><span class="line">        ListView lv = (ListView) findViewById(R.id.lv);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 显示数据（数据来源于数据适配器）</span></span><br><span class="line">        lv.setAdapter(<span class="keyword">new</span> MyListAdapter);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyListAdapter</span> <span class="keyword">extends</span> <span class="title">BaseAdapter</span></span></span><br><span class="line"><span class="class">    </span>{</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 项目数量</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>{</span><br><span class="line">            <span class="keyword">return</span> <span class="number">4</span>; <span class="comment">/*item数量，自定义*/</span></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对应的对象</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span></span></span><br><span class="line"><span class="function">        </span>{</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对应的ID</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getItemID</span><span class="params">(<span class="keyword">int</span> position)</span></span></span><br><span class="line"><span class="function">        </span>{</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取一个view，用来显示每个item的数据</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, ViewGroup parent)</span></span></span><br><span class="line"><span class="function">        </span>{</span><br><span class="line"></span><br><span class="line">            View view;</span><br><span class="line">            <span class="keyword">if</span> (convertView == <span class="keyword">null</span>)</span><br><span class="line">            {</span><br><span class="line">                <span class="comment">// 获取打气筒服务</span></span><br><span class="line">                view = View.inflate(getApplicationContext, R.id.item, <span class="keyword">null</span>);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            {</span><br><span class="line">                <span class="comment">// 复用历史缓存对象</span></span><br><span class="line">                view = (TextView) convertView;</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">//根据列表设置控件数据</span></span><br><span class="line">            <span class="comment">//TextView tv = (TextView) view.findViewById(R.id.tv);</span></span><br><span class="line">            <span class="comment">//view.setText(xxLists.get(position).getXx());</span></span><br><span class="line">            <span class="keyword">return</span> view;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>获取 XML 布局里面的控件：<code>view.findViewById()</code></strong>，不能直接 <code>findViewById()</code></p><h5 id="打气筒的三种写法"><a href="#打气筒的三种写法" class="headerlink" title="打气筒的三种写法"></a>打气筒的三种写法</h5><p>打气筒写法一：View.inflate()</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">view = View.inflate(getApplicationContext, R.id.item, <span class="keyword">null</span>); <span class="comment">// 用法见上</span></span><br></pre></td></tr></tbody></table></figure><p>打气筒写法二：LayoutInflater.from()</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">view = LayoutInflater.from(getApplicationContext()).inflate(R.layout.item, <span class="keyword">null</span>);</span><br></pre></td></tr></tbody></table></figure><p>打气筒写法三：getSystemService()<br>据说实际上用得比较多</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LayoutInflater inflater = (LayoutInflater) getSystemService(LAYOUT_INFLATER_SERVICE);</span><br><span class="line">view = inflater.inflate(R.layout.item, <span class="keyword">null</span>);</span><br></pre></td></tr></tbody></table></figure><p>其他写法：不常见</p><h3 id="ArrayAdapter"><a href="#ArrayAdapter" class="headerlink" title="ArrayAdapter"></a>ArrayAdapter</h3><p>布局：activity_main</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ListView</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ListView</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>布局：item</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">TextView</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><strong>MainActivity</strong></p><p><code>ArraryAdapter&lt;String&gt;(context, resource, objects)</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.R.array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainAcitivity</span> <span class="keyword">extends</span> <span class="title">Activity</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line"></span><br><span class="line">    String names[] = { <span class="string">"111"</span>, <span class="string">"222"</span>, <span class="string">"333"</span>, <span class="string">"444"</span> };</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreat</span><span class="params">(Bundle savedInstanceState)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line"></span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 找到控件</span></span><br><span class="line">        ListView lv = (ListView) findViewById(R.id.lv);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建 ArrayAdapter : context, resource(只有TextView的xml文件), 数据数组</span></span><br><span class="line">        ArrayAdapter&lt;String&gt; adapter = <span class="keyword">new</span> ArrayAdapter&lt;String&gt;(<span class="keyword">this</span>, R.id.item, names);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置数据适配器</span></span><br><span class="line">        lv.setAdapter(adapter);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>结果</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">111</span><br><span class="line">222</span><br><span class="line">333</span><br><span class="line">444</span><br></pre></td></tr></tbody></table></figure><p>重载的四个参数的ArrayAdapter用法：</p><p><code>ArraryAdapter&lt;String&gt;(context, resource, textViewResourceId, objects)</code></p><p><code>textViewResourceId</code> 为 resource 布局文件里面的某个特定的 TextView 的 ID</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ArrayAdapter&lt;String&gt; adapter = <span class="keyword">new</span> ArrayAdapter&lt;String&gt;(<span class="keyword">this</span>, R.id.item, R.id.tv, names);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">...</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/tv"</span> <span class="attr">...</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="SimpleAdapter"><a href="#SimpleAdapter" class="headerlink" title="SimpleAdapter"></a>SimpleAdapter</h3><p>┍━━━━━━━━━━━━━━━━━━━━━┑<br>│┌───────┐┌───────┐│<br>││    name     │ │    phone    ││<br>│└───────┘└───────┘│<br>┕━━━━━━━━━━━━━━━━━━━━━┙</p><p>布局：activity_main</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">...</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ListView</span> <span class="attr">...</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>布局：item</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns</span>=<span class="string">"..."</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:orientation</span>=<span class="string">"horizental"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/tv_name"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/tv_phone"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><strong>代码：MainActivity</strong></p><p><code>SimpleAdapter adapter = new SimapleAdapter(context, data, resource, from, to);</code> // 参数长的那个</p><ul><li><code>data</code> 是 <strong><code>List&lt;Map&lt;String, String&gt;&gt;</code></strong> 类型数据</li><li><code>resource</code> 是 布局文件（上面的 item）</li><li><code>from</code> 是 String[] 类型，表示 <code>Map&lt;String, String&gt;</code> 的键</li><li><code>to</code> 是 int[] 类型数组，与<code>from</code> 对应的布局文件中的 TextView 的 ID</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 找到控件</span></span><br><span class="line">ListView lv = (ListView) findViewById(R.id.lv);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 准备数据</span></span><br><span class="line">List&lt;Map&lt;String, String&gt;&gt; data = <span class="keyword">new</span> ArrayList&lt;Map&lt;String, String&gt;&gt;();</span><br><span class="line"></span><br><span class="line">Map&lt;String, String&gt; map1 = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">map1.put(<span class="string">"name"</span>, <span class="string">"Tom"</span>);</span><br><span class="line">map1.put(<span class="string">"phone"</span>, <span class="string">"110"</span>);</span><br><span class="line"></span><br><span class="line">Map&lt;String, String&gt; map2 = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">map2.put(<span class="string">"name"</span>, <span class="string">"Alice"</span>);</span><br><span class="line">map2.put(<span class="string">"phone"</span>, <span class="string">"120"</span>);</span><br><span class="line"></span><br><span class="line">data.add(map1);</span><br><span class="line">data.add(map2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置数据适配器</span></span><br><span class="line">SimpleAdapter adapter = <span class="keyword">new</span> SimapleAdapter(getApplicationContext(), data, R.id.item,</span><br><span class="line"><span class="keyword">new</span> String[]{ <span class="string">"name"</span>, <span class="string">"phone"</span> }, <span class="keyword">new</span> String[]{ R.id.tv_name, R.id.tv_phone });</span><br><span class="line">lv.setAdapter(adapter);</span><br></pre></td></tr></tbody></table></figure><h3 id="用ListView展示数据库的数据"><a href="#用ListView展示数据库的数据" class="headerlink" title="用ListView展示数据库的数据"></a>用ListView展示数据库的数据</h3><p>┍━━━━━━━━━━━━━━━━━━━━━┑<br>│┌───────┐┌───────┐│<br>││    name     │ │    phone    ││<br>│└───────┘└───────┘│<br>┕━━━━━━━━━━━━━━━━━━━━━┙</p><p>布局：activity_main</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">略</span><br></pre></td></tr></tbody></table></figure><p>布局：item</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns</span>=<span class="string">"..."</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:orientation</span>=<span class="string">"horizental"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/tv_name"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/tv_phone"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>类：Person</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String name, phone;</span><br><span class="line">略</span><br></pre></td></tr></tbody></table></figure><p><strong>MainActivity</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainAcitivity</span> <span class="keyword">extends</span> <span class="title">Activity</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 找到控件</span></span><br><span class="line">    ListView lv = (ListView) findViewById(R.id.lv);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 整理数据</span></span><br><span class="line">    List&lt;Person&gt; lists = <span class="keyword">new</span> ArrayList&lt;Person&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreat</span><span class="params">(Bundle savedInstanceState)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line"></span><br><span class="line">        SQLiteDatabase db = myOpenHelper.getWritableDatabase();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询：表名、查询的列String[]（null为全部列）、条件、条件值String[]、分组、过滤条件、排序</span></span><br><span class="line">        <span class="comment">//Cursor cursor = db.query("info", null, "name=?", new String[]{"Tom"}, null, null, null);</span></span><br><span class="line">        Cursor cursor = db.query(<span class="string">"info"</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>); <span class="comment">// 查询所有</span></span><br><span class="line">        <span class="keyword">if</span> (cursor != <span class="keyword">null</span> &amp;&amp; cursor.getCount() &gt; <span class="number">0</span>)   <span class="comment">// 如果有数据</span></span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">while</span>(cursor.moveToNext())</span><br><span class="line">            {</span><br><span class="line">                String name = cursor.getString(<span class="number">0</span>); <span class="comment">// 第一列（name）</span></span><br><span class="line">                String phone = cursor.getString(<span class="number">1</span>); <span class="comment">// 第二列（phone）</span></span><br><span class="line"></span><br><span class="line">                Person person = <span class="keyword">new</span> Person(name, phone);</span><br><span class="line">                lists.add(person);</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设置数据适配器</span></span><br><span class="line">            lv.setAdapter(<span class="keyword">new</span> MyListAdapter);</span><br><span class="line">        }</span><br><span class="line">        db.close();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyListAdapter</span> <span class="keyword">extends</span> <span class="title">BaseAdapter</span></span></span><br><span class="line"><span class="class">    </span>{</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 项目数量</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>{</span><br><span class="line">            <span class="keyword">return</span> lists.size(); <span class="comment">// 返回列表（数据库）中的数据数量</span></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对应的对象</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span></span></span><br><span class="line"><span class="function">        </span>{</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对应的ID</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getItemID</span><span class="params">(<span class="keyword">int</span> position)</span></span></span><br><span class="line"><span class="function">        </span>{</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取一个view，用来显示每个item的数据</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, ViewGroup parent)</span></span></span><br><span class="line"><span class="function">        </span>{</span><br><span class="line"></span><br><span class="line">            TextView view;</span><br><span class="line">            <span class="keyword">if</span> (convertView == <span class="keyword">null</span>)</span><br><span class="line">            {</span><br><span class="line">                <span class="comment">// 缓存对象为空，创建新的 view 对象</span></span><br><span class="line">                view = View.inflate(getApplicationContext, R.id.item, <span class="keyword">null</span>);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            {</span><br><span class="line">                <span class="comment">// 使用历史缓存对象</span></span><br><span class="line">                view = (TextView) convertView;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            Person person = lists.get(position); <span class="comment">// 获取从数据库中取出的列表对象</span></span><br><span class="line">            <span class="comment">// findViewById() 从当前 activity 中获取 ID，无法直接取到 layout/item 里面的 ID，</span></span><br><span class="line">            <span class="comment">// 所以需要先用 inflate() 获取到 R.id.item 的 view，再通过 view 获取 ID</span></span><br><span class="line">            TextView tv_name = (TextView) view.findViewById(R.id.tv_name);</span><br><span class="line">            TextView tv_phone = (TextView) view.findViewById(R.id.tv_phone);</span><br><span class="line">            tv_name.setText(person.getName()); <span class="comment">// 设置名字</span></span><br><span class="line">            tv_phone.setText(person.getPhone()); <span class="comment">// 设置电话</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> view;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h1><h2 id="网页源码查看器"><a href="#网页源码查看器" class="headerlink" title="网页源码查看器"></a>网页源码查看器</h2><h3 id="联网权限"><a href="#联网权限" class="headerlink" title="联网权限"></a>联网权限</h3><p><code>android.permission.INTERNET</code></p><h3 id="HttpUrlConnection-类"><a href="#HttpUrlConnection-类" class="headerlink" title="HttpUrlConnection 类"></a>HttpUrlConnection 类</h3><p>用于发送或者接受数据，取网页源代码</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置网址</span></span><br><span class="line">String path = <span class="string">"http://www.baidu.com"</span>;</span><br><span class="line">URL url = <span class="keyword">new</span> URL(path);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">{</span><br><span class="line">    <span class="comment">// HttpURLConnection对象，用于发送或者接受数据</span></span><br><span class="line">    HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置发送 get 请求（默认），注意要求【大写】</span></span><br><span class="line">    urlConnection.setRequestMethod(<span class="string">"GET"</span>);</span><br><span class="line">    <span class="comment">// 设置请求超时</span></span><br><span class="line">    urlConnection.setConnectTimeout(<span class="number">5000</span>); <span class="comment">// 5 秒</span></span><br><span class="line">    <span class="comment">// 获取服务器返回的状态码，例如 404</span></span><br><span class="line">    <span class="keyword">int</span> code = urlConnection.getResponseCode();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (code == <span class="number">200</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="comment">// 获取服务器返回的数据流</span></span><br><span class="line">        InputStream in = urlConnection.getInputStream();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 数据流转换成文本，最终的网页源代码</span></span><br><span class="line">        String content = StreamTools.readStream(in);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 流转文本的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamTools</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">readStream</span><span class="params">(InputStream in)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">int</span> len = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>]; <span class="comment">// 1 kb</span></span><br><span class="line">        <span class="comment">// 定义一个内存输出流</span></span><br><span class="line">        ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        <span class="keyword">while</span> ( ( len = in.read(buffer) ) != -<span class="number">1</span> )</span><br><span class="line">        {</span><br><span class="line">            baos.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">        }</span><br><span class="line">        in.close();</span><br><span class="line">        String content = <span class="keyword">new</span> String(baos.toByteArray());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="ScrollView"><a href="#ScrollView" class="headerlink" title="ScrollView"></a>ScrollView</h3><p><strong>scrollview 只能有一个子控件</strong></p><p>布局</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ScrollView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">"@+id/tv"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">ScrollView</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>如果要多个子控件，可以将这些子控件包裹在 <code>&lt;LinearLayout&gt;</code> 里面，<code>orientation="vertical"</code></p><h3 id="消息机制的写法"><a href="#消息机制的写法" class="headerlink" title="消息机制的写法"></a>消息机制的写法</h3><h4 id="主线程（UI线程）"><a href="#主线程（UI线程）" class="headerlink" title="主线程（UI线程）"></a>主线程（UI线程）</h4><p><strong>ANR</strong> Application not response 应用无响应</p><p>耗时的操作放到子线程当中</p><p>Android 4.0 之后，谷歌强制要求连接网络不能再主线程进行访问</p><p>只有主线程（UI线程）才可以更新UI</p><h3 id="Handler-使用步骤"><a href="#Handler-使用步骤" class="headerlink" title="Handler 使用步骤"></a>Handler 使用步骤</h3><p>1、在主线程定义一个 Handler</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Handler handler = <span class="keyword">new</span> Handler();</span><br></pre></td></tr></tbody></table></figure><p>2、使用 Handler，重写里面的 handlerMessage 方法</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(android.os.Message msg)</span> </span>{ }</span><br></pre></td></tr></tbody></table></figure><p>3、用 Handler 去子线程发消息</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">handler.sendMessage(msg);</span><br></pre></td></tr></tbody></table></figure><p>4、handleMessage 方法就会执行，更新UI</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line"></span><br><span class="line">    TextView tv = (TextView) findVIewById(R.id.tv);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在主线程中定义一个Handler，类后跟{}表示重写类的方法</span></span><br><span class="line">    <span class="keyword">private</span> Handler handler = <span class="keyword">new</span> Handler()</span><br><span class="line">    {</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 收到消息。这个方法是在主线程里执行的，可以更新 UI</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(android.os.Message msg)</span></span></span><br><span class="line"><span class="function">        </span>{</span><br><span class="line">            String content = (String) msg.obj;</span><br><span class="line">            tv.setText(content);</span><br><span class="line">        };</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">click</span><span class="params">(View v)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="comment">// 创建一个子线程</span></span><br><span class="line">        <span class="keyword">new</span> Thread()</span><br><span class="line">        {</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">            </span>{</span><br><span class="line">                <span class="keyword">try</span></span><br><span class="line">                {</span><br><span class="line">                    <span class="comment">// 设置网址</span></span><br><span class="line">                    String path = <span class="string">"http://www.baidu.com"</span>;</span><br><span class="line">                    URL url = <span class="keyword">new</span> URL(path);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 发送、接收数据的对象</span></span><br><span class="line">                    HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();</span><br><span class="line">                    <span class="comment">// 设置GET请求</span></span><br><span class="line">                    urlConnection.setRequestMethod(<span class="string">"GET"</span>);</span><br><span class="line">                    <span class="comment">// 设置超时时间</span></span><br><span class="line">                    urlConnection.setConnectTimeout(<span class="number">5000</span>);</span><br><span class="line">                    <span class="comment">// 获取服务器返回的状态码</span></span><br><span class="line">                    <span class="keyword">int</span> code = urlConnection.getResponseCode()；</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (code == <span class="number">200</span>)</span><br><span class="line">                    {</span><br><span class="line">                        <span class="comment">// 输入流</span></span><br><span class="line">                        InputStream in = conn.getInputStream();</span><br><span class="line">                        <span class="comment">// 流转字符串</span></span><br><span class="line">                        String content = StreamTools.readStream(in);</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 创建  Message 对象</span></span><br><span class="line">                        Message msg = <span class="keyword">new</span> Message();</span><br><span class="line">                        msg.obj = content;</span><br><span class="line">                        <span class="comment">// Handler 发送msg(包含数据)于更新UI</span></span><br><span class="line">                        handler.sendMessage(msg);</span><br><span class="line">                    } <span class="comment">//if</span></span><br><span class="line"></span><br><span class="line">                } <span class="comment">//try</span></span><br><span class="line"></span><br><span class="line">            }</span><br><span class="line">        } .start(); <span class="comment">//thread run</span></span><br><span class="line"></span><br><span class="line">    } <span class="comment">//function</span></span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="消息机制的原理"><a href="#消息机制的原理" class="headerlink" title="消息机制的原理"></a>消息机制的原理</h3><p>消息队列，有一个Looper不断读取队列，然后 handlerMessage(msg)</p><h3 id="Handler-完善：what"><a href="#Handler-完善：what" class="headerlink" title="Handler 完善：what"></a>Handler 完善：what</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">int</span> REQUESTSUCESS = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">int</span> REQUESTNOTFOUND = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">int</span> REQUESTEXCEPTION = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(android.os.Message msg)</span> </span>{</span><br><span class="line">  <span class="keyword">switch</span> (msg.what) {</span><br><span class="line">    <span class="keyword">case</span> REQUESTSUCESS : <span class="comment">// 代表请求成功</span></span><br><span class="line">      String content = (String) msg.obj;</span><br><span class="line">      tv.setText(content);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> REQUESTNOTFOUND : <span class="comment">// 代表请求失败</span></span><br><span class="line">      Toast.makeText(getApplicationContext(), <span class="string">"请求资源不存在"</span>, <span class="number">0</span>).show();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> REQUESTEXCEPTION : <span class="comment">// 代表产生异常</span></span><br><span class="line">      Toast.makeText(getApplicationContext(), <span class="string">"服务器忙，请稍后再访问"</span>, <span class="number">0</span>).show();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>{</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  <span class="keyword">if</span> (code == <span class="number">200</span>)</span><br><span class="line">  {</span><br><span class="line">    Mseeage msg = <span class="keyword">new</span> Message();</span><br><span class="line">    msg.what = REQUESTSUCESS; <span class="comment">// 代表哪条消息</span></span><br><span class="line">    handler.sendMessage(msg);</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  {</span><br><span class="line">    Mseeage msg = <span class="keyword">new</span> Message();</span><br><span class="line">    msg.what = REQUESTNOTFOUND; <span class="comment">// 代表哪条消息</span></span><br><span class="line">    handler.sendMessage(msg);</span><br><span class="line">  }</span><br><span class="line">} <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">  Mseeage msg = <span class="keyword">new</span> Message();</span><br><span class="line">  msg.what = REQUESTEXCEPTION; <span class="comment">// 代表哪条消息</span></span><br><span class="line">  handler.sendMessage(msg);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>程序运行错误，尽量提示用户：服务器忙，请稍后访问</p><p>而不是：程序运行错误，让用户担忧</p></blockquote><h2 id="图片查看器"><a href="#图片查看器" class="headerlink" title="图片查看器"></a>图片查看器</h2><h3 id="ImageView-显示网络图片"><a href="#ImageView-显示网络图片" class="headerlink" title="ImageView 显示网络图片"></a>ImageView 显示网络图片</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">EditView</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Button</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/iv"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span> /&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Handler handler = <span class="keyword">new</span> Handler()</span><br><span class="line">{</span><br><span class="line">    <span class="comment">//收到消息，设置图片</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(android.os.Message msg)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        bitmap bitmap = (Bitmap) msg.obj;</span><br><span class="line">        iv.setImageBitmap(bitmap);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">click</span><span class="params">(View v)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> Thread()</span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>{</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            {</span><br><span class="line">                <span class="comment">// 使用路径创建 URL 对象</span></span><br><span class="line">                String path = ev.getText().toString().trim();</span><br><span class="line">                URL url = <span class="keyword">new</span> URL(path);</span><br><span class="line">                <span class="comment">// 获取 HttpURLConnection（用户发送或者接收数据）</span></span><br><span class="line">                HttpURLConnection conn = (HttpURLConnection) url.openConnection();</span><br><span class="line">                <span class="comment">// 设置请求的方式、超时时间</span></span><br><span class="line">                conn.setRequestMethond(<span class="string">"GET"</span>);</span><br><span class="line">                conn.setConnectTimeout(<span class="number">5000</span>);</span><br><span class="line">                <span class="keyword">int</span> code = conn.getResponseCode();</span><br><span class="line">                <span class="keyword">if</span> (code == <span class="number">200</span>)</span><br><span class="line">                {</span><br><span class="line">                    <span class="comment">// 获取图片的数据（流 的形式）</span></span><br><span class="line">                    InputStream in = conn.getInputStream();</span><br><span class="line">                    <span class="comment">// 通过位图工厂 获取 bitmap</span></span><br><span class="line">                    Bitmap bitmap = BitmapFactory.decodeStream(in);</span><br><span class="line">                    <span class="comment">// 发送消息用于更新UI</span></span><br><span class="line">                    Message msg = Message.obtain(); <span class="comment">// 使用 Message 的静态方法 可以减少对象的创建</span></span><br><span class="line">                    msg.obj = bitmap;</span><br><span class="line">                    handler.sendMessage(msg);</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                {</span><br><span class="line">                    <span class="comment">// ...</span></span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">catch</span> (Exception e)</span><br><span class="line">            {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    } .start();</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>使用 Message 的静态方法 可以减少对象的创建</strong></p><p><code>Message msg = Message.obtain();</code></p><p>效果等同于：<code>Message msg = new Message()</code> 但是效率快</p><h3 id="图片缓存到本地"><a href="#图片缓存到本地" class="headerlink" title="图片缓存到本地"></a>图片缓存到本地</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (code == <span class="number">2</span>) {</span><br><span class="line">    <span class="comment">//图片的数据流</span></span><br><span class="line">    InputStream in = conn.getInputStream();</span><br><span class="line"></span><br><span class="line">    File file = <span class="keyword">new</span> File(getCacheDir(), <span class="string">"test.png"</span>); <span class="comment">// 谷歌提供的缓存目录</span></span><br><span class="line">    FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">    <span class="keyword">int</span> len = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>]; <span class="comment">// 1kb</span></span><br><span class="line">    <span class="keyword">while</span> ((len = in.read(buffer)) != -<span class="number">1</span>) {</span><br><span class="line">      fos.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">    }</span><br><span class="line">    fos.close();</span><br><span class="line">    in.close();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="使用缓存图片"><a href="#使用缓存图片" class="headerlink" title="使用缓存图片"></a>使用缓存图片</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Thread()</span><br><span class="line">{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        {</span><br><span class="line">            <span class="comment">// 谷歌提供的缓存目录：/data/data/包名/cache/ + test.png</span></span><br><span class="line">            File file = <span class="keyword">new</span> File(getCacheDir(), <span class="string">"test.png"</span>);</span><br><span class="line">            <span class="keyword">if</span> (file.exists() &amp;&amp; file.length() &gt; <span class="number">0</span>)</span><br><span class="line">            {</span><br><span class="line">                <span class="comment">// 使用缓存的图片</span></span><br><span class="line">                Bitmap cacheBitmap = BitmapFactory.decodeFile(file.getAbsolutePath());</span><br><span class="line">                <span class="comment">// 把 cacheBitmap 显示到 ImageView 上</span></span><br><span class="line">                Message msg = Message.obtain();</span><br><span class="line">                msg.obj = cacheBitmap;</span><br><span class="line">                handler.sendMessage(msg);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            {</span><br><span class="line">                <span class="comment">// 第一次访问，联网获取数据</span></span><br><span class="line">                String path = ev.getText().toString().trim();</span><br><span class="line">                URL url = <span class="keyword">new</span> URL(path);</span><br><span class="line">                HttpURLConnection conn = (HttpURLConnection) url.openConnection();</span><br><span class="line">                conn.setRequestMethond(<span class="string">"GET"</span>);</span><br><span class="line">                conn.setConnectTimeout(<span class="number">5000</span>);</span><br><span class="line">                <span class="keyword">int</span> code = conn.getResponseCode();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (code == <span class="number">200</span>)</span><br><span class="line">                {</span><br><span class="line">                    InputStream in = conn.getInputStream();</span><br><span class="line"></span><br><span class="line">                    FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">                    <span class="keyword">int</span> len = -<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>]; <span class="comment">// 1kb</span></span><br><span class="line">                    <span class="keyword">while</span> ((len = in.read(buffer)) != -<span class="number">1</span>)</span><br><span class="line">                    {</span><br><span class="line">                        fos.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">                    }</span><br><span class="line">                    fos.close();</span><br><span class="line">                    in.close();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="对图片进行加密"><a href="#对图片进行加密" class="headerlink" title="对图片进行加密"></a>对图片进行加密</h3><p>Base64加密： <code>Base64.encodeToString(byte[] input, int flags);</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">File file = <span class="keyword">new</span> File(getCacheDir(), Base64.encodeToString(path.getBytes[], Base64.DEFAULT));</span><br></pre></td></tr></tbody></table></figure><p>上述代码针对文件路径进行加密，文件名为URL路径加密后的密文</p><h3 id="cache-和-filedir-区别"><a href="#cache-和-filedir-区别" class="headerlink" title="cache 和 filedir 区别"></a>cache 和 filedir 区别</h3><h4 id="写出文件示例"><a href="#写出文件示例" class="headerlink" title="写出文件示例"></a>写出文件示例</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> {</span><br><span class="line">  <span class="comment">// firledir：/data/data/包名/files/info.txt</span></span><br><span class="line">    FileOutputStream fos = openFileOutput(<span class="string">"info.txt"</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// cache：/data/data/包名/cache/info.txt</span></span><br><span class="line">  File file = <span class="keyword">new</span> File(getCacheDir(), <span class="string">"info.txt"</span>);</span><br><span class="line">  FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line"></span><br><span class="line">    fos.write(<span class="string">"haha"</span>.getByte());</span><br><span class="line">    fos.close();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="Thread-API"><a href="#Thread-API" class="headerlink" title="Thread API"></a>Thread API</h2><h3 id="runOnUiThread-写法"><a href="#runOnUiThread-写法" class="headerlink" title="runOnUiThread 写法"></a>runOnUiThread 写法</h3><p><code>runOnUiThread(Runable action)</code></p><p>不管在什么位置，里面运行的语句都运行在 UI 线程上。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Thread() { <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    runOnUiThread(<span class="keyword">new</span> Runnable() {</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">tv.setText(<span class="string">"HHH"</span>);</span><br><span class="line">        }</span><br><span class="line">    });</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">} }</span><br></pre></td></tr></tbody></table></figure><h3 id="Handler-API"><a href="#Handler-API" class="headerlink" title="Handler API"></a>Handler API</h3><p>延迟线程 <code>new Handler().postDelayed(Runnable r, int delayMillis);</code>  效果等同于 <code>Sleep()</code></p><p>这个方法执行在 UI 线程里，可更新 UI</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>{</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 2秒后执行 run 方法</span></span><br><span class="line">    <span class="keyword">new</span> Handler().postDelayed( <span class="keyword">new</span> Runnable(){</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="comment">// ...code...</span></span><br><span class="line">        }</span><br><span class="line">    }, <span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="定时器-Timer"><a href="#定时器-Timer" class="headerlink" title="定时器 Timer"></a>定时器 Timer</h3><p><code>Timer.schedule(TimerTask task, long delay);</code> 延迟后执行</p><p><code>Timer.schedule(TimerTask task, long delay, long period);</code> 指定的延迟后进行重复的固定延迟执行</p><p>还有其它重载的 schedule 函数</p><p>相当于子线程，<strong>不能用来更新 UI</strong>。可以用 <code>runOnUiThread</code> 来执行 UI 操作</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">click</span><span class="params">()</span> </span>{</span><br><span class="line">  </span><br><span class="line">    Timer timer = <span class="keyword">new</span> Timer();</span><br><span class="line">    TimerTask task = <span class="keyword">new</span> TimerTask() {</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">            <span class="comment">// ... code...</span></span><br><span class="line">          <span class="comment">// 这相当于子线程，不能更新 UI</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    timer.schedule(task, <span class="number">5000</span>);</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>Timer.cancel();</code> <code>Task.cancel();</code>  销毁一个执行</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当 Activity 销毁时 会执行这个方法</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>{</span><br><span class="line">    timer.cancel();</span><br><span class="line">    task.cancel();</span><br><span class="line">    <span class="keyword">super</span>.onDestroy();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="网络基础"><a href="#网络基础" class="headerlink" title="网络基础"></a>网络基础</h2><h3 id="网络图片-SmartImageView"><a href="#网络图片-SmartImageView" class="headerlink" title="网络图片 SmartImageView"></a>网络图片 SmartImageView</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">com.loopj.android.image.SmartImageView</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:id</span>=<span class="string">"@+id/siv"</span></span></span><br><span class="line"><span class="tag"><span class="attr">...</span> /&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">imageUrl = <span class="string">"..."</span>;</span><br><span class="line">view = View.inflate(...);</span><br><span class="line">SmartImageView svi = (SmartImageView) view.findViewById(R.id.siv);</span><br><span class="line">siv.setImageUrl(imageUrl); <span class="comment">// 设置加载网络图片</span></span><br><span class="line">siv.setImageUrl(String imageUrl, Integer fallbackResource); <span class="comment">// 参数2为加载失败的内容 R.drawable.xxx</span></span><br><span class="line">siv.setImageView(String imageUrl, Integer OnCompleteListener completeListener); <span class="comment">// 结束后回调事件</span></span><br><span class="line">siv.setImageView(String imageUrl, Integer fallbackResource, OnCompleteListener completeListener);</span><br><span class="line">siv.setImageView(String imageUrl, Integer fallbackResource, Integer loadingResource, OnCompleteListener completeListener);</span><br></pre></td></tr></tbody></table></figure><h4 id="GitHub-开源项目"><a href="#GitHub-开源项目" class="headerlink" title="GitHub 开源项目"></a>GitHub 开源项目</h4><p>网址：github.com</p><p>导入开源项目：下载 zip 后，把解压出来后的 com 文件夹（源码包）复制到项目的 src 中</p><p>源码：在 com 文件夹内，.java 后缀名的</p><p>布局：用的时候，需要用开源项目的完整包名</p><h3 id="HttpURLConnextion"><a href="#HttpURLConnextion" class="headerlink" title="HttpURLConnextion"></a>HttpURLConnextion</h3><p>联网的基类。</p><p>如果连接要求不是很高，只是用来发发数据的话，可以用下面的开源项目。</p><h4 id="封装-toast-方法"><a href="#封装-toast-方法" class="headerlink" title="封装 toast 方法"></a>封装 toast 方法</h4><p>通用方法，获取数据后立即弹出提示</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showToast</span><span class="params">(<span class="keyword">final</span> String content)</span> </span>{</span><br><span class="line">  runOnUiThread(<span class="function">enw <span class="title">Runnable</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">      Toast.makeText(getApplicationContext(), content, <span class="number">1</span>).show();</span><br><span class="line">    }  </span><br><span class="line">  })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="GET-和-POST-的区别"><a href="#GET-和-POST-的区别" class="headerlink" title="GET 和 POST 的区别"></a>GET 和 POST 的区别</h4><ol><li>URL路径不同：GET 拼接 网址 和 数据</li><li>POST 通过请求体（流）的形式把数据发送给服务器</li><li>POST 比 GET 多了两个头信息：content-length 和 content-type</li></ol><h4 id="使用-POST"><a href="#使用-POST" class="headerlink" title="使用 POST"></a>使用 POST</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">String path = <span class="string">"http://xxx"</span>;</span><br><span class="line">String data = <span class="string">"name="</span> + name + <span class="string">"&amp;pass="</span> + pass;</span><br><span class="line">URL url = <span class="keyword">new</span> URL(path);</span><br><span class="line">HttpURLConnextion conn = (HttpURLConnection) url.openConnection();</span><br><span class="line">conn.setRequestMethond(<span class="string">"POST"</span>);</span><br><span class="line">conn.setConnextTimeout(<span class="number">5000</span>);</span><br><span class="line"><span class="comment">//比GET方式多的两个头信息</span></span><br><span class="line">conn.setRequestProperty(<span class="string">"Content-Type"</span>, <span class="string">"application/x-www-form-url"</span>);</span><br><span class="line">conn.setRequestProperty(<span class="string">"Content-Length"</span>, data.length()+<span class="string">""</span>); <span class="comment">// 参数二要求字符串，故 数字+空字符串</span></span><br><span class="line"><span class="comment">//以流的形式提交数据</span></span><br><span class="line">con.setDoOutput(<span class="keyword">true</span>); <span class="comment">// 设置一个标记，允许输出</span></span><br><span class="line">conn.getOutputStream().write(data.getBytes());</span><br><span class="line"><span class="comment">//判断结果</span></span><br><span class="line"><span class="keyword">int</span> code = conn.getReponseCode();</span><br><span class="line"><span class="keyword">if</span> (code  == <span class="number">200</span>) {</span><br><span class="line">  <span class="comment">// 获取返回的数据流 -&gt; 转化成字符串 -&gt; 操作字符串数据</span></span><br><span class="line">  InputStream inputStream = conn.getInputStream();</span><br><span class="line">  String content = StreamTools.readStream(inputStream);</span><br><span class="line">  showToast(content);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="乱码问题"><a href="#乱码问题" class="headerlink" title="乱码问题"></a>乱码问题</h4><p>Android 编码：UTF-8</p><p>服务器编码：本地服务器的编码，一般为 iso-859-1 （类似 GBK）</p><h5 id="改变服务器编码（Java）："><a href="#改变服务器编码（Java）：" class="headerlink" title="改变服务器编码（Java）："></a>改变服务器编码（Java）：</h5><p>返回中文乱码 <code>System.out.prrintln("ans : " + new String(ans.getBytes("utf-8")));</code> </p><p>发送中文乱码：先以 iso-8859-1 编码，再以 UTF-8 解码</p><pre><code>`System.out.prrintln("ans : " + new String(ans.getBytes("iso-8859-1"), "utf-8"));`</code></pre><h5 id="改变-Android-编码"><a href="#改变-Android-编码" class="headerlink" title="改变 Android 编码"></a>改变 Android 编码</h5><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamTools</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">    <span class="comment">//把输入流转换成字符串</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">readStream</span><span class="params">(InputStream in)</span> <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="comment">//定义一个内存输出流</span></span><br><span class="line">        ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutStream();</span><br><span class="line">        <span class="keyword">int</span> len = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>]; <span class="comment">// 1 kb</span></span><br><span class="line">        <span class="keyword">while</span> ( (len = in.read(buffer)) != -<span class="number">1</span> )</span><br><span class="line">        {</span><br><span class="line">            baos.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">        }</span><br><span class="line">        in.close();</span><br><span class="line">        String content = <span class="keyword">new</span> String(baos.toByteArray(), <span class="string">"gbk"</span>); <span class="comment">// 指定 GBK 编码</span></span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="URLEncode-类"><a href="#URLEncode-类" class="headerlink" title="URLEncode 类"></a><strong>URLEncode 类</strong></h5><p>encode方法： <code>URLEncode.encode(String s, String charseName);</code></p><p><code>path = path + "?username=" + URLEncode(name, "utf-8") + "&amp;password=" + URLEncode(pass, "utf-8");</code></p><h3 id="HttpClient-方式提交数据"><a href="#HttpClient-方式提交数据" class="headerlink" title="HttpClient 方式提交数据"></a>HttpClient 方式提交数据</h3><p>HttpClient 是一个接口，而不是类。（没有人用这个，了解）</p><h4 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Thread()</span><br><span class="line">{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        {</span><br><span class="line">            String path = <span class="string">"http://xxx?id="</span> + URLEncoder.encode(id);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取 httpclient 实例</span></span><br><span class="line">            DefaultHttpClient client = <span class="keyword">new</span> DefaultHttpClient();</span><br><span class="line">            <span class="comment">// 准备 get 请求，定义一个 httpget 实现</span></span><br><span class="line">            HttpGet get = <span class="keyword">new</span> HttpGet(path);</span><br><span class="line">            <span class="comment">// 执行一个 get 请求</span></span><br><span class="line">            HttpResponse response = client.execute(get);</span><br><span class="line">            <span class="comment">// 获取服务器返回的状态码</span></span><br><span class="line">            <span class="keyword">int</span> code = response.getStatusLine().getStatusCode();</span><br><span class="line">            <span class="keyword">if</span> (code == <span class="number">200</span>)</span><br><span class="line">            {</span><br><span class="line">                <span class="comment">// 获取服务器返回的数据，以流的形式</span></span><br><span class="line">                InputStream inputstream = response.getEntity().getContent();</span><br><span class="line">                <span class="comment">// 把流转换成字符串</span></span><br><span class="line">                String content = StreamTools.readStream(inputStream);</span><br><span class="line">                showToast(content);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">} .start();</span><br></pre></td></tr></tbody></table></figure><h4 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h4><p>Entity、BasicNameValuePair 等也都是接口</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">String name = <span class="string">"..."</span>, pwd = <span class="string">"..."</span>;</span><br><span class="line">String path = <span class="string">"..."</span>;</span><br><span class="line">DefaultHttpClient client = <span class="keyword">new</span> DefaulthttpClient();</span><br><span class="line">HttpPost post = <span class="keyword">new</span> HttpPost(path);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 准备 parameters 集合</span></span><br><span class="line">List&lt;NameValuePair&gt; lists = <span class="keyword">new</span> ArrayList&lt;NameValuePair&gt;();</span><br><span class="line"><span class="comment">// 准备 NameValuePair，键值对数据</span></span><br><span class="line">BasicNameValuePair nameValuePair = <span class="keyword">new</span> BasicNameValuePair(<span class="string">"username"</span>, name);</span><br><span class="line">BasicNameValuePair pwdValuePair = <span class="keyword">new</span> BasicNameValuePair(<span class="string">"password"</span>, pwd);</span><br><span class="line"><span class="comment">// 把 name 和 pwd 加入到集合中</span></span><br><span class="line">lists.add(nameValuePair);</span><br><span class="line">lists.add(pwdValuePair);</span><br><span class="line"><span class="comment">// 准备 entity</span></span><br><span class="line">UrlEncodeFormEntity entity = <span class="keyword">new</span> UrlEncodeFormEntity(parameters);</span><br><span class="line"><span class="comment">// 准备 post，以实体 Entity 的形式</span></span><br><span class="line">post.setEntity(entity);</span><br><span class="line"></span><br><span class="line">HttpResponse response = client.execute(post);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> code = response.getStatusLine().getStatusCode();</span><br><span class="line"><span class="keyword">if</span> (code == <span class="number">200</span>) {</span><br><span class="line">InputStream inputStream = response.getEntity().getContent();</span><br><span class="line">String content = StreamTools.readStream(inputStream);</span><br><span class="line">showToast(content);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="asyncHttpClient-开源项目"><a href="#asyncHttpClient-开源项目" class="headerlink" title="asyncHttpClient 开源项目"></a>asyncHttpClient 开源项目</h3><p>GitHub 上下载，把 com 包复制到 src 中。</p><h4 id="GET-1"><a href="#GET-1" class="headerlink" title="GET"></a>GET</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">String path = <span class="string">"..."</span>;</span><br><span class="line">AsyncHttpClient client = <span class="keyword">new</span> AsyncHttpClient();</span><br><span class="line"></span><br><span class="line">client.get(path, <span class="keyword">new</span> AcynchttpResponseHandler()</span><br><span class="line">{</span><br><span class="line">    <span class="comment">// 请求成功的回调方法0</span></span><br><span class="line">    <span class="comment">/*@Override</span></span><br><span class="line"><span class="comment">    public void onSuccess(String response) {</span></span><br><span class="line"><span class="comment">        showToast(response);</span></span><br><span class="line"><span class="comment">    }*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 请求成功的回调方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">onSuccess</span><span class="params">(<span class="keyword">int</span> statusCode, Header[] headers, <span class="keyword">byte</span>[] responseBody)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        showToast(<span class="keyword">new</span> String(responseBody, <span class="string">"gbk"</span>));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 请求失败的回调方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(<span class="keyword">int</span> statusCode, Header[] headers, <span class="keyword">byte</span>[] responseBody, Throwable error)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="comment">// ...code...</span></span><br><span class="line">    }</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><h4 id="POST-1"><a href="#POST-1" class="headerlink" title="POST"></a>POST</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">String path = <span class="string">"..."</span>;</span><br><span class="line">AsyncHttpClient client = <span class="keyword">new</span> AsyncHttpClient();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 准备请求体的内容</span></span><br><span class="line">RequestParams params = <span class="keyword">new</span> RequestParams();</span><br><span class="line">params.put(<span class="string">"username"</span>, <span class="string">"admin"</span>);</span><br><span class="line">params.put(<span class="string">"password"</span>, <span class="string">"123"</span>);</span><br><span class="line">params.put(<span class="string">"email"</span>, <span class="string">"my@email.com"</span>);</span><br><span class="line">params.put(<span class="string">"profile_picture"</span>, <span class="keyword">new</span> FIle(<span class="string">"pic.jpg"</span>)); <span class="comment">// 上传文件</span></span><br><span class="line">params.put(<span class="string">"profile_picture2"</span>, someInputStream); <span class="comment">// 上传输入流</span></span><br><span class="line">params.put(<span class="string">"profile_picture"</span>, <span class="keyword">new</span> ByteArrayInputStream(someBytes)); <span class="comment">// 上传字节集</span></span><br><span class="line"></span><br><span class="line">client.post(path, params, <span class="keyword">new</span> AcynchttpResponseHandler() {</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求成功的回调方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">onSuccess</span><span class="params">(<span class="keyword">int</span> statusCode, Header[] headers, <span class="keyword">byte</span>[] responseBody)</span> </span>{</span><br><span class="line">showToast(<span class="keyword">new</span> String(responseBody, <span class="string">"gbk"</span>));</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求失败的回调方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(<span class="keyword">int</span> statusCode, Header[] headers, <span class="keyword">byte</span>[] responseBody, Throwable error)</span></span>{</span><br><span class="line"><span class="comment">// ...code...</span></span><br><span class="line">}</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><h2 id="多线程下载"><a href="#多线程下载" class="headerlink" title="多线程下载"></a>多线程下载</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>分段下载</p><p>服务器没有限速的话，线程并不是越多越好</p><p>获取一部分文件，返回的状态码是<strong>206</strong>，而不是<strong>200</strong>。</p><h3 id="RandomAccessFile-类"><a href="#RandomAccessFile-类" class="headerlink" title="RandomAccessFile 类"></a>RandomAccessFile 类</h3><p>随机读取和写入文件，使用见下方代码</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>test.java</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String path = <span class="string">"http://download.dcloud.net.cn/HBuilder.9.0.1.windows.zip"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> threadCount = <span class="number">3</span>; <span class="comment">// 线程数</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        {</span><br><span class="line">            URL url = <span class="keyword">new</span> URL(path);</span><br><span class="line">            HttpURLConnection conn = (HttpURLConnection) url.openConnection();</span><br><span class="line">            conn.setRequestMethod(<span class="string">"GET"</span>);</span><br><span class="line">            conn.setConnectTimeout(<span class="number">5000</span>);</span><br><span class="line">            <span class="keyword">int</span> code = conn.getResponseCode();</span><br><span class="line">            <span class="keyword">if</span> (code == <span class="number">200</span>)</span><br><span class="line">            {</span><br><span class="line">                <span class="comment">// 获取服务器文件的大小(B)</span></span><br><span class="line">                <span class="keyword">int</span> length = conn.getContentLength();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 创建一个和下载文件一样大的文件，提前申请空间</span></span><br><span class="line">                RandomAccessFile raf = <span class="keyword">new</span> RandomAccessFile(getFileName(path), <span class="string">"rw"</span>);</span><br><span class="line">                raf.setLength(length);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 算出每个线程下载的大小</span></span><br><span class="line">                <span class="keyword">int</span> blockSize = length / threadCount;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 计算每个线程开始位置和结束位置</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threadCount; i++)</span><br><span class="line">                {</span><br><span class="line">                    <span class="keyword">int</span> startIndex = i * blockSize; <span class="comment">// 开始位置</span></span><br><span class="line">                    <span class="keyword">int</span> endIndex = (i + <span class="number">1</span>) * blockSize - <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span> (i == threadCount - <span class="number">1</span>) <span class="comment">// 最后一个线程</span></span><br><span class="line">                    {</span><br><span class="line">                        endIndex = length - <span class="number">1</span>;</span><br><span class="line">                    }</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 开启线程去下载</span></span><br><span class="line">                    DownLoadThread dlt = <span class="keyword">new</span> DownLoadThread(path, startIndex, endIndex, i);</span><br><span class="line">                    dlt.start();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">catch</span> (Exception e)</span><br><span class="line">        {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getFileName</span><span class="params">(String path)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">int</span> start = path.lastIndexOf(<span class="string">"/"</span>) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> path.substring(start);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>DownLoadThread.java</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义下载文件的线程</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownLoadThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line"><span class="keyword">private</span> String path;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> startIndex;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> endIndex;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> threadId;</span><br><span class="line"></span><br><span class="line">    DownLoadThread(String path, <span class="keyword">int</span> startIndex, <span class="keyword">int</span> endIndex, <span class="keyword">int</span> threadId)</span><br><span class="line">    {</span><br><span class="line">    <span class="keyword">this</span>.path = path;</span><br><span class="line">        <span class="keyword">this</span>.startIndex = startIndex;</span><br><span class="line">        <span class="keyword">this</span>.endIndex = endIndex;</span><br><span class="line">        <span class="keyword">this</span>.threadId = threadId;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        {</span><br><span class="line">            URL url = <span class="keyword">new</span> URL(path);</span><br><span class="line">            HttpURLConnection conn = (HttpURLConnection) url.openConnection();</span><br><span class="line">            conn.setRequestMethod(<span class="string">"GET"</span>);</span><br><span class="line">            conn.setConnectTimeout(<span class="number">5000</span>);</span><br><span class="line">            <span class="comment">// 设置一个请求头Range，获取每个线程下载的开始位置和结束位置</span></span><br><span class="line">            conn.setRequestProperty(<span class="string">"Range"</span>, <span class="string">"bytes="</span> + startIndex + <span class="string">"-"</span> + endIndex);</span><br><span class="line">            <span class="keyword">int</span> code = conn.getResponseCode();</span><br><span class="line">            <span class="comment">// 状态码 206 表示请求部分资源成功（一部分文件）</span></span><br><span class="line">            <span class="keyword">if</span> (code == <span class="number">206</span>)</span><br><span class="line">            {</span><br><span class="line">                <span class="comment">// 创建随机读写文件对象</span></span><br><span class="line">                RandomAccessFile raf = <span class="keyword">new</span> RandomAccessFile(getFileName(path), <span class="string">"rw"</span>);</span><br><span class="line">                <span class="comment">// 每个线程从自己的位置开始写</span></span><br><span class="line">                raf.seek(startIndex);</span><br><span class="line"></span><br><span class="line">                InputStream in = conn.getInputStream();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span> len = -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                <span class="keyword">while</span> ((len = in.read()) != -<span class="number">1</span>)</span><br><span class="line">                {</span><br><span class="line">                    raf.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">                }</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">"下载完毕"</span>);</span><br><span class="line">                raf.close();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">catch</span> (Exception e)</span><br><span class="line">        {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取文件名</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getFileName</span><span class="params">(String path)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">int</span> start = path.lastIndexOf(<span class="string">"/"</span>)+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> path.substring(start);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="断点续传"><a href="#断点续传" class="headerlink" title="断点续传"></a>断点续传</h3><p>下载过程中保存每个线程的下载位置到文件</p><p>保存的间隔越短（缓冲区越小）则越卡顿</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正在运行的线程数</span></span><br><span class="line">runningThread = threadCount;</span><br></pre></td></tr></tbody></table></figure><p>下载类：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*...code...*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取上次断开的位置继续下载</span></span><br><span class="line">File file = <span class="keyword">new</span> File(threadId + <span class="string">".txt"</span>);</span><br><span class="line"><span class="keyword">if</span> (file.exists() &amp;&amp; file.length() &gt; <span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line">    FileInputStream fis = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">    BufferedReader bufr = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStream(fis));</span><br><span class="line">    String lastPositions = bufr.readLine(); <span class="comment">// 读出来的是上次下载的位置</span></span><br><span class="line">    <span class="keyword">int</span> lastPosition = Integer.parseInt(lastPositions);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 改变一下 startIndex 的位置</span></span><br><span class="line">    startIndex = lastPosition;</span><br><span class="line">    fis.close();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (code == <span class="number">206</span>)</span><br><span class="line">{</span><br><span class="line">    <span class="comment">// 创建随机读写文件对象</span></span><br><span class="line">    RandomAccessFile raf = <span class="keyword">new</span> RandomAccessFile(<span class="string">"file.exe"</span>, <span class="string">"rw"</span>);</span><br><span class="line">    <span class="comment">// 每个线程从自己的位置开始写</span></span><br><span class="line">    raf.seek(startIndex);</span><br><span class="line"></span><br><span class="line">    InputStream in = conn.getInputStream();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> len = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span> * <span class="number">1024</span>]; <span class="comment">// 缓冲区每 1M 保存一次文件</span></span><br><span class="line">    <span class="keyword">int</span> total = <span class="number">0</span>; <span class="comment">// 当前线程已下载的大小</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ((len = in.read) != -<span class="number">1</span>)</span><br><span class="line">    {</span><br><span class="line">        raf.write(buffer, <span class="number">0</span>, len);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 保存下载位置到文件</span></span><br><span class="line">        total += len;</span><br><span class="line">        <span class="keyword">int</span> currentThreadPosition = startIndex + total;</span><br><span class="line">        RandomAccessFile raff = <span class="keyword">new</span> RandomAccessFile(threadId + <span class="string">".txt"</span>, <span class="string">"rwd"</span>); <span class="comment">// rwd 同步写入到底层文件中</span></span><br><span class="line">        raff.write(String.valueOf(currentThreadPosition).getBytes());</span><br><span class="line">        raff.close();</span><br><span class="line">    }</span><br><span class="line">    raf.close();</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"下载完毕"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下载完毕后判断并删除保存下载位置的文件</span></span><br><span class="line">    <span class="keyword">synchronized</span> (DownLoadThread.class) <span class="comment">// 加锁？</span></span><br><span class="line">    {</span><br><span class="line">        runningThread--;</span><br><span class="line">        <span class="keyword">if</span> (runningThread == <span class="number">0</span>) <span class="comment">// 全部下载完毕</span></span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threadCount; i++)</span><br><span class="line">            {</span><br><span class="line">                File file = <span class="keyword">new</span> File(threadId + <span class="string">".txt"</span>)</span><br><span class="line">                file.delete(); <span class="comment">// 删除文件</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="安卓动态添加进度条"><a href="#安卓动态添加进度条" class="headerlink" title="安卓动态添加进度条"></a>安卓动态添加进度条</h3><p>进度条布局</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">progressBar</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/progressBar1"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">style</span>=<span class="string">"?android:attr/progressBarStyleHorizontal</span></span></span><br><span class="line"><span class="tag"><span class="string">    android:layout_width="</span><span class="attr">match_parent</span>"</span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span> /&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>动态添加进度条</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">List&lt;ProgressBar&gt; pbLists = <span class="keyword">new</span> ArrayList&lt;ProgressBar&gt;(); <span class="comment">// 进度条集合，用来取对象</span></span><br><span class="line">barLayout = (LinearLayout) findViewById(R.id.barLayout); <span class="comment">// 进度条线性布局</span></span><br><span class="line"></span><br><span class="line">barLayout.removeAllViews(); <span class="comment">// 先移除上次的进度条</span></span><br><span class="line">pbLists.clear(); <span class="comment">// 清除上次的进度条实例</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加线程数量的进度条</span></span><br><span class="line"><span class="keyword">int</span> threadCount = Integer.parseInt(threadCount);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threadCount; i++)</span><br><span class="line">{</span><br><span class="line">    View pbView = View.inflate(getApplicationContext(), R.id.barItem, <span class="keyword">null</span>)</span><br><span class="line">    pbLists.add(pbView);</span><br><span class="line">    barLayout.addView(pbView);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="安卓多线程下载"><a href="#安卓多线程下载" class="headerlink" title="安卓多线程下载"></a>安卓多线程下载</h3><p><strong>与进度相关的控件都可以在子线程更新UI</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> PbMax; <span class="comment">// 线程下载的最大值</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> pbPos; <span class="comment">// 当前线程的进度</span></span><br><span class="line">pbMax = endIndex - startIndex;</span><br><span class="line">pbPos = <span class="number">0</span>; <span class="comment">// 进度条当前进度，如果中断过，则要从上次的位置开始</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 每个线程设置对应进度条的进度</span></span><br><span class="line"><span class="keyword">if</span> (code == <span class="number">206</span>)</span><br><span class="line">{</span><br><span class="line">    <span class="comment">// 创建随机读写文件对象</span></span><br><span class="line">    RandomAccessFile raf = <span class="keyword">new</span> RandomAccessFile(getFileName(path), <span class="string">"rw"</span>);</span><br><span class="line">    <span class="comment">// 每个线程从自己的位置开始写</span></span><br><span class="line">    raf.seek(startIndex);</span><br><span class="line"></span><br><span class="line">    InputStream in = conn.getInputStream();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> len = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">while</span> ((len = in.read()) != -<span class="number">1</span>)</span><br><span class="line">    {</span><br><span class="line">        raf.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"下载完毕"</span>);</span><br><span class="line">    raf.close();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置进度条进度（注：进度条可以直接在子线程中更新UI）</span></span><br><span class="line">    pbLists.get(threadId).setMax(pbMax);</span><br><span class="line">    pbLists.get(threadId).setProgress(pbPos);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="多线程下载开源项目"><a href="#多线程下载开源项目" class="headerlink" title="多线程下载开源项目"></a>多线程下载开源项目</h3><p><strong>xUtils</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 点击按钮开始下载</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">click</span><span class="params">(View v)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    String path = <span class="string">"..."</span>;</span><br><span class="line">    HttpUtils http = <span class="keyword">new</span> HttpUtils();</span><br><span class="line">    <span class="comment">//下载路径, 目标路径, 是否支持断点续传, 回调);</span></span><br><span class="line">    http.download(path, <span class="string">"/mnt/sdcard/haha.exe"</span>, <span class="keyword">true</span>, <span class="keyword">new</span> RequstCallBack&lt;File&gt;()</span><br><span class="line">    {</span><br><span class="line">        <span class="comment">// 下载成功</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSucess</span><span class="params">(RequestInfo&lt;File&gt; responseInfo)</span></span></span><br><span class="line"><span class="function">        </span>{</span><br><span class="line">            Toast.makeText(getApplicationContext(), <span class="string">"下载成功"</span>, <span class="number">1</span>).show();</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 下载失败</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(HttpException error, String msg)</span></span></span><br><span class="line"><span class="function">        </span>{</span><br><span class="line">            ;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 下载进度</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoading</span><span class="params">(<span class="keyword">long</span> total, <span class="keyword">long</span> current, <span class="keyword">boolean</span> isUploading)</span></span></span><br><span class="line"><span class="function">        </span>{</span><br><span class="line">            pb.setMax((<span class="keyword">int</span>) total);</span><br><span class="line">            pb.setProgress((<span class="keyword">int</span>) current);</span><br><span class="line">        }</span><br><span class="line">    })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="Android-四大组件"><a href="#Android-四大组件" class="headerlink" title="Android 四大组件"></a>Android 四大组件</h1><h2 id="Activity"><a href="#Activity" class="headerlink" title="Activity"></a>Activity</h2><h3 id="创建新的-Activity"><a href="#创建新的-Activity" class="headerlink" title="创建新的 Activity"></a>创建新的 Activity</h3><p>创建新的 Class 继承 Activity</p><p>新的 Activity</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        <span class="comment">// 加载布局</span></span><br><span class="line">        setContentView(R.layout.activity_test)</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>清单文件 AndroidManifest</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 代表当前应用 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 两个 Activity 入口 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">application</span> <span class="attr">...</span> &gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">activity</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">"com.包名.MainActivity"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">"第一个页面"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"@drawable/icon1"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- main 主入口 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置入口 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">"com.包名.TestActivity"</span> /&gt;</span></span><br><span class="line">        android:label="第二个页面"</span><br><span class="line">        android:icon="@drawable/icon2" /&gt;</span><br><span class="line">        <span class="comment">&lt;!-- main 主入口 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 第二个入口（要 .MAIN 和 .LAUNCHER） --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 如果是 .category.DEFAULT 则不会有入口 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li>Android 四大组件都要在清单文件里面配置</li><li>如果要多个入口（启动图标），则 <code>intent-filter</code> 必须要 .MAIN 和 .LAUNCHER。（一般就一个启动图标）</li><li>Activity 下的 label 和 icon 属性可以和 Application 节点的属性不一样默认使用 Application 节点下的属性。</li></ul><h4 id="隐式意图"><a href="#隐式意图" class="headerlink" title="隐式意图"></a>隐式意图</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建 意图对象</span></span><br><span class="line">Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line"><span class="comment">// 设置 跳转的动作</span></span><br><span class="line">intent.setAction(<span class="string">"com.包名.活动名"</span>);</span><br><span class="line"><span class="comment">// 设置 category</span></span><br><span class="line">intent.addCategory(<span class="string">"android.intent.category.DEFALT"</span>);</span><br><span class="line"><span class="comment">// 开启 Activity</span></span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></tbody></table></figure><h4 id="意图过滤器"><a href="#意图过滤器" class="headerlink" title="意图过滤器"></a>意图过滤器</h4><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 传递的数据 、 约束 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">data</span> <span class="attr">android:mimetype</span>=<span class="string">"audio/mp4"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:scheme</span>=<span class="string">"wxy"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>可以配置多个 filter，只要匹配到完整的一个（setData 和 .setType）就行<br>mimetype 和 scheme 都可以不写</p><p><strong>mimetype</strong><br>Java 代码中设置 Date 也为 wxy（只要和约束相同就行）<br><code>intent.setData(Uri.parse("wxy:" + 110));</code><br>不设置约束，其实效果相同。</p><p><strong>scheme</strong><br><strong>设置 setType 会自动把 setData 方法的数据清除。</strong><br><strong>反之亦然……</strong><br><code>intent.setType("audio/mp4");</code><br>谷歌自定义了很多数据类型，开发者也可以用自己定义的例如<code>aa/bb</code>。</p><p>两个要一起使用时，可以用下面的方法：<br><code>intent.setDataAndType(data, type);</code><br>例如：<code>intent.setDataAndType(Uri.parse("wxy:" + 110), "audio/mp4");</code></p><p>####显式意图</p><p>通过制定具体的包名和类名来切换窗口</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">click</span><span class="params">(View v)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">    <span class="comment">//参数：packageName 包名, className 类名</span></span><br><span class="line">    intent.setClassName(<span class="string">"com.wxy.hello"</span>, <span class="string">"com.wxy.hello.HelloActivity2"</span>);</span><br><span class="line">    startActivity(intent);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 更简洁的 切换窗口</span></span><br><span class="line">startActivity(<span class="keyword">new</span> Intent(<span class="keyword">this</span>, HelloActivity.class));</span><br></pre></td></tr></tbody></table></figure><p>开启自己应用的界面用显示意图，开启其他应用用隐式意图。</p><p>显式意图更加安全一些（仅自己能调用）</p><p>####传递数据<br>切换 Activity 时传递数据</p><p>获取传递过来的数据 <code>Uri getIntent();</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Uri data = intent.getData(); <span class="comment">// 例如 wxy:110</span></span><br></pre></td></tr></tbody></table></figure><p><code>Intent.putExtra(name, value);</code> value 支持Android八大类型的数据</p><p><strong>存入数据</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, SecondActivity.class);</span><br><span class="line">intent.putExtra(<span class="string">"name"</span>, <span class="string">"hhh"</span>);</span><br><span class="line">intent.putExtra(<span class="string">"sex"</span>, <span class="number">0</span>);</span><br></pre></td></tr></tbody></table></figure><p><strong>取出数据</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = getIntent();            <span class="comment">// 获取开启此Activity放入意图对象</span></span><br><span class="line">String name = intent.getStringExtra(<span class="string">"name"</span>);</span><br><span class="line"><span class="keyword">int</span> sex = intent.getIntExtra(<span class="string">"sex"</span>, <span class="number">0</span>); <span class="comment">// 参数二为默认值，可省</span></span><br><span class="line">textView.setTex(name);</span><br></pre></td></tr></tbody></table></figure><p>####人品计算器</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span>[] bytes = NULL;</span><br><span class="line"><span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (sex == <span class="number">1</span>) bytes = name.getBytes(<span class="string">"GBK"</span>);</span><br><span class="line"><span class="keyword">else</span> bytes = name.getBytes(<span class="string">"UTF-8"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">byte</span> b : bytes) {     <span class="comment">// 有多少个1</span></span><br><span class="line">    <span class="keyword">int</span> number = b &amp; <span class="number">0xff</span>; <span class="comment">// 1111 1111</span></span><br><span class="line">    total += number;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> score = Math.abs(total) % <span class="number">100</span>;</span><br><span class="line"><span class="keyword">if</span> (score &gt; <span class="number">90</span>) {</span><br><span class="line">    toast(<span class="string">"您的人品爆棚！"</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>#####RadioGroup</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">RadioGroup</span> <span class="attr">...</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Radio</span> <span class="attr">...</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Radio</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:checked</span>=<span class="string">"checked"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">RadioGroup</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RadioGroup rg = (RadioGroup) findViewByUd(R.id.rg);</span><br><span class="line"><span class="keyword">int</span> res = rg.getCheckedRadioButtonId(); <span class="comment">// 获取选中的单选框ID(可不选)</span></span><br><span class="line"><span class="keyword">if</span> (res == NULL) { ; }</span><br></pre></td></tr></tbody></table></figure><h3 id="短信发送器"><a href="#短信发送器" class="headerlink" title="短信发送器"></a>短信发送器</h3><p>制作一个能够发送短信模板的小应用。</p><p>####简单的 ListView</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String msgs[] = {<span class="string">"短信1"</span>, <span class="string">"短信2"</span>, <span class="string">"短信3"</span>, ...};</span><br><span class="line">ListView lv = (ListView) findViewById(R.id.lv);</span><br><span class="line">ArrayAdapter&lt;String&gt; adapter = <span class="keyword">new</span> ArrayAdapter&lt;String&gt;(<span class="keyword">this</span>, R.layout.item, msg); <span class="comment">// layout/item 里面就只有一个 TextView</span></span><br><span class="line">lv.setAdapter(adapter);</span><br></pre></td></tr></tbody></table></figure><p>####设置 ListView 事件</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给 ListView 设置事件</span></span><br><span class="line">lv.setonItemClickListener(<span class="keyword">new</span> onItemClickListener(){</span><br><span class="line">    <span class="comment">// 点击列表发送短信</span></span><br><span class="line">    <span class="comment">// 参数一：&lt;?&gt;ListView；参数二：每个条目（这里是TextView）</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemClickListener</span><span class="params">(AdapterView&lt;?&gt; parent, View view, <span class="keyword">int</span> position, <span class="keyword">long</span> id)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="comment">// 条目内容</span></span><br><span class="line">        String content = msgs[position];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 跳转到短信发送页面</span></span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">        intent.setAction(<span class="string">"android.intent.action.SEND"</span>);</span><br><span class="line">        intent.addCategory(<span class="string">"android.intent.category.DEFAULT"</span>);</span><br><span class="line">        intent.setType(<span class="string">"text/plain"</span>);</span><br><span class="line">        intent.putExtra(<span class="string">"sms_body"</span>, content); <span class="comment">// 设置短信内容</span></span><br><span class="line">        startActivity(intent);</span><br><span class="line">    }</span><br><span class="line">    });</span><br></pre></td></tr></tbody></table></figure><p>####请求码和结果码</p><p>自定义短信模板页面并插入</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 跳转到发送短信模板页面</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addTemplate</span><span class="params">(View v)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">  Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, SmsActivity.class);</span><br><span class="line">  startActivityForResult(intent, <span class="number">1</span>); <span class="comment">// 请求码 = 2</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当开启的 Activity 页面关闭的时候，调用这个方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">  <span class="keyword">if</span> (requestCode == <span class="number">1</span>) <span class="comment">// 请求码</span></span><br><span class="line">  {</span><br><span class="line">    ; <span class="comment">// 代表请求的是哪个页面的数据</span></span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (resultCode == <span class="number">10</span>) <span class="comment">// 结果码</span></span><br><span class="line">  {</span><br><span class="line">    <span class="comment">// 说明数据是从短信模板页面返回的</span></span><br><span class="line">    String msg = data.getStringExtra(<span class="string">"msg"</span>);</span><br><span class="line"></span><br><span class="line">    edit_num.setText(<span class="string">"msg"</span>);</span><br><span class="line">  }</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">super</span>.onActivityResult(requestCode, resultCode, data);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>选择模板页面</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">lv.setOnItemClickListener(newOnItemClickListener(){</span><br><span class="line">  <span class="meta">@Overridepublic</span> <span class="function"><span class="keyword">void</span> <span class="title">onItemClickListener</span><span class="params">(AdapterView&lt;?&gt; parent, View view, <span class="keyword">int</span> position, <span class="keyword">long</span> id)</span></span></span><br><span class="line"><span class="function">  </span>{</span><br><span class="line">    String msg = msgs.get(position).getPhone();</span><br><span class="line"></span><br><span class="line">    Intent intent - <span class="keyword">new</span> Intent();</span><br><span class="line">    intent.putExtra(<span class="string">"msg"</span>, msg);</span><br><span class="line">    setResult(<span class="number">10</span>, intent); <span class="comment">// 返回的结果码 = 10</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭当前页面</span></span><br><span class="line">    finish();</span><br><span class="line">  }</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>####发送短信</p><p><code>SmsManager 类</code><br>添加权限 <code>android.permission.SEND_SMS</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String number, content;</span><br><span class="line">SmsManager sm = SmsManager.getDefault(); <span class="comment">// 静态方法</span></span><br><span class="line"><span class="comment">// 参数二：服务中心号码，NULL 则使用默认；参数四：广播(成功失败的结果)</span></span><br><span class="line">sm.sendTextMessage(number, <span class="keyword">null</span>, content, NULL);</span><br></pre></td></tr></tbody></table></figure><blockquote><p>注：这个API有限制，英文70字符，中文140。太多不会发送，需要划分成多个片段。</p></blockquote><p>###Activity 生命周期</p><p>onCreate<br>​    onResuart<br>​    onStart 变成可视界面时<br>​        onResume 允许获取焦点（按钮能点击等）<br>​        onPause  不允许获取焦点<br>​    onStop  界面不可见时<br>onDestroy</p><p>打开其他 Activity：onPause onStart<br>返回当前 Activity：onRestart onStart onResume</p><p>####设置横屏<br>横竖屏切换时，会Destroy再Create。<br>竖屏：portrait<br>横屏：landscape<br><code>&lt;activity android:screenOrientation="portrait"&gt;</code></p><p>###任务栈</p><p>任务栈和 Activity 有关</p><p>进栈：打开一个 Activity<br>出栈：关闭一个 Activity<br>操作的 Activity 永远是栈顶的 </p><p>任务栈是用来维护操作体验的</p><p>应用程序退出完是任务栈清空了</p><p>一般情况一个应用程序对应一个任务栈</p><p>###Activity 的四种启动模式</p><p><code>&lt;activity android:launchMode="stander" ... &gt;</code></p><ul><li>stander        每创建一次 Activity 就一个任务栈</li><li>singletop      若Activity在栈顶则复用原Activity，否则创建Activity</li><li>singletask     一个 Activity 单一任务栈。浏览器。</li><li>singleinstance 有专属的任务栈，仅一个实例，不会重复创建。任务栈和任务栈之间再形成顺序。来电页面。</li></ul><h2 id="广播"><a href="#广播" class="headerlink" title="广播"></a>广播</h2><h3 id="广播接收"><a href="#广播接收" class="headerlink" title="广播接收"></a>广播接收</h3><p>类名一般是 xxReceiver 格式<br>退出程序后，进程还在，广播接受器还能收到广播</p><h4 id="IP拨号器"><a href="#IP拨号器" class="headerlink" title="IP拨号器"></a>IP拨号器</h4><p>（加特定前缀能省话费）</p><p>权限：<code>android.permission.OUTGONG_CALL</code></p><p>清单文件配置</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">application</span>&gt;</span></span><br><span class="line">......</span><br><span class="line"><span class="tag">&lt;<span class="name">receiver</span> <span class="attr">android:name</span>=<span class="string">"com.包名.OutGoingCallReceiver"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 要接受的广播频道 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.NEW_OUTGONG_CALL"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>定义广播接受者（java类）<br>若没有界面的话，可以不用编辑 MainActivity</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.content.BroadcastReceiver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OutGoingCallReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当进行外拨电话的时候调用</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceiver</span><span class="params">(Context context, Intent intent)</span> </span>{</span><br><span class="line"><span class="comment">// 使用参数里的上下文来读取设置</span></span><br><span class="line">SharedPreferences sp = context.getSharedPreferences(<span class="string">"config"</span>, <span class="number">0</span>);</span><br><span class="line">String IPnumber = sp.getString(<span class="string">"IPnumber"</span>, <span class="string">""</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取当前拨打的电话号码</span></span><br><span class="line">String number = getResultData();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断当前号码是否是长途，在当前的号码前面加上前缀</span></span><br><span class="line"><span class="keyword">if</span> (currentNumber.startsWith(<span class="string">"0"</span>)) {</span><br><span class="line">setResultData(IPnumber + number); <span class="comment">// 一般是能变更的前缀</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>主函数 设置用户手动输入的 IPnumber</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">click</span><span class="params">(View v)</span> </span>{</span><br><span class="line">EditText et = (EditText) findViewById(R.id.et);</span><br><span class="line">String IPnumber = et.getText().toString().trim(); <span class="comment">// 用户编辑的前缀好吗</span></span><br><span class="line">SharedPreferences sp = getSharedPreferences(<span class="string">"cinfig"</span>, <span class="number">0</span>);</span><br><span class="line">sp.edit().putString(<span class="string">"IPnumber"</span>, IPnumber).commit();</span><br><span class="line">Toast.makeText(getApplicationContext, <span class="string">"保存成功"</span>, <span class="number">1</span>).show();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="SD卡状态的监听"><a href="#SD卡状态的监听" class="headerlink" title="SD卡状态的监听"></a>SD卡状态的监听</h4><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">receiver</span> <span class="attr">android:name</span>=<span class="string">"包名.AdcardStateReceiver"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MEDIA_MOUNTED"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MEDIA_UNMOUNTED"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 必须指定一个叫 file 的约束，否则不生效 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">data</span> <span class="attr">android:scheme</span>=<span class="string">"file"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>小细节：SD卡里面存的数据类型是 <code>file</code>，所以需要 file 约束。另一个要配置data的广播事件是 安装应用</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.content.BroadcastReceiver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span>  <span class="title">SdcardStateReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>{</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>{</span><br><span class="line"><span class="comment">//  获取当前广播的事件类型</span></span><br><span class="line">Strning action = intent.getAction();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="string">"android.intent.action.MEDIA_MOUNTED"</span>.equals(action)) {</span><br><span class="line"><span class="comment">// SD卡挂在</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"android.intent-filter.action.MEDIA_UNMOUNTED"</span>.equals(action)) {</span><br><span class="line"><span class="comment">// SD卡卸载</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="短信监听器"><a href="#短信监听器" class="headerlink" title="短信监听器"></a>短信监听器</h4><p>权限：<code>android.permission.RECEIVE_SMS</code></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.provider.Telephony.SMS_RECEIVED"</span> /&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>{</span><br><span class="line"><span class="comment">// 获取发送的号码和内容</span></span><br><span class="line">Object[] objects = (Objectp[]) intent.getExtras().get(<span class="string">"pdus"</span>);</span><br><span class="line"><span class="keyword">for</span> (Object obj : objects) {</span><br><span class="line"><span class="comment">// 获取 smsmessage 实例：这是调用静态方法而不是 new 出来的</span></span><br><span class="line">SmsMessage smsMessage = SmsMessage.createFromPdu((<span class="keyword">byte</span>[]) boj);</span><br><span class="line"><span class="comment">// 获取短信内容</span></span><br><span class="line">String messageBody = smsMessage.getMessageBody();</span><br><span class="line">String address = smsMessage.getOriginatingAddress();</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="卸载安装实例"><a href="#卸载安装实例" class="headerlink" title="卸载安装实例"></a>卸载安装实例</h4><p>这个也要配置 data</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.PACKAGE_INSTALL"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.PACKAGE_ADDED"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.PACKAGE_REMOVED"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">data</span> <span class="attr">android.scheme</span>=<span class="string">"package"</span> /&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>{</span><br><span class="line">String action = intent.getAction();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="string">"android.intent.action.PACKAGE_INSTALL"</span>.equals(action)) {</span><br><span class="line"><span class="comment">// 应用安装（预留的字符串，并没有什么用）</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"android.intent.action.PACKAGE_ADDED"</span>.equals(action)) {</span><br><span class="line"><span class="comment">// 应用安装了</span></span><br><span class="line">String packageName = intent.getData(); <span class="comment">// 应用包名</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"android.intent.action.PACKAGE_REMOVED"</span>.equals(action)) {</span><br><span class="line"><span class="comment">// 应用卸载了</span></span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="手机重启实例"><a href="#手机重启实例" class="headerlink" title="手机重启实例"></a>手机重启实例</h4><p>不能在广播接收者里面开启 activity<br>需要添加一个任务栈的标记</p><p>权限：<code>anroid.permission.RECEIVE_BOOT_COMPLETED</code></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.BOOT_COMPLETED"</span> /&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BootReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当手机重新启动的时候调用</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>{</span><br><span class="line"><span class="comment">// 在这个方法里面开启 activity</span></span><br><span class="line">Intent intent2 = <span class="keyword">new</span> Intent(context, MainActivity.class);</span><br><span class="line">intent2.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开启 activity</span></span><br><span class="line">context.startActivity(intent2);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Activity 里屏蔽返回键</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBackPressed</span><span class="params">()</span> </span>{</span><br><span class="line">; <span class="comment">// 覆盖父类返回方法</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="广播类型"><a href="#广播类型" class="headerlink" title="广播类型"></a>广播类型</h3><p>有序广播：按照一定的优先级进行接收，在接收的过程中可以被修改或者终止</p><p>无序广播：不可以被修改或者终止</p><p>特殊广播：不能在清单文件中注册，需要动态注册</p><h4 id="无序广播"><a href="#无序广播" class="headerlink" title="无序广播"></a>无序广播</h4><p>发送无序广播</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">click</span><span class="params">(View v)</span> </span>{</span><br><span class="line">Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line"></span><br><span class="line">intent.setAction(<span class="string">"com.HHH"</span>);</span><br><span class="line"></span><br><span class="line">intent.putExtra(<span class="string">"name"</span>, <span class="string">"HHH"</span>);</span><br><span class="line"></span><br><span class="line">sendBroadcast(intent); <span class="comment">// 发送无序广播</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>接收无序广播</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"com.HHH"</span> /&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当接收到自定义广播</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>{</span><br><span class="line">String context = intent.getStringExtra(<span class="string">"name"</span>); <span class="comment">// 广播内容</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="有序广播"><a href="#有序广播" class="headerlink" title="有序广播"></a>有序广播</h4><p>发送有序广播</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数：Intent, 权限，最终的receiver，scheduler，初始码，初始化数据，额外的数据</span></span><br><span class="line">sendOrderedBroadcast(intent, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="number">1</span>, <span class="string">"这是广播"</span>, <span class="keyword">null</span>);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag"><span class="attr">...</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activity</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置广播接受优先级 范围 -1000~1000 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">receiver</span> <span class="attr">android:name</span>=<span class="string">"包名.FirstReceiver"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">intent-filter</span> <span class="attr">android:priority</span>=<span class="string">"1000"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"myReceiver"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">receiver</span> <span class="attr">android:name</span>=<span class="string">"包名.SecondReceiver"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">intent-filter</span> <span class="attr">android:priority</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"myReceiver"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">receiver</span> <span class="attr">android:name</span>=<span class="string">"包名.LastReceiver"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">intent-filter</span> <span class="attr">android:priority</span>=<span class="string">"-200"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"myReceiver"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>按顺序接收广播</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>{</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>{</span><br><span class="line">String content = getResultData();</span><br><span class="line">setResultData(<span class="string">"哈哈哈"</span>); <span class="comment">// 修改广播内容，后面接收到的就是这个内容</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>{</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>{</span><br><span class="line">abortBroadcast(); <span class="comment">// 直接终止广播，下面接收不到了</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LastReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>{</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>{</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="特殊广播接收者"><a href="#特殊广播接收者" class="headerlink" title="特殊广播接收者"></a>特殊广播接收者</h4><p>操作特别频繁的广播事件，比如 屏幕的锁屏和解锁、电池电量的变化，这种事件的广播在清单文件里面是<strong>注册无效</strong>的，可以动态注册广播</p><p>注册广播接受者的两种方式：</p><ol><li>在清单文件通过 receiver tag 节点</li><li>动态注册：代码方式（即清单方式注册无效，并且无需注册）</li></ol><p>类似于<code>android.intent.action.SCREEN_ON</code> 或 <code>android.intent.action.SCREEN_OFF</code> 这种，注册是无效的</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态的去注册广播接收者，设为全局方便销毁</span></span><br><span class="line">ScreenReceiver screenreceiver = <span class="keyword">new</span> ScreenReceiver();</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>{</span><br><span class="line"><span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 Intent-Filter 对象</span></span><br><span class="line">IntentFilter filter = <span class="keyword">new</span> IntentFilter();</span><br><span class="line"><span class="comment">// 动态注册广播（可以添加多个）</span></span><br><span class="line">filter.addAction(<span class="string">"android.intent.action.SCREEN_OFF"</span>);</span><br><span class="line">filter.addAction(<span class="string">"android.intent.action.SCREEN_ON"</span>);</span><br><span class="line"></span><br><span class="line">registerReceiver(screenReceiver, filter);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestory</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="comment">// activity 销毁时要取消注册广播</span></span><br><span class="line"></span><br><span class="line">unregisterReceiver(screenreceiver);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScreenReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>{</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>{</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="样式和主题"><a href="#样式和主题" class="headerlink" title="样式和主题"></a>样式和主题</h3><h4 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h4><p>样式一般作用在控件上</p><p>style 文件</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"myStyle"</span>&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:layout_height"</span>&gt;</span>match_parent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textSize"</span>&gt;</span>20SP<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textColor"</span>&gt;</span>#ff000<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>layout 文件</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag"><span class="attr">style</span>=<span class="string">"@style/mystyle"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:text</span>=<span class="string">"哈哈哈"</span> /&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h4><p>样式一般作用在 Activity 或 Application 节点下</p><p>style 文件</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"myStyle"</span>&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:background"</span>&gt;</span>#ff0000<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>manifest 文件</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:theme</span>=<span class="string">"@style/mystyle"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><p>两者定义的方式是一样的。</p><p>样式的作用范围比较窄，主题比较大。</p><p>不一定要在 style.xml 上定义，其他类似 txt 上也行。</p><h4 id="Android-国际化"><a href="#Android-国际化" class="headerlink" title="Android 国际化"></a>Android 国际化</h4><p>国际化：i18n</p><p>类似于<code>android:text="你好世界"</code>这种硬编码的字符串，一般都是放到<code>string.xml</code>里面</p><p>多国语言文件：res目录下的<strong>values-语言代码</strong>文件夹里面的<code>string.xml</code> （固定写法）<br>语言代码：en英语，zh中文简体，zh-Hant中文繁体……<br>例如：<code>/res/values-zh/string.xml</code> 表示中文资源</p><h3 id="对话框"><a href="#对话框" class="headerlink" title="对话框"></a>对话框</h3><p>常见对话框</p><ul><li>Toast</li><li>普通对话框</li><li>单选对话框</li><li>多选对话框</li><li>进度条对话框</li></ul><h4 id="普通对话框"><a href="#普通对话框" class="headerlink" title="普通对话框"></a>普通对话框</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过 builder 构建器来构造</span></span><br><span class="line">AlertDialog.Builder builder = <span class="keyword">new</span> Builder(<span class="keyword">this</span>); <span class="comment">// 不能用 getApplicationContext()</span></span><br><span class="line">builder.setTitle(<span class="string">"提示"</span>);</span><br><span class="line">builder.setMessage(<span class="string">"这里是提示内容"</span>);</span><br><span class="line">builder.setPositiveButton(<span class="string">"确定"</span>, <span class="keyword">new</span> OnClickListener() {</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"点击了确定按钮"</span>);</span><br><span class="line">}</span><br><span class="line">});</span><br><span class="line">builder.setNegativeButton(<span class="string">"取消"</span>, <span class="keyword">new</span> OnClickListener() {</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"点击了取消按钮"</span>);</span><br><span class="line">}</span><br><span class="line">});</span><br><span class="line">builder.show(); <span class="comment">// 一定要 show 出来</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>如果报错，则把<code>new OnClickListener(){}</code> 改成<code>new DialogInterface.OnClickListener(){}</code></p></blockquote><h5 id="两种上下文的区别"><a href="#两种上下文的区别" class="headerlink" title="两种上下文的区别"></a>两种上下文的区别</h5><ul><li>this （即：类名.this）</li><li>getApplicationContext() 返回的是 Context 对象</li></ul><p>getApplicationContext() 获取的是整个应用上下文，this 是其子类，子类有的父类不一定有。</p><p>this 多了token（令牌）。</p><p><strong>就对话框来说，必须要用 this</strong>，否则会报错。</p><h4 id="单选对话框"><a href="#单选对话框" class="headerlink" title="单选对话框"></a>单选对话框</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">AlertDialog.Builder builder = <span class="keyword">new</span> Builder(<span class="keyword">this</span>);</span><br><span class="line">builder.setTitle(<span class="string">"请选择"</span>);</span><br><span class="line">String items[] = { <span class="string">"item1"</span>, <span class="string">"item2"</span>};</span><br><span class="line"><span class="comment">// 参数二：checked 选中索引，-1 为没有选中</span></span><br><span class="line">builder.setSingleChoiceItems(items, -<span class="number">1</span>, <span class="keyword">new</span> OnClickListener() {</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"您选择了"</span> + items[which]);</span><br><span class="line"><span class="comment">// 关闭对话框：点一下就关掉，不需要确定按钮</span></span><br><span class="line">dialog.dismiss();</span><br><span class="line">}</span><br><span class="line">}); </span><br><span class="line">builder.show();</span><br></pre></td></tr></tbody></table></figure><h4 id="多选对话框"><a href="#多选对话框" class="headerlink" title="多选对话框"></a>多选对话框</h4><p>注意：listener 是<code>OnMultiChoiceClickListener</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">AlertDialog.Builder builder = <span class="keyword">new</span> Builder(<span class="keyword">this</span>);</span><br><span class="line">String items[] = {<span class="string">"item1"</span>, <span class="string">"item2"</span>, <span class="string">"item3"</span>};</span><br><span class="line">Boolean[] checkedItems = {<span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">true</span>};</span><br><span class="line">builder.setMultiChoiceItems(items, checkedItems, <span class="keyword">new</span> OnMultiChoiceClickListener() {</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which, <span class="keyword">boolean</span> isChecked)</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"您点击了"</span> + items[which]);</span><br><span class="line"><span class="comment">// 关闭对话框：点一下就关掉，不需要确定按钮</span></span><br><span class="line">dialog.dismiss();</span><br><span class="line">}</span><br><span class="line">});</span><br><span class="line">builder.setPositiveButton(<span class="string">"确定"</span>, <span class="keyword">new</span> OnClickListener() {</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>{</span><br><span class="line"><span class="comment">// 把选中的条目数据取出来</span></span><br><span class="line">StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; checkedItems.length; i++)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (checkedItems[i])</span><br><span class="line">{</span><br><span class="line">sb.append(items[i] + <span class="string">" "</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">Toast.makeText(getApplicationContext(), sb.toString(), <span class="number">1</span>).show();</span><br><span class="line"><span class="comment">// 关闭对话框</span></span><br><span class="line">dialog.dismiss();</span><br><span class="line">}</span><br><span class="line">});</span><br><span class="line">builder.show();</span><br></pre></td></tr></tbody></table></figure><h4 id="进度条对话框"><a href="#进度条对话框" class="headerlink" title="进度条对话框"></a>进度条对话框</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ProgressDialog dialog = <span class="keyword">new</span> ProgressDialog(<span class="keyword">this</span>);</span><br><span class="line">dialog.setTitle(<span class="string">"正在加载中"</span>);</span><br><span class="line"><span class="comment">// 设置进度条样式</span></span><br><span class="line">dialog.setProgressStyle(style);</span><br><span class="line">dialog.show();</span><br></pre></td></tr></tbody></table></figure><p>style 属性有：</p><p><code>ProgressDialog.STYLE_HORIZONTAL</code> 横向进度条，0%</p><p><strong>和进度相关的控件，都能在子线程中更新UI</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">ProgressDialog dialog = <span class="keyword">new</span> ProgressDialog(<span class="keyword">this</span>);</span><br><span class="line">dialog.setTitle(<span class="string">"正在加载中"</span>);</span><br><span class="line"><span class="comment">// 设置进度条样式</span></span><br><span class="line">dialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);</span><br><span class="line">dialog.show();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个子线程</span></span><br><span class="line"><span class="keyword">new</span> Thread() { </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="comment">// 设置最大值</span></span><br><span class="line">dialog.setMax(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 耗时操作，设置进度</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)</span><br><span class="line">{</span><br><span class="line"><span class="comment">// 睡眠 50 ms</span></span><br><span class="line">SystemClock.sleep(<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置当前进度</span></span><br><span class="line">dialog.setProgress(i);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭对话框</span></span><br><span class="line">dialog.dismiss();</span><br><span class="line">}</span><br><span class="line">}.start();</span><br></pre></td></tr></tbody></table></figure><h3 id="帧动画"><a href="#帧动画" class="headerlink" title="帧动画"></a>帧动画</h3><p>Android 中动画</p><ul><li><strong>帧动画</strong></li><li>View 动画（补间动画）</li><li>属性动画</li></ul><p>帧动画：加载一系列的图片资源</p><p>xml 文件在<code>res/drawable/directory</code>目录下，标签是<code>&lt;animation-list&gt;</code></p><p>res/drawable/myanim.xml 文件</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">animation-list</span> <span class="attr">xmlns:android</span>=<span class="string">"..."</span></span></span><br><span class="line"><span class="tag"><span class="attr">androidLoneshot</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- true 表示只执行一次，false 循环播放 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:drawable</span>=<span class="string">"@drawable/pic_1"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:duration</span>=<span class="string">"200"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:drawable</span>=<span class="string">"@drawable/pic_2"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:duration</span>=<span class="string">"200"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:drawable</span>=<span class="string">"@drawable/pic_3"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:duration</span>=<span class="string">"200"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:drawable</span>=<span class="string">"@drawable/pic_4"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:duration</span>=<span class="string">"200"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">animation-list</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>java文件</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ImageView rocketImage = (ImageView) findViewById(R.id.rocketImage);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置背景资源</span></span><br><span class="line">rocketImage.setBackgroundResource(R.drawable.myanim);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 AnimationDrawable 类型</span></span><br><span class="line">AnimationDrawable rocketAnimation = (AnimationDrawable) rocketImage.getBackground();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开启动画</span></span><br><span class="line">rocketAnimation.start();</span><br></pre></td></tr></tbody></table></figure><p>兼容低版本 2.3</p><p>因为数据并未准备好，这个 API 是 2.3 之后出的</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">ImageView rocketImage = (ImageView) findViewById(R.id.rocketImage);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置背景资源</span></span><br><span class="line">rocketImage.setBackgroundResource(R.drawable.myanim);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 兼容低版本的写法</span></span><br><span class="line"><span class="keyword">new</span> Thread(){</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">SystemClock.sleep(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 AnimationDrawable 类型</span></span><br><span class="line">AnimationDrawable rocketAnimation = (AnimationDrawable) rocketImage.getBackground();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开启动画</span></span><br><span class="line">rocketAnimation.start();</span><br><span class="line">}</span><br><span class="line">}.start();</span><br></pre></td></tr></tbody></table></figure><h2 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h2><p>服务在后台运行，没有界面</p><p><code>Service extends CpntextWrapper implements ...</code></p><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><ol><li>前台进程</li><li>可视进程</li><li>服务进程</li><li>后台进程</li><li>空进程</li></ol><h3 id="start方式开启服务"><a href="#start方式开启服务" class="headerlink" title="start方式开启服务"></a>start方式开启服务</h3><p><strong>清单文件</strong></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">application</span> <span class="attr">...</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">...</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">service</span> <span class="attr">android:name</span>=<span class="string">"包名.服务名"</span>&gt;</span><span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><strong>MyService.java</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Ibinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>{</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务第一次创建的时候调用</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="keyword">super</span>.onCreate();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务运行</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>{</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">super</span>.StartCommand(intent, flags, startId);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务销毁</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="keyword">super</span>.onDestroy;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>MainActivity.java</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开启服务，一直后台运行直到用户手动关闭</span></span><br><span class="line">startService(<span class="keyword">new</span> Intent(<span class="keyword">this</span>, MyService.class));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结束服务</span></span><br><span class="line">stopService(<span class="keyword">new</span> Intent(<span class="keyword">this</span>, MyService.class));</span><br></pre></td></tr></tbody></table></figure><p><strong>start方式开启服务的特点</strong></p><ul><li>定义四大组件的方式是一样的</li><li>定义一个类继承Service</li><li>第一次开启服务，会执行 onCreate 和 onStart 方案</li><li>第二次开启服务，会执行 onStart 方法</li><li><strong>服务一定开启，就会长期后台运行，直到用户手动停止</strong></li></ul><h4 id="电话监听器"><a href="#电话监听器" class="headerlink" title="电话监听器"></a>电话监听器</h4><ol><li>定义一个服务，开启服务。（记得在清单文件中配置服务）</li><li>在服务的 onCreate 里面获取 TelephonyManager</li><li>注册电话的监听</li><li>定义一个类用来判断电话的状态</li></ol><p><strong>TelephoneManager</strong> 监视电话的状态的改变</p><p>权限：<code>&lt;uses-permission android:name="android.permission.READ_PHONE_STATE" /&gt;</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhoneService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>{</span><br><span class="line"><span class="meta">@Override</span> <span class="function">Ibinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>{</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="comment">// 获取 telephonemanager 的实例</span></span><br><span class="line">TelephonyManager tm = (TelephonyManager)getSystemService(TELEPHONY_SERVICE);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册电话的监听</span></span><br><span class="line">tm.listen(<span class="keyword">new</span> MyPhoneStateListener(), PhoneStateListener.LISTEN_CALL_STAT)</span><br><span class="line"></span><br><span class="line"><span class="keyword">super</span>.onCreate();</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="keyword">super</span>.onDestroy();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyPhoneStateListener</span> <span class="keyword">extends</span> <span class="title">PhoneStateListener</span> </span>{</span><br><span class="line"><span class="comment">// 当电话设备状态发生改变的时候调用</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCallStateChanged</span><span class="params">(<span class="keyword">int</span> state, String incomingNumber)</span> </span>{</span><br><span class="line"><span class="comment">// 具体判断一下电话的状态</span></span><br><span class="line"><span class="keyword">switch</span> (state) {</span><br><span class="line"><span class="keyword">case</span> TelephonyManager.CALL_STATE_IDLE: <span class="comment">// 空闲</span></span><br><span class="line"><span class="comment">// 停止录音</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> TelephonyManager.CALL_STATE_OFFHOOK: <span class="comment">// 接听</span></span><br><span class="line"><span class="comment">// 开始录音</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> TelephonyManager.CALL_STATE_RINGING: <span class="comment">// 响铃</span></span><br><span class="line"><span class="comment">// 准备一个录音机</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">} {}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="录音机"><a href="#录音机" class="headerlink" title="录音机"></a>录音机</h5><p>录音需要权限：<br><code>&lt;uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" /&gt;</code><br><code>&lt;uses-permission android:name="android.permission.RECORD_AUDIO" /&gt;</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建实例，全局</span></span><br><span class="line">MediaRecorder recorder = <span class="keyword">new</span> MediaRecorder();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置音频来源（麦克风MIC、外置声音VOICE_CALL)</span></span><br><span class="line">recorder.setAudioSource(MediaRecorder.AudioSource.MIC); <span class="comment">// 外国违法</span></span><br><span class="line"><span class="comment">// 设置输出格式 3GP(THREE_GPP)、MPEG_4 等</span></span><br><span class="line">recorder.setOutputFormat(MediaRecorder.OutputFormat.THREE_GPP);</span><br><span class="line"><span class="comment">// 设置音频编码方式</span></span><br><span class="line">recorder.setAudioEncoder(MediaRecorder.AudioEncoder.AMR_NB);</span><br><span class="line"><span class="comment">// 设置存放路径</span></span><br><span class="line">recorder.setOutputFile(<span class="string">"/mnt/sdcard/luyin.3gp"</span>);</span><br><span class="line"><span class="comment">// 准备录</span></span><br><span class="line"><span class="keyword">try</span> {</span><br><span class="line">recorder.prepare();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始录</span></span><br><span class="line">recorder.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 停止录</span></span><br><span class="line"><span class="keyword">if</span> (recorder != <span class="keyword">null</span>)</span><br><span class="line">{</span><br><span class="line">recorder.stop();</span><br><span class="line">recorder.reset();</span><br><span class="line">recorder.release();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="使用服务注册特殊的广播接收者"><a href="#使用服务注册特殊的广播接收者" class="headerlink" title="使用服务注册特殊的广播接收者"></a>使用服务注册特殊的广播接收者</h4><ol><li>定义广播接收者</li><li>写个服务用来注册广播接收者</li><li>在MainActivity里面开启服务</li><li>一定要记得配置服务</li></ol><p>MainActivity.java</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">onCreate() {</span><br><span class="line">Intent intent = <span class="function">newe <span class="title">Intent</span><span class="params">(<span class="keyword">this</span>, ScreenService.class)</span></span>;</span><br><span class="line">startService(intent);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>ScreenService.java</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 动态注册和销毁广播</span></span><br><span class="line"><span class="keyword">private</span> ScreenReceiver receiver = <span class="keyword">new</span> ScreenReceiver();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="comment">// 服务创建时注册广播接收者</span></span><br><span class="line">IntentFilter filter = <span class="keyword">new</span> IntentFilter();</span><br><span class="line">filter.addAction(<span class="string">"android.intent.action.SCREEN_OFF"</span>);</span><br><span class="line">filter.addAction(<span class="string">"android.intent.action.SCREEN_ON"</span>);</span><br><span class="line"></span><br><span class="line">registerReceiver(receiver, filter)</span><br><span class="line"></span><br><span class="line"><span class="keyword">super</span>.onCreate();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">onDestroy() {</span><br><span class="line"><span class="comment">// 服务销毁的时候取消广播接收者</span></span><br><span class="line">unregisterReceiver(receiver);</span><br><span class="line"></span><br><span class="line"><span class="keyword">super</span>.onDestroy();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>ScreenReceiver.java</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScreenReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="comment">// 获取当前的事件类型</span></span><br><span class="line">String acation = intent.getAction();</span><br><span class="line"><span class="keyword">if</span> (<span class="string">"android.intent.action.SCREEN_OFF"</span>.equals(action))</span><br><span class="line">; <span class="comment">// 锁屏</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"android.intent.action.SCREEN_ON"</span>.equals(action))</span><br><span class="line">; <span class="comment">// 解锁</span></span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="bind-方式开启服务"><a href="#bind-方式开启服务" class="headerlink" title="bind 方式开启服务"></a>bind 方式开启服务</h3><p><code>bindService(service, conn, flags);</code></p><p>点击按钮绑定服务</p><p>MainActivity.java</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">MyConn conn;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">click</span><span class="params">(View v)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="comment">// 或者放到 onCreate 方法里面</span></span><br><span class="line">Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MyService.class);</span><br><span class="line">conn = <span class="keyword">new</span> MyConn();</span><br><span class="line">bindService(intent, conn, BIND_AUTI_CREATE);<span class="comment">// 只能绑定一次</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个类，用来监视服务的状态</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> MyConn extends ServiceConnection</span><br><span class="line">{</span><br><span class="line"><span class="comment">// 当服务连接成功</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder serviec)</span> </span>{</span><br><span class="line">;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 失去连接</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>{</span><br><span class="line"> ;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务和活动绑定，销毁的时候必须手动解绑（同样不可以多次解绑）</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>{</span><br><span class="line">unbindService(conn);</span><br><span class="line"></span><br><span class="line"><span class="keyword">super</span>.onDestroy();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>MyService.java</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当绑定服务的时候</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> IBinder <span class="title">onBinder</span><span class="params">(Intent intent)</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当这个方法返回值为null的时候，onServiceConnected方法一不执行的</span></span><br><span class="line"><span class="comment">// return null;</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>bind方法开启服务的特点</strong></p><ul><li>点击按钮（或执行操作）后，会此项服务的onCreate方法和onBind方法</li><li>当onBind方法返回null的时候，onServiceConnected方法是不执行的</li><li>第二次点击按钮，服务没有响应</li><li><strong>activity和service之间，不求同时生，但求同时死……</strong></li><li>服务多次解绑会报异常</li><li>设置页面里面不能找到bind方式开启的服务，相当于隐形的服务</li></ul><h4 id="为什么要引入-bindService"><a href="#为什么要引入-bindService" class="headerlink" title="为什么要引入 bindService"></a>为什么要引入 bindService</h4><p>在 Activity 里面调用 Service 的方法</p><p>Binder 是一个接口。</p><p>MyService.java</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> IBinder <span class="title">onbind</span><span class="params">(Intent intent)</span> </span>{</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> MyBinder;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 要调用的方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>{</span><br><span class="line">;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> class MyBinder extends <span class="title">Binder</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callF</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="comment">// 调用 f 的方法</span></span><br><span class="line">f();</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>MainActivity.java</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">MyConn conn;</span><br><span class="line"><span class="keyword">private</span> MyBinder myBinder; <span class="comment">// （中间对象）</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(...)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MyService.class);</span><br><span class="line">conn = <span class="keyword">new</span> MyConn();</span><br><span class="line">bindService(intent, conn, BIND_AUTI_CREATE);<span class="comment">// 只能绑定一次</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个类，用来监视服务的状态</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> MyConn extends ServiceConnection</span><br><span class="line">{</span><br><span class="line"><span class="comment">// 当服务连接成功</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder serviec)</span> </span>{</span><br><span class="line">myBinder = (MyBinder) service; <span class="comment">// 拿到中间对象，从而可以调用服务里的某个方法</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 失去连接</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>{</span><br><span class="line"> ;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">click</span><span class="params">()</span> </span>{</span><br><span class="line">myBinder.callF(); <span class="comment">// 间接调用服务的方法</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务和活动绑定，销毁的时候必须手动解绑（同样不可以多次解绑）</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>{</span><br><span class="line">unbindService(conn);</span><br><span class="line"></span><br><span class="line"><span class="keyword">super</span>.onDestroy();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="通过接口调用服务里面的方法"><a href="#通过接口调用服务里面的方法" class="headerlink" title="通过接口调用服务里面的方法"></a>通过接口调用服务里面的方法</h4><p>接口可以隐藏代码内部的细节，让程序员只暴露自己想暴露的方法</p><ol><li>把想暴露的方法都定义在接口里面</li><li>Binder对象实现我们定义的方法</li><li>把获取到的IBinder对象转换成暴露部分方法的接口</li></ol><p>Iservice.java （I 开头表示是一个接口）</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iservice</span> </span>{</span><br><span class="line"><span class="comment">// 只暴露一个 f1，没有 f2</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callF1</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>MyService.java</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f1</span><span class="params">()</span> </span>{ }</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f2</span><span class="params">()</span> </span>{ }</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把 public 改成 private</span></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBinder</span> <span class="keyword">extends</span> <span class="title">Binder</span> <span class="keyword">implements</span> <span class="title">Iservice</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callF1</span><span class="params">()</span> </span>{ }</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callF2</span><span class="params">()</span> </span>{ }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>MainActivity.java</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> MyConn conn;</span><br><span class="line"><span class="keyword">private</span> Iservice myBinder; <span class="comment">// 中间对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> calss MyConn implements ServiceConnection {</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>{</span><br><span class="line"><span class="comment">// 类型转换成 Iservice</span></span><br><span class="line">myBinder = (Iservice) service;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">click</span><span class="params">(View v)</span> </span>{</span><br><span class="line">myBinder.callF1(); <span class="comment">// 可以</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// myBinder.callF2(); // 不可以</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="混合方式开启服务"><a href="#混合方式开启服务" class="headerlink" title="混合方式开启服务"></a>混合方式开启服务</h3><p>既能在后台长期运行，又能调用服务里面的方法</p><ol><li>start 方法开启服务</li><li>调用 bindService 获取中间对象</li><li>调用 unbindService 解绑服务</li><li>彻底退出时 stopService</li></ol><h4 id="百度音乐盒框架"><a href="#百度音乐盒框架" class="headerlink" title="百度音乐盒框架"></a>百度音乐盒框架</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ==== MainActivity.java ==== */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> MainActivity extends Activity {</span><br><span class="line">    <span class="keyword">private</span> MyConn conn;</span><br><span class="line">    <span class="keyword">private</span> Iservice iservice; <span class="comment">// 定义的 Binder 对象</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentVIew(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 混合方式开启服务</span></span><br><span class="line"></span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MusicService.class);</span><br><span class="line">        startService(intent);</span><br><span class="line"></span><br><span class="line">        conn = <span class="keyword">new</span> MyConn();</span><br><span class="line"></span><br><span class="line">        bindService(intent, conn, BIND_AUTO_CREATE);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听服务状态</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConn</span> </span>{</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>{</span><br><span class="line">            <span class="comment">// 获取定义的 Binder 对象</span></span><br><span class="line">            iservice = (Iservice) service;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playButton</span><span class="params">(View v)</span> </span>{</span><br><span class="line">        <span class="comment">// 播放音乐</span></span><br><span class="line">        iservice.callPlayMusic();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pauseButton</span><span class="params">(View v)</span> </span>{</span><br><span class="line">        <span class="comment">// 暂停音乐</span></span><br><span class="line">        iservice.callPauseMusic();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rePlayButton</span><span class="params">(View v)</span> </span>{</span><br><span class="line">        <span class="comment">// 继续播放音乐</span></span><br><span class="line">        iservice.callRePlayMusic();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>{</span><br><span class="line">        unbindService(conn);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* ==== MusicService.java ==== */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MusicService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Ibinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 服务第一次创建的时候调用</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 服务运行</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.StartCommand(intent, flags, startId);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 服务销毁</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>.onDestroy;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 播放音乐</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playMusic</span><span class="params">()</span> </span>{</span><br><span class="line">        ;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 暂停音乐</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pauseMusic</span><span class="params">()</span> </span>{</span><br><span class="line">        ;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 继续播放</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rePlayMusic</span><span class="params">()</span> </span>{</span><br><span class="line">        ;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在服务内部定义一个 IBinder 类的实现</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBinder</span> <span class="keyword">extends</span> <span class="title">Binder</span> <span class="keyword">implements</span> <span class="title">Iservice</span></span>{</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callPlayMusic</span><span class="params">()</span> </span>{</span><br><span class="line">            playMusic();</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callPauseMusic</span><span class="params">()</span> </span>{</span><br><span class="line">            pauseMusic();</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callRePlayMusic</span><span class="params">()</span> </span>{</span><br><span class="line">            rePlayMusic();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* ==== Iservice.java ==== */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iservice</span> </span>{</span><br><span class="line">    <span class="comment">// 想暴露的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callPlayMusic</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callPauseMusic</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callRePlayMusic</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="AIDL-介绍"><a href="#AIDL-介绍" class="headerlink" title="AIDL 介绍"></a>AIDL 介绍</h3><ul><li>本地服务：运行在自己应用里面的服务</li><li>远程服务：运行在其他应用里面的服务</li></ul><p><strong>实现进程间通讯（IPC）</strong></p><p>AIDL：安卓接口定义语言，专门用来解决进程间通讯</p><ol start="0"><li>每个应用都要配置服务。其中一个定义 IBinder</li><li>把 Iservice.java 文件重命名为 Iservice.aidl。</li><li>aidl 不认识 public，所以这个关键词要去掉</li><li>会自动生成Iservice.java，里面有个类叫 Stub</li><li>MyBinder 直接继承 Stub</li><li>两个应用的 aidl 文件包名相同</li><li>Stub.asInterface(service);</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Iservice iservice;</span><br><span class="line"></span><br><span class="line">onCreate() {</span><br><span class="line">Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">Intent.setAction(<span class="string">"目标应用的包名"</span>);</span><br><span class="line">MyConn conn = <span class="keyword">new</span> MyConn();</span><br><span class="line">bindService(intent, conn, BIND_QUTO_CREATE);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConn</span> <span class="keyword">implements</span> <span class="title">ServiceConnection</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>{</span><br><span class="line">iservice = Stub.asInterface(service);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">click</span><span class="params">(View v)</span> </span>{</span><br><span class="line">iservice.callF();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBinder</span> <span class="keyword">extends</span> <span class="title">Stub</span> </span>{</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callF</span><span class="params">()</span> </span>{</span><br><span class="line">f();</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>Iservice.aidl</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Iservice</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="AIDL-的应用场景"><a href="#AIDL-的应用场景" class="headerlink" title="AIDL 的应用场景"></a>AIDL 的应用场景</h4><p>类似调用支付宝进行支付</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> MyCon conn;</span><br><span class="line"><span class="keyword">private</span> Iservice iservice;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>{</span><br><span class="line"><span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">intent.setAction(<span class="string">"com.test.pay"</span>);</span><br><span class="line"></span><br><span class="line">conn = <span class="keyword">new</span> MyConn();</span><br><span class="line"></span><br><span class="line">bindService(intent, conn, BIND_AUTO_CREATE);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">payClick</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="keyword">try</span> {</span><br><span class="line"><span class="keyword">boolean</span> result = iservice.callPay(<span class="string">"abc"</span>, <span class="string">"123"</span>, <span class="number">1000</span>);</span><br><span class="line"><span class="keyword">if</span> (result) {</span><br><span class="line">Toast.makeText(getApplicationContext(), <span class="string">"支付成功"</span>, <span class="number">1</span>).show();</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">Toast.makeText(getApplicationContext(), <span class="string">"支付失败"</span>, <span class="number">1</span>).show();</span><br><span class="line">}</span><br><span class="line">} <span class="keyword">catch</span> (RemoteException e) {</span><br><span class="line">e.printStackTrace();</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConn</span> <span class="keyword">implements</span> <span class="title">ServiceConnection</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>{</span><br><span class="line">iservice = Stub.asInterface(service);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>{</span><br><span class="line">;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>{</span><br><span class="line">unbinderService(conn);</span><br><span class="line"></span><br><span class="line"><span class="keyword">super</span>.onDestroy()</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// =================PayService.java===================</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PayService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function">publci IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>{</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> MyBinder();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 支付的方法</span></span><br><span class="line"><span class="function">publci <span class="keyword">void</span> <span class="title">pay</span><span class="params">(String username, String pwd, <span class="keyword">int</span> money)</span> </span>{</span><br><span class="line"><span class="comment">// 检查账号密码安全性等</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">"abc"</span> . equals(username) &amp;&amp; <span class="string">"123"</span> . equals(pwd) &amp;&amp; money &lt;= <span class="number">5000</span>) {</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> {</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBinder</span> <span class="keyword">extends</span> <span class="title">Stub</span> /*<span class="title">Binder</span> <span class="keyword">implements</span> <span class="title">Iservice</span>*/ </span>{</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">callPay</span><span class="params">(String username, String pwd, <span class="keyword">int</span> money)</span> </span>{</span><br><span class="line"><span class="keyword">return</span> pay(username, pwd, money);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ==============Iservice.aidl===================</span></span><br><span class="line"><span class="comment">// 用来支付的应用也要 Iservice.aidl</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*public*/</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iservice</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="comment">/*public*/</span> <span class="function"><span class="keyword">boolean</span> <span class="title">callPay</span><span class="params">(String username, String pwd, <span class="keyword">int</span> money)</span> </span>{</span><br><span class="line">pay();</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ====================Manifest==================</span></span><br><span class="line"></span><br><span class="line">&lt;service android:name=<span class="string">"com.test.pay.PayService"</span>&gt;</span><br><span class="line">&lt;intent-filter&gt;</span><br><span class="line">&lt;action android:name=<span class="string">"com.test.pay"</span> /&gt;</span><br><span class="line">&lt;/intent-filter&gt;</span><br><span class="line">&lt;/service&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="内容提供者-contentProvider"><a href="#内容提供者-contentProvider" class="headerlink" title="内容提供者(contentProvider)"></a>内容提供者(contentProvider)</h2><p>作用：在app2中读取app1的数据库(暴露私有的数据库)</p><p>使用：</p><ol><li>建一个类，继承 <code>contentProvider</code>。</li><li><strong>在清单文件中配置</strong></li><li>添加静态代码块</li><li>暴露你想暴露的方法（增删改查）</li><li>其他应用就能用内容解析者去操作数据库</li></ol><h3 id="暴露方法"><a href="#暴露方法" class="headerlink" title="暴露方法"></a>暴露方法</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.content.ContentProvider;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyProvider</span> <span class="keyword">extends</span> <span class="title">ContentProvider</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个 UriMather 路径匹配器</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> UriMather sURIMather = <span class="keyword">new</span> UriMather(UriMather.NO_MATH);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> QUERYSUCCESS = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">private</span> MyOpenHelper myOpenHelper;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义静态代码块，添加匹配规则</span></span><br><span class="line"><span class="keyword">static</span> {</span><br><span class="line"><span class="comment">// sURIMather.addURI(authority/*清单文件里的自定义字符串*/, path, code/*int常量*/)</span></span><br><span class="line"><span class="comment">// URI 路径：content://mystr/query</span></span><br><span class="line">sURIMather.addURI(<span class="string">"mystr"</span>, <span class="string">"query"</span>, QUERYSUCCESS);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreate</span><span class="params">()</span> </span>{</span><br><span class="line">myOpenHelper = <span class="keyword">new</span> MyOpenHelper(getContext());</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Cursor <span class="title">query</span><span class="params">(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> code = sURIMather.math(uri);</span><br><span class="line"><span class="keyword">if</span> (code == QUERYSUCCESS) { <span class="comment">// 路径匹配成功。不成功返回-1</span></span><br><span class="line"><span class="comment">// 对数据库进行查询的操作</span></span><br><span class="line">SQLiteDatabase db = myOpenHelper.getReadableDatabase();</span><br><span class="line"></span><br><span class="line"><span class="comment">// db.query(table, columns/*别人能访问的列*/, selection, selectionArgs, groupBy, having, orderBy)</span></span><br><span class="line">Cursor cursor = db.query(<span class="string">"info"</span>, projection, selection, selectionArgs, <span class="keyword">null</span>, <span class="keyword">null</span>. sortOrder);</span><br><span class="line"><span class="comment">// 注意：cursor 不能管</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> cursor;</span><br><span class="line">} <span class="keyword">else</span> { <span class="comment">// 路径不匹配</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IlleagalArgumentException(<span class="string">"路径不匹配"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">(Uri uri)</span> </span>{</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Uri <span class="title">insert</span><span class="params">(Uri uri, ContentValues values)</span> </span>{</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">provider</span> <span class="attr">android:name</span>=<span class="string">"com.app1.MyProvider"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:authorities</span>=<span class="string">"mystr"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">provider</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="app2读取app1的数据库"><a href="#app2读取app1的数据库" class="headerlink" title="app2读取app1的数据库"></a>app2读取app1的数据库</h3><p>由于app1里面的私有数据库已经通过内容提供者的方式暴露出来了，所以app2可以直接通过内容的解析这进行访问</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 拿到内容的解析者</span></span><br><span class="line"><span class="comment">// getContentResolver().query(uri, projection, selection, selectionArgs, sortOrder)</span></span><br><span class="line">Uri uri = Uri.parse(<span class="string">"content://mystr/query"</span>); <span class="comment">// 和app1定义的路径一样</span></span><br><span class="line"><span class="comment">// Cursor cursor = db.query("info", null, null, null, null, null, null, null);</span></span><br><span class="line">Cursor cursor = getContentResolver().query(uri, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">if</span> (cursor != <span class="keyword">null</span> &amp;&amp; cursor.getCount() &gt; <span class="number">0</span>) {</span><br><span class="line"><span class="keyword">while</span> (cursor.moveToNext()) {</span><br><span class="line">String name = sursor.getString(<span class="number">1</span>);</span><br><span class="line">String phone = cursor.getString(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"app2  name:"</span>+name+<span class="string">";phone:"</span>+phone);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="暴露增删改查"><a href="#暴露增删改查" class="headerlink" title="暴露增删改查"></a>暴露增删改查</h3><p>app1</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.content.ContentProvider;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyProvider</span> <span class="keyword">extends</span> <span class="title">ContentProvider</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个 UriMather 路径匹配器</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> UriMather sURIMather = <span class="keyword">new</span> UriMather(UriMather.NO_MATH);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> QUERYSUCCESS = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INSERTSUCCESS = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UPDATESUCCESS = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DELETESUCCESS = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">private</span> MyOpenHelper myOpenHelper;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义静态代码块，添加匹配规则</span></span><br><span class="line"><span class="keyword">static</span> {</span><br><span class="line"><span class="comment">// sURIMather.addURI(authority/*清单文件里的自定义字符串*/, path, code/*int常量*/)</span></span><br><span class="line"><span class="comment">// URI 路径：content://mystr/query</span></span><br><span class="line">sURIMather.addURI(<span class="string">"mystr"</span>, <span class="string">"query"</span>, QUERYSUCCESS);</span><br><span class="line">sURIMather.addURI(<span class="string">"mystr"</span>, <span class="string">"insert"</span>, INSERTSUCCESS);</span><br><span class="line">sURIMather.addURI(<span class="string">"mystr"</span>, <span class="string">"update"</span>, UPDATESUCCESS);</span><br><span class="line">sURIMather.addURI(<span class="string">"mystr"</span>, <span class="string">"delete"</span>, DELETESUCCESS);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreate</span><span class="params">()</span> </span>{</span><br><span class="line">myOpenHelper = <span class="keyword">new</span> MyOpenHelper(getContext());</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Cursor <span class="title">query</span><span class="params">(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> code = sURIMather.math(uri);</span><br><span class="line"><span class="keyword">if</span> (code == QUERYSUCCESS) { <span class="comment">// 路径匹配成功。不成功返回-1</span></span><br><span class="line"><span class="comment">// 对数据库进行查询的操作</span></span><br><span class="line">SQLiteDatabase db = myOpenHelper.getReadableDatabase();</span><br><span class="line"></span><br><span class="line"><span class="comment">// db.query(table, columns/*别人能访问的列*/, selection, selectionArgs, groupBy, having, orderBy)</span></span><br><span class="line">Cursor cursor = db.query(<span class="string">"info"</span>, projection, selection, selectionArgs, <span class="keyword">null</span>, <span class="keyword">null</span>. sortOrder);</span><br><span class="line"><span class="comment">// 注意：cursor 不能管</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> cursor;</span><br><span class="line">} <span class="keyword">else</span> { <span class="comment">// 路径不匹配</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IlleagalArgumentException(<span class="string">"路径不匹配"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">(Uri uri)</span> </span>{</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Uri <span class="title">insert</span><span class="params">(Uri uri, ContentValues values)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> code = sURIMather.match(uri);</span><br><span class="line"><span class="keyword">if</span> (code == INSERTSUCCESS) {</span><br><span class="line"><span class="comment">// 路径匹配成功，操作数据库</span></span><br><span class="line">SQLiteDatabase db = myOpenHelper.getReadableDatabase();</span><br><span class="line"><span class="keyword">long</span> ins = db.insert(<span class="string">"info"</span><span class="comment">/*表名*/</span>, <span class="keyword">null</span>, values<span class="comment">/*map&lt;String, String&gt;类型*/</span>); <span class="comment">// 返回插入的行数ID</span></span><br><span class="line"></span><br><span class="line">Uri uri2 = Uri.parse(<span class="string">"插入的行号："</span> + ins);</span><br><span class="line"><span class="keyword">return</span> uri2;</span><br><span class="line">} <span class="keyword">else</span> { <span class="comment">// 路径不匹配</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IlleagalArgumentException(<span class="string">"路径不匹配"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(Uri uri, String selection, String[] selectionArgs)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> code = sURIMather.match(uri);</span><br><span class="line"><span class="keyword">if</span> (code == DELETESUCCESS) {</span><br><span class="line"><span class="comment">// 路径匹配成功，操作数据库</span></span><br><span class="line">SQLiteDatabase db = myOpenHelper.getReadableDatabase();</span><br><span class="line"><span class="keyword">int</span> del = db.delete(<span class="string">"info"</span>, selection, selectionArgs); <span class="comment">// 返回删除的行数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> del; <span class="comment">// 返回的类型就是 int</span></span><br><span class="line">} <span class="keyword">else</span> { <span class="comment">// 路径不匹配</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IlleagalArgumentException(<span class="string">"路径不匹配"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(Uri uri, ContentValues values, String selection, String[] selectionArgs)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> code = sURIMather.match(uri);</span><br><span class="line"><span class="keyword">if</span> (code == DELETESUCCESS) {</span><br><span class="line"><span class="comment">// 路径匹配成功，操作数据库</span></span><br><span class="line">SQLiteDatabase db = myOpenHelper.getReadableDatabase();</span><br><span class="line"><span class="keyword">int</span> upd = db.delete(<span class="string">"info"</span>, values, selection, selectionArgs); <span class="comment">// 返回影响的行数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> upd; <span class="comment">// 返回的类型就是 int</span></span><br><span class="line">} <span class="keyword">else</span> { <span class="comment">// 路径不匹配</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IlleagalArgumentException(<span class="string">"路径不匹配"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>app2</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">toInsert</span><span class="params">()</span> </span>{</span><br><span class="line">Uri uri = Uri.parse(<span class="string">"cintent://mystr/insert"</span>);</span><br><span class="line">ContentValues values = <span class="keyword">new</span> ContentValues();</span><br><span class="line">values.put(<span class="string">"name"</span>, <span class="string">"123"</span>);</span><br><span class="line">values.put(<span class="string">"money"</span>, <span class="string">"100"</span>);</span><br><span class="line">Uri ins = getContentResolver().insert(uri, values);</span><br><span class="line">System.out.println(<span class="string">"insert:"</span>+ins);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">toDelete</span><span class="params">()</span> </span>{</span><br><span class="line">Uri uri = Uri.parse(<span class="string">"cintent://mystr/delete"</span>);</span><br><span class="line"><span class="keyword">int</span> del = getContentResolver().insert(uri, <span class="string">"name=?"</span>, <span class="keyword">new</span> String[]{<span class="string">"asd"</span>});</span><br><span class="line">Toast.makeText(getApplicationContext(), <span class="string">"delete:"</span>+del, <span class="number">1</span>).show();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">toUpdate</span><span class="params">()</span> </span>{</span><br><span class="line">Uri uri = Uri.parse(<span class="string">"cintent://mystr/insert"</span>);</span><br><span class="line">ContentValues values = <span class="keyword">new</span> ContentValues();</span><br><span class="line">values.put(<span class="string">"money"</span>, <span class="string">"100"</span>);</span><br><span class="line"><span class="keyword">int</span> upd = getContentResolver().update(uri, values, <span class="string">"nname=?"</span>, <span class="keyword">new</span> String[]{<span class="string">"asd"</span>});</span><br><span class="line">Toast.makeText(getApplicationContext(), <span class="string">"update:"</span>+upd, <span class="number">1</span>).show();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="备份短信"><a href="#备份短信" class="headerlink" title="备份短信"></a>备份短信</h3><p>权限：<code>WRITE_SMS</code> <code>READ_SMS</code> <code>READ_EXTERNAL_STORAGE</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 短信数据库已经通过内容提供者暴露出来了</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">sms_backup</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 xml 序列化实例</span></span><br><span class="line">XmlSerializer serializer = Xml.newSerializer();</span><br><span class="line"><span class="comment">// 设置序列化参数</span></span><br><span class="line">File file = <span class="keyword">new</span> File(Environment.getExternalStorageDirectory().getPath(), <span class="string">"smsBackup.xml"</span>);</span><br><span class="line">FileOutputStream fos = <span class="keyword">new</span> FileOutputStream（file);</span><br><span class="line">serializer.setOutput(fos, <span class="string">"utf-8"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始写 xml 文档的开头</span></span><br><span class="line">serializer.startDocument(<span class="string">"utf-8"</span>, <span class="keyword">true</span>);</span><br><span class="line">{</span><br><span class="line"><span class="comment">// 开始写根节点</span></span><br><span class="line">serializer.startTag(<span class="keyword">null</span>, <span class="string">"smss"</span>);</span><br><span class="line">{</span><br><span class="line">Uri uri = Uri.parse(<span class="string">"content://sms/"</span>) <span class="comment">// 不写后面的参数表示查询所有</span></span><br><span class="line">Cursor cursor = getContentResolver().query(uri, <span class="keyword">new</span> String[]{<span class="string">"address"</span>, <span class="string">"date"</span>, <span class="string">"body"</span>}, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">while</span> (cursor.moveToNext()) {</span><br><span class="line">String address = cursor.getString(<span class="number">0</span>);</span><br><span class="line">String date = cursor.getString(<span class="number">1</span>);</span><br><span class="line">String body = cursor.getString(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写 sms 节点</span></span><br><span class="line">serializer.startTag(<span class="keyword">null</span>, <span class="string">"sms"</span>);</span><br><span class="line">{</span><br><span class="line"><span class="comment">// 写 address 节点</span></span><br><span class="line">serializer.startTag(<span class="keyword">null</span>, <span class="string">"address"</span>);</span><br><span class="line">serializer.text(address);</span><br><span class="line">serializer.endTag(<span class="keyword">null</span>, <span class="string">"address"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写 body 节点</span></span><br><span class="line">serializer.startTag(<span class="keyword">null</span>, <span class="string">"body"</span>);</span><br><span class="line">serializer.text(body);</span><br><span class="line">serializer.endTag(<span class="keyword">null</span>, <span class="string">"body"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写 date 节点</span></span><br><span class="line">serializer.startTag(<span class="keyword">null</span>, <span class="string">"date"</span>);</span><br><span class="line">serializer.text(date);</span><br><span class="line">serializer.endTag(<span class="keyword">null</span>, <span class="string">"date"</span>);</span><br><span class="line">}</span><br><span class="line">serializer.endTag(<span class="keyword">null</span>, <span class="string">"sms"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">serializer.endTag(<span class="keyword">null</span>, <span class="string">"smss"</span>);</span><br><span class="line">}</span><br><span class="line">serializer.endDocument();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="插入短信"><a href="#插入短信" class="headerlink" title="插入短信"></a>插入短信</h3><p>通过内容提供者在短信的私有数据库中插入一条短信</p><p>权限：<code>WRITE_SMS</code> <code>READ_SMS</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Uri uri = Uri.parse(<span class="string">"content://sms"</span>);</span><br><span class="line">ContentValues values = <span class="keyword">new</span> ContentValues();</span><br><span class="line">values.put(<span class="string">"address"</span>, <span class="string">"110"</span>);</span><br><span class="line">values.put(<span class="string">"body"</span>, <span class="string">"报警"</span>);</span><br><span class="line">values.put(<span class="string">"date"</span>, System.currentTimeMillis());</span><br><span class="line">getContentResolver().insert(uri, values);</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h1&gt;&lt;h2 id=&quot;工具&quot;&gt;&lt;a href=&quot;#工具&quot; class=&quot;headerlink&quot; title=&quot;工具&quot;&gt;&lt;/a&gt;工具&lt;/h2&gt;&lt;h3 id=&quot;adb-命令&quot;&gt;&lt;a href=&quot;#adb-命令&quot; class=&quot;headerlink&quot; title=&quot;adb 命令&quot;&gt;&lt;/a&gt;adb 命令&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;adb kill-server 杀死模拟器&lt;/li&gt;
&lt;li&gt;adb start-server 启动模拟器&lt;/li&gt;
&lt;li&gt;cd desktop 进入桌面文件夹&lt;/li&gt;
&lt;li&gt;adb install path/x.apk 安装应用&lt;/li&gt;
&lt;li&gt;adb uninstall com.xxx 卸载应用&lt;/li&gt;
&lt;li&gt;adb shell   进入linux指令（ctrl+C退出）&lt;/li&gt;
&lt;li&gt;# ls 列出目录下所有文件（夹）清单&lt;/li&gt;
&lt;li&gt;adb pull a.txt 从手机中导出文件&lt;/li&gt;
&lt;li&gt;adb push a.txt /mnt/sdcard 把一个文件导入到手机&lt;/li&gt;
&lt;li&gt;monkey 1000 随机点模拟器1000次（冒烟测试（压力测试））&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="学习笔记" scheme="http://blog.iwxyi.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Android" scheme="http://blog.iwxyi.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>PHP-学习笔记</title>
    <link href="http://blog.iwxyi.com/2018/12/18/PHP-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://blog.iwxyi.com/2018/12/18/PHP-学习笔记/</id>
    <published>2018-12-18T08:21:00.000Z</published>
    <updated>2019-10-13T08:22:31.121Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PHP-基础教程"><a href="#PHP-基础教程" class="headerlink" title="PHP 基础教程"></a>PHP 基础教程</h1><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><h3 id="输出-echo"><a href="#输出-echo" class="headerlink" title="输出 echo"></a>输出 echo</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Hello World!"</span>; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><a id="more"></a><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="comment">// 这是单行注释</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/*这是多行注释块*</span></span><br><span class="line"><span class="comment">  *它横跨了多行*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>在 PHP 中，所有用户定义的函数、类和关键词（例如 if、else、echo 等等）都对大小写不敏感。<br>在 PHP 中，所有变量都对大小写敏感。</p><h3 id="支持中文"><a href="#支持中文" class="headerlink" title="支持中文"></a>支持中文</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">header(<span class="string">"Content-type: text/plain"</span>);</span><br></pre></td></tr></tbody></table></figure><blockquote><p>库文件、或者一些class文件等<strong>只有纯php代码</strong>的文件不推荐加结束标签</p><p>但是如果和 HTML 结合，不加结束标签的话会报错（PHP无法执行HTML代码）。</p></blockquote><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>以 $ 符号开头，其余规则同C语言<br>PHP 没有创建变量的命令，变量会在首次为其赋值时被创建</p><p>函数之外声明的变量拥有 Global 作用域，只能在函数以外进行访问，<strong><u>函数内不能访问</u></strong>。<br>函数内部声明的变量拥有 LOCAL 作用域，只能在函数内部进行访问。<br>global 关键词用于访问函数内的全局变量，在（函数内部）变量前面使用 global 关键词：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  $x=<span class="number">5</span>;</span><br><span class="line">  $y=<span class="number">10</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">myTest</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">global</span> $x,$y;</span><br><span class="line">    $y=$x+$y;</span><br><span class="line">  }</span><br><span class="line">  myTest();</span><br><span class="line">  <span class="keyword">echo</span> $y; <span class="comment">// 输出 15</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><p>PHP 同时在名为 $GLOBALS[index] 的数组中存储了所有的全局变量。下标存有变量名。这个数组在函数内也可以访问，并能够用于直接更新全局变量。<br>上面的例子也可以这样写：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTest</span><span class="params">()</span> </span>{</span><br><span class="line">  $GLOBALS[<span class="string">'y'</span>]=$GLOBALS[<span class="string">'x'</span>]+$GLOBALS[<span class="string">'y'</span>];</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>echo - 能够输出一个以上的字符串</p><p>print - 只能输出一个字符串，并始终返回 1</p><p>echo 是一个语言结构，有无括号均可使用：echo 或 echo()</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$cars=<span class="keyword">array</span>(<span class="string">"Volvo"</span>,<span class="string">"BMW"</span>,<span class="string">"SAAB"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;h1&gt;My car "</span>, <span class="string">"is a {$cars[0]}&lt;/h1&gt;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Hello world!&lt;br&gt;"</span>;</span><br></pre></td></tr></tbody></table></figure><h4 id="宏定义-define"><a href="#宏定义-define" class="headerlink" title="宏定义 define"></a>宏定义 define</h4><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="string">"username"</span>, <span class="string">"OK"</span>);</span><br></pre></td></tr></tbody></table></figure><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>同C系语言（但是不用声明类型，直接使用）<br>三种格式规定整数：十进制、十六进制（前缀是 0x）或八进制（前缀是 0）<br>浮点数是有小数点或指数形式的数字。<br>其余：略</p><h3 id="PHP对象：class（类）"><a href="#PHP对象：class（类）" class="headerlink" title="PHP对象：class（类）"></a>PHP对象：class（类）</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Car</span></span></span><br><span class="line"><span class="class">  </span>{</span><br><span class="line">    <span class="keyword">var</span> $color;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Car</span><span class="params">($color=<span class="string">"green"</span>)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">  <span class="keyword">$this</span>-&gt;color = $color;</span><br><span class="line">    }</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">what_color</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;color;</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>可以通过把值设置为 NULL，将变量清空。</p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><h4 id="strlen"><a href="#strlen" class="headerlink" title="strlen"></a>strlen</h4><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> strlen(<span class="string">"Hello world!"</span>); <span class="comment">//12 字符串长度</span></span><br></pre></td></tr></tbody></table></figure><h4 id="strpos"><a href="#strpos" class="headerlink" title="strpos"></a>strpos</h4><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> strpos(<span class="string">"Hello world!"</span>,<span class="string">"world"</span>); <span class="comment">//6 字符串检索，位置从0开始，没找到则返回false</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>字符串参考手册：<em><a href="http://www.w3school.com.cn/php/php_ref_string.asp" target="_blank" rel="noopener">http://www.w3school.com.cn/php/php_ref_string.asp</a></em></p></blockquote><p>*<em>stripos *</em> 不区分大小写寻找</p><p><strong>注</strong>：由于strpos查找开头字符返回值为 0，且 false 的值也是 0，所以判断是否失败要用 ===</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (strpos(<span class="string">"Hello"</span>, <span class="string">"h"</span>) === <span class="keyword">false</span>) <span class="keyword">echo</span> <span class="string">"查找失败"</span>;</span><br></pre></td></tr></tbody></table></figure><h4 id="str-replace"><a href="#str-replace" class="headerlink" title="str_replace"></a>str_replace</h4><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$s = str_replace(<span class="string">"原字符"</span>, <span class="string">"新字符"</span>, $str);</span><br></pre></td></tr></tbody></table></figure><h4 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h4><h5 id="正则替换"><a href="#正则替换" class="headerlink" title="正则替换"></a>正则替换</h5><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$s = preg_replace(<span class="string">"/原文本/"</span>, <span class="string">"新文本"</span>, $str);</span><br></pre></td></tr></tbody></table></figure><h5 id="正则匹配"><a href="#正则匹配" class="headerlink" title="正则匹配"></a>正则匹配</h5><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$pat = <span class="string">"/待匹配文本/iU"</span>; <span class="comment">// i 忽略大小写, U 禁止贪婪匹配</span></span><br><span class="line"><span class="keyword">if</span> (preg_match($pat, 待匹配文本, $ans))</span><br><span class="line">$result = format_sql(trim($ans[<span class="number">1</span>]));</span><br></pre></td></tr></tbody></table></figure><h4 id="字符串中变量"><a href="#字符串中变量" class="headerlink" title="字符串中变量"></a>字符串中变量</h4><p>用单引号括住的输出，并没有解析字符串变量，而使用双引号括住的输出，则解析了变量了，输出变量的值。</p><p><strong>效率问题</strong></p><p>普遍认为，在不需要变量解析的字符串输出，用单引号速度可能会快一些。</p><h5 id="字符串中的表达式"><a href="#字符串中的表达式" class="headerlink" title="字符串中的表达式"></a>字符串中的表达式</h5><p>用花括号括起来 <code>${$row[0]}</code></p><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>设置常量，使用 define() 函数。<br>三个参数：变量名，值，大小写不敏感（默认false，即区分大小写）</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  define(<span class="string">"GREETING"</span>, <span class="string">"Welcome to W3School!"</span>);</span><br><span class="line">  <span class="keyword">echo</span> GREETING;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var_dump(x)  <span class="comment">// 输出类型以及数值</span></span><br></pre></td></tr></tbody></table></figure><h3 id="rand-随机数"><a href="#rand-随机数" class="headerlink" title="rand() 随机数"></a>rand() 随机数</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rand(min, max);</span><br></pre></td></tr></tbody></table></figure><blockquote><p>如果没有确定 min 和 max ，rand() 将返回 0 到 RAND_MAX 之间的随机数</p></blockquote><h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><p><strong>ord() 函数</strong>：字符转ASCII</p><p><strong>chr() 函数</strong>：ASCII转字符</p><h2 id="PHP-运算符：同C系"><a href="#PHP-运算符：同C系" class="headerlink" title="PHP 运算符：同C系"></a>PHP 运算符：同C系</h2><ul><li>包括==、=+-*/%、+=、&gt;=、++自增 等<br>=== 完全相等，包括键值对的顺序相同类型相同<br>!== 不全等<br>!=和&lt;&gt;不等于<br>.        串接：    $txt1 = “Hello”   $txt2 = $txt1 . “ world!”    现在 $txt2 包含 “Hello world!”<br>.=      串接赋值：    $txt1 = “Hello”   $txt1 .= “ world!”    现在 $txt1 包含 “Hello world!”</li><li>and    &amp;&amp;    与<br>or    ||    或<br>xor    异或<br>!    非</li><li>if…else… 同C系语言<br>switch()…同C系语言（同样有case、break、default等），但是支持字符串<br>while(), do…while, for(;;)… 同C系语言</li></ul><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    <span class="keyword">for</span> ($x=<span class="number">0</span>; $x&lt;=<span class="number">10</span>; $x++) {</span><br><span class="line">          <span class="keyword">echo</span> <span class="string">"数字是：$x &lt;br&gt;"</span>;  } </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="foreach语句"><a href="#foreach语句" class="headerlink" title="foreach语句"></a>foreach语句</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span> ($array <span class="keyword">as</span> $value) {</span><br><span class="line">  …$value…</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="函数（函数名对大小写不敏感）"><a href="#函数（函数名对大小写不敏感）" class="headerlink" title="函数（函数名对大小写不敏感）"></a>函数（函数名对大小写不敏感）</h2><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 函数名<span class="params">($参数)</span> </span>{ 代码; }</span><br></pre></td></tr></tbody></table></figure><h3 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 函数名<span class="params">($参数=默认值)</span> </span>{ <span class="keyword">return</span> 返回值; }</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">format_input</span><span class="params">($s, $blank = <span class="number">0</span>)</span> </span>{ }</span><br></pre></td></tr></tbody></table></figure><h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">seize</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">$args = func_get_args(); <span class="comment">// 取参数列表</span></span><br><span class="line"><span class="keyword">if</span> (func_num_args() == <span class="number">1</span>) <span class="comment">// 取参数数量</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_REQUEST[$args[<span class="number">0</span>]])) <span class="comment">// 第一个参数：$args[0]</span></span><br><span class="line"><span class="keyword">return</span> format_input($_REQUEST[$args[<span class="number">0</span>]], <span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="comment">// 多个参数</span></span><br><span class="line">{</span><br><span class="line">$num = func_num_args();</span><br><span class="line"><span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; $num; $i++)</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>($_REQUEST[$args[$i]])) <span class="comment">// 有一个参数不存在与表单中</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="三种数组类型"><a href="#三种数组类型" class="headerlink" title="三种数组类型"></a>三种数组类型</h3><ol><li>索引数组 - 带有数字索引的数组</li><li>关联数组 - 带有指定键的数组</li><li>多维数组 - 包含一个或多个数组的数组</li></ol><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$cars=<span class="keyword">array</span>(<span class="string">"Volvo"</span>,<span class="string">"BMW"</span>,<span class="string">"SAAB"</span>);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">count(数组名)  数组长度</span><br></pre></td></tr></tbody></table></figure><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$age=<span class="keyword">array</span>(<span class="string">"Peter"</span>=&gt;<span class="string">"35"</span>,<span class="string">"Ben"</span>=&gt;<span class="string">"37"</span>,<span class="string">"Joe"</span>=&gt;<span class="string">"43"</span>);  <span class="comment">// 关联数组</span></span><br><span class="line">$age[<span class="string">'Peter'</span>]=<span class="string">"35"</span>;</span><br></pre></td></tr></tbody></table></figure><h3 id="foreach-遍历"><a href="#foreach-遍历" class="headerlink" title="foreach 遍历"></a>foreach 遍历</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span>($age <span class="keyword">as</span> $x=&gt;$x_value) {</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">"Key="</span> . $x . <span class="string">", Value="</span> . $x_value, <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="数组排序函数"><a href="#数组排序函数" class="headerlink" title="数组排序函数"></a>数组排序函数</h3><ul><li>sort() - 以升序对数组排序</li><li>rsort() - 以降序对数组排序</li><li>asort() - 根据值，以升序对关联数组进行排序</li><li>ksort() - 根据键，以升序对关联数组进行排序</li><li>arsort() - 根据值，以降序对关联数组进行排序</li><li>krsort() - 根据键，以降序对关联数组进行排序</li></ul><h3 id="超全局变量"><a href="#超全局变量" class="headerlink" title="超全局变量"></a>超全局变量</h3><h4 id="GLOBALS"><a href="#GLOBALS" class="headerlink" title="$GLOBALS"></a>$GLOBALS</h4><ul><li>$GLOBALS</li><li>$_SERVER</li><li>$_REQUEST</li><li>$_POST</li><li>$_GET</li><li>$_FILES</li><li>$_ENV</li><li>$_COOKIE</li><li>$_SESSION</li></ul><p>PHP 在名为 <strong>$GLOBALS[index]</strong> 的数组中存储了所有全局变量。<br>变量的名字就是数组的键。</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">  $x = <span class="number">75</span>; </span><br><span class="line">  $y = <span class="number">25</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">addition</span><span class="params">()</span> </span>{ </span><br><span class="line">    $GLOBALS[<span class="string">'z'</span>] = $GLOBALS[<span class="string">'x'</span>] + $GLOBALS[<span class="string">'y'</span>]; </span><br><span class="line">  }</span><br><span class="line">  addition(); </span><br><span class="line">  <span class="keyword">echo</span> $z;  <span class="comment">// 100</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="SERVER"><a href="#SERVER" class="headerlink" title="$_SERVER"></a>$_SERVER</h4><p>保存关于报头、路径和脚本位置的信息。</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="keyword">echo</span> $_SERVER[<span class="string">'PHP_SELF'</span>];</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>​        <strong>元素/代码                                             描述</strong></p><ul><li>$_SERVER[‘PHP_SELF’]    返回当前执行脚本的文件名。<ul><li>$_SERVER[‘GATEWAY_INTERFACE’]返回服务器使用的 CGI 规范的版本。</li><li>$_SERVER[‘SERVER_ADDR’]返回当前运行脚本所在的服务器的 IP 地址。</li><li>$_SERVER[‘SERVER_NAME’]返回当前运行脚本所在的服务器的主机名（比如 <a href="http://www.w3school.com.cn）。" target="_blank" rel="noopener">www.w3school.com.cn）。</a></li><li>$_SERVER[‘SERVER_SOFTWARE’]返回服务器标识字符串（比如 Apache/2.2.24）。</li><li>$_SERVER[‘SERVER_PROTOCOL’]返回请求页面时通信协议的名称和版本（例如，“HTTP/1.0”）。</li><li>$_SERVER[‘REQUEST_METHOD’]返回访问页面使用的请求方法（例如 POST）。</li><li>$_SERVER[‘REQUEST_TIME’]返回请求开始时的时间戳（例如 1577687494）。</li><li>$_SERVER[‘QUERY_STRING’]返回查询字符串，如果是通过查询字符串访问此页面。</li><li>$_SERVER[‘HTTP_ACCEPT’]返回来自当前请求的请求头。</li><li>$_SERVER[‘HTTP_ACCEPT_CHARSET’]返回来自当前请求的 Accept_Charset 头（ 例如 utf-8,ISO-8859-1）</li><li>$_SERVER[‘HTTP_HOST’]返回来自当前请求的 Host 头。</li><li>$_SERVER[‘HTTP_REFERER’]返回当前页面的完整 URL（不可靠，因为不是所有用户代理都支持）。</li><li>$_SERVER[‘HTTPS’]是否通过安全 HTTP 协议查询脚本。</li><li>$_SERVER[‘REMOTE_ADDR’]返回浏览当前页面的用户的 IP 地址。</li><li>$_SERVER[‘REMOTE_HOST’]返回浏览当前页面的用户的主机名。</li><li>$_SERVER[‘REMOTE_PORT’]返回用户机器上连接到 Web 服务器所使用的端口号。</li><li>$_SERVER[‘SCRIPT_FILENAME’]返回当前执行脚本的绝对路径。</li><li>$_SERVER[‘SERVER_ADMIN’]该值指明了 Apache 服务器配置文件中的 SERVER_ADMIN 参数。</li><li>$_SERVER[‘SERVER_PORT’]Web 服务器使用的端口。默认值为 “80”。</li><li>$_SERVER[‘SERVER_SIGNATURE’]返回服务器版本和虚拟主机名。</li><li>$_SERVER[‘PATH_TRANSLATED’]当前脚本所在文件系统（非文档根目录）的基本路径。</li><li>$_SERVER[‘SCRIPT_NAME’]返回当前脚本的路径。</li><li>$_SERVER[‘SCRIPT_URI’]返回当前页面的 URI。</li></ul></li></ul><h4 id="REQUEST"><a href="#REQUEST" class="headerlink" title="$_REQUEST"></a>$_REQUEST</h4><p>用于收集 HTML 表单提交的数据。</p><p>例：输入name，点提交，下方出现输入的name</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt; &lt;body&gt;</span><br><span class="line"> &lt;form method="post" </span><br><span class="line">       action="&lt;?php echo $_SERVER['PHP_SELF'];?&gt;" &gt; </span><br><span class="line">Name: &lt;input type="text" name="fname"&gt;</span><br><span class="line"> &lt;input type="submit"&gt;</span><br><span class="line"> &lt;/form&gt; </span><br><span class="line"> &lt;?php</span><br><span class="line">     $name = $_REQUEST['fname'];</span><br><span class="line">     //$name = $_POST['fname'];  //$_POST，等效</span><br><span class="line">     echo $name;</span><br><span class="line"> ?&gt;</span><br><span class="line">&lt;/body&gt; &lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p>使用isset()函数判断表单是否提交</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_post[<span class="string">'submit'</span>])</span><br></pre></td></tr></tbody></table></figure><h4 id="POST"><a href="#POST" class="headerlink" title="$_POST"></a>$_POST</h4><p>广泛用于收集提交 method=”post” 的 HTML 表单后的表单数据。<br>也常用于传递变量。<br>实例见上。</p><ul><li>$_GET 也可用于收集提交 HTML 表单 (method=”get”) 之后的表单数据。</li><li>$_GET 也可以收集 URL 中的发送的数据。</li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;&lt;body&gt;</span><br><span class="line">  &lt;a href="test_get.php?subject=PHP&amp;web=W3school.com.cn"&gt;</span><br><span class="line">    测试 $GET&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">&lt;html&gt;&lt;body&gt;</span><br><span class="line">  &lt;?php </span><br><span class="line">  echo "Study " . $_GET['subject'] . " at " . $_GET['web'];</span><br><span class="line">  ?&gt;</span><br><span class="line">&lt;/body&gt;&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="常用数组函数"><a href="#常用数组函数" class="headerlink" title="常用数组函数"></a>常用数组函数</h3><ul><li>取数组长度：<code>count(array)</code></li><li>增加一个元素到结尾：<code>array_push(array, val)</code></li><li>是否存在某个元素：<code>in_array(val, array)</code></li></ul><h1 id="PHP-高级教程"><a href="#PHP-高级教程" class="headerlink" title="PHP 高级教程"></a>PHP 高级教程</h1><h2 id="PHP-多维数组"><a href="#PHP-多维数组" class="headerlink" title="PHP 多维数组"></a>PHP 多维数组</h2><p><strong>两维数组</strong></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$cars = <span class="keyword">array</span> (</span><br><span class="line">  <span class="keyword">array</span>(<span class="string">"Volvo"</span>,<span class="number">22</span>,<span class="number">18</span>),</span><br><span class="line">  <span class="keyword">array</span>(<span class="string">"BMW"</span>,<span class="number">15</span>,<span class="number">13</span>),</span><br><span class="line">  <span class="keyword">array</span>(<span class="string">"Saab"</span>,<span class="number">5</span>,<span class="number">2</span>),</span><br><span class="line">  <span class="keyword">array</span>(<span class="string">"Land Rover"</span>,<span class="number">17</span>,<span class="number">15</span>)</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><p>这是一个 <strong>4 行 3 列</strong> 的数组 <em>$cars[3][2]</em><br>用法：$cars[1][2] = 13</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> $cars[<span class="number">0</span>][<span class="number">0</span>].<span class="string">": 库存："</span>.$cars[<span class="number">0</span>][<span class="number">1</span>].<span class="string">", 销量："</span>.$cars[<span class="number">0</span>][<span class="number">2</span>].<span class="string">".&lt;br&gt;"</span>;</span><br></pre></td></tr></tbody></table></figure><p>打印<strong>两维数组表格</strong>：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">  for ($row = 0; $row &lt; 4; $row++) {</span><br><span class="line">      echo "&lt;p&gt;&lt;b&gt;Row number $row&lt;/b&gt;&lt;/p&gt;";</span><br><span class="line">      echo "&lt;ul&gt;";</span><br><span class="line">      for ($col = 0; $col &lt; 3; $col++)</span><br><span class="line">      {</span><br><span class="line">          echo "&lt;li&gt;".$cars[$row][$col]."&lt;/li&gt;";</span><br><span class="line">       }</span><br><span class="line">      echo "&lt;/ul&gt;";</span><br><span class="line">  }</span><br><span class="line">?&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="PHP-日期"><a href="#PHP-日期" class="headerlink" title="PHP 日期"></a>PHP 日期</h2><h3 id="date-函数"><a href="#date-函数" class="headerlink" title="date() 函数"></a>date() 函数</h3><p>用于对日期或时间进行格式化</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date(format,timestamp)</span><br></pre></td></tr></tbody></table></figure><blockquote><p>format        必需，规定时间戳的格式，见下面。<br>timestamp可选，规定时间戳，默认当前时间日期。</p></blockquote><p>时间戳是一种字符序列，它表示具体事件发生的日期和事件。</p><ul><li><p>d - 表示月里的某天（01-31）</p></li><li><p>m - 表示月（01-12）</p></li><li><p>Y - 表示年（四位数）</p></li><li><p>1 - 表示周里的某天</p></li><li><p>h - 带有首位零的 12 小时小时格式</p></li><li><p>i - 带有首位零的分钟</p></li><li><p>s - 带有首位零的秒（00 -59）</p></li><li><p>a - 小写的午前和午后（am 或 pm）</p></li></ul><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">"今天是 "</span> . date(<span class="string">"Y-m-d"</span>) . <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"今天是 "</span> . date(<span class="string">"l"</span>); <span class="comment">// 这是小写的字母L</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"当前时间是 "</span> . date(<span class="string">"h:i:sa"</span>);</span><br></pre></td></tr></tbody></table></figure><h4 id="自动版权年份"><a href="#自动版权年份" class="headerlink" title="自动版权年份"></a>自动版权年份</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">© 2010-&lt;?php echo date("Y")?&gt;</span><br></pre></td></tr></tbody></table></figure><blockquote><p>请注意：date() 会返回服务器的当前日期/时间！</p></blockquote><h3 id="获得时区"><a href="#获得时区" class="headerlink" title="获得时区"></a>获得时区</h3><p>默认是服务器所在地点</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date_default_timezone_set(<span class="string">"Asia/Shanghai"</span>);</span><br></pre></td></tr></tbody></table></figure><h3 id="mktime-函数"><a href="#mktime-函数" class="headerlink" title="mktime() 函数"></a>mktime() 函数</h3><p>返回日期的 Unix 时间戳。Unix 时间戳包含 Unix 纪元（1970 年 1 月 1 日 00:00:00 GMT）与指定时间之间的【秒数】，不考虑闰秒</p><p>mktime(hour,minute,second,month,day,year)</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">  $d=mktime(<span class="number">9</span>, <span class="number">12</span>, <span class="number">31</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">2015</span>);</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">"创建日期是 "</span> . date(<span class="string">"Y-m-d h:i:sa"</span>, $d);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="strtotime-函数"><a href="#strtotime-函数" class="headerlink" title="strtotime() 函数"></a>strtotime() 函数</h3><p>用于把人类可读的字符串转换为 Unix 时间。</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strtotime(time,now)</span><br></pre></td></tr></tbody></table></figure><blockquote><p>time：转化格式<br>now：对比的时候（当前时间可省略）</p></blockquote><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  $d=strtotime(<span class="string">"10:38pm April 15 2015"</span>);</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">"创建日期是 "</span> . date(<span class="string">"Y-m-d h:i:sa"</span>, $d);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>PHP 在将字符串转换为日期这方面非常聪明，所以您能够使用各种值（<em>strtotime() 并不完美</em>）：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$d=strtotime("tomorrow");</span><br><span class="line">$d=strtotime("next Saturday");</span><br><span class="line">$d=strtotime("+3 Months");</span><br></pre></td></tr></tbody></table></figure><p>输出七月四日之前的天数：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  $d1=strtotime(<span class="string">"December 31"</span>);</span><br><span class="line">  $d2=ceil(($d1-time())/<span class="number">60</span>/<span class="number">60</span>/<span class="number">24</span>);</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">"距离十二月三十一日还有："</span> . $d2 .<span class="string">" 天。"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="PHP-Include"><a href="#PHP-Include" class="headerlink" title="PHP Include"></a>PHP Include</h2><p>include （或 require）语句会获取指定文件中存在的所有文本/代码/标记，并【复制】到使用 include 语句的文件中。</p><p>include 和 require 是相同的，除了错误处理方面：</p><ul><li>require 会生成致命错误（E_COMPILE_ERROR）并停止脚本（必需文件）</li><li>include 只生成警告（E_WARNING），并且脚本会继续（不必需文件）</li></ul><p>用法：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php include 'footer.php';?&gt;</span><br></pre></td></tr></tbody></table></figure><p>可以直接使用引用文件的变量（尽量使用安全的require，否则文件及其变量可能不存在）</p><h2 id="PHP-文件"><a href="#PHP-文件" class="headerlink" title="PHP 文件"></a>PHP 文件</h2><h3 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> readfile(<span class="string">"a.txt"</span>);</span><br></pre></td></tr></tbody></table></figure><p>fopen() 的第一个参数包含被打开的文件名，第二个参数规定打开文件的模式。</p><p>如果 fopen() 函数未能打开指定的文件，下面的例子会生成一段消息：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  $myfile = fopen(<span class="string">"a.txt"</span>, <span class="string">"r"</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">"Unable!"</span>);</span><br><span class="line">  <span class="keyword">echo</span> fread($myfile,filesize(<span class="string">"a.txt"</span>));</span><br><span class="line">  fclose($myfile);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>文件会以如下模式之一打开：</p><ul><li>r      只读。文件指针在文件的开头开始。<ul><li>w 只写。删除文件的内容或创建一个新的文件，如果它不存在。文件指针在文件的开头开始。</li><li>a只写。文件中的现有数据会被保留。文件指针在文件结尾开始。创建新的文件，如果文件不存在。</li><li>x创建新文件为只写。返回 FALSE 和错误，如果文件已存在。</li><li>r+读/写、文件指针在文件开头开始。</li><li>w+ 读/写。删除文件内容或创建新文件，如果它不存在。文件指针在文件开头开始。</li><li>a+读/写。文件中已有的数据会被保留。文件指针在文件结尾开始。创建新文件，如果它不存在。</li><li>x+读/写。返回 FALSE 和错误，如果文件已存在。</li></ul></li></ul><p>fread() 的第一个参数包含待读取文件的文件名，第二个参数规定待读取的最大字节数。</p><h3 id="读取单行文件-fgets"><a href="#读取单行文件-fgets" class="headerlink" title="读取单行文件 - fgets()"></a>读取单行文件 - fgets()</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> fgets($myfile);</span><br></pre></td></tr></tbody></table></figure><p>调用 fgets() 函数之后，文件指针会移动到下一行。</p><h3 id="检查-End-Of-File-feof"><a href="#检查-End-Of-File-feof" class="headerlink" title="检查 End-Of-File - feof()"></a>检查 End-Of-File - feof()</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  $myfile = fopen(<span class="string">"a.txt"</span>, <span class="string">"r"</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">"Unable!"</span>);</span><br><span class="line">  <span class="comment">// 输出单行直到 end-of-file</span></span><br><span class="line">  <span class="keyword">while</span>(!feof($myfile)) {</span><br><span class="line">      <span class="keyword">echo</span> fgets($myfile) . <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">  }</span><br><span class="line">  fclose($myfile);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="读取单字符-fgetc"><a href="#读取单字符-fgetc" class="headerlink" title="读取单字符 - fgetc()"></a>读取单字符 - fgetc()</h3><p>用法同fgets()</p><h3 id="写入文件-fwrite"><a href="#写入文件-fwrite" class="headerlink" title="写入文件 - fwrite()"></a>写入文件 - fwrite()</h3><p>fwrite() 的第一个参数包含要写入的文件的文件名，第二个参数是被写的字符串。</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$myfile = fopen(<span class="string">"new.txt"</span>, <span class="string">"w"</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">"Unable!"</span>);</span><br><span class="line">$txt = <span class="string">"Bill Gates\n"</span>;</span><br><span class="line">fwrite($myfile, $txt);</span><br><span class="line">$txt = <span class="string">"Steve Jobs\n"</span>;</span><br><span class="line">fwrite($myfile, $txt);</span><br><span class="line">fclose($myfile);</span><br></pre></td></tr></tbody></table></figure><p>写出的文件是这样的：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Bill Gates</span><br><span class="line">Steve Jobs</span><br></pre></td></tr></tbody></table></figure><h2 id="PHP-文件上传"><a href="#PHP-文件上传" class="headerlink" title="PHP 文件上传"></a>PHP 文件上传</h2><h3 id="文件上传-网页端"><a href="#文件上传-网页端" class="headerlink" title="文件上传 网页端"></a>文件上传 网页端</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;&lt;body&gt;</span><br><span class="line">  &lt;form action="upload_file.php" method="post" enctype="multipart/form-data"&gt;</span><br><span class="line">  &lt;label for="file"&gt;Filename:&lt;/label&gt;</span><br><span class="line">    &lt;input type="file" name="file" id="file" /&gt; &lt;br /&gt;</span><br><span class="line">    &lt;input type="submit" name="submit" value="Submit" /&gt;</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p>&lt;form&gt; 标签的 enctype 属性规定了在提交表单时要使用哪种内容类型。在表单需要二进制数据时，比如文件内容，请使用 “multipart/form-data”。</p><p>&lt;input&gt; 标签的 type=”file” 属性规定了应该把输入作为文件来处理。</p><h3 id="上传脚本-服务端"><a href="#上传脚本-服务端" class="headerlink" title="上传脚本 服务端"></a>上传脚本 服务端</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">  if ($_FILES["file"]["error"] &gt; 0)</span><br><span class="line">  {</span><br><span class="line">  echo "Error: " . $_FILES["file"]["error"] . "&lt;br /&gt;";</span><br><span class="line">  }</span><br><span class="line">  else</span><br><span class="line">  {</span><br><span class="line">  echo "Upload: " . $_FILES["file"]["name"] . "&lt;br /&gt;";</span><br><span class="line">  echo "Type: " . $_FILES["file"]["type"] . "&lt;br /&gt;";</span><br><span class="line">  echo "Size: " . ($_FILES["file"]["size"] / 1024) . " Kb&lt;br /&gt;";</span><br><span class="line">echo "Stored in: " . $_FILES["file"]["tmp_name"];</span><br><span class="line">  }</span><br><span class="line">?&gt;</span><br></pre></td></tr></tbody></table></figure><p>使用 PHP 的全局数组 $_FILES，第二个下标可以是 “<strong>name</strong>“, “<strong>type</strong>“, “<strong>size</strong>“, “<strong>tmp_name</strong>“ 或 “<strong>error</strong>“。</p><p>在服务器的 PHP 临时文件夹创建了一个被上传文件的<strong>临时副本</strong>，会在脚本结束时消失。<br>拷贝到另外的位置：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (file_exists(<span class="string">"upload/"</span> . $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>]))</span><br><span class="line">{</span><br><span class="line"><span class="keyword">echo</span> $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>] . <span class="string">" already exists. "</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line">   move_uploaded_file($_FILES[<span class="string">"file"</span>][<span class="string">"tmp_name"</span>], <span class="string">"upload/"</span> . $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>]);</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">"Stored in: "</span> . <span class="string">"upload/"</span> . $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>];</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="PHP-Cookies"><a href="#PHP-Cookies" class="headerlink" title="PHP Cookies"></a>PHP Cookies</h2><h3 id="setcookie-函数"><a href="#setcookie-函数" class="headerlink" title="setcookie() 函数"></a>setcookie() 函数</h3><p>用于设置 cookie。</p><blockquote><p>注释：setcookie() 函数必须位于  标签之前。</p></blockquote><p>setcookie(name, value, expire, path, domain);</p><p>一小时后过期：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setcookie("user", "Alex Porter", time()+3600);</span><br><span class="line">&lt;html&gt;&lt;body&gt;</span><br><span class="line">&lt;/body&gt;&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p>cookie会自动URL编码、解码。<br>为防止 URL 编码，使用 <em>setrawcookie()</em></p><h3 id="COOKIE-变量"><a href="#COOKIE-变量" class="headerlink" title="$_COOKIE 变量"></a>$_COOKIE 变量</h3><p>用于取回 cookie 的值。</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> $_COOKIE[<span class="string">"user"</span>];</span><br></pre></td></tr></tbody></table></figure><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A way to view all cookies</span></span><br><span class="line">print_r($_COOKIE);</span><br></pre></td></tr></tbody></table></figure><h3 id="isset-函数"><a href="#isset-函数" class="headerlink" title="isset() 函数"></a>isset() 函数</h3><p>确认是否已设置了 cookie</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">isset</span>($_COOKIE[<span class="string">"user"</span>]))</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Welcome "</span> . $_COOKIE[<span class="string">"user"</span>] . <span class="string">"!&lt;br /&gt;"</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Welcome guest!&lt;br /&gt;"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="删除-cookie"><a href="#删除-cookie" class="headerlink" title="删除 cookie"></a>删除 cookie</h3><p>使过期日期变更为过去的时间点。</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setcookie(<span class="string">"user"</span>, <span class="string">""</span>, time()<span class="number">-3600</span>);</span><br></pre></td></tr></tbody></table></figure><h2 id="PHP-Sessions"><a href="#PHP-Sessions" class="headerlink" title="PHP Sessions"></a>PHP Sessions</h2><h3 id="session-start"><a href="#session-start" class="headerlink" title="session_start()"></a>session_start()</h3><p>在您把用户信息存储到 PHP session 中之前，首先必须启动会话。<br>注释：session_start() 必须位于  标签之前：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php session_start(); ?&gt;</span><br><span class="line">&lt;html&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p>上面的代码会向服务器注册用户的会话，以便您可以开始保存用户信息，同时会为用户会话分配一个 UID。</p><h3 id="SESSION-变量"><a href="#SESSION-变量" class="headerlink" title="$_SESSION 变量"></a>$_SESSION 变量</h3><p>存储和取回 session 变量</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">session_start();</span><br><span class="line">$_SESSION[<span class="string">'views'</span>]=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Pageviews="</span>. $_SESSION[<span class="string">'views'</span>];</span><br></pre></td></tr></tbody></table></figure><h3 id="isset-函数-1"><a href="#isset-函数-1" class="headerlink" title="isset() 函数"></a>isset() 函数</h3><p>检测是否已设置 session 变量。</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_SESSION[<span class="string">'views'</span>]))</span><br><span class="line">  $_SESSION[<span class="string">'views'</span>]=$_SESSION[<span class="string">'views'</span>]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  $_SESSION[<span class="string">'views'</span>]=<span class="number">1</span>;</span><br></pre></td></tr></tbody></table></figure><h3 id="unset-函数"><a href="#unset-函数" class="headerlink" title="unset() 函数"></a>unset() 函数</h3><p>用于释放指定的 session 变量：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">unset</span>($_SESSION[<span class="string">'views'</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="session-destroy-函数"><a href="#session-destroy-函数" class="headerlink" title="session_destroy() 函数"></a>session_destroy() 函数</h3><p>彻底终结 session (清空)：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">session_destroy();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="PHP-E-mail"><a href="#PHP-E-mail" class="headerlink" title="PHP E-mail"></a>PHP E-mail</h2><h3 id="mail-发送邮件"><a href="#mail-发送邮件" class="headerlink" title="mail() 发送邮件"></a>mail() 发送邮件</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mail(to,subject,message,headers,parameters)</span><br></pre></td></tr></tbody></table></figure><p>接收者、主题、消息、[附加的标题]、[参数]</p><h3 id="防止-email-注入（使用-PHP-过滤器）"><a href="#防止-email-注入（使用-PHP-过滤器）" class="headerlink" title="防止 email 注入（使用 PHP 过滤器）"></a>防止 email 注入（使用 PHP 过滤器）</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">spamcheck</span><span class="params">($field)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">$field=filter_var($field, FILTER_SANITIZE_EMAIL);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(filter_var($field, FILTER_VALIDATE_EMAIL))</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">TRUE</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">FALSE</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (spamcheck($_REQUEST[<span class="string">'email'</span>])==<span class="keyword">FALSE</span>)</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Invalid input"</span>;</span><br></pre></td></tr></tbody></table></figure><h2 id="PHP-Error"><a href="#PHP-Error" class="headerlink" title="PHP Error"></a>PHP Error</h2><h3 id="die-函数：基本的错误处理"><a href="#die-函数：基本的错误处理" class="headerlink" title="die() 函数：基本的错误处理"></a>die() 函数：基本的错误处理</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">die</span>(<span class="string">"Error&lt;br&gt;"</span>);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">die</span>();</span><br></pre></td></tr></tbody></table></figure><h3 id="set-error-handler-：修改错误处理程序"><a href="#set-error-handler-：修改错误处理程序" class="headerlink" title="set_error_handler()：修改错误处理程序:"></a>set_error_handler()：修改错误处理程序:</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set_error_handler(<span class="string">"customError"</span>);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set_error_handler(<span class="string">"customError"</span>,E_USER_WARNING);  <span class="comment">// 加上错误级别</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">customError</span><span class="params">($errno, $errstr)</span></span></span><br><span class="line"><span class="function">  </span>{ </span><br><span class="line">      <span class="keyword">echo</span> <span class="string">"&lt;b&gt;Error:&lt;/b&gt; [$errno] $errstr"</span>;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  set_error_handler(<span class="string">"customError"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">echo</span>($test);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>如果异常没有被捕获，而且又没用使用 set_exception_handler() 作相应的处理的话，那么将发生一个严重的错误（致命错误），并且输出 “Uncaught Exception” （未捕获异常）的错误消息。</p><ul><li><p>Try - 使用异常的函数应该位于 “try” 代码块内。如果没有触发异常，则代码将照常继续执行。但是如果异常被触发，会抛出一个异常。</p></li><li><p>Throw - 这里规定如何触发异常。每一个 “throw” 必须对应至少一个 “catch”</p></li><li><p>Catch - “catch” 代码块会捕获异常，并创建一个包含异常信息的对象</p></li></ul><h3 id="创建一个自定义的-Exception-类"><a href="#创建一个自定义的-Exception-类" class="headerlink" title="创建一个自定义的 Exception 类"></a>创建一个自定义的 Exception 类</h3><p>可以使用 exception 类的方法，比如 getLine() 、 getFile() 以及 getMessage()。</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">customException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">errorMessage</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>{</span><br><span class="line">    $errorMsg = <span class="string">'Error on line '</span>.<span class="keyword">$this</span>-&gt;getLine().<span class="string">' in '</span>.<span class="keyword">$this</span>-&gt;getFile().<span class="string">': &lt;b&gt;'</span>.<span class="keyword">$this</span>-&gt;getMessage().<span class="string">'&lt;/b&gt; is not a valid E-Mail address'</span>;</span><br><span class="line">    <span class="keyword">return</span> $errorMsg;</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">$email = <span class="string">"someone@example...com"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">{</span><br><span class="line">  <span class="keyword">if</span>(filter_var($email, FILTER_VALIDATE_EMAIL) === <span class="keyword">FALSE</span>)</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> customException($email);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">catch</span> (customException $e)</span><br><span class="line"><span class="keyword">echo</span> $e-&gt;errorMessage();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="设置顶层异常处理器-（Top-Level-Exception-Handler）"><a href="#设置顶层异常处理器-（Top-Level-Exception-Handler）" class="headerlink" title="设置顶层异常处理器 （Top Level Exception Handler）"></a>设置顶层异常处理器 （Top Level Exception Handler）</h3><p>set_exception_handler() 函数可设置处理所有未捕获异常的用户定义函数。</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">myException</span><span class="params">($exception)</span></span></span><br><span class="line"><span class="function">  </span>{</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">"&lt;b&gt;Exception:&lt;/b&gt; "</span> , $exception-&gt;getMessage();</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  set_exception_handler(<span class="string">'myException'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">'Uncaught Exception occurred'</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="PHP-Exception-过滤器"><a href="#PHP-Exception-过滤器" class="headerlink" title="PHP Exception 过滤器"></a>PHP Exception 过滤器</h2><h3 id="函数和过滤器"><a href="#函数和过滤器" class="headerlink" title="函数和过滤器"></a>函数和过滤器</h3><ul><li>filter_var() - 通过一个指定的过滤器来过滤单一的变量</li><li>filter_var_array() - 通过相同的或不同的过滤器来过滤多个变量</li><li>filter_input - 获取一个输入变量，并对它进行过滤</li><li>filter_input_array - 获取多个输入变量，并通过相同的或不同的过滤器对它们进行过滤</li></ul><h3 id="验证整数"><a href="#验证整数" class="headerlink" title="验证整数"></a>验证整数</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filter_var($int, FILTER_VALIDATE_INT)</span><br></pre></td></tr></tbody></table></figure><h3 id="Validating-过滤器"><a href="#Validating-过滤器" class="headerlink" title="Validating 过滤器"></a>Validating 过滤器</h3><blockquote><p>用于验证用户输入<br>严格的格式规则（比如 URL 或 E-Mail 验证）<br>如果成功则返回预期的类型，如果失败则返回 FALSE</p></blockquote><h3 id="Sanitizing-过滤器"><a href="#Sanitizing-过滤器" class="headerlink" title="Sanitizing 过滤器"></a>Sanitizing 过滤器</h3><blockquote><p>用于允许或禁止字符串中指定的字符<br>无数据格式规则<br>始终返回字符串</p></blockquote><p>选项和标志用于向指定的过滤器添加额外的过滤选项。<br>不同的过滤器有不同的选项和标志。</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  $var=<span class="number">300</span>;</span><br><span class="line"></span><br><span class="line">  $int_options = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">"options"</span>=&gt;<span class="keyword">array</span></span><br><span class="line">     ( <span class="string">"min_range"</span>=&gt;<span class="number">0</span>,</span><br><span class="line">       <span class="string">"max_range"</span>=&gt;<span class="number">256</span> )</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(!filter_var($var, FILTER_VALIDATE_INT, $int_options))</span><br><span class="line">      <span class="keyword">echo</span>(<span class="string">"Integer is not valid"</span>); <span class="comment">// 300，输出</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">echo</span>(<span class="string">"Integer is valid"</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="验证表单"><a href="#验证表单" class="headerlink" title="验证表单"></a>验证表单</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!filter_input(INPUT_GET, <span class="string">"email"</span>, FILTER_VALIDATE_EMAIL)) </span><br><span class="line">{ <span class="keyword">echo</span> <span class="string">"E-Mail is not valid"</span>; } <span class="comment">// Email不可用</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>通过 “GET” 方法传送的输入变量，<br>1、检测是否存在 “GET” 类型的 “email” 输入变量<br>2、如果存在，检测它是否是有效的邮件地址</p></blockquote><h3 id="净化输入"><a href="#净化输入" class="headerlink" title="净化输入"></a>净化输入</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!filter_has_var(INPUT_POST, <span class="string">"url"</span>))</span><br><span class="line">{ <span class="keyword">echo</span>(<span class="string">"Input type does not exist"</span>); }</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{ $url = filter_input(INPUT_POST, <span class="string">"url"</span>, FILTER_SANITIZE_URL); }</span><br></pre></td></tr></tbody></table></figure><blockquote><p>通过 “POST” 方法传送的输入变量 (url)，<br>1、检测是否存在 “POST” 类型的 “url” 输入变量<br>2、如果存在此输入变量，对其进行净化（删除非法字符），并将其存储在 $url 变量中</p></blockquote><p>输入变量：”<em><a href="http://www.W3非o法ol.com.c字符n/" target="_blank" rel="noopener">http://www.W3非o法ol.com.c字符n/</a></em>“，则净化后的 $url 变量：<br><em><a href="http://www.W3School.com.cn/" target="_blank" rel="noopener">http://www.W3School.com.cn/</a></em></p><h3 id="过滤多个输入"><a href="#过滤多个输入" class="headerlink" title="过滤多个输入"></a>过滤多个输入</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$filters = <span class="keyword">array</span></span><br><span class="line"> (</span><br><span class="line"> <span class="string">"name"</span> =&gt; <span class="keyword">array</span></span><br><span class="line">   ( <span class="string">"filter"</span>=&gt;FILTER_SANITIZE_STRING  ), </span><br><span class="line">  <span class="string">"age"</span> =&gt; <span class="keyword">array</span></span><br><span class="line">      (</span><br><span class="line">        <span class="string">"filter"</span>=&gt;FILTER_VALIDATE_INT,</span><br><span class="line">        <span class="string">"options"</span>=&gt;<span class="keyword">array</span></span><br><span class="line">           (  <span class="string">"min_range"</span>=&gt;<span class="number">1</span>,</span><br><span class="line">             <span class="string">"max_range"</span>=&gt;<span class="number">120</span></span><br><span class="line">           )</span><br><span class="line">      ),</span><br><span class="line">   <span class="string">"email"</span>=&gt; FILTER_VALIDATE_EMAIL,</span><br><span class="line"> );</span><br><span class="line"></span><br><span class="line">$result = filter_input_array(INPUT_GET, $filters);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!$result[<span class="string">"age"</span>])</span><br><span class="line">{ <span class="keyword">echo</span>(<span class="string">"Age must be a number between 1 and 120.&lt;br /&gt;"</span>); }</span><br><span class="line"><span class="keyword">elseif</span>(!$result[<span class="string">"email"</span>])</span><br><span class="line">{ <span class="keyword">echo</span>(<span class="string">"E-Mail is not valid.&lt;br /&gt;"</span>); }</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{ <span class="keyword">echo</span>(<span class="string">"User input is valid"</span>); }</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="自定义数据过滤函数"><a href="#自定义数据过滤函数" class="headerlink" title="自定义数据过滤函数"></a>自定义数据过滤函数</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">convertSpace</span><span class="params">($string)</span></span></span><br><span class="line"><span class="function">  </span>{ <span class="keyword">return</span> str_replace(<span class="string">"_"</span>, <span class="string">" "</span>, $string); }</span><br><span class="line"></span><br><span class="line">  $string = <span class="string">"Peter_is_a_great_guy!"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">echo</span> filter_var($string, FILTER_CALLBACK, <span class="keyword">array</span>(<span class="string">"options"</span>=&gt;<span class="string">"convertSpace"</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><h1 id="PHP-表单"><a href="#PHP-表单" class="headerlink" title="PHP 表单"></a>PHP 表单</h1><blockquote><p><strong>注意：在处理 PHP 表单时请关注安全！</strong></p></blockquote><h2 id="表单是否存在"><a href="#表单是否存在" class="headerlink" title="表单是否存在"></a>表单是否存在</h2><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_REQUEST[$s])) { }</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_COOKIE[$s])) { }</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[$s])) { }</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[$s])) { }</span><br></pre></td></tr></tbody></table></figure><h2 id="GET-和-POST"><a href="#GET-和-POST" class="headerlink" title="GET 和 POST"></a>GET 和 POST</h2><p>者都创建数组（例如，array( key =&gt; value, key2 =&gt; value2,  …)）。此数组包含键/值对，其中的键是表单控件的名称，而值是来自用户的输入数据。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">"&lt;?php echo htmlspecialchars($_SERVER["</span><span class="attr">PHP_SELF</span>"]);?&gt;</span>"&gt;</span><br></pre></td></tr></tbody></table></figure><p>作用：$_SERVER[“PHP_SELF”] 返回当前执行脚本的文件名，将表单数据发送到页面本身</p><h2 id="htmlspecialchars-函数"><a href="#htmlspecialchars-函数" class="headerlink" title="htmlspecialchars() 函数"></a>htmlspecialchars() 函数</h2><p>把特殊字符转换为 HTML 实体。<br>这意味着 &lt; 和 &gt; 之类的 HTML 字符会被替换为 &lt; 和 &gt; 。这样可防止攻击者通过在表单中注入 HTML 或 JavaScript 代码（跨站点脚本攻击）对代码进行利用。</p><p><strong>$_SERVER[“PHP_SELF”] 变量能够被黑客利用！</strong></p><p>假设我们的一张名为 “test_form.php” 的页面中有如下表单：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">"&lt;?php echo $_SERVER["</span><span class="attr">PHP_SELF</span>"];?&gt;</span>"&gt;</span><br></pre></td></tr></tbody></table></figure><p>URL：”<a href="http://www.example.com/test_form.php&quot;" target="_blank" rel="noopener">http://www.example.com/test_form.php"</a></p><p>上面的代码会转换为：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">"test_form.php"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>如果输入URL：<br><a href="http://www.example.com/test_form.php/%22%3E%3Cscript%3Ealert('hacked')%3C/script%3E" target="_blank" rel="noopener">http://www.example.com/test_form.php/%22%3E%3Cscript%3Ealert('hacked')%3C/script%3E</a> </p><p>在这种情况下，上面的代码会转换为：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">"test_form.php"</span>/&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript">alert(<span class="string">'hacked'</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>这段代码加入了一段脚本和一个提示命令。并且当此页面加载后，就会执行 JavaScript 代码（用户会看到一个提示框）。<br> &lt;script&gt; 标签内能够添加任何 JavaScript 代码！</p><p><strong>使用 htmlspecialchars() 函数能够避免 $_SERVER[“PHP_SELF”] 被利用。</strong></p><p>表单代码是这样的：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">"&lt;?php echo htmlspecialchars($_SERVER["</span><span class="attr">PHP_SELF</span>"]);?&gt;</span>"&gt;</span><br></pre></td></tr></tbody></table></figure><p><strong>htmlspecialchars() 函数把特殊字符转换为 HTML 实体。</strong><br>现在，如果用户试图利用 PHP_SELF 变量，会导致如下输出：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">"test_form.php/"</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript">alert(<span class="string">'hacked'</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>"&gt;</span><br></pre></td></tr></tbody></table></figure><p>无法利用，没有危害！</p><p>htmlspecialchars() 函数可以使提交的代码字段不会被执行，因为会被保存为转义代码，当作普通的文本，就像这样：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;location.href(<span class="string">'http://www.hacked.com'</span>)&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>转义后的：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;lt;script&amp;gt;location.href('http://www.hacked.com')&amp;lt;/script&amp;gt;</span><br></pre></td></tr></tbody></table></figure><p>现在这条代码显示在页面上或 e-mail 中是安全的。</p><h2 id="检查函数"><a href="#检查函数" class="headerlink" title="检查函数"></a>检查函数</h2><p><strong>在用户提交该表单时，我们还要做两件事：</strong><br><strong>1.（通过 PHP trim() 函数）去除用户输入数据中不必要的字符（多余的空格、制表符、换行）</strong><br><strong>2.（通过 PHP stripslashes() 函数）删除用户输入数据中的反斜杠（\）</strong></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义变量并设置为空值</span></span><br><span class="line">$name = $email = $gender = $comment = $website = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">if</span> ($_SERVER[<span class="string">"REQUEST_METHOD"</span>] == <span class="string">"POST"</span>) { <span class="comment">// 提交类型是否POST或未提交</span></span><br><span class="line">    $name = test_input($_POST[<span class="string">"name"</span>]);</span><br><span class="line">    $email = test_input($_POST[<span class="string">"email"</span>]);</span><br><span class="line">    $website = test_input($_POST[<span class="string">"website"</span>]);</span><br><span class="line">    $comment = test_input($_POST[<span class="string">"comment"</span>]);</span><br><span class="line">    $gender = test_input($_POST[<span class="string">"gender"</span>]);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test_input</span><span class="params">($data)</span> </span>{</span><br><span class="line">    $data = trim($data); <span class="comment">// 去空格</span></span><br><span class="line">    $data = stripslashes($data); <span class="comment">// 去转义</span></span><br><span class="line">    $data = htmlspecialchars($data); <span class="comment">// 防注入</span></span><br><span class="line">    <span class="keyword">return</span> $data;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="输入提示（必填项未输入-格式错误等）"><a href="#输入提示（必填项未输入-格式错误等）" class="headerlink" title="输入提示（必填项未输入/格式错误等）"></a>输入提示（必填项未输入/格式错误等）</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Name: &lt;input type="text" name="name" value="&lt;?php echo $name;?&gt;"&gt;</span><br><span class="line">&lt;span class="error"&gt;</span><br><span class="line">&lt;?php echo $Msg;?&gt;</span><br><span class="line">&lt;/span&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="格式验证（正则表达式）"><a href="#格式验证（正则表达式）" class="headerlink" title="格式验证（正则表达式）"></a>格式验证（正则表达式）</h2><h3 id="名字是否包含空格"><a href="#名字是否包含空格" class="headerlink" title="名字是否包含空格"></a>名字是否包含空格</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$name = test_input($_POST[<span class="string">"name"</span>]);</span><br><span class="line"><span class="keyword">if</span> (!preg_match(<span class="string">"/^[a-zA-Z ]*$/"</span>,$name))</span><br><span class="line">{ $nameErr = <span class="string">"只允许字母和空格！"</span>; }</span><br></pre></td></tr></tbody></table></figure><h3 id="邮箱"><a href="#邮箱" class="headerlink" title="邮箱"></a>邮箱</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">preg_match(<span class="string">"/([\w\-]+\@[\w\-]+\.[\w\-]+)/"</span>,$email)</span><br></pre></td></tr></tbody></table></figure><h3 id="URL（允许斜杠-，需转义）"><a href="#URL（允许斜杠-，需转义）" class="headerlink" title="URL（允许斜杠 /，需转义）"></a>URL（允许斜杠 /，需转义）</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">preg_match(<span class="string">"/\b(?:(?:https?|ftp):\/\/|www\.)[-a-z0-9+&amp;@#\/%?=~_|!:,.;]*[-a-z0-9+&amp;@#\/% =~_|]/i"</span>,$website)</span><br></pre></td></tr></tbody></table></figure><h1 id="PHP-数据库"><a href="#PHP-数据库" class="headerlink" title="PHP 数据库"></a>PHP 数据库</h1><h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql_connect(servername,username,password);</span><br></pre></td></tr></tbody></table></figure><blockquote><p>servername 默认是 “localhost:3306”<br>username 默认值是拥有服务器进程的用户的名称<br>password 默认为””</p></blockquote><h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE database_name</span><br></pre></td></tr></tbody></table></figure><h2 id="选择数据库"><a href="#选择数据库" class="headerlink" title="选择数据库"></a>选择数据库</h2><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql_select_db(<span class="string">"database_name"</span>, $con);</span><br></pre></td></tr></tbody></table></figure><p><strong>建表、添加、选取等之前必须选择数据库</strong></p><h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE table_name</span><br><span class="line">(</span><br><span class="line">  column_name1 data_type,</span><br><span class="line">  column_name2 data_type,</span><br><span class="line">  column_name3 data_type,</span><br><span class="line">  .......</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 连接数据库</span></span><br><span class="line">$con = mysql_connect(<span class="string">"localhost"</span>,<span class="string">"peter"</span>,<span class="string">"123"</span>);</span><br><span class="line"><span class="keyword">if</span> (!$con)</span><br><span class="line">{  <span class="keyword">die</span>(<span class="string">'Could not connect: '</span> . mysql_error());  }</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建数据库</span></span><br><span class="line"><span class="keyword">if</span> (mysql_query(<span class="string">"CREATE DATABASE my_db"</span>,$con))</span><br><span class="line">{ <span class="keyword">echo</span> <span class="string">"Database created"</span>; }</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{ <span class="keyword">echo</span> <span class="string">"Error creating: "</span> . mysql_error();  }</span><br><span class="line"></span><br><span class="line"><span class="comment">// 选择数据库后才能建表</span></span><br><span class="line">mysql_select_db(<span class="string">"my_db"</span>, $con);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建栏位</span></span><br><span class="line">$sql = <span class="string">"CREATE TABLE Persons </span></span><br><span class="line"><span class="string">(</span></span><br><span class="line"><span class="string">  // 主键 personID，不为空，自增</span></span><br><span class="line"><span class="string">  personID int NOT NULL AUTO_INCREMENT,</span></span><br><span class="line"><span class="string">  PRIMARY KEY(personID),</span></span><br><span class="line"><span class="string">  FirstName varchar(15),</span></span><br><span class="line"><span class="string">  LastName varchar(15),</span></span><br><span class="line"><span class="string">  Age int</span></span><br><span class="line"><span class="string">)"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 选择数据库后创建表</span></span><br><span class="line">mysql_query($sql,$con);</span><br><span class="line"></span><br><span class="line">mysql_close($con);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="修改表名"><a href="#修改表名" class="headerlink" title="修改表名"></a>修改表名</h2><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql_query(<span class="string">"ALTER TABLE `$old_tablename` RENAME TO `$tablename`"</span>); <span class="comment">// 注意：是 ` ` 而不是 单引号</span></span><br></pre></td></tr></tbody></table></figure><h2 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h2><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql_query(<span class="string">"DROP TABLE `$tablename`"</span>);</span><br></pre></td></tr></tbody></table></figure><h2 id="插入数据（不分大小写）：INSERT-INTO"><a href="#插入数据（不分大小写）：INSERT-INTO" class="headerlink" title="插入数据（不分大小写）：INSERT INTO"></a>插入数据（不分大小写）：INSERT INTO</h2><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql_query(<span class="string">"INSERT INTO Persons (FirstName, LastName, Age) VALUES ('Glenn', 'Quagmire', '33')"</span>);</span><br></pre></td></tr></tbody></table></figure><blockquote><p>注意values里面的<strong>单引号</strong>，必须要加上去。</p></blockquote><h2 id="表单数据到数据库"><a href="#表单数据到数据库" class="headerlink" title="表单数据到数据库"></a>表单数据到数据库</h2><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$sql=<span class="string">"INSERT INTO Persons (FirstName, LastName, Age) VALUES ('$_POST[firstname]','$_POST[lastname]','$_POST[age]')"</span>;</span><br><span class="line">mysql_query($sql,$con);</span><br></pre></td></tr></tbody></table></figure><h2 id="选取数据：SELECT"><a href="#选取数据：SELECT" class="headerlink" title="选取数据：SELECT"></a>选取数据：SELECT</h2><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$result = mysql_query(<span class="string">"SELECT * FROM Persons"</span>);</span><br></pre></td></tr></tbody></table></figure><h3 id="按行读取选取的数据"><a href="#按行读取选取的数据" class="headerlink" title="按行读取选取的数据"></a>按行读取选取的数据</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql_fetch_array(data,array_type);</span><br></pre></td></tr></tbody></table></figure><p>mysql_fetch_array() 是 mysql_fetch_row() 的扩展，不会慢很多。</p><p>array_type 规定返回哪种结果。可能的值：</p><ul><li>MYSQL_ASSOC - 关联数组</li><li>MYSQL_NUM - 数字数组</li><li>MYSQL_BOTH - 默认。同时产生关联和数字数组</li></ul><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>($row = mysql_fetch_array($result))</span><br><span class="line">{</span><br><span class="line">  <span class="keyword">echo</span> $row[<span class="string">'FirstName'</span>] . <span class="string">" "</span> . $row[<span class="string">'LastName'</span>];</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">"&lt;br /&gt;"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="匹配指定条件：WHERE"><a href="#匹配指定条件：WHERE" class="headerlink" title="匹配指定条件：WHERE"></a>匹配指定条件：WHERE</h2><p>运算符： =   !=    &lt;   &gt;   &lt;=   &gt;=</p><ul><li><strong>BETWEEN</strong>    介于一个包含范围内</li><li><strong>LIKE</strong>    搜索匹配的模式</li></ul><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$result = mysql_query(<span class="string">"SELECT * FROM Persons WHERE FirstName='Peter'"</span>);</span><br></pre></td></tr></tbody></table></figure><p>###排序</p><ul><li>排序：<strong>ORDER BY</strong><br>SELECT * FROM Persons ORDER BY age</li><li>默认升序，<strong>DESC</strong> 关键词降序。<br>ORDER BY column_name DESC</li><li>多列排序时，只有第一列相同时才使用第二列：<br>ORDER BY column_name1, column_name2</li></ul><h2 id="修改数据：UPDATE"><a href="#修改数据：UPDATE" class="headerlink" title="修改数据：UPDATE"></a>修改数据：UPDATE</h2><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql_query(<span class="string">"UPDATE Persons SET Age = '36' WHERE FirstName = 'Peter' AND LastName = 'Griffin'"</span>);</span><br></pre></td></tr></tbody></table></figure><h2 id="删除数据：DELETE-FROM"><a href="#删除数据：DELETE-FROM" class="headerlink" title="删除数据：DELETE FROM"></a>删除数据：DELETE FROM</h2><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql_query(<span class="string">"DELETE FROM Persons WHERE LastName='Griffin'"</span>);</span><br></pre></td></tr></tbody></table></figure><h2 id="ODBC"><a href="#ODBC" class="headerlink" title="ODBC"></a>ODBC</h2><p>不多说，直接看下面的实例吧！</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">  &lt;?php</span><br><span class="line">    // 名为 northwind 的 DSN 的连接，无帐号、密码</span><br><span class="line">    $conn=odbc_connect('northwind','','');</span><br><span class="line">    if (!$conn)</span><br><span class="line">      {exit("Connection Failed: " . $conn);}</span><br><span class="line">      </span><br><span class="line">    $sql="SELECT * FROM customers";</span><br><span class="line">    $rs=odbc_exec($conn,$sql); // 查询</span><br><span class="line">    if (!$rs)</span><br><span class="line">      {exit("Error in SQL");}</span><br><span class="line">      </span><br><span class="line">    echo "&lt;table&gt;&lt;tr&gt;";</span><br><span class="line">    echo "&lt;th&gt;Companyname&lt;/th&gt;";</span><br><span class="line">    echo "&lt;th&gt;Contactname&lt;/th&gt;&lt;/tr&gt;";</span><br><span class="line"></span><br><span class="line">    while (odbc_fetch_row($rs)) // 取出</span><br><span class="line">    {</span><br><span class="line">      $compname=odbc_result($rs,"CompanyName");</span><br><span class="line">      $conname=odbc_result($rs,"ContactName");</span><br><span class="line">      echo "&lt;tr&gt;&lt;td&gt;$compname&lt;/td&gt;";</span><br><span class="line">      echo "&lt;td&gt;$conname&lt;/td&gt;&lt;/tr&gt;";</span><br><span class="line">    }</span><br><span class="line">    odbc_close($conn); // 关闭</span><br><span class="line">    echo "&lt;/table&gt;";</span><br><span class="line">  ?&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><h1 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h1><h2 id="创建-XMLHttpRequest-对象"><a href="#创建-XMLHttpRequest-对象" class="headerlink" title="创建 XMLHttpRequest 对象"></a>创建 XMLHttpRequest 对象</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GetXmlHttpObject</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">var</span> xmlHttp=<span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">         <span class="comment">// Firefox, Opera 8.0+, Safari</span></span><br><span class="line">         xmlHttp=<span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">     } <span class="keyword">catch</span> (e) {</span><br><span class="line">         <span class="comment">// Internet Explorer</span></span><br><span class="line">         <span class="keyword">try</span> {</span><br><span class="line">              xmlHttp=<span class="keyword">new</span> ActiveXObject(<span class="string">"Msxml2.XMLHTTP"</span>);</span><br><span class="line">          } <span class="keyword">catch</span> (e) {</span><br><span class="line">              xmlHttp=<span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line">          }</span><br><span class="line">     }</span><br><span class="line">    <span class="keyword">return</span> xmlHttp;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="实时搜索"><a href="#实时搜索" class="headerlink" title="实时搜索"></a>实时搜索</h2><h3 id="前端-HTML"><a href="#前端-HTML" class="headerlink" title="前端 HTML"></a>前端 HTML</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"clienthint.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span> </span><br><span class="line">First Name:</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"txt1"</span></span></span><br><span class="line"><span class="tag"><span class="attr">onkeyup</span>=<span class="string">"showHint(this.value)"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Suggestions: <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"txtHint"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="后端-JavaScript"><a href="#后端-JavaScript" class="headerlink" title="后端 JavaScript"></a>后端 JavaScript</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xmlHttp</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每当在输入域中输入一个字符，该函数就会被执行一次</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showHint</span>(<span class="params">str</span>)</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span> (str.length==<span class="number">0</span>)</span><br><span class="line">    { </span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"txtHint"</span>).innerHTML=<span class="string">""</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    }</span><br><span class="line">    xmlHttp=GetXmlHttpObject()</span><br><span class="line">    <span class="keyword">if</span> (xmlHttp==<span class="literal">null</span>)</span><br><span class="line">    {</span><br><span class="line">        alert (<span class="string">"Browser does not support HTTP Request"</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    } </span><br><span class="line">    <span class="keyword">var</span> url=<span class="string">"gethint.php"</span></span><br><span class="line">    url=url+<span class="string">"?q="</span>+str</span><br><span class="line">    url=url+<span class="string">"&amp;sid="</span>+<span class="built_in">Math</span>.random()</span><br><span class="line">    xmlHttp.onreadystatechange=stateChanged </span><br><span class="line">    xmlHttp.open(<span class="string">"GET"</span>,url,<span class="literal">true</span>)</span><br><span class="line">    xmlHttp.send(<span class="literal">null</span>)</span><br><span class="line">} </span><br><span class="line"></span><br><span class="line"><span class="comment">// 每当 XMLHTTP 对象的状态发生改变，则执行该函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stateChanged</span>(<span class="params"></span>) </span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">  <span class="comment">// 在状态变成 4 （或 "complete"）时，用响应文本填充 txtHint 占位符 txtHint 的内容</span></span><br><span class="line">    <span class="keyword">if</span> (xmlHttp.readyState==<span class="number">4</span> || xmlHttp.readyState==<span class="string">"complete"</span>)</span><br><span class="line">    { </span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"txtHint"</span>).innerHTML=xmlHttp.responseText </span><br><span class="line">    } </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为不同浏览器创建不同 XMLHTTP 对象的问题</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GetXmlHttpObject</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">var</span> xmlHttp=<span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    {</span><br><span class="line">        <span class="comment">// Firefox, Opera 8.0+, Safari</span></span><br><span class="line">        xmlHttp=<span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">catch</span> (e)</span><br><span class="line">    {</span><br><span class="line">        <span class="comment">// Internet Explorer</span></span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        {</span><br><span class="line">        xmlHttp=<span class="keyword">new</span> ActiveXObject(<span class="string">"Msxml2.XMLHTTP"</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">catch</span> (e)</span><br><span class="line">        {</span><br><span class="line">        xmlHttp=<span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> xmlHttp;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="取网页源码"><a href="#取网页源码" class="headerlink" title="取网页源码"></a>取网页源码</h2><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ret = file_get_contents(<span class="string">"http://acm.hdu.edu.cn/showproblem.php?pid=1000"</span>); <span class="comment">// 取网页源码</span></span><br><span class="line">$ret = iconv(<span class="string">"gb2312"</span>, <span class="string">"utf-8//IGNORE"</span>,$ret); <span class="comment">// 避免乱码</span></span><br><span class="line"></span><br><span class="line">$pat = <span class="string">"/&lt;h1 style='color:#1A5CC8'&gt;(.+)&lt;\/h1&gt;/"</span>; <span class="comment">// 后缀：i 忽略大小写, U 禁止贪婪匹配</span></span><br><span class="line"><span class="keyword">if</span> (preg_match($pat, $ret, $ans))</span><br><span class="line">$title = format_sql(trim($ans[<span class="number">1</span>]));</span><br></pre></td></tr></tbody></table></figure><h2 id="网址重定向"><a href="#网址重定向" class="headerlink" title="网址重定向"></a>网址重定向</h2><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">header(<span class="string">"Location:"</span> . $_SERVER[<span class="string">'PHP_SELF'</span>]); <span class="comment">// 默认页面</span></span><br></pre></td></tr></tbody></table></figure><h2 id="获取-IP"><a href="#获取-IP" class="headerlink" title="获取 IP"></a>获取 IP</h2><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getIP</span><span class="params">()</span> // 获取真实的<span class="title">IP</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">$ip = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">if</span> (getenv(<span class="string">'HTTP_CLIENT_IP'</span>))</span><br><span class="line">{</span><br><span class="line">$ip = getenv(<span class="string">'HTTP_CLIENT_IP'</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">elseif</span> (getenv(<span class="string">'HTTP_X_FORWARDED_FOR'</span>))</span><br><span class="line">{</span><br><span class="line">$ip = getenv(<span class="string">'HTTP_X_FORWARDED_FOR'</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">elseif</span> (getenv(<span class="string">'HTTP_X_FORWARDED'</span>))</span><br><span class="line">{</span><br><span class="line">$ip = getenv(<span class="string">'HTTP_X_FORWARDED'</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">elseif</span> (getenv(<span class="string">'HTTP_FORWARDED_FOR'</span>))</span><br><span class="line">{</span><br><span class="line">$ip = getenv(<span class="string">'HTTP_FORWARDED_FOR'</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">elseif</span> (getenv(<span class="string">'HTTP_FORWARDED'</span>))</span><br><span class="line">{</span><br><span class="line">$ip = getenv(<span class="string">'HTTP_FORWARDED'</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line">$ip = $_SERVER[<span class="string">'REMOTE_ADDR'</span>];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> $ip;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="获取时间文本"><a href="#获取时间文本" class="headerlink" title="获取时间文本"></a>获取时间文本</h2><p>时间戳：time()</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gettime</span><span class="params">()</span> // 获取当前时间文本</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">date_default_timezone_set(<span class="string">'PRC'</span>); <span class="comment">// 临时设置成中国时区</span></span><br><span class="line">$time = date(<span class="string">"y-m-d h:i:s"</span>, time());</span><br><span class="line"><span class="keyword">return</span> $time;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="自制数据库模板"><a href="#自制数据库模板" class="headerlink" title="自制数据库模板"></a>自制数据库模板</h2><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="string">"MySQL_servername"</span>, <span class="string">"localhost"</span>);</span><br><span class="line">define(<span class="string">"MySQL_username"</span>, <span class="string">"root"</span>);</span><br><span class="line">define(<span class="string">"MySQL_password"</span>, <span class="string">"root"</span>);</span><br><span class="line">define(<span class="string">"MySQL_detabase"</span>, <span class="string">"数据库名"</span>);</span><br><span class="line">$con = <span class="keyword">NULL</span>;</span><br><span class="line">$is_connected = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">connect_sql</span><span class="params">()</span> // 连接数据库</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">global</span> $con, $is_connected;</span><br><span class="line"><span class="keyword">if</span> ($is_connected) <span class="comment">// 避免多次连接</span></span><br><span class="line">{ <span class="keyword">return</span> <span class="keyword">NULL</span>; }</span><br><span class="line"></span><br><span class="line">$con = mysql_connect(MySQL_servername, MySQL_username, MySQL_password);</span><br><span class="line"><span class="keyword">if</span> (!$con)</span><br><span class="line">{ <span class="keyword">die</span>(<span class="string">"数据库连接失败"</span>); }</span><br><span class="line"></span><br><span class="line">$is_connected = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">mysql_select_db(MySQL_database, $con);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> $con;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">query_sql</span><span class="params">($sql)</span> // 查询语句</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">global</span> $con, $is_connected;</span><br><span class="line"><span class="keyword">if</span> (!$is_connected)</span><br><span class="line">{</span><br><span class="line">connect_sql();</span><br><span class="line">$is_connected = <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">$result = mysql_query($sql, $con);</span><br><span class="line"><span class="keyword">return</span> $result;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">row_sql</span><span class="params">($sql)</span> // 查询一行，数据是否存在</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">global</span> $con, $is_connected;</span><br><span class="line"><span class="keyword">if</span> (!$is_connected)</span><br><span class="line">{</span><br><span class="line">connect_sql();</span><br><span class="line">$is_connected = <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($result = mysql_query($sql))</span><br><span class="line">{</span><br><span class="line">$row = mysql_fetch_array($result);</span><br><span class="line"><span class="keyword">return</span> $row;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">NULL</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="自制表单操作模板"><a href="#自制表单操作模板" class="headerlink" title="自制表单操作模板"></a>自制表单操作模板</h2><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">seize</span><span class="params">()</span> // 函数重载吧……</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">$args = func_get_args();</span><br><span class="line"><span class="keyword">if</span> (func_num_args() == <span class="number">1</span>) <span class="comment">// 一个，直接取值（可为空字符串）</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_REQUEST[$args[<span class="number">0</span>]]))</span><br><span class="line"><span class="keyword">return</span> format_input($_REQUEST[$args[<span class="number">0</span>]], <span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="comment">// 多个，仅判断存不存在</span></span><br><span class="line">{</span><br><span class="line">$num = func_num_args();</span><br><span class="line"><span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; $num; $i++)</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>($_REQUEST[$args[$i]])) <span class="comment">// 有一个没有值</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">seizeor</span><span class="params">()</span> // 多个表单有一个就行了</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">$args = func_get_args();</span><br><span class="line"><span class="keyword">if</span> (func_num_args() == <span class="number">1</span>) <span class="comment">// 一个，存在并返回值</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_REQUEST[$args[<span class="number">0</span>]]))</span><br><span class="line"><span class="keyword">return</span> format_input($_REQUEST[$args[<span class="number">0</span>]], <span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="comment">// 多个，仅判断存不存在</span></span><br><span class="line">{</span><br><span class="line">$num = func_num_args();</span><br><span class="line"><span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; $num; $i++)</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_REQUEST[$s])) <span class="comment">// 有一个没有值</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">return</span> format_input($_REQUEST[$args[$i]], <span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">NULL</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">seize0</span><span class="params">($s, $blank = <span class="number">0</span>)</span> // 获取必须存在且非空的表单，如果没有则强制退出</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_REQUEST[$s]) &amp;&amp; $_REQUEST[$s] != <span class="string">""</span>)</span><br><span class="line"><span class="keyword">return</span> format_input($_REQUEST[$s], $blank);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">die</span> ;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">seize1</span><span class="params">($s, $blank = <span class="number">0</span>)</span> // 获取一个表单</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_REQUEST[$s]))</span><br><span class="line"><span class="keyword">return</span> format_input($_REQUEST[$s], $blank);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">NULL</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">seize2</span><span class="params">($s, &amp;$a, $blank = <span class="number">0</span>)</span> // 获取表单并引用赋值</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_REQUEST[$s]))</span><br><span class="line"><span class="keyword">return</span> ($a = format_input($_REQUEST[$s], $blank));</span><br><span class="line"><span class="comment">/*else if (isset($_COOKIE[$s]))</span></span><br><span class="line"><span class="comment">return ($a = $s);*/</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> ($a = <span class="keyword">NULL</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">seizeval</span><span class="params">($s, $blank = <span class="number">0</span>)</span> // 获取一个非空表单，否则为<span class="title">NULL</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_REQUEST[$s]) &amp;&amp; $_REQUEST[$s] != <span class="string">""</span>)</span><br><span class="line"><span class="keyword">return</span> format_input($_REQUEST[$s], $blank);</span><br><span class="line"><span class="comment">/*else if (isset($_COOKIE[$s]))</span></span><br><span class="line"><span class="comment">return $s;*/</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">NULL</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">format_input</span><span class="params">($s, $blank = <span class="number">0</span>)</span> // 格式化输入内容</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span> (!$blank)</span><br><span class="line">$s = trim($s); <span class="comment">// 去空格</span></span><br><span class="line">$s = stripslashes($s); <span class="comment">// 去转义</span></span><br><span class="line">$s - htmlspecialchars($s); <span class="comment">// 防注入</span></span><br><span class="line"><span class="keyword">return</span> $s;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="END"><a href="#END" class="headerlink" title="END"></a>END</h1><p>恭喜您，看完了整篇文章！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;PHP-基础教程&quot;&gt;&lt;a href=&quot;#PHP-基础教程&quot; class=&quot;headerlink&quot; title=&quot;PHP 基础教程&quot;&gt;&lt;/a&gt;PHP 基础教程&lt;/h1&gt;&lt;h2 id=&quot;入门&quot;&gt;&lt;a href=&quot;#入门&quot; class=&quot;headerlink&quot; title=&quot;入门&quot;&gt;&lt;/a&gt;入门&lt;/h2&gt;&lt;h3 id=&quot;输出-echo&quot;&gt;&lt;a href=&quot;#输出-echo&quot; class=&quot;headerlink&quot; title=&quot;输出 echo&quot;&gt;&lt;/a&gt;输出 echo&lt;/h3&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="PHP" scheme="http://blog.iwxyi.com/tags/PHP/"/>
    
      <category term="学习笔记" scheme="http://blog.iwxyi.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Android使用高德地图</title>
    <link href="http://blog.iwxyi.com/2018/12/15/Android%E4%BD%BF%E7%94%A8%E9%AB%98%E5%BE%B7%E5%9C%B0%E5%9B%BE/"/>
    <id>http://blog.iwxyi.com/2018/12/15/Android使用高德地图/</id>
    <published>2018-12-15T03:22:00.000Z</published>
    <updated>2019-10-13T03:22:51.993Z</updated>
    
    <content type="html"><![CDATA[<p>1、要实现高德地图的定位，首先要下载高德地图的SDK </p><p>下载地址：<a href="http://lbs.amap.com/api/android-location-sdk/download/" target="_blank" rel="noopener">http://lbs.amap.com/api/android-location-sdk/download/</a></p><p>然后在高德地图官网上登录你注册的账号并且去控制台—–&gt;应用管理—–&gt;添加新key<br>获取到自己的key值<br>获取key的具体方法的官网地址 ：<a href="http://lbs.amap.com/" target="_blank" rel="noopener">http://lbs.amap.com/</a> </p><a id="more"></a><p>2、通过解压得到.Jar文件并放到libs文件中，手动添加到依赖库中（右键Add—-） </p><p>3、如果你的地图SDK是3D的需要在main中创建 jniLibs 文件夹并把你解压出来的其他文件放到此处 </p><p>4、开发环境已经配置好了，接下来就是敲代码了</p><blockquote><p>导入高德SDK：<a href="https://lbs.amap.com/api/android-sdk/guide/create-project/android-studio-create-project" target="_blank" rel="noopener">https://lbs.amap.com/api/android-sdk/guide/create-project/android-studio-create-project</a></p><p>先下载所需要的SDK，然后把 jar 放进去。（只有 3D 地图才需要 so 库，其余不用放）</p></blockquote><p>在工程的“ AndroidManifest.xml ”清单文件中添加key和Service</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta-data</span> <span class="attr">android:name</span>=<span class="string">"com.amap.api.v2.apikey"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:value</span>=<span class="string">"你申请的key"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">service</span> <span class="attr">android:name</span>=<span class="string">"com.amap.api.location.APSService"</span>&gt;</span><span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>添加权限</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--允许程序打开网络套接字--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--允许程序设置内置sd卡的写权限--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.WRITE_EXTERNAL_STORAGE"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--允许程序获取网络状态--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.ACCESS_NETWORK_STATE"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--允许程序访问WiFi网络信息--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.ACCESS_WIFI_STATE"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--允许程序读写手机状态和身份--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.READ_PHONE_STATE"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--用于进行网络定位--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.ACCESS_COARSE_LOCATION"</span>&gt;</span><span class="tag">&lt;/<span class="name">uses-permission</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--用于访问GPS定位--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.ACCESS_FINE_LOCATION"</span>&gt;</span><span class="tag">&lt;/<span class="name">uses-permission</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--用于获取wifi的获取权限，wifi信息会用来进行网络定位--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.CHANGE_WIFI_STATE"</span>&gt;</span><span class="tag">&lt;/<span class="name">uses-permission</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--用于读取手机当前的状态--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.READ_PHONE_STATE"</span>&gt;</span><span class="tag">&lt;/<span class="name">uses-permission</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--用于申请调用A-GPS模块--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.ACCESS_LOCATION_EXTRA_COMMANDS"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--获取运营商信息，用于支持提供运营商信息相关的接口--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.ACCESS_NETWORK_STATE"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--用于访问wifi网络信息，wifi信息会用于进行网络定位--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.ACCESS_WIFI_STATE"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--这个权限用于获取wifi的获取权限，wifi信息会用来进行网络定位--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.CHANGE_WIFI_STATE"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--用于访问网络，网络定位需要上网--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--用于读取手机当前的状态--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.READ_PHONE_STATE"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--写入扩展存储，向扩展卡写入数据，用于写入缓存定位数据--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.WRITE_EXTERNAL_STORAGE"</span> /&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>acticity_main.xml布局文件</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">com.amap.api.maps.MapView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/map"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span><span class="tag">&lt;/<span class="name">com.amap.api.maps.MapView</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>MainActivity代码</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.amap.api.location.AMapLocation;</span><br><span class="line"><span class="keyword">import</span> com.amap.api.location.AMapLocationClient;</span><br><span class="line"><span class="keyword">import</span> com.amap.api.location.AMapLocationClientOption;</span><br><span class="line"><span class="keyword">import</span> com.amap.api.location.AMapLocationListener;</span><br><span class="line"><span class="keyword">import</span> com.amap.api.maps.AMap;</span><br><span class="line"><span class="keyword">import</span> com.amap.api.maps.CameraUpdateFactory;</span><br><span class="line"><span class="keyword">import</span> com.amap.api.maps.LocationSource;</span><br><span class="line"><span class="keyword">import</span> com.amap.api.maps.MapView;</span><br><span class="line"><span class="keyword">import</span> com.amap.api.maps.UiSettings;</span><br><span class="line"><span class="keyword">import</span> com.amap.api.maps.model.LatLng;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">LocationSource</span>, <span class="title">AMapLocationListener</span> </span>{</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//AMap是地图对象</span></span><br><span class="line">    <span class="keyword">private</span> AMap aMap;</span><br><span class="line">    <span class="keyword">private</span> MapView mapView;</span><br><span class="line">    <span class="comment">//声明AMapLocationClient类对象，定位发起端</span></span><br><span class="line">    <span class="keyword">private</span> AMapLocationClient mLocationClient = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//声明mLocationOption对象，定位参数</span></span><br><span class="line">    <span class="keyword">public</span> AMapLocationClientOption mLocationOption = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//声明mListener对象，定位监听器</span></span><br><span class="line">    <span class="keyword">private</span> OnLocationChangedListener mListener = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//标识，用于判断是否只显示一次定位信息和用户重新定位</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isFirstLoc = <span class="keyword">true</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="comment">//获取地图控件引用</span></span><br><span class="line">        mapView = (MapView) findViewById(R.id.map);</span><br><span class="line">        <span class="comment">//在activity执行onCreate时执行mMapView.onCreate(savedInstanceState)，实现地图生命周期管理</span></span><br><span class="line">        mapView.onCreate(savedInstanceState);</span><br><span class="line">        <span class="keyword">if</span> (aMap == <span class="keyword">null</span>) {</span><br><span class="line">            aMap = mapView.getMap();</span><br><span class="line">            <span class="comment">//设置显示定位按钮 并且可以点击</span></span><br><span class="line">            UiSettings settings = aMap.getUiSettings();</span><br><span class="line">            aMap.setLocationSource(<span class="keyword">this</span>);<span class="comment">//设置了定位的监听</span></span><br><span class="line">            <span class="comment">// 是否显示定位按钮</span></span><br><span class="line">            settings.setMyLocationButtonEnabled(<span class="keyword">true</span>);</span><br><span class="line">            aMap.setMyLocationEnabled(<span class="keyword">true</span>);<span class="comment">//显示定位层并且可以触发定位,默认是flase</span></span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//开始定位</span></span><br><span class="line">        location();</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">location</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="comment">//初始化定位</span></span><br><span class="line">        mLocationClient = <span class="keyword">new</span> AMapLocationClient(getApplicationContext());</span><br><span class="line">        <span class="comment">//设置定位回调监听</span></span><br><span class="line">        mLocationClient.setLocationListener(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">//初始化定位参数</span></span><br><span class="line">        mLocationOption = <span class="keyword">new</span> AMapLocationClientOption();</span><br><span class="line">        <span class="comment">//设置定位模式为Hight_Accuracy高精度模式，Battery_Saving为低功耗模式，Device_Sensors是仅设备模式</span></span><br><span class="line">        mLocationOption.setLocationMode(AMapLocationClientOption.AMapLocationMode.Hight_Accuracy);</span><br><span class="line">        <span class="comment">//设置是否返回地址信息（默认返回地址信息）</span></span><br><span class="line">        mLocationOption.setNeedAddress(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//设置是否只定位一次,默认为false</span></span><br><span class="line">        mLocationOption.setOnceLocation(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">//设置是否强制刷新WIFI，默认为强制刷新</span></span><br><span class="line">        mLocationOption.setWifiActiveScan(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//设置是否允许模拟位置,默认为false，不允许模拟位置</span></span><br><span class="line">        mLocationOption.setMockEnable(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">//设置定位间隔,单位毫秒,默认为2000ms</span></span><br><span class="line">        mLocationOption.setInterval(<span class="number">2000</span>);</span><br><span class="line">        <span class="comment">//给定位客户端对象设置定位参数</span></span><br><span class="line">        mLocationClient.setLocationOption(mLocationOption);</span><br><span class="line">        <span class="comment">//启动定位</span></span><br><span class="line">        mLocationClient.startLocation();</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        <span class="comment">//在activity执行onDestroy时执行mMapView.onDestroy()，实现地图生命周期管理</span></span><br><span class="line">        mapView.onDestroy();</span><br><span class="line">        mLocationClient.stopLocation();<span class="comment">//停止定位</span></span><br><span class="line">        mLocationClient.onDestroy();<span class="comment">//销毁定位客户端。</span></span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>.onResume();</span><br><span class="line">        <span class="comment">//在activity执行onResume时执行mMapView.onResume ()，实现地图生命周期管理</span></span><br><span class="line">        mapView.onResume();</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>.onPause();</span><br><span class="line">        <span class="comment">//在activity执行onPause时执行mMapView.onPause ()，实现地图生命周期管理</span></span><br><span class="line">        mapView.onPause();</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onSaveInstanceState</span><span class="params">(Bundle outState)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>.onSaveInstanceState(outState);</span><br><span class="line">        <span class="comment">//在activity执行onSaveInstanceState时执行mMapView.onSaveInstanceState (outState)，实现地图生命周期管理</span></span><br><span class="line">        mapView.onSaveInstanceState(outState);</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLocationChanged</span><span class="params">(AMapLocation aMapLocation)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (aMapLocation != <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">if</span> (aMapLocation.getErrorCode() == <span class="number">0</span>) {</span><br><span class="line">                <span class="comment">//定位成功回调信息，设置相关消息</span></span><br><span class="line">                aMapLocation.getLocationType();<span class="comment">//获取当前定位结果来源，如网络定位结果，详见官方定位类型表</span></span><br><span class="line">                aMapLocation.getLatitude();<span class="comment">//获取纬度</span></span><br><span class="line">                aMapLocation.getLongitude();<span class="comment">//获取经度</span></span><br><span class="line">                aMapLocation.getAccuracy();<span class="comment">//获取精度信息</span></span><br><span class="line">                SimpleDateFormat df = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">                Date date = <span class="keyword">new</span> Date(aMapLocation.getTime());</span><br><span class="line">                df.format(date);<span class="comment">//定位时间</span></span><br><span class="line">                aMapLocation.getAddress();<span class="comment">//地址，如果option中设置isNeedAddress为false，则没有此结果，网络定位结果中会有地址信息，GPS定位不返回地址信息。</span></span><br><span class="line">                aMapLocation.getCountry();<span class="comment">//国家信息</span></span><br><span class="line">                aMapLocation.getProvince();<span class="comment">//省信息</span></span><br><span class="line">                aMapLocation.getCity();<span class="comment">//城市信息</span></span><br><span class="line">                aMapLocation.getDistrict();<span class="comment">//城区信息</span></span><br><span class="line">                aMapLocation.getStreet();<span class="comment">//街道信息</span></span><br><span class="line">                aMapLocation.getStreetNum();<span class="comment">//街道门牌号信息</span></span><br><span class="line">                aMapLocation.getCityCode();<span class="comment">//城市编码</span></span><br><span class="line">                aMapLocation.getAdCode();<span class="comment">//地区编码</span></span><br><span class="line"> </span><br><span class="line">                <span class="comment">// 如果不设置标志位，此时再拖动地图时，它会不断将地图移动到当前的位置</span></span><br><span class="line">                <span class="keyword">if</span> (isFirstLoc) {</span><br><span class="line">                    <span class="comment">//设置缩放级别</span></span><br><span class="line">                    aMap.moveCamera(CameraUpdateFactory.zoomTo(<span class="number">17</span>));</span><br><span class="line">                    <span class="comment">//将地图移动到定位点</span></span><br><span class="line">                    aMap.moveCamera(CameraUpdateFactory.changeLatLng(<span class="keyword">new</span> LatLng(aMapLocation.getLatitude(), aMapLocation.getLongitude())));</span><br><span class="line">                    <span class="comment">//点击定位按钮 能够将地图的中心移动到定位点</span></span><br><span class="line">                    mListener.onLocationChanged(aMapLocation);</span><br><span class="line">                    <span class="comment">//添加图钉</span></span><br><span class="line">                    <span class="comment">//  aMap.addMarker(getMarkerOptions(amapLocation));</span></span><br><span class="line">                    <span class="comment">//获取定位信息</span></span><br><span class="line">                    StringBuffer buffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">                    buffer.append(aMapLocation.getCountry() + <span class="string">""</span></span><br><span class="line">                            + aMapLocation.getProvince() + <span class="string">""</span></span><br><span class="line">                            + aMapLocation.getCity() + <span class="string">""</span></span><br><span class="line">                            + aMapLocation.getProvince() + <span class="string">""</span></span><br><span class="line">                            + aMapLocation.getDistrict() + <span class="string">""</span></span><br><span class="line">                            + aMapLocation.getStreet() + <span class="string">""</span></span><br><span class="line">                            + aMapLocation.getStreetNum());</span><br><span class="line">                    Toast.makeText(getApplicationContext(), buffer.toString(), Toast.LENGTH_LONG).show();</span><br><span class="line">                    isFirstLoc = <span class="keyword">false</span>;</span><br><span class="line">                }</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="comment">//显示错误信息ErrCode是错误码，errInfo是错误信息，详见错误码表。</span></span><br><span class="line">                Log.e(<span class="string">"AmapError"</span>, <span class="string">"location Error, ErrCode:"</span></span><br><span class="line">                        + aMapLocation.getErrorCode() + <span class="string">", errInfo:"</span></span><br><span class="line">                        + aMapLocation.getErrorInfo());</span><br><span class="line">                Toast.makeText(getApplicationContext(), <span class="string">"定位失败"</span>, Toast.LENGTH_LONG).show();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">activate</span><span class="params">(OnLocationChangedListener onLocationChangedListener)</span> </span>{</span><br><span class="line">        mListener = onLocationChangedListener;</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deactivate</span><span class="params">()</span> </span>{</span><br><span class="line">        mListener = <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1、要实现高德地图的定位，首先要下载高德地图的SDK &lt;/p&gt;
&lt;p&gt;下载地址：&lt;a href=&quot;http://lbs.amap.com/api/android-location-sdk/download/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://lbs.amap.com/api/android-location-sdk/download/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;然后在高德地图官网上登录你注册的账号并且去控制台—–&amp;gt;应用管理—–&amp;gt;添加新key&lt;br&gt;获取到自己的key值&lt;br&gt;获取key的具体方法的官网地址 ：&lt;a href=&quot;http://lbs.amap.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://lbs.amap.com/&lt;/a&gt; &lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="Android" scheme="http://blog.iwxyi.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android取时间戳</title>
    <link href="http://blog.iwxyi.com/2018/12/14/Android%E5%8F%96%E6%97%B6%E9%97%B4%E6%88%B3/"/>
    <id>http://blog.iwxyi.com/2018/12/14/Android取时间戳/</id>
    <published>2018-12-14T03:21:00.000Z</published>
    <updated>2019-10-13T03:22:08.591Z</updated>
    
    <content type="html"><![CDATA[<h2 id="取13位时间戳"><a href="#取13位时间戳" class="headerlink" title="取13位时间戳"></a>取13位时间戳</h2><p>都是毫秒级的（13位），用<code>long</code>存</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法 一</span></span><br><span class="line">System.currentTimeMillis();</span><br><span class="line"><span class="comment">//方法 二（速度最慢）</span></span><br><span class="line">Calendar.getInstance().getTimeInMillis();</span><br><span class="line"><span class="comment">//方法 三</span></span><br><span class="line"><span class="keyword">new</span> Date().getTime();</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><h2 id="取当前时间"><a href="#取当前时间" class="headerlink" title="取当前时间"></a>取当前时间</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SimpleDateFormat df = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);<span class="comment">//设置日期格式</span></span><br><span class="line">String date = df.format(<span class="keyword">new</span> Date());<span class="comment">// new Date()为获取当前系统时间，也可使用当前时间戳</span></span><br></pre></td></tr></tbody></table></figure><hr><h2 id="date类型转换为String类型"><a href="#date类型转换为String类型" class="headerlink" title="date类型转换为String类型"></a>date类型转换为String类型</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// formatType格式为yyyy-MM-dd HH:mm:ss//yyyy年MM月dd日 HH时mm分ss秒</span></span><br><span class="line"><span class="comment">// data Date类型的时间</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">dateToString</span><span class="params">(Date data, String formatType)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SimpleDateFormat(formatType).format(data);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="long类型转换为String类型"><a href="#long类型转换为String类型" class="headerlink" title="long类型转换为String类型"></a>long类型转换为String类型</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// currentTime要转换的long类型的时间</span></span><br><span class="line"><span class="comment">// formatType要转换的string类型的时间格式</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">longToString</span><span class="params">(<span class="keyword">long</span> currentTime, String formatType)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ParseException </span>{</span><br><span class="line">    Date date = longToDate(currentTime, formatType); <span class="comment">// long类型转成Date类型</span></span><br><span class="line">    String strTime = dateToString(date, formatType); <span class="comment">// date类型转成String</span></span><br><span class="line">    <span class="keyword">return</span> strTime;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="string类型转换为date类型"><a href="#string类型转换为date类型" class="headerlink" title="string类型转换为date类型"></a>string类型转换为date类型</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// strTime要转换的string类型的时间，formatType要转换的格式yyyy-MM-dd HH:mm:ss//yyyy年MM月dd日</span></span><br><span class="line">    <span class="comment">// HH时mm分ss秒，</span></span><br><span class="line">    <span class="comment">// strTime的时间格式必须要与formatType的时间格式相同</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">stringToDate</span><span class="params">(String strTime, String formatType)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ParseException </span>{</span><br><span class="line">        SimpleDateFormat formatter = <span class="keyword">new</span> SimpleDateFormat(formatType);</span><br><span class="line">        Date date = <span class="keyword">null</span>;</span><br><span class="line">        date = formatter.parse(strTime);</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><h2 id="long转换为Date类型"><a href="#long转换为Date类型" class="headerlink" title="long转换为Date类型"></a>long转换为Date类型</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// currentTime要转换的long类型的时间</span></span><br><span class="line"> <span class="comment">// formatType要转换的时间格式yyyy-MM-dd HH:mm:ss//yyyy年MM月dd日 HH时mm分ss秒</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">longToDate</span><span class="params">(<span class="keyword">long</span> currentTime, String formatType)</span></span></span><br><span class="line"><span class="function"> <span class="keyword">throws</span> ParseException </span>{</span><br><span class="line"> Date dateOld = <span class="keyword">new</span> Date(currentTime); <span class="comment">// 根据long类型的毫秒数生命一个date类型的时间</span></span><br><span class="line"> String sDateTime = dateToString(dateOld, formatType); <span class="comment">// 把date类型的时间转换为string</span></span><br><span class="line"> Date date = stringToDate(sDateTime, formatType); <span class="comment">// 把String类型转换为Date类型</span></span><br><span class="line"> <span class="keyword">return</span> date;</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure><h2 id="String类型转换为long类型"><a href="#String类型转换为long类型" class="headerlink" title="String类型转换为long类型"></a>String类型转换为long类型</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// strTime要转换的String类型的时间</span></span><br><span class="line"><span class="comment">// formatType时间格式</span></span><br><span class="line"><span class="comment">// strTime的时间格式和formatType的时间格式必须相同</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">stringToLong</span><span class="params">(String strTime, String formatType)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ParseException </span>{</span><br><span class="line">    Date date = stringToDate(strTime, formatType); <span class="comment">// String类型转成date类型</span></span><br><span class="line">    <span class="keyword">if</span> (date == <span class="keyword">null</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">long</span> currentTime = dateToLong(date); <span class="comment">// date类型转成long类型</span></span><br><span class="line">        <span class="keyword">return</span> currentTime;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="date类型转换为long类型"><a href="#date类型转换为long类型" class="headerlink" title="date类型转换为long类型"></a>date类型转换为long类型</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// date要转换的date类型的时间</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">dateToLong</span><span class="params">(Date date)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> date.getTime();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="获取日期时间数值"><a href="#获取日期时间数值" class="headerlink" title="获取日期时间数值"></a>获取日期时间数值</h1><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">    Calendar c = Calendar.getInstance();<span class="comment">//</span></span><br><span class="line">    mYear = c.get(Calendar.YEAR);        <span class="comment">// 获取当前年份</span></span><br><span class="line">    mMonth = c.get(Calendar.MONTH) + <span class="number">1</span>;  <span class="comment">// 获取当前月份</span></span><br><span class="line">    mDay = c.get(Calendar.DAY_OF_MONTH); <span class="comment">// 获取当日期</span></span><br><span class="line">    mWay = c.get(Calendar.DAY_OF_WEEK);  <span class="comment">// 获取当前日期的星期</span></span><br><span class="line">    mHour = c.get(Calendar.HOUR_OF_DAY); <span class="comment">//时</span></span><br><span class="line">    mMinute = c.get(Calendar.MINUTE);    <span class="comment">//分</span></span><br><span class="line">    System.out.println(mYear);</span><br><span class="line">    System.out.println(mMonth);</span><br><span class="line">    System.out.println(mDay);</span><br><span class="line">    System.out.println(mWay);</span><br><span class="line">    System.out.println(mHour);</span><br><span class="line">    System.out.println(mMinute);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;取13位时间戳&quot;&gt;&lt;a href=&quot;#取13位时间戳&quot; class=&quot;headerlink&quot; title=&quot;取13位时间戳&quot;&gt;&lt;/a&gt;取13位时间戳&lt;/h2&gt;&lt;p&gt;都是毫秒级的（13位），用&lt;code&gt;long&lt;/code&gt;存&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//方法 一&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.currentTimeMillis();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//方法 二（速度最慢）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Calendar.getInstance().getTimeInMillis();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//方法 三&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Date().getTime();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="Android" scheme="http://blog.iwxyi.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Markdown-讲解</title>
    <link href="http://blog.iwxyi.com/2018/12/07/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F-%E8%AE%B2%E8%A7%A3/"/>
    <id>http://blog.iwxyi.com/2018/12/07/正则表达式-讲解/</id>
    <published>2018-12-07T13:05:00.000Z</published>
    <updated>2019-10-12T23:18:41.803Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Markdown-简介"><a href="#Markdown-简介" class="headerlink" title="Markdown 简介"></a>Markdown 简介</h2><p>Markdown 是一种轻量级的「<strong>标记语言</strong>」，通常为程序员群体所用，适用于泡技术论坛、写博客日志、技术文稿、记录代码片段、起草邮件等场景。 </p><p>可以通过简单、易读易写的<strong>文本格式</strong>生成结构化的 HTML 网页，以及 Word 和 pdf 文档。目前 知乎、简书、github、Stackoverflow、以及绝大多数博客论坛 均支持这种格式。 </p><a id="more"></a><h3 id="为什么要学-Markdown？"><a href="#为什么要学-Markdown？" class="headerlink" title="为什么要学 Markdown？"></a>为什么要学 Markdown？</h3><p>因为简单；因为好用；因为这篇教程就是用 Markdown 写的。</p><p>让“码字的归码字，排版的归排版”，专注写作，效率快速提升；</p><p>除此之外基础的任务管理、项目管理、逻辑梳理、公式协作等等，都可以用基本的Markdown来完成……</p><h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h3><p>简单符号排版，15 分钟上手。</p><p>纯键盘操作，写作时少调用鼠标，效率能提升很多。</p><p>使用 Markdown 的 h1、h2、h3 标题，列表、分列表，结构和逻辑都很清晰。排版成同样的效果，md 与 word 比起来简直毫不费力气。另外，还有插入图片、链接、粗体、斜体等功能。</p><p>纯文本编辑，轻量级。纯文本有很多好处，例如占用空间小、移植方便快捷、可以用 git 比较版本、编辑时不需要软件支持等。</p><p>目前支持将 md 转换为多种格式，包括 html、tex、pdf 等。</p><h3 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h3><ul><li>语法不是很统一，不同的编辑器语法有区别</li><li>不能对文档进行精细调整，或者个性化调整。</li><li>据说过于程序员友好。</li></ul><h3 id="对话式红楼梦"><a href="#对话式红楼梦" class="headerlink" title="对话式红楼梦"></a>对话式红楼梦</h3><h4 id="曹雪芹写的效果如下："><a href="#曹雪芹写的效果如下：" class="headerlink" title="曹雪芹写的效果如下："></a>曹雪芹写的效果如下：</h4><p>贾芸听声音像是熟人，仔细一看，原来是紧邻倪二。这倪二是个泼皮，专放重利债，在赌博场吃饭，专爱喝酒打架。此时正从欠钱人家索债归来，已在醉乡，不料贾芸碰了他，就要动手。贾芸叫道：“老二！住手！是我冲撞了你。”倪二一听他的语音，将醉眼睁开一看，见是贾芸，忙松了手，趔趄著笑道：“原来是贾二爷。这会子那里去？”贾芸道：“告诉不得你，平白的又讨了个没趣儿！”倪二道：“不妨。有什么不平的事，告诉我，我替你出气。这三街六巷，凭他是谁，若得罪了我醉金刚倪二的街坊，管叫他人离家散！”贾芸道：“老二，你别生气，听我告诉你这缘故。”便把卜世仁一段事告诉了倪二。倪二听了，大怒道：“要不是二爷的亲戚，我就骂出来，真真把人气死！－－也罢，你也不必愁，我这里现有几两银子，你要用只管拿去。我们好街坊，这银子是不要利钱的。”一头说，一头从搭包内掏出一包银子来。</p><hr><h4 id="Markdown-的效果"><a href="#Markdown-的效果" class="headerlink" title="Markdown 的效果"></a>Markdown 的效果</h4><p> <strong>用Markdown简单处理一下的话，这段的排版就变了：</strong></p><p>贾芸听声音像是熟人，仔细一看，原来是紧邻倪二。这倪二是个泼皮，专放重利债，在赌博场吃饭，专爱喝酒打架。此时正从欠钱人家索债归来，已在醉乡，不料贾芸碰了他，就要动手。贾芸叫道：</p><blockquote><p>“老二！住手！是我冲撞了你。”</p></blockquote><p>倪二一听他的语音，将醉眼睁开一看，见是贾芸，忙松了手，趔趄著笑道：</p><blockquote><p>“原来是贾二爷。这会子那里去？”</p></blockquote><p>贾芸道：</p><blockquote><p>“告诉不得你，平白的又讨了个没趣儿！”</p></blockquote><p>倪二道：</p><blockquote><p>“不妨。有什么不平的事，告诉我，我替你出气。这三街六巷，凭他是谁，若得罪了我醉金刚倪二的街坊，管叫他人离家散！”</p></blockquote><p>贾芸道：</p><blockquote><p>“老二，你别生气，听我告诉你这缘故。”</p></blockquote><p>便把卜世仁一段事告诉了倪二。倪二听了，大怒道：</p><blockquote><p>“要不是二爷的亲戚，我就骂出来，真真把人气死！－－也罢，你也不必愁，我这里现有几两银子，你要用只管拿去。我们好街坊，这银子是不要利钱的。”</p></blockquote><p>一头说，一头从搭包内掏出一包银子来。</p><hr><h2 id="开始撰写-Markdown"><a href="#开始撰写-Markdown" class="headerlink" title="开始撰写 Markdown"></a>开始撰写 Markdown</h2><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>Markdown 支持两种标题的语法，类 Setext 和类 atx 形式。（部分编辑器不支持）</p><p>类 Setext 形式是用底线的形式，利用 = （最高阶标题）和 - （第二阶标题），例如：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">This is an H1</span><br><span class="line">=============</span><br><span class="line"></span><br><span class="line">This is an H2</span><br><span class="line">-------------</span><br></pre></td></tr></tbody></table></figure><p>类 Atx 形式则是在行首插入 1 到 6 个 # ，对应到标题 1 到 6 阶，例如：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 这是 H1</span><br><span class="line"></span><br><span class="line">## 这是 H2</span><br><span class="line"></span><br><span class="line">###### 这是 H6</span><br></pre></td></tr></tbody></table></figure><p>你可以选择性地「闭合」类 atx 样式的标题，这纯粹只是美观用的，若是觉得这样看起来比较舒适，你就可以在行尾加上 #，而行尾的 # 数量也不用和开头一样（行首的井字符数量决定标题的阶数）：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 这是 H1 #</span><br><span class="line"></span><br><span class="line">## 这是 H2 ##</span><br><span class="line"></span><br><span class="line">### 这是 H3 ######</span><br></pre></td></tr></tbody></table></figure><h3 id="区块引用Blockquotes"><a href="#区块引用Blockquotes" class="headerlink" title="区块引用Blockquotes"></a>区块引用Blockquotes</h3><p>Markdown 标记区块引用是使用类似 email 中用 &gt; 的引用方式。如果你还熟悉在 email 信件中的引言部分，你就知道怎么在 Markdown 文件中建立一个区块引用，那会看起来像是你自己先断好行，然后在每行的最前面加上 &gt; ：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,</span><br><span class="line">&gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.</span><br><span class="line">&gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</span><br><span class="line">&gt; </span><br><span class="line">&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse</span><br><span class="line">&gt; id sem consectetuer libero luctus adipiscing.</span><br></pre></td></tr></tbody></table></figure><p>Markdown 也允许你偷懒只在整个段落的第一行最前面加上 &gt; ：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,</span><br><span class="line">consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.</span><br><span class="line">Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</span><br><span class="line"></span><br><span class="line">&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse</span><br><span class="line">id sem consectetuer libero luctus adipiscing.</span><br></pre></td></tr></tbody></table></figure><p>区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 &gt; ：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> This is the first level of quoting.</span><br><span class="line">&gt;</span><br><span class="line">&gt; &gt; This is nested blockquote.</span><br><span class="line">&gt;</span><br><span class="line">&gt; Back to the first level.</span><br></pre></td></tr></tbody></table></figure><p>引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; ## 这是一个标题。</span><br><span class="line">&gt; </span><br><span class="line">&gt; 1.   这是第一行列表项。</span><br><span class="line">&gt; 2.   这是第二行列表项。</span><br><span class="line">&gt; </span><br><span class="line">&gt; 给出一些例子代码：</span><br><span class="line">&gt; </span><br><span class="line">&gt;     return shell_exec("echo $input | $markdown_script");</span><br></pre></td></tr></tbody></table></figure><p>任何像样的文本编辑器都能轻松地建立 email 型的引用。例如在 BBEdit 中，你可以选取文字后然后从选单中选择增加引用阶层。</p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>Markdown 支持有序列表和无序列表。</p><p>无序列表使用星号、加号或是减号作为列表标记：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*   Red</span><br><span class="line">*   Green</span><br><span class="line">*   Blue</span><br></pre></td></tr></tbody></table></figure><p>等同于：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">+   Red</span><br><span class="line">+   Green</span><br><span class="line">+   Blue</span><br></pre></td></tr></tbody></table></figure><p>也等同于：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-   Red</span><br><span class="line">-   Green</span><br><span class="line">-   Blue</span><br></pre></td></tr></tbody></table></figure><p>有序列表则使用数字接着一个英文句点（word里面也是这样）：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. Bird</span><br><span class="line">2. McHale</span><br><span class="line">3. Parish</span><br></pre></td></tr></tbody></table></figure><p>列表项目标记通常是放在最左边，但是其实也可以缩进，最多 3 个空格，项目标记后面则一定要接着至少一个空格或制表符。</p><p>要让列表看起来更漂亮，你可以把内容用固定的缩进整理好：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.</span><br><span class="line">    Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,</span><br><span class="line">    viverra nec, fringilla in, laoreet vitae, risus.</span><br><span class="line">*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.</span><br><span class="line">    Suspendisse id sem consectetuer libero luctus adipiscing.</span><br></pre></td></tr></tbody></table></figure><p>但是如果你懒，那也行：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.</span><br><span class="line">Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,</span><br><span class="line">viverra nec, fringilla in, laoreet vitae, risus.</span><br><span class="line">*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.</span><br><span class="line">Suspendisse id sem consectetuer libero luctus adipiscing.</span><br></pre></td></tr></tbody></table></figure><p>列表项目可以包含多个段落，每个项目下的段落都必须缩进 4 个空格或是 1 个制表符：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.  This is a list item with two paragraphs. Lorem ipsum dolor</span><br><span class="line">    sit amet, consectetuer adipiscing elit. Aliquam hendrerit</span><br><span class="line">    mi posuere lectus.</span><br><span class="line"></span><br><span class="line">    Vestibulum enim wisi, viverra nec, fringilla in, laoreet</span><br><span class="line">    vitae, risus. Donec sit amet nisl. Aliquam semper ipsum</span><br><span class="line">    sit amet velit.</span><br><span class="line"></span><br><span class="line">2.  Suspendisse id sem consectetuer libero luctus adipiscing.</span><br></pre></td></tr></tbody></table></figure><p>如果你每行都有缩进，看起来会看好很多，当然，再次地，如果你很懒惰，Markdown 也允许：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">*   This is a list item with two paragraphs.</span><br><span class="line"></span><br><span class="line">    This is the second paragraph in the list item. You're</span><br><span class="line">only required to indent the first line. Lorem ipsum dolor</span><br><span class="line">sit amet, consectetuer adipiscing elit.</span><br><span class="line"></span><br><span class="line">*   Another item in the same list.</span><br></pre></td></tr></tbody></table></figure><p>如果要在列表项目内放进引用，那 &gt; 就需要缩进：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*   A list item with a blockquote:</span><br><span class="line"></span><br><span class="line">    &gt; This is a blockquote</span><br><span class="line">    &gt; inside a list item.</span><br></pre></td></tr></tbody></table></figure><p>如果要放代码区块的话，该区块就需要缩进两次，也就是 8 个空格或是 2 个制表符：（有些编辑器不支持）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*   一列表项包含一个列表区块：</span><br><span class="line"></span><br><span class="line">        &lt;代码写在这&gt;</span><br></pre></td></tr></tbody></table></figure><p>当然，项目列表很可能会不小心产生，像是下面这样的写法</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1986. What a great season.</span><br></pre></td></tr></tbody></table></figure><p>换句话说，也就是在行首出现数字-句点-空白，要避免这样的状况，你可以在句点前面加上反斜杠。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1986\. What a great season.</span><br></pre></td></tr></tbody></table></figure><h3 id="待办事项"><a href="#待办事项" class="headerlink" title="待办事项"></a>待办事项</h3><p>用 <code>- [ ]</code> 来表示一个待办事项列表（注意有三个空格）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- [ ] 未完成列表</span><br><span class="line">- [x] 已完成列表</span><br></pre></td></tr></tbody></table></figure><h3 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h3><p>和程序相关的写作或是标签语言原始码通常会有已经排版好的代码区块，通常这些区块我们并不希望它以一般段落文件的方式去排版，而是照原来的样子显示，Markdown 会用 <code>&lt;pre&gt;</code> 和 <code>&lt;code&gt;</code> 标签来把代码区块包起来。</p><p>要在 Markdown 中建立代码区块很简单，只要用一对</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">~~~C++</span><br><span class="line">```C++</span><br><span class="line">    for (int i = 0; i &lt; 10; i++)</span><br><span class="line">        printf("%d\n", i);</span><br></pre></td></tr></tbody></table></figure><p></p><p><del>~</del></p><p>上面的</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 分隔线</span><br><span class="line"></span><br><span class="line">你可以在一行中用三个以上的短横杠来建立一个分隔线，行内不能有其他东西。</span><br></pre></td></tr></tbody></table></figure><p></p><hr><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 链接</span><br><span class="line"></span><br><span class="line">链接文字用 [方括号] 来标记，要建立一个行内的链接，只要在方块括号后面紧接着圆括号并插入网址链接即可，例如：</span><br></pre></td></tr></tbody></table></figure><p>This is <a href="http://example.com/" target="_blank" rel="noopener">an example</a> inline link.</p><p><a href="http://example.net/" target="_blank" rel="noopener">This link</a> has no title attribute.</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">如果你是要链接到同样主机的资源，你可以使用相对路径：</span><br></pre></td></tr></tbody></table></figure><p>See my <a href="/about/">About</a> page for details.</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 强调</span><br><span class="line"></span><br><span class="line">Markdown 使用星号（*）和底线（_）作为标记强调字词的符号 。一对是斜体，两对是粗体。</span><br></pre></td></tr></tbody></table></figure><p><em>single asterisks</em></p><p><em>single underscores</em></p><p><strong>double asterisks</strong></p><p><strong>double underscores</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*single asterisks*</span><br><span class="line"></span><br><span class="line">_single underscores_</span><br><span class="line"></span><br><span class="line">**double asterisks**</span><br><span class="line"></span><br><span class="line">__double underscores__</span><br><span class="line"></span><br><span class="line">你可以随便用你喜欢的样式，唯一的限制是，你用什么符号开启标签，就要用什么符号结束。</span><br><span class="line"></span><br><span class="line">强调也可以直接插在文字中间：</span><br></pre></td></tr></tbody></table></figure><p>un<em>frigging</em>believable</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">但是**如果你的 \* 和 _ 两边都有空白的话，它们就只会被当成普通的符号。**</span><br><span class="line"></span><br><span class="line">如果要在文字前后直接插入普通的星号或底线，你可以用反斜线：</span><br></pre></td></tr></tbody></table></figure><p>*this text is surrounded by literal asterisks*</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 删除线</span><br><span class="line"></span><br><span class="line">使用两对波浪线 ~~ 来给文字加上~~删除线~~。注意波浪线和文字之间不能有空格。</span><br></pre></td></tr></tbody></table></figure><p><del>删除线</del></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 代码</span><br><span class="line"></span><br><span class="line">如果要标记一小段行内代码，你可以用反引号把它包起来（`），例如：</span><br></pre></td></tr></tbody></table></figure><p>Use the <code>printf()</code> function.</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">如果要在代码区段内插入反引号，你可以用多个反引号来开启和结束代码区段：</span><br></pre></td></tr></tbody></table></figure><p><code>There is a literal backtick (`) here.</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 图片</span><br><span class="line"></span><br><span class="line">很明显地，要在纯文字应用中设计一个「自然」的语法来插入图片是有一定难度的。</span><br><span class="line"></span><br><span class="line">Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： 行内式和参考式。</span><br><span class="line"></span><br><span class="line">行内式的图片语法看起来像是：</span><br></pre></td></tr></tbody></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/path/to/img.jpg" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">详细叙述如下：</span><br><span class="line"></span><br><span class="line">- 一个惊叹号 !</span><br><span class="line">- 接着一个方括号，里面放上图片的替代文字</span><br><span class="line">- 接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上 选择性的 'title' 文字。</span><br><span class="line"></span><br><span class="line">到目前为止， Markdown 还没有办法指定图片的宽高，如果你需要的话，你可以使用普通的 `&lt;img&gt;` 标签。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 反斜杠</span><br><span class="line"></span><br><span class="line">Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文字旁边的方式来做出强调效果，你可以在星号的前面加上反斜杠：</span><br></pre></td></tr></tbody></table></figure><p>*literal asterisks*</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</span><br></pre></td></tr></tbody></table></figure><p>\   反斜线<br>`   反引号</p><ul><li>星号<br>_   底线<br>{}  花括号<br>[]  方括号<br>()  括弧<h1 id="井字号"><a href="#井字号" class="headerlink" title="井字号"></a>井字号</h1></li></ul><ul><li>加号</li></ul><ul><li>减号<br>.   英文句点<br>!   惊叹号<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 自动链接</span><br><span class="line"></span><br><span class="line">Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用方括号包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如：</span><br></pre></td></tr></tbody></table></figure></li></ul><p><a href="http://example.com/" target="_blank" rel="noopener">http://example.com/</a></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">邮址的自动链接也很类似，只是 Markdown 会先做一个编码转换的过程，把文字字符转成 16 进位码的 HTML 实体，这样的格式可以糊弄一些不好的邮址收集机器人，例如：</span><br></pre></td></tr></tbody></table></figure><p><a href="mailto:address@example.com" target="_blank" rel="noopener">address@example.com</a></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 表格</span><br><span class="line"></span><br><span class="line">表格是Markdown语法中比较复杂的一个，其语法如下：</span><br></pre></td></tr></tbody></table></figure><table><thead><tr><th align="center">表头</th><th align="center">条目一</th><th align="center">条目二</th></tr></thead><tbody><tr><td align="center">项目</td><td align="center">项目一</td><td align="center">项目二</td></tr><tr><td align="center">```</td><td align="center"></td><td align="center"></td></tr></tbody></table><p>以上标记显示效果如下：</p><table><thead><tr><th>表头</th><th>条目一</th><th>条目二</th></tr></thead><tbody><tr><td>项目</td><td>项目一</td><td>项目二</td></tr></tbody></table><blockquote><p>注：三个短斜杠左右的冒号用于控制对齐方式，只放置左边冒号表示文字居左，只放置右边冒号表示文字居右，如果两边都放置冒号表示文字居中。不加冒号默认左对齐。</p></blockquote><h3 id="文字上色"><a href="#文字上色" class="headerlink" title="文字上色"></a>文字上色</h3><p>使用Markdown的同学最郁闷的地方恐怕就是不能给文字添加颜色了。事实上，Markdown的最初目标就是为纯写作而生的。因此，它并没有考虑文字颜色这一点。所以，单纯使用Markdown设置文字颜色已经做不到了。但你可以这样做：</p><ol><li>先用Markdown编辑完成</li><li>导出为html，在需要上色的部分手动添加标签<code>&lt;font color='#ff0000'&gt;  &lt;/font&gt;</code>保存即可。</li></ol><h3 id="Latex数学公式"><a href="#Latex数学公式" class="headerlink" title="Latex数学公式"></a>Latex数学公式</h3><p>1.行内公式：使用两个”$”符号引用公式:</p><p><code>$公式$</code></p><p>2.行间公式：使用两对“$$”符号引用公式：</p><p><code>$$公式$$</code></p><p>输例如$\sqrt{x^{2}}$ </p><h3 id="上标下标"><a href="#上标下标" class="headerlink" title="上标下标"></a>上标下标</h3><p>在<code>$ $</code> 公式中，用 <code>^p</code> 表示上标。若有多个，用 <code>{ }</code> 括起来。</p><p>下标符号为 <code>_</code>，用法同上标。</p><blockquote><p>Typora 的扩展语法中，可以用<code>^上标^</code>与<code>~下标~</code>来表示（需要先到设置中开启）</p></blockquote><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>在文档中，内容远远比工具和格式重要。但适当的格式和工具也会增强文字的渲染力。</p><p>Markdown 是纯文本和富文本之间最恰当的选择。</p><hr><blockquote><p>博客来源：整理，网络，主要是 <a href="http://www.markdown.cn/" target="_blank" rel="noopener">http://www.markdown.cn/</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Markdown-简介&quot;&gt;&lt;a href=&quot;#Markdown-简介&quot; class=&quot;headerlink&quot; title=&quot;Markdown 简介&quot;&gt;&lt;/a&gt;Markdown 简介&lt;/h2&gt;&lt;p&gt;Markdown 是一种轻量级的「&lt;strong&gt;标记语言&lt;/strong&gt;」，通常为程序员群体所用，适用于泡技术论坛、写博客日志、技术文稿、记录代码片段、起草邮件等场景。 &lt;/p&gt;
&lt;p&gt;可以通过简单、易读易写的&lt;strong&gt;文本格式&lt;/strong&gt;生成结构化的 HTML 网页，以及 Word 和 pdf 文档。目前 知乎、简书、github、Stackoverflow、以及绝大多数博客论坛 均支持这种格式。 &lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="语法" scheme="http://blog.iwxyi.com/tags/%E8%AF%AD%E6%B3%95/"/>
    
      <category term="讲解" scheme="http://blog.iwxyi.com/tags/%E8%AE%B2%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>栈与队列-讲解</title>
    <link href="http://blog.iwxyi.com/2018/12/07/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97-%E8%AE%B2%E8%A7%A3/"/>
    <id>http://blog.iwxyi.com/2018/12/07/栈与队列-讲解/</id>
    <published>2018-12-07T12:50:00.000Z</published>
    <updated>2019-10-12T23:18:50.455Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><p>栈是一种特殊的线性表。其特殊性在于限定插入和删除数据元素的操作只能在线性表的一端进行。如下所示：</p><a id="more"></a><p><img src="/images/pasted-1.png" alt="栈"></p><p>结论：先进后出 &amp;&amp; 后进先出（Last In First Out），简称为LIFO线性表。</p><p>例子：手机任务的返回栈、食堂餐盘从下到上叠起来，送给洗盘子的人，从上到下洗</p><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><p>队列(Queue)也是一种运算受限的线性表，它的运算限制与栈不同，是两头都有限制，插入只能在表的一端进行(只进不出)，而删除只能在表的另一端进行(只出不进)，允许删除的一端称为队尾(rear)，允许插入的一端称为队头 (Front),如图所示：</p><p><img src="%5Cimages%5Cpasted-2.png" alt="队列"></p><p>结论：队列的操作原则是先进先出的，所以队列又称作FIFO表(First In First Out)</p><p>例子：各种排队</p><h2 id="纯-C-用法（函数）"><a href="#纯-C-用法（函数）" class="headerlink" title="纯 C 用法（函数）"></a>纯 C 用法（函数）</h2><h3 id="栈-1"><a href="#栈-1" class="headerlink" title="栈"></a>栈</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_SIZE 1000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> _data[MAX_SIZE], _size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> _size != <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (_size &lt; MAX_SIZE<span class="number">-1</span>) {</span><br><span class="line">        _data[_size++] = x;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (_size) {</span><br><span class="line">        _data[--_size] = <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> _size;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">front</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> _size ? _data[<span class="number">0</span>] : <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">back</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> _size ? _data[_size<span class="number">-1</span>] : <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"></span><br><span class="line">    push(<span class="number">100</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, back());</span><br><span class="line">    push(<span class="number">20</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, back());</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>数组转指针：</p><p><code>_data\[([^M].*)\]</code>替换<code>*(_data + \1)</code></p><h2 id="纯C用法（结构体）"><a href="#纯C用法（结构体）" class="headerlink" title="纯C用法（结构体）"></a>纯C用法（结构体）</h2><h3 id="栈-2"><a href="#栈-2" class="headerlink" title="栈"></a>栈</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stack</span> {</span></span><br><span class="line">    <span class="keyword">int</span> _data[<span class="number">1000</span>];</span><br><span class="line">    <span class="keyword">int</span> _size;</span><br><span class="line"></span><br><span class="line">    Stack() {          <span class="comment">// 初始化</span></span><br><span class="line">        _size = <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    Stack(Stack&amp; q) {  <span class="comment">// 拷贝（引用）</span></span><br><span class="line">        _size = q.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; _size; i++)</span><br><span class="line">            _data[i] = q.at(i);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> </span>{     <span class="comment">// 是否为空</span></span><br><span class="line">        <span class="keyword">return</span> !_size;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>{       <span class="comment">// 尺寸</span></span><br><span class="line">        <span class="keyword">return</span> _size;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">at</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{    <span class="comment">// 数据</span></span><br><span class="line">        <span class="keyword">return</span> (x&gt;=<span class="number">0</span> &amp;&amp; x &lt; _size) ? _data[x] : <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{ <span class="comment">// 放入一个</span></span><br><span class="line">        <span class="keyword">if</span> (_size &lt; <span class="number">1000</span>)</span><br><span class="line">            _data[_size++] = x;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>{       <span class="comment">// 取出一个</span></span><br><span class="line">        <span class="keyword">if</span> (_size) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; _size<span class="number">-1</span>; i++)</span><br><span class="line">                _data[i] = _data[i+<span class="number">1</span>];</span><br><span class="line">            --_size;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">front</span><span class="params">()</span> </span>{      <span class="comment">// 获取最新进入的</span></span><br><span class="line">        <span class="keyword">return</span> _size?_data[<span class="number">0</span>] : <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">back</span><span class="params">()</span> </span>{       <span class="comment">// 获取最后进入的</span></span><br><span class="line">        <span class="keyword">return</span> _size?_data[_size<span class="number">-1</span>] : <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>{</span><br><span class="line">        _size = <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    Stack s;</span><br><span class="line"></span><br><span class="line">    s.push(<span class="number">100</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, s.back());</span><br><span class="line">    s.push(<span class="number">20</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, s.back());</span><br><span class="line"></span><br><span class="line">    <span class="function">Stack <span class="title">s2</span><span class="params">(s)</span></span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, s.back());</span><br><span class="line">    s2.clear();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="C-用法"><a href="#C-用法" class="headerlink" title="C++ 用法"></a>C++ 用法</h2><h3 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br></pre></td></tr></tbody></table></figure><h3 id="定义方式"><a href="#定义方式" class="headerlink" title="定义方式"></a>定义方式</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">statck&lt;<span class="keyword">int</span>&gt; q;</span><br></pre></td></tr></tbody></table></figure><h3 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h3><h4 id="栈-3"><a href="#栈-3" class="headerlink" title="栈"></a>栈</h4><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s.empty() <span class="comment">//如果栈为空返回true，否则返回false  </span></span><br><span class="line">s.size()  <span class="comment">//返回栈中元素的个数  </span></span><br><span class="line">s.pop()   <span class="comment">//删除栈顶元素但不返回其值  </span></span><br><span class="line">s.top()   <span class="comment">//返回栈顶的元素，但不删除该元素  </span></span><br><span class="line">s.push(x) <span class="comment">//在栈顶压入新元素 ，参数X为要压入的元素</span></span><br></pre></td></tr></tbody></table></figure><h4 id="队列-1"><a href="#队列-1" class="headerlink" title="队列"></a>队列</h4><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">q.empty() <span class="comment">// 如果队列为空返回true，否则返回false  </span></span><br><span class="line">q.size()  <span class="comment">// 返回队列中元素的个数  </span></span><br><span class="line">q.pop()   <span class="comment">//删除队列首元素但不返回其值  </span></span><br><span class="line">q.front() <span class="comment">// 返回队首元素的值，但不删除该元素  </span></span><br><span class="line">q.push(x) <span class="comment">//在队尾压入新元素 ，X为要压入的元素</span></span><br><span class="line">q.back()  <span class="comment">//返回队列尾元素的值，但不删除该元素</span></span><br></pre></td></tr></tbody></table></figure><h4 id="智能指针"><a href="#智能指针" class="headerlink" title="智能指针"></a>智能指针</h4><p>迭代器 <code>iterator</code></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt;::iterator i;</span><br><span class="line"><span class="keyword">for</span> (i = s.begin(); i != s.end(); ++i)</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *i &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></tbody></table></figure><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; s;</span><br><span class="line">    <span class="keyword">char</span> a = <span class="string">'a'</span>, b = <span class="string">'b'</span>;</span><br><span class="line">    </span><br><span class="line">    q.push(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"push 1"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"empty:"</span> &lt;&lt; q.empty() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"push 2"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    q.push(<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"front:"</span> &lt;&lt; q.front() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    q.pop();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"pop"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"front:"</span> &lt;&lt; q.front() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    q.pop();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"pop"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"empty:"</span> &lt;&lt; q.empty() &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"-----"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    s.push(a);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"push "</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"size:"</span> &lt;&lt; s.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"top:"</span> &lt;&lt; s.top() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    s.push(b);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"push "</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"top:"</span> &lt;&lt; s.top() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    s.pop();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"pop"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"top:"</span> &lt;&lt; s.top() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;h3 id=&quot;栈&quot;&gt;&lt;a href=&quot;#栈&quot; class=&quot;headerlink&quot; title=&quot;栈&quot;&gt;&lt;/a&gt;栈&lt;/h3&gt;&lt;p&gt;栈是一种特殊的线性表。其特殊性在于限定插入和删除数据元素的操作只能在线性表的一端进行。如下所示：&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="算法" scheme="http://blog.iwxyi.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="讲解" scheme="http://blog.iwxyi.com/tags/%E8%AE%B2%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式-讲解</title>
    <link href="http://blog.iwxyi.com/2018/12/06/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%95%99%E7%A8%8B/"/>
    <id>http://blog.iwxyi.com/2018/12/06/正则表达式教程/</id>
    <published>2018-12-06T12:56:00.000Z</published>
    <updated>2019-10-12T23:15:13.211Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>正则表达式(Regular Expression，简称 RegExp)是一种<strong>文本模式</strong>，包括普通字符（例如，a 到 z 之间的字母）和特殊字符（称为”元字符”）。它使用<strong>单个字符串</strong>来描述、匹配<strong>一系列</strong>匹配某个句法规则的字符串。</p><a id="more"></a><h2 id="为什么使用正则表达式？"><a href="#为什么使用正则表达式？" class="headerlink" title="为什么使用正则表达式？"></a>为什么使用正则表达式？</h2><p>典型的搜索和替换操作要求您提供与预期的搜索结果<strong>匹配</strong>的确切文本。虽然这种技术对于对静态文本执行简单搜索和替换任务可能已经足够了，但它缺乏灵活性，若采用这种方法搜索<strong>动态文本</strong>，即使不是不可能，至少也会变得很困难。</p><h2 id="例1：文件匹配"><a href="#例1：文件匹配" class="headerlink" title="例1：文件匹配"></a>例1：文件匹配</h2><p><code>data(\w)?\.dat</code> 匹配下列所有文件</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data.dat</span><br><span class="line">data1.dat</span><br><span class="line">data2.dat</span><br><span class="line">datax.dat</span><br><span class="line">dataN.dat</span><br></pre></td></tr></tbody></table></figure><p>使用 <code>*</code> 字符代替 <code>?</code> 字符扩大了找到的文件的数量。<code>data.*\.dat</code> 匹配下列所有文件：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data.dat</span><br><span class="line">data1.dat</span><br><span class="line">data2.dat</span><br><span class="line">data12.dat</span><br><span class="line">datax.dat</span><br><span class="line">dataXYZ.dat</span><br></pre></td></tr></tbody></table></figure><h2 id="例2：colou-r"><a href="#例2：colou-r" class="headerlink" title="例2：colou?r"></a>例2：colou?r</h2><p>同时匹配 <code>color</code>与<code>colour</code></p><h2 id="例3：特定格式"><a href="#例3：特定格式" class="headerlink" title="例3：特定格式"></a>例3：特定格式</h2><p><code>^[0-9]+abc$</code></p><ul><li><code>^</code> 为匹配输入字符串的开始位置</li><li><code>[0-9]+</code>匹配多个数字， <code>[0-9]</code> 匹配单个数字，+ 匹配一个或者多个。</li><li><code>abc$</code>匹配字母 <code>abc</code> 并以 <code>abc</code> 结尾，<code>$</code> 为匹配输入字符串的结束位置。</li></ul><p>我们在写用户注册表单时，只允许用户名包含字符、数字、下划线和连接字符(-)，并设置用户名的长度，我们就可以使用这一类正则表达式来设定。</p><h2 id=""><a href="#" class="headerlink" title="()"></a>()</h2><p><code>()</code> 标记一个子表达式的<strong>开始和结束</strong>位置。子表达式可以获取供以后使用。要匹配这些字符，请使用 <code>\(</code> 和 <code>\)</code>。</p><h2 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h2><p>所谓特殊字符，就是一些有<strong>特殊含义</strong>的字符。</p><p>许多元字符要求在试图匹配它们时特别对待。若要匹配这些特殊字符，必须首先使字符”转义”，即，将反斜杠字符\ 放在它们前面。下表列出了正则表达式中的特殊字符：</p><table><thead><tr><th>特别字符</th><th>描述</th></tr></thead><tbody><tr><td>$</td><td>匹配输入字符串的结尾位置。如果设置了 RegExp 对象的 Multiline 属性，则 <code>$</code> 也匹配 ‘\n’ 或 ‘\r’。要匹配 <code>$</code> 字符本身，请使用 <code>\$</code>。</td></tr><tr><td>( )</td><td>标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用 ( 和 )。</td></tr><tr><td>*</td><td>匹配前面的子表达式零次或多次。要匹配 * 字符，请使用 *。</td></tr><tr><td>+</td><td>匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 +。</td></tr><tr><td>.</td><td>匹配除换行符 \n 之外的任何单字符。要匹配 . ，请使用 . 。</td></tr><tr><td>[</td><td>标记一个中括号表达式的开始。要匹配 [，请使用 [。</td></tr><tr><td>?</td><td>匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配 ? 字符，请使用 ?。</td></tr><tr><td>\</td><td>将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。例如， ‘n’ 匹配字符 ‘n’。’\n’ 匹配换行符。序列 ‘\‘ 匹配 “"，而 ‘(‘ 则匹配 “(“。</td></tr><tr><td>^</td><td>匹配输入字符串的开始位置，除非在方括号表达式中使用，此时它表示不接受该字符集合。要匹配 ^ 字符本身，请使用 ^。</td></tr><tr><td>{</td><td>标记限定符表达式的开始。要匹配 {，请使用 {。</td></tr><tr><td>|</td><td>指明两项之间的一个选择。要匹配 |，请使用 |。</td></tr></tbody></table><h2 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h2><p>限定符用来指定正则表达式的一个给定组件必须要<strong>出现多少次</strong>才能满足匹配。有 * 或 + 或 ? 或 {n} 或 {n,} 或 {n,m} 共6种。</p><p>正则表达式的限定符有：</p><table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td>*</td><td>匹配前面的子表达式零次或多次。例如，zo* 能匹配 “z” 以及 “zoo”。* 等价于{0,}。</td></tr><tr><td>+</td><td>匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。</td></tr><tr><td>?</td><td>匹配前面的子表达式零次或一次。例如，”do(es)?” 可以匹配 “do” 、 “does” 中的 “does” 、 “doxy” 中的 “do” 。? 等价于 {0,1}。</td></tr><tr><td>{n}</td><td>n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。</td></tr><tr><td>{n,}</td><td>n 是一个非负整数。至少匹配n 次。例如，’o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。’o{1,}’ 等价于 ‘o+’。’o{0,}’ 则等价于 ‘o*’。</td></tr><tr><td>{n,m}</td><td>m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。例如，”o{1,3}” 将匹配 “fooooood” 中的前三个 o。’o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。</td></tr></tbody></table><h2 id="定位符"><a href="#定位符" class="headerlink" title="定位符"></a>定位符</h2><p>定位符使您能够将正则表达式固定到<strong>行首或行尾</strong>。它们还使您能够创建这样的正则表达式，这些正则表达式出现在一个单词内、在一个单词的开头或者一个单词的结尾。</p><p>定位符用来描述字符串或单词的边界，^ 和 $ 分别指字符串的开始与结束，\b 描述单词的前或后边界，\B 表示非单词边界。</p><p>正则表达式的定位符有：</p><table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td>^</td><td>匹配输入字符串开始的位置。如果设置了 RegExp 对象的 Multiline 属性，^ 还会与 \n 或 \r 之后的位置匹配。</td></tr><tr><td>$</td><td>匹配输入字符串结尾的位置。如果设置了 RegExp 对象的 Multiline 属性，$ 还会与 \n 或 \r 之前的位置匹配。</td></tr><tr><td>\b</td><td>匹配一个单词边界，即字与空格间的位置。</td></tr><tr><td>\B</td><td>非单词边界匹配。</td></tr></tbody></table><blockquote><p><strong>注意</strong>：不能将限定符与定位符一起使用。</p></blockquote><h2 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h2><p>用圆括号将所有选择项括起来，相邻的选择项之间用|分隔。但用圆括号会有一个副作用，使相关的匹配会被缓存，此时可用?:放在第一个选项前来消除这种副作用。</p><p>其中 <code>?:</code> 是<strong>非捕获元</strong>之一，还有两个非捕获元是 <code>?=</code> 和 <code>?!</code>，这两个还有更多的含义，前者为正向预查，在任何<strong>开始匹配圆括号</strong>内的正则表达式模式的位置来匹配搜索字符串，后者为负向预查，在任何开始不匹配该正则表达式模式的位置来匹配搜索字符串。</p><h2 id="反向引用"><a href="#反向引用" class="headerlink" title="反向引用"></a>反向引用</h2><p>对一个正则表达式模式或部分模式两边添加圆括号将导致相关匹配存储到一个临时缓冲区中，所捕获的每个子匹配都按照在正则表达式模式中从左到右出现的顺序存储。缓冲区编号从 1 开始，最多可存储 99 个捕获的子表达式。每个缓冲区都可以使用 <code>\n</code> 访问，其中 <code>n</code> 为一个标识特定缓冲区的一位或两位十进制数。</p><p>可以使用非捕获元字符 <code>?:</code>、<code>?=</code> 或 <code>?!</code> 来重写捕获，忽略对相关匹配的保存。</p><p>反向引用的最简单的、最有用的应用之一，是提供查找文本中两个相同的相邻单词的匹配项的能力。</p><p>例如：<code>(asd)\1</code>能匹配<code>asdasd</code></p><h2 id="所有元字符"><a href="#所有元字符" class="headerlink" title="所有元字符"></a>所有元字符</h2><table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td>\</td><td>将下一个字符标记为一个特殊字符、或一个原义字符、或一个 向后引用、或一个八进制转义符。例如，’n’ 匹配字符 “n”。’\n’ 匹配一个换行符。序列 ‘\‘ 匹配 “" 而 “(“ 则匹配 “(“。</td></tr><tr><td>^</td><td>匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 ‘\n’ 或 ‘\r’ 之后的位置。</td></tr><tr><td>$</td><td>匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性，$ 也匹配 ‘\n’ 或 ‘\r’ 之前的位置。</td></tr><tr><td>*</td><td>匹配前面的子表达式零次或多次。例如，zo* 能匹配 “z” 以及 “zoo”。* 等价于{0,}。</td></tr><tr><td>+</td><td>匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。</td></tr><tr><td>?</td><td>匹配前面的子表达式零次或一次。例如，”do(es)?” 可以匹配 “do” 或 “does” 。? 等价于 {0,1}。</td></tr><tr><td>{n}</td><td>n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。</td></tr><tr><td>{n,}</td><td>n 是一个非负整数。至少匹配n 次。例如，’o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。’o{1,}’ 等价于 ‘o+’。’o{0,}’ 则等价于 ‘o*’。</td></tr><tr><td>{n,m}</td><td>m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。例如，”o{1,3}” 将匹配 “fooooood” 中的前三个 o。’o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。</td></tr><tr><td>?</td><td>当该字符紧跟在任何一个其他限制符 (*, +, ?, {n}, {n,}, {n,m}) 后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串 “oooo”，’o+?’ 将匹配单个 “o”，而 ‘o+’ 将匹配所有 ‘o’。</td></tr><tr><td>.</td><td>匹配除换行符（\n、\r）之外的任何单个字符。要匹配包括 ‘\n’ 在内的任何字符，请使用像”<strong>(.|\n)</strong>“的模式。</td></tr><tr><td>(pattern)</td><td>匹配 pattern 并获取这一匹配。所获取的匹配可以从产生的 Matches 集合得到，在VBScript 中使用 SubMatches 集合，在JScript 中则使用 $0…$9 属性。要匹配圆括号字符，请使用 ‘(‘ 或 ‘)‘。</td></tr><tr><td>(?:pattern)</td><td>匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用 “或” 字符 (|) 来组合一个模式的各个部分是很有用。例如， ‘industr(?:y|ies) 就是一个比 ‘industry|industries’ 更简略的表达式。</td></tr><tr><td>(?=pattern)</td><td>正向肯定预查（look ahead positive assert），在任何匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，”Windows(?=95|98|NT|2000)”能匹配”Windows2000”中的”Windows”，但不能匹配”Windows3.1”中的”Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td></tr><tr><td>(?!pattern)</td><td>正向否定预查(negative assert)，在任何不匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如”Windows(?!95|98|NT|2000)”能匹配”Windows3.1”中的”Windows”，但不能匹配”Windows2000”中的”Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td></tr><tr><td>(?&lt;=pattern)</td><td>反向(look behind)肯定预查，与正向肯定预查类似，只是方向相反。例如，”`(?&lt;=95</td></tr><tr><td>(?&lt;!pattern)</td><td>反向否定预查，与正向否定预查类似，只是方向相反。例如”`(?&lt;!95</td></tr><tr><td>x|y</td><td>匹配 x 或 y。例如，’z|food’ 能匹配 “z” 或 “food”。’(z|f)ood’ 则匹配 “zood” 或 “food”。</td></tr><tr><td>[xyz]</td><td>字符集合。匹配所包含的任意一个字符。例如， ‘[abc]’ 可以匹配 “plain” 中的 ‘a’。</td></tr><tr><td>[^xyz]</td><td>负值字符集合。匹配未包含的任意字符。例如， <code>'[^abc]'</code> 可以匹配 “plain” 中的’p’、’l’、’i’、’n’。</td></tr><tr><td>[a-z]</td><td>字符范围。匹配指定范围内的任意字符。例如，’[a-z]’ 可以匹配 ‘a’ 到 ‘z’ 范围内的任意小写字母字符。</td></tr><tr><td>[^a-z]</td><td>负值字符范围。匹配任何不在指定范围内的任意字符。例如，’[^a-z]’ 可以匹配任何不在 ‘a’ 到 ‘z’ 范围内的任意字符。</td></tr><tr><td>\b</td><td>匹配一个单词边界，也就是指单词和空格间的位置。例如， ‘er\b’ 可以匹配”never” 中的 ‘er’，但不能匹配 “verb” 中的 ‘er’。</td></tr><tr><td>\B</td><td>匹配非单词边界。’er\B’ 能匹配 “verb” 中的 ‘er’，但不能匹配 “never” 中的 ‘er’。</td></tr><tr><td>\cx</td><td>匹配由 x 指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 ‘c’ 字符。</td></tr><tr><td>\d</td><td>匹配一个数字字符。等价于 [0-9]。</td></tr><tr><td>\D</td><td>匹配一个非数字字符。等价于 <code>[^0-9]</code>。</td></tr><tr><td>\f</td><td>匹配一个换页符。等价于 \x0c 和 \cL。</td></tr><tr><td>\n</td><td>匹配一个换行符。等价于 \x0a 和 \cJ。</td></tr><tr><td>\r</td><td>匹配一个回车符。等价于 \x0d 和 \cM。</td></tr><tr><td>\s</td><td>匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。</td></tr><tr><td>\S</td><td>匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。</td></tr><tr><td>\t</td><td>匹配一个制表符。等价于 \x09 和 \cI。</td></tr><tr><td>\v</td><td>匹配一个垂直制表符。等价于 \x0b 和 \cK。</td></tr><tr><td>\w</td><td>匹配字母、数字、下划线。等价于’[A-Za-z0-9_]’。</td></tr><tr><td>\W</td><td>匹配非字母、数字、下划线。等价于 ‘[^A-Za-z0-9_]’。</td></tr><tr><td>\xn</td><td>匹配 n，其中 n 为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，’\x41’ 匹配 “A”。’\x041’ 则等价于 ‘\x04’ &amp; “1”。正则表达式中可以使用 ASCII 编码。</td></tr><tr><td>\num</td><td>匹配 num，其中 num 是一个正整数。对所获取的匹配的引用。例如，’(.)\1’ 匹配两个连续的相同字符。</td></tr><tr><td>\n</td><td>标识一个八进制转义值或一个向后引用。如果 \n 之前至少 n 个获取的子表达式，则 n 为向后引用。否则，如果 n 为八进制数字 (0-7)，则 n 为一个八进制转义值。</td></tr><tr><td>\nm</td><td>标识一个八进制转义值或一个向后引用。如果 \nm 之前至少有 nm 个获得子表达式，则 nm 为向后引用。如果 \nm 之前至少有 n 个获取，则 n 为一个后跟文字 m 的向后引用。如果前面的条件都不满足，若 n 和 m 均为八进制数字 (0-7)，则 \nm 将匹配八进制转义值 nm。</td></tr><tr><td>\nml</td><td>如果 n 为八进制数字 (0-3)，且 m 和 l 均为八进制数字 (0-7)，则匹配八进制转义值 nml。</td></tr><tr><td>\un</td><td>匹配 n，其中 n 是一个用四个十六进制数字表示的 Unicode 字符。例如， \u00A9 匹配版权符号 (?)。</td></tr></tbody></table><h2 id="等价字符"><a href="#等价字符" class="headerlink" title="等价字符"></a>等价字符</h2><p><code>?</code>, <code>*</code>, <code>+</code>, <code>\d</code>, <code>\w</code> 都是等价字符<br><code>?</code>等价于匹配长度{0,1}<br><code>*</code>等价于匹配长度{0,}<br><code>+</code>等价于匹配长度{1,}<br><code>\d</code>等价于[0-9]<br><code>\w</code>等价于[A-Za-z_0-9]</p><h2 id="常用运算符与表达式"><a href="#常用运算符与表达式" class="headerlink" title="常用运算符与表达式"></a>常用运算符与表达式</h2><p><code>^</code> 开始<br><code>()</code> 域段<br><code>[]</code> 包含,默认是一个字符长度<br><code>[^]</code> 不包含,默认是一个字符长度<br><code>{n,m}</code> 匹配长度<br><code>.</code> 任何单个字符(. 字符点)<br><code>|</code> 或<br><code>\</code> 转义<br><code>$</code> 结尾<br><code>[A-Z]</code> 26个大写字母<br><code>[a-z]</code> 26个小写字母<br><code>[0-9]</code> 0至9数字<br><code>[A-Za-z0-9]</code> 26个大写字母、26个小写字母和0至9数字</p><h2 id="贪婪模式"><a href="#贪婪模式" class="headerlink" title="贪婪模式"></a>贪婪模式</h2><p><strong>*、+限定符都是贪婪的，因为它们会尽可能多的匹配文字，只有在它们的后面加上一个?就可以实现非贪婪或最小匹配。</strong></p><h2 id="字符簇"><a href="#字符簇" class="headerlink" title="字符簇"></a>字符簇</h2><p>略吧，目前作用不大</p><h2 id="实例应用"><a href="#实例应用" class="headerlink" title="实例应用"></a>实例应用</h2><ol><li><p>验证用户名和密码：（”<code>^[a-zA-Z]\w{5,15}$</code>“）正确格式：”<code>[A-Z][a-z]_[0-9]</code>“组成,并且第一个字必须为字母6~16位；</p></li><li><p>验证电话号码：（”<code>^(\\d{3,4}-)\\d{7,8}$</code>“）正确格式：xxx/xxxx-xxxxxxx/xxxxxxxx；</p></li><li><p>验证手机号码：”<code>^1[3|4|5|7|8][0-9]\\d{8}$</code>“；</p></li><li><p>验证身份证号（15位或18位数字）：”<code>\\d{14}[[0-9],0-9xX]</code>“；</p></li><li><p>验证Email地址：(“<code>^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\.\\w+([-.]\\w+)*$</code>“)；</p></li><li><p>只能输入由数字和26个英文字母组成的字符串：(“<code>^[A-Za-z0-9]+$</code>“) ;</p></li><li><p>整数或者小数：<code>^[0-9]+([.]{0,1}[0-9]+){0,1}$</code></p></li><li><p>只能输入数字：”<code>^[0-9]*$</code>“。</p></li><li><p>只能输入n位的数字：”<code>^\\d{n}$</code>“。</p></li><li><p>只能输入至少n位的数字：”<code>^\\d{n,}$</code>“。</p></li><li><p>只能输入m~n位的数字：”<code>^\\d{m,n}$</code>“。</p></li><li><p>只能输入零和非零开头的数字：”<code>^(0|[1-9][0-9]*)$</code>“。</p></li><li><p>只能输入有两位小数的正实数：”<code>^[0-9]+(.[0-9]{2})?$</code>“。</p></li><li><p>只能输入有1~3位小数的正实数：”<code>^[0-9]+(\.[0-9]{1,3})?$</code>“。</p></li><li><p>只能输入非零的正整数：<code>"^\+?[1-9][0-9]*$"</code>。</p></li><li><p>只能输入非零的负整数：<code>"^\-[1-9][0-9]*$"</code>。</p></li><li><p>只能输入长度为3的字符：”<code>^.{3}$</code>“。</p></li><li><p>只能输入由26个英文字母组成的字符串：”<code>^[A-Za-z]+$</code>“。</p></li><li><p>只能输入由26个大写英文字母组成的字符串：”<code>^[A-Z]+$</code>“。</p></li><li><p>只能输入由26个小写英文字母组成的字符串：”<code>^[a-z]+$</code>“。</p></li><li><p>验证是否含有<code>^%&amp;',;=?$\"</code>等字符：<code>"[^%&amp;',;=?$\x22]+"</code>。</p></li><li><p>只能输入汉字：”<code>^[\u4e00-\u9fa5]{0,}$</code>“。</p></li><li><p>验证URL：”<code>^http://([\\w-]+\.)+[\\w-]+(/[\\w-./?%&amp;=]*)?$</code>“。</p></li><li><p>验证一年的12个月：”<code>^(0?[1-9]|1[0-2])$</code>“正确格式为：”01”～”09”和”10”～”12”。</p></li><li><p>验证一个月的31天：”<code>^((0?[1-9])|((1|2)[0-9])|30|31)$</code>“正确格式为；”01”～”09”、”10”～”29”和“30”~“31”。</p></li><li><p>获取日期正则表达式：<code>\d{4}[年|\-|\.]\d{1-12}[月|\-|\.]\d{1-31}日?</code></p><p>评注：可用来匹配大多数年月日信息。</p></li><li><p>匹配双字节字符(包括汉字在内)：<code>[^\x00-\xff]</code></p><p>评注：可以用来计算字符串的长度（一个双字节字符长度计2，ASCII字符计1）</p></li><li><p>匹配空白行的正则表达式：<code>\n\s*\r</code></p><p>评注：可以用来删除空白行</p></li><li><p>匹配HTML标记的正则表达式：<code>&lt;(\S*?)[^&gt;]*&gt;.*?&lt;/&gt;|&lt;.*? /&gt;</code></p><p>评注：网上流传的版本太糟糕，上面这个也仅仅能匹配部分，对于复杂的嵌套标记依旧无能为力</p></li><li><p>匹配首尾空白字符的正则表达式：<code>^\s*|\s*$</code></p><p>评注：可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式</p></li><li><p>匹配网址URL的正则表达式：<code>[a-zA-z]+://[^\s]*</code></p><p>评注：网上流传的版本功能很有限，上面这个基本可以满足需求</p></li><li><p>匹配帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：<code>^[a-zA-Z][a-zA-Z0-9_]{4,15}$</code></p><p>评注：表单验证时很实用</p></li><li><p>匹配腾讯QQ号：<code>[1-9][0-9]\{4,\}</code></p><p>评注：腾讯QQ号从10 000 开始</p></li><li><p>匹配中国邮政编码：<code>[1-9]\\d{5}(?!\d)</code></p><p>评注：中国邮政编码为6位数字</p></li><li><p>匹配ip地址：<code>((2[0-4]\\d|25[0-5]|[01]?\\d\\d?)\.){3}(2[0-4]\\d|25[0-5]|[01]?\\d\\d?)</code>。</p></li></ol><h2 id="C-示例"><a href="#C-示例" class="headerlink" title="C++示例"></a>C++示例</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;regex.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> status ,i;</span><br><span class="line"><span class="keyword">int</span> cflags = REG_EXTENDED;</span><br><span class="line"><span class="keyword">regmatch_t</span> pmatch[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">size_t</span> nmatch = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">regex_t</span> reg;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> * pattern = <span class="string">"^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*.\\w+([-.]\\w+)*$"</span>;</span><br><span class="line"><span class="keyword">char</span> * buf = <span class="string">"chenjiayi@126.com"</span>;</span><br><span class="line">regcomp(&amp;reg,pattern,cflags);<span class="comment">//编译正则模式</span></span><br><span class="line">status = regexec(&amp;reg,buf,nmatch,<span class="number">0</span>);<span class="comment">//执行正则表达式和缓存的比较</span></span><br><span class="line"><span class="keyword">if</span>(status == REG_NOMATCH)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"No match\n"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">0</span> == status)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"比较成功:"</span>);</span><br><span class="line"><span class="keyword">for</span>(i = pmatch[<span class="number">0</span>].rm_so;i&lt;pmatch[<span class="number">0</span>].rm_eo;++i)<span class="built_in">putchar</span>(buf[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">}</span><br><span class="line">regfree(&amp;reg);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>博客来源：<a href="https://blog.csdn.net/chenjiayi_yun/article/details/43375201" target="_blank" rel="noopener">https://blog.csdn.net/chenjiayi_yun/article/details/43375201</a></p></blockquote><blockquote><p>菜鸟教程：<a href="http://www.runoob.com/regexp/regexp-tutorial.html" target="_blank" rel="noopener">http://www.runoob.com/regexp/regexp-tutorial.html</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;正则表达式(Regular Expression，简称 RegExp)是一种&lt;strong&gt;文本模式&lt;/strong&gt;，包括普通字符（例如，a 到 z 之间的字母）和特殊字符（称为”元字符”）。它使用&lt;strong&gt;单个字符串&lt;/strong&gt;来描述、匹配&lt;strong&gt;一系列&lt;/strong&gt;匹配某个句法规则的字符串。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="RegExp" scheme="http://blog.iwxyi.com/tags/RegExp/"/>
    
      <category term="讲解" scheme="http://blog.iwxyi.com/tags/%E8%AE%B2%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>Android小知识</title>
    <link href="http://blog.iwxyi.com/2018/12/01/Android%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
    <id>http://blog.iwxyi.com/2018/12/01/Android小知识/</id>
    <published>2018-12-01T02:28:00.000Z</published>
    <updated>2019-10-13T02:34:42.391Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;EditText</span><br><span class="line">     &lt;!-- 设置密码框 --&gt;</span><br><span class="line">     android:password="true"</span><br><span class="line">&lt;/EditText&gt;</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CheckBox cb;</span><br><span class="line"><span class="keyword">if</span> (cb.isChecked()) { ... }</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取文本</span></span><br><span class="line">((EditText)findViewById(R.id.editText2)).getText().toString()</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置按钮事件</span></span><br><span class="line">b1=(Button)findViewById(R.id.button);</span><br><span class="line">b1.setOnClickListener( <span class="keyword">new</span> View.OnClickListener() {</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>{</span><br><span class="line">       <span class="comment">// 用浏览器打开网址</span></span><br><span class="line">        Intent i = <span class="keyword">new</span> Intent(android.content.Intent.ACTION_VIEW, Uri.parse(<span class="string">"http://www.uprogrammer.cn"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 拨号</span></span><br><span class="line">        <span class="comment">//Intent i = new Intent(android.content.Intent.ACTION_VIEW,Uri.parse("tel:9510300000"));</span></span><br><span class="line"></span><br><span class="line">        startActivity(i);</span><br><span class="line">    }</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 通过Launch或者Intent调用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.VIEW"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.example.MyApplication.LAUNCH"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">data</span> <span class="attr">android:scheme</span>=<span class="string">"http"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 监听网址的打开（Manifest） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">"cn.uprogrammer.intentfilter.CustomActivity"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.VIEW"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"cn.uprogrammer.intentfilter.LAUNCH"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">data</span> <span class="attr">android:scheme</span>=<span class="string">"http"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听打开网址后（显示网址）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.custom_view);</span><br><span class="line">      </span><br><span class="line">        TextView label = (TextView) findViewById(R.id.show_data);</span><br><span class="line">        Uri url = getIntent().getData();</span><br><span class="line">        label.setText(url.toString());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>文本框属性详解 <a href="http://www.runoob.com/w3cnote/android-tutorial-textview.html" target="_blank" rel="noopener">http://www.runoob.com/w3cnote/android-tutorial-textview.html</a></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Drawable drawable = MainActivity.<span class="keyword">this</span>.getResources().getDrawable(R.drawable.picture1);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 格式化文本，"常量%1常量"</span></span><br><span class="line">textView.setText(getString(R.string.section_format, <span class="number">123</span>));</span><br><span class="line"></span><br><span class="line">&lt;string name="section_format"&gt;Hello World %1$d&lt;/string&gt;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 规定ImageView最大值无效，需要加上下面这句：</span></span><br><span class="line">android:adjustViewBounds</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断版本号</span></span><br><span class="line"><span class="keyword">if</span> (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.M)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 是否拥有联系人权限，没有就尝试获取</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">mayRequestContacts</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.M) {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (checkSelfPermission(READ_CONTACTS) == PackageManager.PERMISSION_GRANTED) {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (shouldShowRequestPermissionRationale(READ_CONTACTS)) {</span><br><span class="line">        Snackbar.make(mEmailView, R.string.permission_rationale, Snackbar.LENGTH_INDEFINITE)</span><br><span class="line">            .setAction(android.R.string.ok, <span class="keyword">new</span> View.OnClickListener() {</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="meta">@TargetApi</span>(Build.VERSION_CODES.M)</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>{</span><br><span class="line">                    requestPermissions(<span class="keyword">new</span> String[]{READ_CONTACTS}, REQUEST_READ_CONTACTS);</span><br><span class="line">                }</span><br><span class="line">            });</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        requestPermissions(<span class="keyword">new</span> String[]{READ_CONTACTS}, REQUEST_READ_CONTACTS);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> requestCode, @NonNull String[] permissions,</span></span></span><br><span class="line"><span class="function"><span class="params">                                       @NonNull <span class="keyword">int</span>[] grantResults)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (requestCode == REQUEST_READ_CONTACTS) {</span><br><span class="line">        <span class="keyword">if</span> (grantResults.length == <span class="number">1</span> &amp;&amp; grantResults[<span class="number">0</span>] == PackageManager.PERMISSION_GRANTED) {</span><br><span class="line">            populateAutoComplete();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置 Spinner 下拉菜单</span></span><br><span class="line">String[] ctype = <span class="keyword">new</span> String[]{<span class="string">"全部"</span>, <span class="string">"游戏"</span>, <span class="string">"电影"</span>, <span class="string">"娱乐"</span>, <span class="string">"图书"</span>};</span><br><span class="line"><span class="comment">//创建一个数组适配器</span></span><br><span class="line">ArrayAdapter&lt;String&gt; adapter = <span class="keyword">new</span> ArrayAdapter&lt;String&gt;(<span class="keyword">this</span>, android.R.layout.simple_spinner_item, ctype);</span><br><span class="line"><span class="comment">//设置下拉列表框的下拉选项样式</span></span><br><span class="line">adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);</span><br><span class="line"></span><br><span class="line">Spinner spinner = <span class="keyword">super</span>.findViewById(R.id.spinner);</span><br><span class="line">spinner.setAdapter(adapter);</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;EditText&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;lt;!-- 设置密码框 --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     android:password=&quot;true&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/EditText&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="Android" scheme="http://blog.iwxyi.com/tags/Android/"/>
    
      <category term="整理" scheme="http://blog.iwxyi.com/tags/%E6%95%B4%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Android Fragment回退栈</title>
    <link href="http://blog.iwxyi.com/2018/11/27/Android-Fragment%E5%9B%9E%E9%80%80%E6%A0%88/"/>
    <id>http://blog.iwxyi.com/2018/11/27/Android-Fragment回退栈/</id>
    <published>2018-11-27T02:43:00.000Z</published>
    <updated>2019-10-13T02:44:25.785Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>导语: Fragment作为Android最基本，最重要的基础概念之一，在开发中经常会和他打交道。本文从为什么出现Fragment开始，介绍了Fragment相关的方方面面，包括Fragment的基本定义及使用、回退栈的内部实现、Fragment通信、DialogFragment、ViewPager+Fragment的使用、嵌套Fragment、懒加载等。</p></blockquote><a id="more"></a><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><hr><p>Fragment，简称碎片，是Android 3.0（API 11）提出的，为了兼容低版本，support-v4库中也开发了一套Fragment API，最低兼容Android 1.6。</p><p>过去support-v4库是一个jar包，24.2.0版本开始，将support-v4库模块化为多个jar包，包含：support-fragment, support-ui, support-media-compat等，这么做是为了减少APK包大小，你需要用哪个模块就引入哪个模块。</p><p>如果想引入整个support-v4库，则<code>compile 'com.android.support:support-v4:24.2.1'</code>，如果只想引入support-fragment库，则<code>com.android.support:support-fragment:24.2.1</code>。</p><blockquote><p>因为support库是不断更新的，因此建议使用support库中的android.support.v4.app.Fragment，而不要用系统自带的android.app.Fragment。而如果要使用support库的Fragment，Activity必须要继承FragmentActivity（AppCompatActivity是FragmentActivity的子类）。</p></blockquote><ul><li>Fragment是依赖于Activity的，不能独立存在的。</li><li>一个Activity里可以有多个Fragment。</li><li>一个Fragment可以被多个Activity重用。</li><li>Fragment有自己的生命周期，并能接收输入事件。</li><li>我们能在Activity运行时动态地添加或删除Fragment。</li></ul><h5 id="Fragment的优势有以下几点："><a href="#Fragment的优势有以下几点：" class="headerlink" title="Fragment的优势有以下几点："></a>Fragment的优势有以下几点：</h5><ul><li>模块化（Modularity）：我们不必把所有代码全部写在Activity中，而是把代码写在各自的Fragment中。</li><li>可重用（Reusability）：多个Activity可以重用一个Fragment。</li><li>可适配（Adaptability）：根据硬件的屏幕尺寸、屏幕方向，能够方便地实现不同的布局，这样用户体验更好。</li></ul><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><hr><p>这里给出Fragment最基本的使用方式。首先，创建继承Fragment的类，名为Fragment1：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fragment1</span> <span class="keyword">extends</span> <span class="title">Fragment</span></span>{  </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> String ARG_PARAM = <span class="string">"param_key"</span>; </span><br><span class="line">     <span class="keyword">private</span> String mParam; </span><br><span class="line">     <span class="keyword">private</span> Activity mActivity; </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAttach</span><span class="params">(Context context)</span> </span>{</span><br><span class="line">        mActivity = (Activity) context;</span><br><span class="line">        mParam = getArguments().getString(ARG_PARAM);  <span class="comment">//获取参数</span></span><br><span class="line">    }</span><br><span class="line">     <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span> </span>{</span><br><span class="line">        View root = inflater.inflate(R.layout.fragment_1, container, <span class="keyword">false</span>);</span><br><span class="line">        TextView view = root.findViewById(R.id.text);</span><br><span class="line">        view.setText(mParam);</span><br><span class="line">             <span class="keyword">return</span> root;</span><br><span class="line">    }    </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Fragment1 <span class="title">newInstance</span><span class="params">(String str)</span> </span>{</span><br><span class="line">        Fragment1 frag = <span class="keyword">new</span> Fragment1();</span><br><span class="line">        Bundle bundle = <span class="keyword">new</span> Bundle();</span><br><span class="line">        bundle.putString(ARG_PARAM, str);</span><br><span class="line">        fragment.setArguments(bundle);   <span class="comment">//设置参数</span></span><br><span class="line">        <span class="keyword">return</span> fragment;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>Fragment有很多可以复写的方法，其中最常用的就是onCreateView()，该方法返回Fragment的UI布局，需要注意的是inflate()的第三个参数是false，因为在Fragment内部实现中，会把该布局添加到container中，如果设为true，那么就会重复做两次添加，则会抛如下异常：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Caused by: java.lang.IllegalStateException: The specified child already has a parent. You must call removeView() on the child's parent first.</span><br></pre></td></tr></tbody></table></figure><p>如果在创建Fragment时要传入参数，必须要通过setArguments(Bundle bundle)方式添加，而不建议通过为Fragment添加带参数的构造函数，因为通过setArguments()方式添加，在由于内存紧张导致Fragment被系统杀掉并恢复（re-instantiate）时能保留这些数据。官方建议如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">It is strongly recommended that subclasses do not have other constructors with parameters, since these constructors will not be called when the fragment is re-instantiated.</span><br></pre></td></tr></tbody></table></figure><p>我们可以在Fragment的<code>onAttach()</code>中通过<code>getArguments()</code>获得传进来的参数，并在之后使用这些参数。如果要获取Activity对象，不建议调用<code>getActivity()</code>，而是在<code>onAttach()</code>中将Context对象强转为Activity对象。</p><p>创建完Fragment后，接下来就是把Fragment添加到Activity中。在Activity中添加Fragment的方式有两种：</p><ul><li>静态添加：通过xml的方式添加，缺点是一旦添加就不能在运行时删除。</li><li>动态添加：运行时添加，这种方式比较灵活，因此建议使用这种方式。<br>虽然Fragment能在XML中添加，但是这只是一个语法糖而已，Fragment并不是一个View，而是和Activity同一层次的。</li></ul><p>这里只给出动态添加的方式。首先Activity需要有一个容器存放Fragment，一般是FrameLayout，因此在Activity的布局文件中加入FrameLayout：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">FrameLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/container"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>然后在<code>onCreate()</code>中，通过以下代码将Fragment添加进Activity中。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (bundle == <span class="keyword">null</span>) {</span><br><span class="line">    getSupportFragmentManager().beginTransaction()</span><br><span class="line">        .add(R.id.container, Fragment1.newInstance(<span class="string">"hello world"</span>), <span class="string">"f1"</span>)        <span class="comment">//.addToBackStack("fname")</span></span><br><span class="line">        .commit();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这里需要注意几点：</p><ul><li>因为我们使用了support库的Fragment，因此需要使用<code>getSupportFragmentManager()</code>获取FragmentManager。</li><li><code>add()</code>是对Fragment众多操作中的一种，还有<code>remove()</code>, <code>replace()</code>等，第一个参数是根容器的id（FrameLayout的id，即”@id/container”），第二个参数是Fragment对象，<strong>第三个参数是fragment的tag名</strong>，指定tag的好处是后续我们可以通过<code>Fragment1 frag = getSupportFragmentManager().findFragmentByTag("f1")</code>从FragmentManager中查找Fragment对象。</li><li>在一次事务中，可以做多个操作，比如同时做<code>add().remove().replace()</code>。</li><li><code>commit()</code>操作是异步的，内部通过<code>mManager.enqueueAction()</code>加入处理队列。对应的同步方法为<code>commitNow()</code>，<code>commit()</code>内部会有<code>checkStateLoss()</code>操作，如果开发人员使用不当（比如<code>commit()</code>操作在<code>onSaveInstanceState()</code>之后），可能会抛出异常，而<code>commitAllowingStateLoss()</code>方法则是不会抛出异常版本的<code>commit()</code>方法，但是尽量使用<code>commit()</code>，而不要使用<code>commitAllowingStateLoss()</code>。</li><li><code>addToBackStack("fname")</code>是可选的。FragmentManager拥有回退栈（BackStack），类似于Activity的任务栈，如果添加了该语句，就把该事务加入回退栈，当用户点击返回按钮，会回退该事务（回退指的是如果事务是<code>add(frag1)</code>，那么回退操作就是<code>remove(frag1)</code>）；如果没添加该语句，用户点击返回按钮会直接销毁Activity。</li><li>Fragment有一个常见的问题，即Fragment重叠问题，这是由于Fragment被系统杀掉，并重新初始化时再次将fragment加入activity，因此通过在外围加if语句能判断此时是否是被系统杀掉并重新初始化的情况。</li></ul><h5 id="Fragment有个常见的异常："><a href="#Fragment有个常见的异常：" class="headerlink" title="Fragment有个常见的异常："></a>Fragment有个常见的异常：</h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">java.lang.IllegalStateException: Can not perform this action after onSaveInstanceState</span><br><span class="line">    at android.support.v4.app.FragmentManagerImpl.checkStateLoss(FragmentManager.java:1341)</span><br><span class="line">    at android.support.v4.app.FragmentManagerImpl.enqueueAction(FragmentManager.java:1352)</span><br><span class="line">    at android.support.v4.app.BackStackRecord.commitInternal(BackStackRecord.java:595)</span><br><span class="line">    at android.support.v4.app.BackStackRecord.commit(BackStackRecord.java:574)</span><br></pre></td></tr></tbody></table></figure><p>该异常出现的原因是：<code>commit()</code>在<code>onSaveInstanceState()</code>后调用。首先，<code>onSaveInstanceState()</code>在<code>onPause()</code>之后，<code>onStop()</code>之前调用。<code>onRestoreInstanceState()</code>在<code>onStart()</code>之后，<code>onResume()</code>之前。</p><h5 id="因此避免出现该异常的方案有："><a href="#因此避免出现该异常的方案有：" class="headerlink" title="因此避免出现该异常的方案有："></a>因此避免出现该异常的方案有：</h5><ul><li>不要把Fragment事务放在异步线程的回调中，比如不要把Fragment事务放在AsyncTask的<code>onPostExecute()</code>，因此<code>onPostExecute()</code>可能会在<code>onSaveInstanceState()</code>之后执行。</li><li>逼不得已时使用<code>commitAllowingStateLoss()</code>。</li></ul><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><hr><p>Fragment的生命周期和Activity类似，但比Activity的生命周期复杂一些，基本的生命周期方法如下图：</p><p><img src="https:////upload-images.jianshu.io/upload_images/2952813-fa6d293c2b59c13f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/400/format/webp" alt="img"></p><p>生命周期</p><p>解释如下：</p><ul><li>onAttach()：Fragment和Activity相关联时调用。可以通过该方法获取Activity引用，还可以通过getArguments()获取参数。</li><li>onCreate()：Fragment被创建时调用。</li><li>onCreateView()：创建Fragment的布局。</li><li>onActivityCreated()：当Activity完成onCreate()时调用。</li><li>onStart()：当Fragment可见时调用。</li><li>onResume()：当Fragment可见且可交互时调用。</li><li>onPause()：当Fragment不可交互但可见时调用。</li><li>onStop()：当Fragment不可见时调用。</li><li>onDestroyView()：当Fragment的UI从视图结构中移除时调用。</li><li>onDestroy()：销毁Fragment时调用。</li><li>onDetach()：当Fragment和Activity解除关联时调用。</li></ul><p>上面的方法中，只有onCreateView()在重写时不用写super方法，其他都需要。</p><p>因为Fragment是依赖Activity的，因此为了讲解Fragment的生命周期，需要和Activity的生命周期方法一起讲，即Fragment的各个生命周期方法和Activity的各个生命周期方法的关系和顺序，如图：</p><p><img src="https:////upload-images.jianshu.io/upload_images/2952813-0f4f821975d72317.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/640/format/webp" alt="img"></p><p>LifeCycle</p><p>我们这里举个例子来理解Fragment生命周期方法。功能如下：共有两个Fragment：F1和F2，F1在初始化时就加入Activity，点击F1中的按钮调用replace替换为F2。</p><p>当F1在Activity的<code>onCreate()</code>中被添加时，日志如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">BasicActivity: [onCreate] BEGIN</span><br><span class="line">BasicActivity: [onCreate] END</span><br><span class="line">BasicActivity: [onStart] BEGIN</span><br><span class="line">Fragment1: [onAttach] BEGIN </span><br><span class="line">Fragment1: [onAttach] END</span><br><span class="line">BasicActivity: [onAttachFragment] BEGIN</span><br><span class="line">BasicActivity: [onAttachFragment] END</span><br><span class="line">Fragment1: [onCreate] BEGIN</span><br><span class="line">Fragment1: [onCreate] END</span><br><span class="line">Fragment1: [onCreateView]</span><br><span class="line">Fragment1: [onViewCreated] BEGIN</span><br><span class="line">Fragment1: [onViewCreated] END</span><br><span class="line">Fragment1: [onActivityCreated] BEGIN</span><br><span class="line">Fragment1: [onActivityCreated] END</span><br><span class="line">Fragment1: [onStart] BEGIN</span><br><span class="line">Fragment1: [onStart] END</span><br><span class="line">BasicActivity: [onStart] END</span><br><span class="line">BasicActivity: [onPostCreate] BEGIN</span><br><span class="line">BasicActivity: [onPostCreate] END</span><br><span class="line">BasicActivity: [onResume] BEGIN</span><br><span class="line">BasicActivity: [onResume] END</span><br><span class="line">BasicActivity: [onPostResume] BEGIN</span><br><span class="line">Fragment1: [onResume] BEGIN</span><br><span class="line">Fragment1: [onResume] END</span><br><span class="line">BasicActivity: [onPostResume] END</span><br><span class="line">BasicActivity: [onAttachedToWindow] BEGIN</span><br><span class="line">BasicActivity: [onAttachedToWindow] END</span><br></pre></td></tr></tbody></table></figure><p>可以看出：</p><ul><li>Fragment的onAttach()-&gt;onCreate()-&gt;onCreateView()-&gt;onActivityCreated()-&gt;onStart()都是在Activity的onStart()中调用的。</li><li>Fragment的onResume()在Activity的onResume()之后调用。</li></ul><p>接下去分两种情况，分别是不加<code>addToBackStack()</code>和加<code>addToBackStack()</code>。<br> 1、当点击F1的按钮，调用<code>replace()</code>替换为F2，且不加<code>addToBackStack()</code>时，日志如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Fragment2: [onAttach] BEGIN</span><br><span class="line">Fragment2: [onAttach] END</span><br><span class="line">BasicActivity: [onAttachFragment] BEGIN</span><br><span class="line">BasicActivity: [onAttachFragment] END</span><br><span class="line">Fragment2: [onCreate] BEGIN</span><br><span class="line">Fragment2: [onCreate] END</span><br><span class="line">Fragment1: [onPause] BEGIN</span><br><span class="line">Fragment1: [onPause] END</span><br><span class="line">Fragment1: [onStop] BEGIN</span><br><span class="line">Fragment1: [onStop] END</span><br><span class="line">Fragment1: [onDestroyView] BEGIN</span><br><span class="line">Fragment1: [onDestroyView] END</span><br><span class="line">Fragment1: [onDestroy] BEGIN</span><br><span class="line">Fragment1: [onDestroy] END</span><br><span class="line">Fragment1: [onDetach] BEGIN</span><br><span class="line">Fragment1: [onDetach] END</span><br><span class="line">Fragment2: [onCreateView]</span><br><span class="line">Fragment2: [onViewCreated] BEGIN</span><br><span class="line">Fragment2: [onViewCreated] END</span><br><span class="line">Fragment2: [onActivityCreated] BEGIN</span><br><span class="line">Fragment2: [onActivityCreated] END</span><br><span class="line">Fragment2: [onStart] BEGIN</span><br><span class="line">Fragment2: [onStart] END</span><br><span class="line">Fragment2: [onResume] BEGIN</span><br><span class="line">Fragment2: [onResume] END</span><br></pre></td></tr></tbody></table></figure><p>可以看到，F1最后调用了<code>onDestroy()</code>和<code>onDetach()</code>。</p><p>2、当点击F1的按钮，调用<code>replace()</code>替换为F2，且加<code>addToBackStack()</code>时，日志如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Fragment2: [onAttach] BEGIN</span><br><span class="line">Fragment2: [onAttach] END</span><br><span class="line">BasicActivity: [onAttachFragment] BEGIN</span><br><span class="line">BasicActivity: [onAttachFragment] END</span><br><span class="line">Fragment2: [onCreate] BEGIN</span><br><span class="line">Fragment2: [onCreate] END</span><br><span class="line">Fragment1: [onPause] BEGIN</span><br><span class="line">Fragment1: [onPause] END</span><br><span class="line">Fragment1: [onStop] BEGIN</span><br><span class="line">Fragment1: [onStop] END</span><br><span class="line">Fragment1: [onDestroyView] BEGIN</span><br><span class="line">Fragment1: [onDestroyView] END</span><br><span class="line">Fragment2: [onCreateView]</span><br><span class="line">Fragment2: [onViewCreated] BEGIN</span><br><span class="line">Fragment2: [onViewCreated] END</span><br><span class="line">Fragment2: [onActivityCreated] BEGIN</span><br><span class="line">Fragment2: [onActivityCreated] END</span><br><span class="line">Fragment2: [onStart] BEGIN</span><br><span class="line">Fragment2: [onStart] END</span><br><span class="line">Fragment2: [onResume] BEGIN</span><br><span class="line">Fragment2: [onResume] END</span><br></pre></td></tr></tbody></table></figure><p>可以看到，F1被替换时，最后只调到了<code>onDestroyView()</code>，并没有调用<code>onDestroy()</code>和<code>onDetach()</code>。当用户点返回按钮回退事务时，F1会调onCreateView()-&gt;onStart()-&gt;onResume()，因此在Fragment事务中加不加<code>addToBackStack()</code>会影响Fragment的生命周期。</p><p>FragmentTransaction有一些基本方法，下面给出调用这些方法时，Fragment生命周期的变化：</p><ul><li>add(): onAttach()-&gt;…-&gt;onResume()。</li><li>remove(): onPause()-&gt;…-&gt;onDetach()。</li><li>replace(): 相当于旧Fragment调用remove()，新Fragment调用add()。</li><li>show(): 不调用任何生命周期方法，调用该方法的前提是要显示的 Fragment已经被添加到容器，只是纯粹把Fragment UI的setVisibility为true。</li><li>hide(): 不调用任何生命周期方法，调用该方法的前提是要显示的Fragment已经被添加到容器，只是纯粹把Fragment UI的setVisibility为false。</li><li>detach(): onPause()-&gt;onStop()-&gt;onDestroyView()。UI从布局中移除，但是仍然被FragmentManager管理。</li><li>attach(): onCreateView()-&gt;onStart()-&gt;onResume()。</li></ul><h3 id="Fragment实现原理和Back-Stack"><a href="#Fragment实现原理和Back-Stack" class="headerlink" title="Fragment实现原理和Back Stack"></a>Fragment实现原理和Back Stack</h3><hr><p>我们知道Activity有任务栈，用户通过startActivity将Activity加入栈，点击返回按钮将Activity出栈。Fragment也有类似的栈，称为回退栈（Back Stack），回退栈是由FragmentManager管理的。默认情况下，Fragment事务是不会加入回退栈的，如果想将Fragment事务加入回退栈，则可以加入<code>addToBackStack("")</code>。如果没有加入回退栈，则用户点击返回按钮会直接将Activity出栈；如果加入了回退栈，则用户点击返回按钮会回滚Fragment事务。</p><p>我们将通过最常见的Fragment用法，讲解Back Stack的实现原理：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">getSupportFragmentManager().beginTransaction()</span><br><span class="line">    .add(R.id.container, f1, <span class="string">"f1"</span>)</span><br><span class="line">    .addToBackStack(<span class="string">""</span>)</span><br><span class="line">    .commit();</span><br></pre></td></tr></tbody></table></figure><p>上面这个代码的功能就是将Fragment加入Activity中，内部实现为：创建一个BackStackRecord对象，该对象记录了这个事务的全部操作轨迹（这里只做了一次add操作，并且加入回退栈），随后将该对象提交到FragmentManager的执行队列中，等待执行。</p><p>BackStackRecord类的定义如下</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class BackStackRecord extends FragmentTransaction implements FragmentManager.BackStackEntry, Runnable {}</span><br></pre></td></tr></tbody></table></figure><p>从定义可以看出，BackStackRecord有三重含义：</p><ul><li>继承了FragmentTransaction，即是事务，保存了整个事务的全部操作轨迹。</li><li>实现了BackStackEntry，作为回退栈的元素，正是因为该类拥有事务全部的操作轨迹，因此在popBackStack()时能回退整个事务。</li><li>继承了Runnable，即被放入FragmentManager执行队列，等待被执行。</li></ul><p>先看第一层含义，<code>getSupportFragmentManager.beginTransaction()</code>返回的就是BackStackRecord对象，代码如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> FragmentTransaction <span class="title">beginTransaction</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> BackStackRecord(<span class="keyword">this</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>BackStackRecord类包含了一次事务的整个操作轨迹，是以链表形式存在的，链表的元素是Op类，表示其中某个操作，定义如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Op</span> </span>{</span><br><span class="line">    Op next; <span class="comment">//链表后一个节点</span></span><br><span class="line">    Op prev; <span class="comment">//链表前一个节点</span></span><br><span class="line">    <span class="keyword">int</span> cmd;  <span class="comment">//操作是add或remove或replace或hide或show等</span></span><br><span class="line">    Fragment fragment; <span class="comment">//对哪个Fragment对象做操作</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>我们来看下具体场景下这些类是怎么被使用的，比如我们的事务做add操作。add函数的定义：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> FragmentTransaction <span class="title">add</span><span class="params">(<span class="keyword">int</span> containerViewId, Fragment fragment, String tag)</span> </span>{</span><br><span class="line">   doAddOp(containerViewId, fragment, tag, OP_ADD);</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>doAddOp()</code>方法就是创建Op对象，并加入链表，定义如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doAddOp</span><span class="params">(<span class="keyword">int</span> containerViewId, Fragment fragment, String tag, <span class="keyword">int</span> opcmd)</span> </span>{</span><br><span class="line">    fragment.mTag = tag;  <span class="comment">//设置fragment的tag</span></span><br><span class="line">    fragment.mContainerId = fragment.mFragmentId = containerViewId;  <span class="comment">//设置fragment的容器id</span></span><br><span class="line">    Op op = <span class="keyword">new</span> Op();</span><br><span class="line">    op.cmd = opcmd;</span><br><span class="line">    op.fragment = fragment;</span><br><span class="line">    addOp(op);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>addOp()</code>是将创建好的Op对象加入链表，定义如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addOp</span><span class="params">(Op op)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (mHead == <span class="keyword">null</span>) {</span><br><span class="line">        mHead = mTail = op;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        op.prev = mTail;</span><br><span class="line">        mTail.next = op;</span><br><span class="line">        mTail = op;</span><br><span class="line">    }</span><br><span class="line">    mNumOp++;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>addToBackStack(“”)</code>是将mAddToBackStack变量记为true，在<code>commit()</code>中会用到该变量。<code>commit()</code>是异步的，即不是立即生效的，但是后面会看到整个过程还是在主线程完成，只是把事务的执行扔给主线程的Handler，<code>commit()</code>内部是<code>commitInternal()</code>，实现如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">commitInternal</span><span class="params">(<span class="keyword">boolean</span> allowStateLoss)</span> </span>{</span><br><span class="line">    mCommitted = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (mAddToBackStack) {</span><br><span class="line">        mIndex = mManager.allocBackStackIndex(<span class="keyword">this</span>);</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        mIndex = -<span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    mManager.enqueueAction(<span class="keyword">this</span>, allowStateLoss); <span class="comment">//将事务添加进待执行队列中</span></span><br><span class="line">    <span class="keyword">return</span> mIndex;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>如果mAddToBackStack为true，则调用<code>allocBackStackIndex(this)</code>将事务添加进回退栈，FragmentManager类的变量ArrayListmBackStackIndices;就是回退栈。实现如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">allocBackStackIndex</span><span class="params">(BackStackRecord bse)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (mBackStackIndices == <span class="keyword">null</span>) {</span><br><span class="line">        mBackStackIndices = <span class="keyword">new</span> ArrayList&lt;BackStackRecord&gt;();</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> index = mBackStackIndices.size();</span><br><span class="line">    mBackStackIndices.add(bse);</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在<code>commitInternal()</code>中，<code>mManager.enqueueAction(this, allowStateLoss);</code>是将BackStackRecord加入待执行队列中，定义如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueueAction</span><span class="params">(Runnable action, <span class="keyword">boolean</span> allowStateLoss)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (mPendingActions == <span class="keyword">null</span>) {</span><br><span class="line">        mPendingActions = <span class="keyword">new</span> ArrayList&lt;Runnable&gt;();</span><br><span class="line">    }</span><br><span class="line">    mPendingActions.add(action);</span><br><span class="line">    <span class="keyword">if</span> (mPendingActions.size() == <span class="number">1</span>) {</span><br><span class="line">        mHost.getHandler().removeCallbacks(mExecCommit);</span><br><span class="line">        mHost.getHandler().post(mExecCommit); <span class="comment">//调用execPendingActions()执行待执行队列的事务</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>mPendingActions就是前面说的待执行队列，<code>mHost.getHandler()</code>就是主线程的Handler，因此Runnable是在主线程执行的，mExecCommit的内部就是调用了<code>execPendingActions()</code>，即把mPendingActions中所有积压的没被执行的事务全部执行。执行队列中的事务会怎样被执行呢？就是调用BackStackRecord的<code>run()</code>方法，<code>run()</code>方法就是执行Fragment的生命周期函数，还有将视图添加进container中。<br> 与<code>addToBackStack()</code>对应的是<code>popBackStack()</code>，有以下几种变种：</p><ul><li>popBackStack()：将回退栈的栈顶弹出，并回退该事务。</li><li>popBackStack(String name, int flag)：name为addToBackStack(String name)的参数，通过name能找到回退栈的特定元素，flag可以为0或者FragmentManager.POP_BACK_STACK_INCLUSIVE，0表示只弹出该元素以上的所有元素，POP_BACK_STACK_INCLUSIVE表示弹出包含该元素及以上的所有元素。这里说的弹出所有元素包含回退这些事务。</li><li>popBackStack()是异步执行的，是丢到主线程的MessageQueue执行，popBackStackImmediate()是同步版本。</li></ul><p>我们通过讲解Demo来更清晰地了解回退栈的使用。功能如下：共有三个Fragment：F1, F2, F3，F1在初始化时就加入Activity，点击F1中的按钮跳转到F2，点击F2的按钮跳转到F3，点击F3的按钮回退到F1。</p><p>在Activity的<code>onCreate()</code>中，将F1加入Activity中：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">getSupportFragmentManager().beginTransaction()</span><br><span class="line">    .add(R.id.container, f1, <span class="string">"f1"</span>)</span><br><span class="line">    .addToBackStack(Fragment1.class.getSimpleName())</span><br><span class="line">    .commit();</span><br></pre></td></tr></tbody></table></figure><p>F1按钮的<code>onClick()</code>内容如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">getFragmentManager().beginTransaction()</span><br><span class="line">    .replace(R.id.container, f2, <span class="string">"f2"</span>)</span><br><span class="line">    .addToBackStack(Fragment2.class.getSimpleName())</span><br><span class="line">    .commit();</span><br></pre></td></tr></tbody></table></figure><p>F2按钮的<code>onClick()</code>如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">getFragmentManager().beginTransaction()</span><br><span class="line">    .replace(R.id.container, f3, <span class="string">"f3"</span>)</span><br><span class="line">    .addToBackStack(Fragment3.class.getSimpleName())</span><br><span class="line">    .commit();</span><br></pre></td></tr></tbody></table></figure><p>F3按钮的<code>onClick()</code>如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">getFragmentManager().popBackStack(Fragment2.class.getSimpleName(),</span><br><span class="line">             FragmentManager.POP_BACK_STACK_INCLUSIVE);</span><br></pre></td></tr></tbody></table></figure><p>这样就完成了整个界面的跳转逻辑。</p><h5 id="这里补充一个点"><a href="#这里补充一个点" class="headerlink" title="这里补充一个点"></a>这里补充一个点</h5><p><code>getSupportFragmentManager().findFragmentByTag()</code>是经常用到的方法，他是FragmentManager的方法，FragmentManager是抽象类，FragmentManagerImpl是继承FragmentManager的实现类，他的内部实现是：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FragmentManagerImpl</span> <span class="keyword">extends</span> <span class="title">FragmentManager</span> </span>{</span><br><span class="line">    ArrayList&lt;Fragment&gt; mActive;</span><br><span class="line">    ArrayList&lt;Fragment&gt; mAdded;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Fragment <span class="title">findFragmentByTag</span><span class="params">(String tag)</span> </span>{ </span><br><span class="line">           <span class="keyword">if</span> (mAdded != <span class="keyword">null</span> &amp;&amp; tag != <span class="keyword">null</span>) { </span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> i=mAdded.size()-<span class="number">1</span>; i&gt;=<span class="number">0</span>; i--) {</span><br><span class="line">                Fragment f = mAdded.get(i);</span><br><span class="line">                <span class="keyword">if</span> (f != <span class="keyword">null</span> &amp;&amp; tag.equals(f.mTag)) {</span><br><span class="line">                        <span class="keyword">return</span> f;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }       </span><br><span class="line">          <span class="keyword">if</span> (mActive != <span class="keyword">null</span> &amp;&amp; tag != <span class="keyword">null</span>) {</span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> i=mActive.size()-<span class="number">1</span>; i&gt;=<span class="number">0</span>; i--) {</span><br><span class="line">                    Fragment f = mActive.get(i);</span><br><span class="line">                    <span class="keyword">if</span> (f != <span class="keyword">null</span> &amp;&amp; tag.equals(f.mTag)) {</span><br><span class="line">                          <span class="keyword">return</span> f;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        } </span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>从上面看到，先从mAdded中查找是否有该Fragment，如果没找到，再从mActive中查找是否有该Fragment。mAdded是已经添加到Activity的Fragment的集合，mActive不仅包含mAdded，还包含虽然不在Activity中，但还在回退栈中的Fragment。</p><h3 id="Fragment通信"><a href="#Fragment通信" class="headerlink" title="Fragment通信"></a>Fragment通信</h3><hr><h5 id="Fragment向Activity传递数据"><a href="#Fragment向Activity传递数据" class="headerlink" title="Fragment向Activity传递数据"></a>Fragment向Activity传递数据</h5><p>首先，在Fragment中定义接口，并让Activity实现该接口（具体实现省略）：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnFragmentInteractionListener</span> </span>{    <span class="function"><span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(String str)</span></span>;  <span class="comment">//将str从Fragment传递给Activity}</span></span><br></pre></td></tr></tbody></table></figure><p>在Fragment的<code>onAttach()</code>中，将参数Context强转为OnFragmentInteractionListener对象：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAttach</span><span class="params">(Context context)</span> </span>{</span><br><span class="line">    <span class="keyword">super</span>.onAttach(context);</span><br><span class="line">        <span class="keyword">if</span> (context <span class="keyword">instanceof</span> OnFragmentInteractionListener) {</span><br><span class="line">        mListener = (OnFragmentInteractionListener) context;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(context.toString()</span><br><span class="line">                + <span class="string">" must implement OnFragmentInteractionListener"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>并在Fragment合适的地方调用<code>mListener.onItemClick("hello")</code>将”hello”从Fragment传递给Activity。</p><h5 id="FABridge"><a href="#FABridge" class="headerlink" title="FABridge"></a>FABridge</h5><p>由于通过接口的方式从Fragment向Activity进行数据传递比较麻烦，需要在Fragment中定义interface，并让Activity实现该interface，FABridge(<a href="https://link.jianshu.com?t=https://github.com/hongyangAndroid/FABridge" target="_blank" rel="noopener">https://github.com/hongyangAndroid/FABridge</a>)通过注解的形式免去了这些定义。</p><p>在build.gradle中添加依赖：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">annotationProcessor 'com.zhy.fabridge:fabridge-compiler:1.0.0'compile 'com.zhy.fabridge:fabridge-api:1.0.0'</span><br></pre></td></tr></tbody></table></figure><p>首先定义方法ID，这里为FAB_ITEM_CLICK，接着在Activity中定义接口：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FCallbackId</span>(id = FAB_ITEM_CLICK)<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(String str)</span> </span>{  <span class="comment">//方法名任意</span></span><br><span class="line">    Toast.makeText(<span class="keyword">this</span>, str, Toast.LENGTH_SHORT).show();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>最后，在Fragment中，通过以下形式调用”ID=FAB_ITEM_CLICK”的方法（该方法可能在Activity中，也可能在任何类中）：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Fabridge.call(mActivity,FAB_ITEM_CLICK,<span class="string">"data"</span>);  <span class="comment">//调用ID对应的方法，"data"为参数值</span></span><br></pre></td></tr></tbody></table></figure><h5 id="Activity向Fragment传递数据"><a href="#Activity向Fragment传递数据" class="headerlink" title="Activity向Fragment传递数据"></a>Activity向Fragment传递数据</h5><p>Activity向Fragment传递数据比较简单，获取Fragment对象，并调用Fragment的方法即可，比如要将一个字符串传递给Fragment，则在Fragment中定义方法：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setString</span><span class="params">(String str)</span> </span>{ </span><br><span class="line">    <span class="keyword">this</span>.str = str;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>并在Activity中调用<code>fragment.setString("hello")</code>即可。</p><h5 id="Fragment之间通信"><a href="#Fragment之间通信" class="headerlink" title="Fragment之间通信"></a>Fragment之间通信</h5><p>由于Fragment之间是没有任何依赖关系的，因此如果要进行Fragment之间的通信，建议通过Activity作为中介，不要Fragment之间直接通信。</p><h5 id="DialogFragment"><a href="#DialogFragment" class="headerlink" title="DialogFragment"></a>DialogFragment</h5><p>DialogFragment是Android 3.0提出的，代替了Dialog，用于实现对话框。他的优点是：即使旋转屏幕，也能保留对话框状态。</p><p>如果要自定义对话框样式，只需要继承DialogFragment，并重写<code>onCreateView()</code>，该方法返回对话框UI。这里我们举个例子，实现进度条样式的圆角对话框。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProgressDialogFragment</span> <span class="keyword">extends</span> <span class="title">DialogFragment</span> </span>{    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span> </span>{</span><br><span class="line">        getDialog().requestWindowFeature(Window.FEATURE_NO_TITLE); <span class="comment">//消除Title区域</span></span><br><span class="line">        getDialog().getWindow().setBackgroundDrawable(<span class="keyword">new</span> ColorDrawable(Color.TRANSPARENT));  <span class="comment">//将背景变为透明</span></span><br><span class="line">        setCancelable(<span class="keyword">false</span>);  <span class="comment">//点击外部不可取消</span></span><br><span class="line">        View root = inflater.inflate(R.layout.fragment_progress_dialog, container);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    }</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ProgressDialogFragment <span class="title">newInstance</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ProgressDialogFragment();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>进度条动画我们使用Lottie(<a href="https://link.jianshu.com?t=https://github.com/airbnb/lottie-android" target="_blank" rel="noopener">https://github.com/airbnb/lottie-android</a>)实现，Lottie动画从这里(<a href="https://link.jianshu.com?t=https://www.lottiefiles.com/" target="_blank" rel="noopener">https://www.lottiefiles.com/</a>)找到。使用非常方便，只需要下载JSON动画文件，然后在XML中写入：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">com.airbnb.lottie.LottieAnimationView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span>  //大小根据<span class="attr">JSON</span>文件确定</span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:lottie_fileName</span>=<span class="string">"loader_ring.json"</span>   //<span class="attr">JSON</span>文件</span></span><br><span class="line"><span class="tag">    <span class="attr">app:lottie_loop</span>=<span class="string">"true"</span>    //循环播放</span></span><br><span class="line"><span class="tag">    <span class="attr">app:lottie_autoPlay</span>=<span class="string">"true"</span> /&gt;</span>  //自动播放</span><br></pre></td></tr></tbody></table></figure><p>然后通过下面代码显示对话框：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ProgressDialogFragment fragment = ProgressDialogFragment.newInstance();</span><br><span class="line">fragment.show(getSupportFragmentManager(), <span class="string">"tag"</span>);<span class="comment">//fragment.dismiss();</span></span><br></pre></td></tr></tbody></table></figure><p>为了实现圆角，除了在onCreateView()中把背景设为透明，还需要对UI加入背景：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">shape</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">"#ffffff"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">corners</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:radius</span>=<span class="string">"20dp"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><hr><blockquote><p>转自Bugly 公众号  <a href="https://link.jianshu.com?t=https://mp.weixin.qq.com/s/dUuGSVhWinAnN9uMiBaXgw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/dUuGSVhWinAnN9uMiBaXgw</a></p></blockquote><blockquote><p>参考：<a href="https://www.jianshu.com/p/11c8ced79193" target="_blank" rel="noopener">https://www.jianshu.com/p/11c8ced79193</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;导语: Fragment作为Android最基本，最重要的基础概念之一，在开发中经常会和他打交道。本文从为什么出现Fragment开始，介绍了Fragment相关的方方面面，包括Fragment的基本定义及使用、回退栈的内部实现、Fragment通信、DialogFragment、ViewPager+Fragment的使用、嵌套Fragment、懒加载等。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="Android" scheme="http://blog.iwxyi.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Qt动画</title>
    <link href="http://blog.iwxyi.com/2018/11/26/Qt%E5%8A%A8%E7%94%BB/"/>
    <id>http://blog.iwxyi.com/2018/11/26/Qt动画/</id>
    <published>2018-11-26T10:44:00.000Z</published>
    <updated>2019-10-13T10:46:27.831Z</updated>
    
    <content type="html"><![CDATA[<h1 id="动画框架类"><a href="#动画框架类" class="headerlink" title="动画框架类"></a>动画框架类</h1><p>这些类提供了用于创建简单的和复杂的动画的框架</p><a id="more"></a><table><thead><tr><th>类</th><th>描述</th></tr></thead><tbody><tr><td>QAbstractAnimation</td><td>所有动画类的基类</td></tr><tr><td>QAnimationGroup</td><td>动画容器类的抽象基类</td></tr><tr><td>QEasingCurve</td><td>动画控制的缓和曲线类</td></tr><tr><td>QParallelAnimationGroup</td><td>并行动画容器</td></tr><tr><td>QPauseAnimation</td><td>QSequentialAnimationGroup暂停</td></tr><tr><td>QPropertyAnimation</td><td>Qt的动画属性</td></tr><tr><td>QSequentialAnimationGroup</td><td>串行动画容器</td></tr><tr><td>QTimeLine</td><td>控制动画的时间轴类</td></tr><tr><td>QVariantAnimation</td><td>动画类的抽象基类</td></tr></tbody></table><h1 id="Qt动画属性"><a href="#Qt动画属性" class="headerlink" title="Qt动画属性"></a>Qt动画属性</h1><p>如上所述，QPropertyAnimation类能够修改Qt属性值，正是该类用于改变动画属性值。事实上，它的基类QVariantAnimation是一个抽象类，所以不能被直接使用。</p><p>选用Qt动画属性的一个主要原因，是因为它给我们很大的自由性去动画操作Qt API中已经存在的类，尤其是拥有bounds、colors等属性的QWidget类（能被嵌入到QGraphicsView中的QWidget）。</p><p>来看一个小例子：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">QPushButton <span class="title">button</span><span class="params">(<span class="string">"Animated Button"</span>)</span></span>;</span><br><span class="line">button.show();</span><br><span class="line"></span><br><span class="line"><span class="function">QPropertyAnimation <span class="title">animation</span><span class="params">(&amp;button, <span class="string">"geometry"</span>)</span></span>;</span><br><span class="line">animation.setDuration(<span class="number">10000</span>);</span><br><span class="line">animation.setStartValue(QRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">30</span>));</span><br><span class="line">animation.setEndValue(QRect(<span class="number">250</span>, <span class="number">250</span>, <span class="number">100</span>, <span class="number">30</span>));</span><br><span class="line"></span><br><span class="line">animation.start();</span><br></pre></td></tr></tbody></table></figure><p>上述代码，在10秒的持续时间把button从屏幕的左上角移动到(250, 250)点处。</p><p>上面的例子在开始值与结束值之间做了线性插值。当然，设置的值在开始处与结束处之间的数值也是合理的，那么插值衍化就沿这些点进行。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">QPushButton <span class="title">button</span><span class="params">(<span class="string">"Animated Button"</span>)</span></span>;</span><br><span class="line">button.show();</span><br><span class="line"></span><br><span class="line"><span class="function">QPropertyAnimation <span class="title">animation</span><span class="params">(&amp;button, <span class="string">"geometry"</span>)</span></span>;</span><br><span class="line">animation.setDuration(<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">animation.setKeyValueAt(<span class="number">0</span>, QRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">30</span>));</span><br><span class="line">animation.setKeyValueAt(<span class="number">0.8</span>, QRect(<span class="number">250</span>, <span class="number">250</span>, <span class="number">100</span>, <span class="number">30</span>));</span><br><span class="line">animation.setKeyValueAt(<span class="number">1</span>, QRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">30</span>));</span><br><span class="line"></span><br><span class="line">animation.start();</span><br></pre></td></tr></tbody></table></figure><p>这个例子中，在8秒的持续时间将button移到(250, 250)，然后在剩下的2秒再移回至初始位置；这些点之间的移动都是通过线性插值的。</p><p>你也可以动画操作没有声明动画属性的QObject对象中的值，但是唯一的条件是该值有个能进行修改的设置函数。所以可以进行子类化，在该类中包含声明属性的值并且有个设置函数。每个Qt属性需要一个获取值的访问函数，因此如果类本身没提供对该值的访问函数的话，你自己就需要提供一个。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyGraphicsRectItem</span> :</span> <span class="keyword">public</span> QObject, <span class="keyword">public</span> QGraphicsRectItem</span><br><span class="line">{</span><br><span class="line">    Q_OBJECT</span><br><span class="line">    Q_PROPERTY(QRectF geometry READ geometry WRITE setGeometry)</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>如上所示的代码例子中，我们子类化QGraphicsRectItem类，并且定义了”geometry”属性。即使QGraphicsRectItem没有提供”geometry”属性，我们也可以动画操作MyGraphicsRectItem的位置信息了。</p><h1 id="动画和图形视图框架"><a href="#动画和图形视图框架" class="headerlink" title="动画和图形视图框架"></a>动画和图形视图框架</h1><p>当你想动画操作QGraphicsItem时，也可以使用QPropertyAnimation类。然而，QGraphicsItem并不继承于QObject。一个好的解决办法是子类化一个你需要的图形项，同时这个类也继承自QObject。通过这种方式，QPropertyAnimation类就能适用于QGraphicsItem。下面的代码例子展示了这是如何实现的。另一种可行性是只继承于QGraphicsWidget，因为QGraphicsWidget继承于QObject。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pixmap</span> :</span> <span class="keyword">public</span> QObject, <span class="keyword">public</span> QGraphicsPixmapItem</span><br><span class="line">{</span><br><span class="line">    Q_OBJECT</span><br><span class="line">    Q_PROPERTY(QPointF pos READ pos WRITE setPos)</span><br><span class="line">    ...</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>如上所述，我们定义了一个需要动画操作的属性值。</p><p>注意：出于元对象系统的要求，QObject必须是第一个继承者。</p><h1 id="缓和曲线"><a href="#缓和曲线" class="headerlink" title="缓和曲线"></a>缓和曲线</h1><p>QPropertyAnimation在开始与结束之间执行插值操作。除了为动画添加更多的键值外，你也可以使用缓和曲线，缓和曲线控制着在0与1之间的插值速度，如果你想在没有改变插值路径的情况下改变动画速度，那么缓和曲线是很有用的。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">QPushButton <span class="title">button</span><span class="params">(<span class="string">"Animated Button"</span>)</span></span>;</span><br><span class="line">button.show();</span><br><span class="line"></span><br><span class="line"><span class="function">QPropertyAnimation <span class="title">animation</span><span class="params">(&amp;button, <span class="string">"geometry"</span>)</span></span>;</span><br><span class="line">animation.setDuration(<span class="number">3000</span>);</span><br><span class="line">animation.setStartValue(QRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">30</span>));</span><br><span class="line">animation.setEndValue(QRect(<span class="number">250</span>, <span class="number">250</span>, <span class="number">100</span>, <span class="number">30</span>));</span><br><span class="line"></span><br><span class="line">animation.setEasingCurve(QEasingCurve::OutBounce);</span><br><span class="line"></span><br><span class="line">animation.start();</span><br></pre></td></tr></tbody></table></figure><p>这里，动画即沿着OutBounce曲线，该曲线样式是到结束处会弹跳起来像个弹跳球。QEasingCurve类有大量供选择的曲线，它们被定义成QEasingCurve::Type枚举。如果你需要另外的曲线样式，也可以自己实现一个，然后用QEasingCurve注册它既可。</p><h1 id="动画分组"><a href="#动画分组" class="headerlink" title="动画分组"></a>动画分组</h1><p>一个应用程序常常包含多个动画。例如，你或许希望同时移动不止一个图形项或者一个接一个的顺序移动它们。</p><p>QAnimationGroup（QSequentialAnimationGroup和QParallelAnimationGroup）的子类是动画容器类，因此多个动画可以被串行或者并行执行。QAnimationGroup类就是一个例子，其不操作动画属性，但是它能周期性的获得定时通知，这使得它能把定时通知应用于动画中，从而进行控制。</p><p>下面我们来看看使用QSequentialAnimationGroup和QParallelAnimationGroup的例子：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">QPushButton *bonnie = <span class="keyword">new</span> QPushButton(<span class="string">"Bonnie"</span>);</span><br><span class="line">bonnie-&gt;show();</span><br><span class="line"></span><br><span class="line">QPushButton *clyde = <span class="keyword">new</span> QPushButton(<span class="string">"Clyde"</span>);</span><br><span class="line">clyde-&gt;show();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动画一</span></span><br><span class="line">QPropertyAnimation *anim1 = <span class="keyword">new</span> QPropertyAnimation(bonnie, <span class="string">"geometry"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动画二</span></span><br><span class="line">QPropertyAnimation *anim2 = <span class="keyword">new</span> QPropertyAnimation(clyde, <span class="string">"geometry"</span>);</span><br><span class="line"></span><br><span class="line">QParallelAnimationGroup *group = <span class="keyword">new</span> QParallelAnimationGroup;</span><br><span class="line">group-&gt;addAnimation(anim1);</span><br><span class="line">group-&gt;addAnimation(anim2);</span><br><span class="line"></span><br><span class="line">group-&gt;start();</span><br></pre></td></tr></tbody></table></figure><p>并行容器内的动画是同时进行的，调用它的start()函数即开始操作它所管理的所有动画。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">QPushButton <span class="title">button</span><span class="params">(<span class="string">"Animated Button"</span>)</span></span>;</span><br><span class="line">button.show();</span><br><span class="line"></span><br><span class="line"><span class="function">QPropertyAnimation <span class="title">anim1</span><span class="params">(&amp;button, <span class="string">"geometry"</span>)</span></span>;</span><br><span class="line">anim1.setDuration(<span class="number">3000</span>);</span><br><span class="line">anim1.setStartValue(QRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">30</span>));</span><br><span class="line">anim1.setEndValue(QRect(<span class="number">500</span>, <span class="number">500</span>, <span class="number">100</span>, <span class="number">30</span>));</span><br><span class="line"></span><br><span class="line"><span class="function">QPropertyAnimation <span class="title">anim2</span><span class="params">(&amp;button, <span class="string">"geometry"</span>)</span></span>;</span><br><span class="line">anim2.setDuration(<span class="number">3000</span>);</span><br><span class="line">anim2.setStartValue(QRect(<span class="number">500</span>, <span class="number">500</span>, <span class="number">100</span>, <span class="number">30</span>));</span><br><span class="line">anim2.setEndValue(QRect(<span class="number">1000</span>, <span class="number">500</span>, <span class="number">100</span>, <span class="number">30</span>));</span><br><span class="line"></span><br><span class="line">QSequentialAnimationGroup group;</span><br><span class="line"></span><br><span class="line">group.addAnimation(&amp;anim1);</span><br><span class="line">group.addAnimation(&amp;anim2);</span><br><span class="line"></span><br><span class="line">group.start();</span><br></pre></td></tr></tbody></table></figure><p>毫无疑问你已经猜到了，QSequentialAnimationGroup串行的操作它所管理的动画。</p><p>因为动画容器类也是动画，所以你可以将其加入到其它动画容器里；用这种方式，就可以建造一个动画树结构，该结构指定了动画彼此之间运行的关系。</p><h1 id="动画和状态"><a href="#动画和状态" class="headerlink" title="动画和状态"></a>动画和状态</h1><p>当使用状态机时，我们可以使用QSignalTransition或QEventTransition类将一个或者多个动画与状态之间的切换中进行关联。这些类继承于QAbstractTransition，QAbstractTransition类提供了便利的函数addAnimation()，该函数在状态切换发生的情况下能触发一个或多个被附加的动画。</p><p>我们也可以和状态进行属性关联，而不是自己设置开始和结束值，下面就是一段完整的动画操作QPushButton位置的代码例子：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">QPushButton *button = <span class="keyword">new</span> QPushButton(<span class="string">"Animated Button"</span>);</span><br><span class="line">button-&gt;show();</span><br><span class="line"></span><br><span class="line">QStateMachine *machine = <span class="keyword">new</span> QStateMachine;</span><br><span class="line"></span><br><span class="line">QState *state1 = <span class="keyword">new</span> QState(machine);</span><br><span class="line">state1-&gt;assignProperty(button, <span class="string">"geometry"</span>, QRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">30</span>));</span><br><span class="line">machine-&gt;setInitialState(state1);</span><br><span class="line"></span><br><span class="line">QState *state2 = <span class="keyword">new</span> QState(machine);</span><br><span class="line">state2-&gt;assignProperty(button, <span class="string">"geometry"</span>, QRect(<span class="number">250</span>, <span class="number">250</span>, <span class="number">100</span>, <span class="number">30</span>));</span><br><span class="line"></span><br><span class="line">QSignalTransition *transition1 = state1-&gt;addTransition(button,</span><br><span class="line">    SIGNAL(clicked()), state2);</span><br><span class="line">transition1-&gt;addAnimation(<span class="keyword">new</span> QPropertyAnimation(button, <span class="string">"geometry"</span>));</span><br><span class="line"></span><br><span class="line">QSignalTransition *transition2 = state2-&gt;addTransition(button,</span><br><span class="line">    SIGNAL(clicked()), state1);</span><br><span class="line">transition2-&gt;addAnimation(<span class="keyword">new</span> QPropertyAnimation(button, <span class="string">"geometry"</span>));</span><br><span class="line"></span><br><span class="line">machine-&gt;start();</span><br></pre></td></tr></tbody></table></figure><blockquote><p>参考：<a href="https://blog.csdn.net/liang19890820/article/details/51850579" target="_blank" rel="noopener">https://blog.csdn.net/liang19890820/article/details/51850579</a></p></blockquote><h1 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h1><p>通过自定义属性alpha，来使用动画设置标签的样式。</p><p><code>Q_PROPERTY(int alpha READ alpha WRITE setAlpha)</code></p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MAIN_WINDOW_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAIN_WINDOW_H</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainWindow</span> :</span> <span class="keyword">public</span> CustomWindow</span><br><span class="line">{</span><br><span class="line">    Q_OBJECT</span><br><span class="line">    Q_PROPERTY(<span class="keyword">int</span> alpha READ alpha WRITE setAlpha)</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">MainWindow</span><span class="params">(QWidget *parent = <span class="number">0</span>)</span></span>;</span><br><span class="line">    ~MainWindow();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">alpha</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setAlpha</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> alpha)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_nAlpha;</span><br><span class="line">    QLabel *m_pLabel;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// MAIN_WINDOW_H</span></span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"main_window.h"</span></span></span><br><span class="line"></span><br><span class="line">MainWindow::MainWindow(QWidget *parent)</span><br><span class="line">    : CustomWindow(parent)</span><br><span class="line">{</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    QPushButton *pStartButton = <span class="keyword">new</span> QPushButton(<span class="keyword">this</span>);</span><br><span class="line">    pStartButton-&gt;setText(QString::fromLocal8Bit(<span class="string">"开始动画"</span>));</span><br><span class="line"></span><br><span class="line">    m_pLabel = <span class="keyword">new</span> QLabel(<span class="keyword">this</span>);</span><br><span class="line">    m_pLabel-&gt;setText(QString::fromLocal8Bit(<span class="string">"一去丶二三里"</span>));</span><br><span class="line">    m_pLabel-&gt;setAlignment(Qt::AlignCenter);</span><br><span class="line">    m_pLabel-&gt;setStyleSheet(<span class="string">"color: rgb(0, 160, 230);"</span>);</span><br><span class="line"></span><br><span class="line">    QPropertyAnimation *pAnimation = <span class="keyword">new</span> QPropertyAnimation();</span><br><span class="line">    pAnimation-&gt;setTargetObject(<span class="keyword">this</span>);</span><br><span class="line">    pAnimation-&gt;setPropertyName(<span class="string">"alpha"</span>);</span><br><span class="line">    pAnimation-&gt;setDuration(<span class="number">1000</span>);</span><br><span class="line">    pAnimation-&gt;setKeyValueAt(<span class="number">0</span>, <span class="number">255</span>);</span><br><span class="line">    pAnimation-&gt;setKeyValueAt(<span class="number">0.5</span>, <span class="number">100</span>);</span><br><span class="line">    pAnimation-&gt;setKeyValueAt(<span class="number">1</span>, <span class="number">255</span>);</span><br><span class="line">    pAnimation-&gt;setLoopCount(<span class="number">-1</span>);  <span class="comment">//永远运行，直到stop</span></span><br><span class="line">    connect(pStartButton, SIGNAL(clicked(<span class="keyword">bool</span>)), pAnimation, SLOT(start()));</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> MainWindow::alpha() <span class="keyword">const</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">return</span> m_nAlpha;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> MainWindow::setAlpha(<span class="keyword">const</span> <span class="keyword">int</span> alpha)</span><br><span class="line">{</span><br><span class="line">    m_nAlpha = alpha;</span><br><span class="line">    QString strQSS = QString(<span class="string">"color: rgb(0, 160, 230); background-color: rgba(10, 160, 105, %1);"</span>).arg(m_nAlpha);</span><br><span class="line">    m_pLabel-&gt;setStyleSheet(strQSS);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>O(∩_∩)O~是不是很easy，如果你想要实现更多其它效果，都可以自定义。但一定要注意以下两点：</p><ol><li>需要用QVariantAnimation检测你自定义的QVariant类型是否支持。</li><li>声明属性的类必须是一个QObject，必须为属性提供一个setter（这样，QPropertyAnimation才可以设置属性的值）。</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;动画框架类&quot;&gt;&lt;a href=&quot;#动画框架类&quot; class=&quot;headerlink&quot; title=&quot;动画框架类&quot;&gt;&lt;/a&gt;动画框架类&lt;/h1&gt;&lt;p&gt;这些类提供了用于创建简单的和复杂的动画的框架&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C++" scheme="http://blog.iwxyi.com/tags/C/"/>
    
      <category term="Qt" scheme="http://blog.iwxyi.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>ThinkPHP+Socket</title>
    <link href="http://blog.iwxyi.com/2018/11/25/ThinkPHP-Socket/"/>
    <id>http://blog.iwxyi.com/2018/11/25/ThinkPHP-Socket/</id>
    <published>2018-11-25T08:37:00.000Z</published>
    <updated>2019-10-13T08:44:08.832Z</updated>
    
    <content type="html"><![CDATA[<h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><a id="more"></a><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="comment">// 服务端</span></span><br><span class="line">error_reporting(E_ALL); <span class="comment">// 报错级别</span></span><br><span class="line"></span><br><span class="line">set_time_limit(<span class="number">0</span>);      <span class="comment">// 设置长链接</span></span><br><span class="line">$address = <span class="string">"127.0.0.1"</span>; <span class="comment">// i p</span></span><br><span class="line">$port = <span class="number">10005</span>;          <span class="comment">// 端口</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个套接字</span></span><br><span class="line"><span class="keyword">if</span> (($sock = socket_create(AF_INET, SOCK_STREAM, SOL_TCP)) === <span class="keyword">false</span>) {</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"创建一个套接字 失败\n"</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//启动套接字</span></span><br><span class="line"><span class="keyword">if</span> (socket_bind($sock, $address, $port) === <span class="keyword">false</span>) {</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"启动套接字 失败"</span> . socket_strerror(socket_last_error($sock)) . <span class="string">"\n"</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//监听端口</span></span><br><span class="line"><span class="keyword">if</span> (socket_listen($sock, <span class="number">5</span>) === <span class="keyword">false</span>) {</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"监听端口 失败"</span> . socket_strerror(socket_last_error($sock)) . <span class="string">"\n"</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> { <span class="comment">// 接收客户端传来的消息</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (($msgsock = socket_accept($sock)) === <span class="keyword">false</span>) {</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"socket_accepty() failed :reason:"</span> . socket_strerror(socket_last_error($sock)) . <span class="string">"\n"</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//echo "读取客户端传来的消息"."\n";</span></span><br><span class="line">    $buf = socket_read($msgsock, <span class="number">8192</span>);</span><br><span class="line">    </span><br><span class="line">    $talkback = <span class="string">"我已经成功接到客户端的信息了。现在我还回信息给客户端"</span> . <span class="string">"\n"</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">false</span> === socket_write($msgsock, $talkback)) {</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"socket_write() failed reason:"</span> . socket_strerror(socket_last_error($sock)) . <span class="string">"\n"</span>;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"return info msg ku fu duan success"</span> . <span class="string">"\n"</span>;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    socket_close($msgsock);</span><br><span class="line">    </span><br><span class="line">} <span class="keyword">while</span> (<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">socket_close($sock);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="comment">// 客户端</span></span><br><span class="line"><span class="keyword">require</span>(<span class="string">"./Socket.class.php"</span>);</span><br><span class="line">$confing = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">'persistent'</span> =&gt; <span class="keyword">false</span>,</span><br><span class="line">    <span class="string">'host'</span> =&gt; <span class="string">'localhost'</span>,</span><br><span class="line">    <span class="string">'protocol'</span> =&gt; <span class="string">'tcp'</span>,</span><br><span class="line">    <span class="string">'port'</span> =&gt; <span class="number">10005</span>,</span><br><span class="line">    <span class="string">'timeout'</span> =&gt; <span class="number">1800</span></span><br><span class="line">);</span><br><span class="line">$Socket  = <span class="keyword">new</span> Socket($confing);</span><br><span class="line"><span class="keyword">if</span> ($Socket-&gt;connect()) {</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"TP类 创建Socket链接成功！&lt;hr&gt;"</span>;</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"TP类 创建Socket链接失败！&lt;hr&gt;"</span>;</span><br><span class="line">}</span><br><span class="line">$data = <span class="string">"我是客户端，我要发数据给服务端"</span>;</span><br><span class="line">$Socket-&gt;write($data);</span><br><span class="line">$read = $Socket-&gt;read();</span><br><span class="line"><span class="comment">//$read 是服务端还回的数据</span></span><br><span class="line"><span class="keyword">echo</span> $read . <span class="string">"&lt;hr &gt;"</span>;</span><br><span class="line">$Socket-&gt;disconnect();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;服务端&quot;&gt;&lt;a href=&quot;#服务端&quot; class=&quot;headerlink&quot; title=&quot;服务端&quot;&gt;&lt;/a&gt;服务端&lt;/h2&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="PHP" scheme="http://blog.iwxyi.com/tags/PHP/"/>
    
      <category term="Socket" scheme="http://blog.iwxyi.com/tags/Socket/"/>
    
      <category term="ThinkPHP" scheme="http://blog.iwxyi.com/tags/ThinkPHP/"/>
    
  </entry>
  
  <entry>
    <title>汇编MASM-学习笔记</title>
    <link href="http://blog.iwxyi.com/2018/11/19/%E6%B1%87%E7%BC%96MASM-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://blog.iwxyi.com/2018/11/19/汇编MASM-学习笔记/</id>
    <published>2018-11-19T12:18:00.000Z</published>
    <updated>2019-10-12T23:14:32.479Z</updated>
    
    <content type="html"><![CDATA[<h1 id="运行-DOSBox"><a href="#运行-DOSBox" class="headerlink" title="运行 DOSBox"></a>运行 DOSBox</h1><ol><li><code>mount c: d:\masm</code></li><li><code>C:</code></li><li><code>masm test.asm</code> 回车3次</li><li><code>link test.obj</code> 回车4次</li><li><code>debug test.exe</code></li></ol><a id="more"></a><ul><li><code>-r</code> 运行</li><li><code>-t</code> 继续</li><li><code>-t 10</code> 运行10条指令</li><li><code>-d</code> 内存</li><li><code>-u</code> 源码</li><li><code>-p</code> 跳过（尤其是库函数）</li><li><code>-q</code> 退出</li></ul><h1 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h1><ul><li><code>assume</code> 声明</li><li><code>mov</code> 复制内存 <code>mov ax, [bx]</code></li><li><code>inc</code> 加一 <code>inc ax</code></li><li><code>dec</code> 减一</li><li><code>jmp</code> 跳转 <code>jmp loop1</code></li><li><code>cmp</code> 比较大小 <code>cmp ax, bx</code></li><li><code>add</code> 增加某数 <code>add ax, 10</code></li></ul><h2 id="其他指令"><a href="#其他指令" class="headerlink" title="其他指令"></a>其他指令</h2><ul><li><code>ADC</code> 带进位加法</li><li><code>LEA dx, [0000]</code>  相当于<code>MOV</code>字符串</li></ul><p>?                               比较大小</p><p><code>cmp cx, 0</code> 比较结果执行下面的语句</p><ul><li><code>ja</code> &gt;    above</li><li><code>jb</code> &lt;    blow</li><li><code>jbe</code> &lt;=</li><li><code>jae</code> &gt;=</li><li><code>jz</code>   == （相减为 zero）</li><li><code>jnz</code> !=</li></ul><h1 id="库函数"><a href="#库函数" class="headerlink" title="库函数"></a>库函数</h1><ul><li><code>INT 21</code> <ul><li><code>MOV AH 0A</code> 时：接收一个用户输入到 <code>ds[dx]</code></li><li><code>MOV AH 4C</code> 时：退出程序，返回操作系统</li></ul></li></ul><h2 id="寄存器拆开"><a href="#寄存器拆开" class="headerlink" title="寄存器拆开"></a>寄存器拆开</h2><p>AX = AH + AL<br>只有 AX BX CX DX 这四个可以拆开用</p><h1 id="常用代码块"><a href="#常用代码块" class="headerlink" title="常用代码块"></a>常用代码块</h1><h2 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code, ds:data1</span><br><span class="line">mov ax, data1</span><br></pre></td></tr></tbody></table></figure><h2 id="变量加一"><a href="#变量加一" class="headerlink" title="变量加一"></a>变量加一</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov al, [bx] ; 数据段寄存器DS 到 寄存器</span><br><span class="line">inc al       ; 增加 1</span><br><span class="line">mov [bx], al ; 寄存器 到 DS</span><br></pre></td></tr></tbody></table></figure><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mov cx, 0</span><br><span class="line"></span><br><span class="line">loop1:</span><br><span class="line">    inc cx</span><br><span class="line">    cmp cx, 10</span><br><span class="line">    jb loop1</span><br></pre></td></tr></tbody></table></figure><h3 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">while</span> (i &gt;= <span class="number">0</span>) {</span><br><span class="line">    <span class="comment">// P1</span></span><br><span class="line">    i--;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mov ax, 10</span><br><span class="line"></span><br><span class="line">loop1:</span><br><span class="line">cmp ax, 0</span><br><span class="line">jb next</span><br><span class="line">;P1</span><br><span class="line">dec ax</span><br><span class="line">jmp loop1</span><br><span class="line"></span><br><span class="line">next:</span><br></pre></td></tr></tbody></table></figure><h2 id="接收用户输入"><a href="#接收用户输入" class="headerlink" title="接收用户输入"></a>接收用户输入</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MOV AX, 076A</span><br><span class="line">MOV DS, AX</span><br><span class="line">MOV DX, 0000</span><br><span class="line">MOV AH, 0A</span><br><span class="line">INT 21</span><br></pre></td></tr></tbody></table></figure><h2 id="清屏"><a href="#清屏" class="headerlink" title="清屏"></a>清屏</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">    mov ax,cs</span><br><span class="line">    mov ss,ax</span><br><span class="line">    mov sp,0x7c00  ;set stack and sp</span><br><span class="line"></span><br><span class="line">    mov ah,0x06</span><br><span class="line">    mov al,0   ; 准备清窗口</span><br><span class="line"></span><br><span class="line">    mov ch,0   ; 左上角的行号</span><br><span class="line">    mov cl,0   ; 左上角的列号</span><br><span class="line">    mov dh,25  ; 右下角的行号</span><br><span class="line">    mov dl,80  ; 右下角的行号</span><br><span class="line">    mov bh,0x07; 属性为蓝底白字</span><br><span class="line">    int 0x10   ; 执行清空操作</span><br><span class="line"></span><br><span class="line">@1:  </span><br><span class="line">    jmp @1</span><br><span class="line"></span><br><span class="line">    times 510-($-$$) db 0</span><br><span class="line">    db 0x55,0xaa</span><br></pre></td></tr></tbody></table></figure><h2 id="画白线"><a href="#画白线" class="headerlink" title="画白线"></a>画白线</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">mov al, 0x13    ; VGA320×200×8bit 显示模式</span><br><span class="line">mov ah, 0x00</span><br><span class="line">int 0x10</span><br><span class="line"></span><br><span class="line">mov ax, 0x0a000 ; 往显存中放入点数据</span><br><span class="line">mov ds, ax</span><br><span class="line">mov dl, 30</span><br><span class="line">mov ax, 0</span><br><span class="line"></span><br><span class="line">f:</span><br><span class="line">mov bx, ax</span><br><span class="line">mov [ds:bx], dl</span><br><span class="line">inc ax</span><br><span class="line">cmp ax, 50</span><br><span class="line">ja io</span><br><span class="line">jmp f</span><br><span class="line"></span><br><span class="line">io:</span><br></pre></td></tr></tbody></table></figure><h2 id="画线函数"><a href="#画线函数" class="headerlink" title="画线函数"></a>画线函数</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">org 0x7c00</span><br><span class="line"></span><br><span class="line">mov ax, 80; y</span><br><span class="line">mov bx, 50; x1</span><br><span class="line">mov cx, 150; x2</span><br><span class="line"></span><br><span class="line">call drawline; 运行画线</span><br><span class="line"></span><br><span class="line">; y:ax, x1:bx, x2:cx</span><br><span class="line">drawline:</span><br><span class="line">mov dx, 320; 屏幕宽是320</span><br><span class="line">mul dx; dx *= ax 16位中AX为被乘数，8位中AL为被乘数</span><br><span class="line">sub cx, bx; cx = x2-x1 线的宽度</span><br><span class="line">add bx, ax; 横偏移量+横纵偏移量 = 偏移位置</span><br><span class="line">mov dl, 1; 色号</span><br><span class="line">loop0:</span><br><span class="line">mov [ds:bx], dl ; 填充颜色</span><br><span class="line">inc bx; 偏移位置+1</span><br><span class="line">dec cx; 循环次数-1</span><br><span class="line">jnz loop0; 受到上面的DEC的ZF标志位</span><br><span class="line">RET</span><br></pre></td></tr></tbody></table></figure><h2 id="画竖线"><a href="#画竖线" class="headerlink" title="画竖线"></a>画竖线</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">;****************************************</span><br><span class="line">;y1-&gt;ax, y2-&gt;cx, x-&gt;bx</span><br><span class="line">;****************************************</span><br><span class="line">DrawVerticalLine:</span><br><span class="line">mov dx, 320 ; w = 320</span><br><span class="line">mov bp, dx</span><br><span class="line">sub cx, ax  ; y1 = y2-y1  循环次数</span><br><span class="line">mul dx; ax = w * y1 纵偏移量</span><br><span class="line">add bx, ax  ; 横纵偏移量</span><br><span class="line">mov dl, 1</span><br><span class="line">x1: mov [ds:bx], dl</span><br><span class="line">add bx, bp</span><br><span class="line">dec cx</span><br><span class="line">jnz x1</span><br><span class="line">ret</span><br></pre></td></tr></tbody></table></figure><h2 id="设置颜色"><a href="#设置颜色" class="headerlink" title="设置颜色"></a>设置颜色</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mov al, 1      ; 颜色号</span><br><span class="line">mov dx, 0x3c8</span><br><span class="line">out dx, al</span><br><span class="line"></span><br><span class="line">mov al, 100    ; R / 4 = 25</span><br><span class="line">mov dx, 0x3c9</span><br><span class="line">out dx, al</span><br><span class="line"></span><br><span class="line">mov al, 0      ; G</span><br><span class="line">out dx, al</span><br><span class="line"></span><br><span class="line">mov al, 0      ; B</span><br><span class="line">out dx, al</span><br></pre></td></tr></tbody></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">;rgb db 100, 0, 0,  0, 100, 0,  0, 0, 100</span><br><span class="line">rgb db 100, 0, 0,</span><br><span class="line">    db 0, 100, 0,</span><br><span class="line">    db 0, 0, 100</span><br><span class="line"></span><br><span class="line">mov ax, 0</span><br><span class="line">mov ds, ax</span><br><span class="line">mov si, rgb</span><br><span class="line">mov [ds:si], ... ; 偏移地址，si为下标</span><br></pre></td></tr></tbody></table></figure><h2 id="进栈出栈保存变量"><a href="#进栈出栈保存变量" class="headerlink" title="进栈出栈保存变量"></a>进栈出栈保存变量</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">push ax</span><br><span class="line">mov  ax, 0</span><br><span class="line">pop  ax</span><br></pre></td></tr></tbody></table></figure><h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><p>每隔18分之一秒运行一次，多个任务的话会被覆盖掉</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mov word [ds:0x20],int_timer0</span><br></pre></td></tr></tbody></table></figure><h2 id="打印字符"><a href="#打印字符" class="headerlink" title="打印字符"></a>打印字符</h2><p>函数：在 <code>ex:bx</code> 的位置显示一个 ‘A’</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">int_timer0:</span><br><span class="line">mov byte [es:bx],'A'</span><br><span class="line">mov byte [es:bx+1],0x0a</span><br><span class="line">inc bx   ; 自增两次到下次打印的字符</span><br><span class="line">inc bx</span><br><span class="line"></span><br><span class="line">mov al,0x20</span><br><span class="line">mov dx,0x20</span><br><span class="line">out dx,al;EOI=0 中断</span><br><span class="line">iret</span><br></pre></td></tr></tbody></table></figure><h2 id="获取按键输入"><a href="#获取按键输入" class="headerlink" title="获取按键输入"></a>获取按键输入</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">int_key:</span><br><span class="line">mov dx, 0x20  ; 下一个键值可以进来了（没有这一段就只能输入一次按键了）</span><br><span class="line">mov al, 0x61</span><br><span class="line">out dx, al</span><br><span class="line"></span><br><span class="line">mov dx, 0x60  ; 读取一次按键</span><br><span class="line">in al, dx</span><br><span class="line"></span><br><span class="line">cmp al, 0x9e</span><br><span class="line">jz func0</span><br><span class="line"></span><br><span class="line">func0:</span><br></pre></td></tr></tbody></table></figure><h2 id="显示一个数字"><a href="#显示一个数字" class="headerlink" title="显示一个数字"></a>显示一个数字</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;运行-DOSBox&quot;&gt;&lt;a href=&quot;#运行-DOSBox&quot; class=&quot;headerlink&quot; title=&quot;运行 DOSBox&quot;&gt;&lt;/a&gt;运行 DOSBox&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;mount c: d:\masm&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C:&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;masm test.asm&lt;/code&gt; 回车3次&lt;/li&gt;
&lt;li&gt;&lt;code&gt;link test.obj&lt;/code&gt; 回车4次&lt;/li&gt;
&lt;li&gt;&lt;code&gt;debug test.exe&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="学习笔记" scheme="http://blog.iwxyi.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="汇编" scheme="http://blog.iwxyi.com/tags/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>C简单小知识整理</title>
    <link href="http://blog.iwxyi.com/2018/11/13/C%E7%AE%80%E5%8D%95%E5%B0%8F%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/"/>
    <id>http://blog.iwxyi.com/2018/11/13/C简单小知识整理/</id>
    <published>2018-11-13T00:18:00.000Z</published>
    <updated>2019-10-13T12:09:32.449Z</updated>
    
    <content type="html"><![CDATA[<p>C 与 C++相关内容，<br>一部分从网上摘录。<br>个人能力水平有限，<br>不能保证没有错误。</p><p>——王心意，2018.11.13</p><a id="more"></a><h1 id="必知"><a href="#必知" class="headerlink" title="必知"></a>必知</h1><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">【必知】整数/整数 = 整数，向下取整。</span><br><span class="line"><span class="number">3</span>/<span class="number">5</span> == <span class="number">0</span>, 需要改成：<span class="number">3.0</span>/<span class="number">5</span> == <span class="number">0.6</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span>, a += a *= <span class="number">4</span>; <span class="comment">// 40 + 40 = 80</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a == b &lt; c;  <span class="comment">// a == (b &lt; c) // 判断</span></span><br><span class="line">a = b &lt; c;   <span class="comment">// a = (b &lt; c)  // 0 或 1</span></span><br><span class="line">b &lt; c == a;  <span class="comment">// 0 或 1 == a</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (; ; i++) { <span class="comment">/*...*/</span>} 中的 <span class="keyword">break</span> 不会执行 i++ 语句，<span class="keyword">continue</span> 会执行 i++</span><br></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串复制：<span class="keyword">while</span> (*p1++ = *p2++); <span class="comment">// 谭浩强的书上有</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*p++;     <span class="comment">/* 地址++ */</span></span><br><span class="line">(*p)++;   <span class="comment">/*  值++  */</span></span><br></pre></td></tr></tbody></table></figure><p>读入回车解决方案</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">getchar(); <span class="comment">// 会读入上一个scanf的回车</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;c); <span class="comment">// 这是想要的字符</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">" %c"</span>, &amp;c) != EOF)；  <span class="comment">// 避免读取回车</span></span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%c%*c"</span>, &amp;c) != EOF); <span class="comment">// 强行去掉回车</span></span><br></pre></td></tr></tbody></table></figure><p>计算机的浮点值计算有个”不确定尾数“的现象：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.1</span>+<span class="number">0.2</span> != <span class="number">0.3</span> <span class="comment">// 0.30000000000000004</span></span><br><span class="line"><span class="number">0.1</span>+<span class="number">0.5</span> == <span class="number">0.6</span></span><br></pre></td></tr></tbody></table></figure><p>原因看 <a href="https://0.30000000000000004.com/" target="_blank" rel="noopener">https://0.30000000000000004.com</a></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> a[] = <span class="string">"hello"</span>; <span class="built_in">strcpy</span>(a, <span class="string">"hehe"</span>); <span class="comment">// 正确，字符串常量能当做临时的指针常量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> *p = <span class="string">"hello"</span>; p[<span class="number">2</span>] = <span class="string">'a'</span>;         <span class="comment">// 错误，常量不能改</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">5</span>], (*p)[<span class="number">5</span>]; <span class="comment">// 指向数组的指针，下标必须明确</span></span><br><span class="line">p = &amp;a;</span><br><span class="line">(*p)[i] == a[i];</span><br></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">puts</span>(str[<span class="number">2</span>])、<span class="built_in">strlen</span>(&amp;str[<span class="number">2</span>])、gets(str+<span class="number">2</span>); <span class="comment">//都是从第二个位置开始。输入后末尾自动加上 '\0' （即 ASCII码的 0）</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">3</span>; <span class="keyword">int</span> &amp;b = a; <span class="comment">// 引用类型：对b操作就是对a操作，printf("%d", b)就是3</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">( <span class="keyword">int</span> &amp;a, <span class="keyword">int</span> &amp;b)</span></span>; <span class="comment">//引用，比指针方便</span></span><br></pre></td></tr></tbody></table></figure><p>取 <code>int</code> 或者 <code>long long</code> 变量的某个数字，如：<code>125 / 10 % 10; //倒数第二位</code></p><p>函数 <code>floor( f )</code> 对浮点数取整，但是因为浮点数误差，一般用：<code>floor( f + 0.5);</code><br>浮点数陷阱：<code>for (double i = 0; i != 10; i++); // 死循环</code></p><h1 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h1><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d %d"</span>, a, a++, a++); <span class="comment">//在有些编译器上（实测如VC，不包括VS），从右到左执行，从左到右输出，a=10时会输出：12， 11， 10</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = b = <span class="number">3</span>; <span class="comment">// 是从右到左开始运算，而非从左到右</span></span><br></pre></td></tr></tbody></table></figure><p>不使用临时变量交换两个整数</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = a + b</span><br><span class="line">b = a - b</span><br><span class="line">a = a - b</span><br></pre></td></tr></tbody></table></figure><p>位运算：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = a ^ b;</span><br><span class="line">b = a ^ b;</span><br><span class="line">a = a ^ b;</span><br></pre></td></tr></tbody></table></figure><p>输出”\r”字符串，光标位置回调到行首，并逐字覆盖这一行的文字（可用于做表格）</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i1, i2; <span class="comment">// 分配空间（例子）：i1:10008，i2:10004  逆序添加</span></span><br></pre></td></tr></tbody></table></figure><p><code>static int m;</code> 可以让其他文件不能调用变量或者函数，作用域只限于本模块<br>头文件不要定义全局变量（多次调用会报告已声明），可以用 <code>extern</code></p><p>很大的数组比如几百亿的，开到全局（main函数外面，太大了也必须全局），会全部自动初始化成 0</p><p><code>(2^32) - 1</code> = <code>4294967295</code>，<code>unsigned</code> 的大小<br>-n 的内部表示是：<code>(2 ^ 32) - n</code>;</p><p>判断素数：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (n &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i * i &lt;= n; i++)</span><br><span class="line"><span class="keyword">if</span> (n % i == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br></pre></td></tr></tbody></table></figure><p>也可以素数筛按照倍数打表（多次用到或数字很大时）</p><p><code>int q = 0;</code>  !q 的值在 0 和 非零 之间变换</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">"%*s"</span>); <span class="comment">// 可以跳过输入一个字符串，其他类型同理</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> t[] = <span class="string">"hello\0world"</span>;</span><br><span class="line"><span class="keyword">sizeof</span>(t) == <span class="number">12</span>;</span><br><span class="line"><span class="built_in">strlen</span>(t) == <span class="number">5</span>;</span><br></pre></td></tr></tbody></table></figure><p>数字转换成字符串：<code>sprintf(str, "%d", num);</code><br>字符串转换成数字：<code>sscanf(str, "%d", &amp;num);</code></p><p>清空queue等STL的数据：<code>que.swap( queue&lt;T&gt;() ) ;</code> //消亡值语义</p><p>void指针（仅用于代表地址）：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">zero</span><span class="params">(<span class="keyword">void</span> * data, <span class="keyword">int</span> bytesize)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">char</span> * p = (<span class="keyword">char</span> *)data;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bytesize; i++)</span><br><span class="line">*ptr++ = <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> nums[<span class="number">30</span>]; zero(nums, <span class="keyword">sizeof</span>(nums)); <span class="comment">//不管什么类型，都能按照字符（字节）来清零，因为字节总长度不变</span></span><br><span class="line"></span><br><span class="line">Person p1; zero(p1, <span class="keyword">sizeof</span>(p1)); <span class="comment">//Person 为 struct 结构体，也能用同一个函数来清零 或者 复制数据</span></span><br></pre></td></tr></tbody></table></figure><p><code>strncat</code>、<code>strncpy</code>：比较安全的函数，第三个参数是数量，比如：<code>sizeof(num)/sizeof(int)</code></p><p>指向函数的指针：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(* intFunc)</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line">test1(<span class="keyword">int</span> a) { <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a); }  <span class="comment">// intFunc 就是一个指向函数test1的指针了</span></span><br><span class="line">intFunc func = test1;  func(<span class="number">3</span>);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">( a * <span class="number">2</span> + <span class="number">1</span> ) == ( a &lt;&lt; <span class="number">1</span> | <span class="number">1</span> )； <span class="comment">// 位运算速度快很多很多</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);  <span class="comment">// 禁用 cin 和 stdin 的同步，大大加快C艹的cin速度，与scanf相差无几（约为三倍）</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a / b % m ==  a % (m * b) / b <span class="comment">// 取模</span></span><br></pre></td></tr></tbody></table></figure><p>字符串常量[下标]，例如：<code>"qwerty"[4] == 'r'</code></p><p>C语言只有一维数组，但数组元素可以是另一个数组，仿真出多维数组</p><p>16进制用<code>0x</code>开头，八进制用<code>0</code>开头；小数常量默认<code>double</code>，末尾可加<code>f</code>表示为<code>float</code>；整数常量默认<code>int</code>，末尾可加<code>l</code>表示是<code>long</code>；其他格式同理（然而没必要的，有隐式转换）</p><p>随机数（例如<code>rand()</code>函数）并不是真的随机（但有些新设备可以实现真随机）</p><h1 id="叨唠"><a href="#叨唠" class="headerlink" title="叨唠"></a>叨唠</h1><p>// C语言的爸爸是B语言没错</p><p>// 即使从面向过程的C语言转到面向对象的C++，你也不一定能找到对象。</p><p>// 计算机的减法乘法都是通过加法器来实现的（最终都可以分解为与或非逻辑门组合运算）</p><p>// 大部分程序员不用关注二进制是啥（但考试要考到）</p><p>// 你写程序的大部分时间不是在写代码</p><p>// 看到这句话将会很开心： <code>0 error,0 warning</code></p><p>// 项目中适当的注释往往比代码本身还重要</p><p>// 仅用顺序结构，分支结构和循环结果能写出所有的可计算函数。</p><p>// 可以用多个不同的编辑器看看这段注释的颜色：<code>/*/zhushi/*/</code></p><hr><h1 id="偏僻知识点（来自网络）"><a href="#偏僻知识点（来自网络）" class="headerlink" title="偏僻知识点（来自网络）"></a>偏僻知识点（来自网络）</h1><h2 id="无符号int自动转换"><a href="#无符号int自动转换" class="headerlink" title="无符号int自动转换"></a>无符号int自动转换</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> a = <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">-20</span>;</span><br><span class="line">    (a+b &gt; <span class="number">6</span>)?<span class="built_in">puts</span>(<span class="string">"&gt; 6"</span>) : <span class="built_in">puts</span>(<span class="string">"&lt;= 6"</span>); <span class="comment">//输出  &gt;6</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    原因是当表达式中存在有符号类型和无符号类型时所有的操作数都自动转换为无符号类型，因此-20变成了一个非常大的</span></span><br><span class="line"><span class="comment">    正整数，所以该表达式计算出的结果大于 6</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="数组共同体"><a href="#数组共同体" class="headerlink" title="数组共同体"></a>数组共同体</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">union</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">char</span> x[<span class="number">2</span>];</span><br><span class="line">}a;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    a.x[<span class="number">0</span>] = <span class="number">10</span>;</span><br><span class="line">    a.x[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d-%d-%d\n"</span>,a.i,a.x[<span class="number">0</span>],a.x[<span class="number">1</span>]);<span class="comment">//522-10-2  :说明a.x[0]与a.x[1]互无影响，所以它们的地址是不同的。a.i=a.x[0]+a.x[1]*256(2的8次方);</span></span><br><span class="line">    a.i=<span class="number">1027</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d-%d-%d\n"</span>,a.i,a.x[<span class="number">0</span>],a.x[<span class="number">1</span>]);<span class="comment">//1027-3-4    1027=(4)*256+(3)</span></span><br><span class="line">    a.x[<span class="number">0</span>] = <span class="number">300</span>;</span><br><span class="line">    a.x[<span class="number">1</span>] = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d-%d-%d\n"</span>,a.i,a.x[<span class="number">0</span>],a.x[<span class="number">1</span>]);<span class="comment">//2604-44-10, a.x[0]=300-256=44;a.i=a.x[0]+a.x[1]*256;</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>union</strong>这种类型，就是内部的变量共同使用一块空间，按照size大的分配，int i 占<em>4</em>个字节，char x[2] 占<em>2</em>个，所以一共分配了4个字节。<br>一共4个字节的内存，对应x来说相当于占用了低2个字节，而给x赋值的1，和10，就存在个位和十位上了（十六进制）</p><p> 公用体公用一个内存区域sizeof(a)为共用体成员中长度最长的成员的size。即i</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>:             (|_|_|_|_|_|_|_|_|)(|_|_|_|_|_|_|_|_|)(|_|_|_|_|_|_|_|_|)(|_|_|_|_|_|_|_|_|)</span><br><span class="line"><span class="keyword">char</span> x[<span class="number">2</span>] :                                            (|_|_|_|_|_|_|_|_|)(|_|_|_|_|_|_|_|_|)</span><br><span class="line">                 ^                                                                         ^</span><br><span class="line">               高地址                                                                   低地址</span><br></pre></td></tr></tbody></table></figure><p>分析：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a.x[<span class="number">0</span>] = <span class="number">10</span>  ============&gt;(|<span class="number">0</span>|<span class="number">0</span>|<span class="number">0</span>|<span class="number">0</span>|<span class="number">1</span>|<span class="number">0</span>|<span class="number">1</span>|<span class="number">0</span>|)</span><br><span class="line">a.x[<span class="number">1</span>] = <span class="number">2</span>   ============&gt;(|<span class="number">0</span>|<span class="number">0</span>|<span class="number">0</span>|<span class="number">0</span>|<span class="number">0</span>|<span class="number">0</span>|<span class="number">1</span>|<span class="number">0</span>|)</span><br></pre></td></tr></tbody></table></figure><p>公用体公用sizeof(int)长度即4字节32为，则赋值后共用体内存为</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a:               (|<span class="number">0</span>|<span class="number">0</span>|<span class="number">0</span>|<span class="number">0</span>|<span class="number">0</span>|<span class="number">0</span>|<span class="number">0</span>|<span class="number">0</span>|)(|<span class="number">0</span>|<span class="number">0</span>|<span class="number">0</span>|<span class="number">0</span>|<span class="number">0</span>|<span class="number">0</span>|<span class="number">0</span>|<span class="number">0</span>|)(|<span class="number">0</span>|<span class="number">0</span>|<span class="number">0</span>|<span class="number">0</span>|<span class="number">0</span>|<span class="number">0</span>|<span class="number">1</span>|<span class="number">0</span>|)(|<span class="number">0</span>|<span class="number">0</span>|<span class="number">0</span>|<span class="number">0</span>|<span class="number">1</span>|<span class="number">0</span>|<span class="number">1</span>|<span class="number">0</span>|)</span><br></pre></td></tr></tbody></table></figure><p> a.i 为4字节整型，则 i = 2^9 + 2^3 + 2^1 = 256 + 8 + 2 = 522</p><h2 id="宏定义运算"><a href="#宏定义运算" class="headerlink" title="宏定义运算"></a>宏定义运算</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SQR(X) X*X</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">10</span>,j=<span class="number">5</span>,n=<span class="number">10</span>;</span><br><span class="line">    n*=i+j;<span class="comment">//n=n*(i+j)</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;n&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//150</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>,k = <span class="number">2</span>, m=<span class="number">1</span>;</span><br><span class="line">    a /= SQR(k+m)/SQR(k+m); <span class="comment">// 等效于 a /= (k+m*k+m/k+m*k+m)</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>宏定义运算尽量添加小括号</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SQR(X) (X*X)</span></span><br></pre></td></tr></tbody></table></figure><h2 id="sizeof-union"><a href="#sizeof-union" class="headerlink" title="sizeof(union)"></a>sizeof(union)</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">union</span> A {<span class="keyword">int</span> a_int1;<span class="keyword">double</span> a_double;<span class="keyword">int</span> a_int2;};</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>{</span>A a1;<span class="keyword">char</span> y;} B;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>{</span><span class="keyword">double</span> c_double;B b1;A a2;};</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="keyword">sizeof</span>(A)&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//8</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="keyword">sizeof</span>(B)&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//16</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="keyword">sizeof</span>(C)&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//32</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="数组内存分配"><a href="#数组内存分配" class="headerlink" title="数组内存分配"></a>数组内存分配</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> str1[] = <span class="string">"abc"</span>;</span><br><span class="line"><span class="keyword">char</span> str2[] = <span class="string">"abc"</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> str3[] = <span class="string">"abc"</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> str4[] = <span class="string">"abc"</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *str5 = <span class="string">"abc"</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *str6 = <span class="string">"abc"</span>;</span><br><span class="line"><span class="keyword">char</span> *str7 = <span class="string">"abc"</span>;</span><br><span class="line"><span class="keyword">char</span> *str8 = <span class="string">"abc"</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ( str1 == str2 ) &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ( str3 == str4 ) &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ( str5 == str6 ) &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ( str7 == str8 ) &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">// 1</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>解答：str1,str2,str3,str4是数组变量，它们有各自的内存空间;<br>而str5,str6,str7,str8是指针，它们指向相同的常量区域。</p></blockquote><h2 id="char-lt-gt-int"><a href="#char-lt-gt-int" class="headerlink" title="char <==> int"></a>char &lt;==&gt; int</h2><p>应该不算偏僻，ACM刷题经常会用到（刷题之外就用到的不多了）</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一位整数 to  char</span></span><br><span class="line">    <span class="keyword">char</span> x=<span class="number">5</span>+<span class="string">'0'</span>; <span class="comment">//'5'</span></span><br><span class="line"><span class="comment">//一位整数的char to  int</span></span><br><span class="line">    <span class="keyword">int</span> y=<span class="string">'5'</span>-<span class="string">'0'</span>;  <span class="comment">//5</span></span><br><span class="line"><span class="comment">//获取'a'后面的'd'</span></span><br><span class="line">    <span class="keyword">char</span> z=<span class="string">'a'</span>+<span class="number">3</span>;<span class="comment">//'d'</span></span><br></pre></td></tr></tbody></table></figure><h2 id="自增"><a href="#自增" class="headerlink" title="自增"></a>自增</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testplusplus</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> a=<span class="number">4</span>;</span><br><span class="line">        a += (a++);<span class="comment">//==&gt;&gt; a=a+(a++);</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//9</span></span><br><span class="line">    }</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> a=<span class="number">4</span>;</span><br><span class="line">        a += (++a);<span class="comment">//==&gt;&gt; a = a+(++a);</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//10</span></span><br><span class="line">    }</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> a=<span class="number">4</span>;</span><br><span class="line">        <span class="comment">//(a++) += a;//error，"+="左操作数必须为左值</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    }</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> a=<span class="number">4</span>;</span><br><span class="line">        (++a) += (a++);</span><br><span class="line">        <span class="comment">//A=(++a);</span></span><br><span class="line">        <span class="comment">//A=A+(a++)</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//11</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>总结：(a++),在整个表达式执行完后，才+1;<br>(++a),在整个表达式执行前就+1;  </p></blockquote><h2 id="连接下一行"><a href="#连接下一行" class="headerlink" title="连接下一行"></a>连接下一行</h2><p>行尾添加反斜杠 <code>\</code></p><p>如果在宏定义中使用，则真正代码也会包括换行。可用来做接口宏。</p><p>多行字符串也能用这个来拼接。</p><h2 id="数组下标为0"><a href="#数组下标为0" class="headerlink" title="数组下标为0"></a>数组下标为0</h2><p>数组下标为0时，指针p不分配空间</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Struct MutableLenArray </span><br><span class="line">{ </span><br><span class="line">    <span class="keyword">int</span> count; </span><br><span class="line">    <span class="keyword">char</span> p[<span class="number">0</span>]; </span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><h2 id="任意字符串"><a href="#任意字符串" class="headerlink" title="任意字符串"></a>任意字符串</h2><p>使用 # 符号</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TO_STRING(x) #x</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *str = TO_STRING( test );</span><br></pre></td></tr></tbody></table></figure><p><code>str</code>的内容就是<code>" test "</code>，也就是说#会把其后的符号 直接加上双引号。 </p><h2 id="符号连接"><a href="#符号连接" class="headerlink" title="符号连接"></a>符号连接</h2><p><code>##</code>符号会连接两个符号，从而产生新的符号(词法层次)，例如：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SIGN( x ) INT_##x</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SIGN</span><span class="params">( <span class="number">1</span> )</span></span>;</span><br></pre></td></tr></tbody></table></figure><p>宏被展开后将成为：<code>int INT_1;</code></p><h2 id="变参宏"><a href="#变参宏" class="headerlink" title="变参宏"></a>变参宏</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOG( format, ... ) printf( format, VA_ARGS )</span></span><br><span class="line">LOG( <span class="string">"%s %d"</span>, str, count );</span><br></pre></td></tr></tbody></table></figure><p>VA_ARGS是系统预定义宏，被自动替换为参数列表。 </p><h2 id="宏例外"><a href="#宏例外" class="headerlink" title="宏例外"></a>宏例外</h2><p>当一个宏参数被放进宏体时，如果宏体（外部的宏）参数有#，则宏体的参数不会展开。若要展开，则需要借助第三个宏</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PARAM(x) PARAM1(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PARAM1( x ) #x </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ADDPARAM( x ) INT_##x</span></span><br></pre></td></tr></tbody></table></figure><h2 id="函数参数指针与引用"><a href="#函数参数指针与引用" class="headerlink" title="函数参数指针与引用"></a>函数参数指针与引用</h2><p>函数参数指针和引用的区别：引用必须已经初始化，且不能为空；指针可以</p><h2 id="const-引用常量"><a href="#const-引用常量" class="headerlink" title="const 引用常量"></a>const 引用常量</h2><p>const 引用能引用常量：<code>const double &amp;PI = 3.14</code></p><p>非const不能引用常量</p><hr><h1 id="C语言主要关键词"><a href="#C语言主要关键词" class="headerlink" title="C语言主要关键词"></a>C语言主要关键词</h1><p>基本类型：<code>int</code>, <code>short</code>,<code>long</code>, <code>signed</code>, <code>unsigned</code>,<code>char</code>,<code>float</code>, <code>double</code>,<code>void</code></p><p>控制：<code>if...else</code>, <code>switch...case...default</code>, <code>for</code> , <code>while</code>, <code>do...while</code>,<code>return</code>, <code>break</code>, <code>continue</code>,<code>goto</code></p><p>自定义类型：<code>enum</code>, <code>struct</code>, <code>union</code>, <code>typedef</code></p><p>修饰词：<code>const</code>, <code>static</code>, <code>extern</code>, <code>inline</code>, <code>restrict</code>, <code>volatile</code></p><p>运算符：<code>+</code>, <code>-</code>, <code>*</code>,<code>/</code>, <code>%</code>,<code>++</code>,<code>--</code>,<code>&amp;</code>,<code>|</code> ,<code>~</code>, <code>^</code>,<code>&amp;&amp;</code>,<code>||</code>,<code>!</code>,<code>&lt;</code>,<code>&gt;</code>,<code>&lt;=</code>,<code>&gt;=</code>,<code>==</code>,<code>!=</code>,  <code>&lt;&lt;</code>,<code>&gt;&gt;</code>, <code>.</code>, <code>-&gt;</code>,<code>?:</code>,<code>sizeof</code>及复合运算符</p><p>预处理器：<code>#include</code>, <code>#define</code>, <code>#undef</code>, <code>#if/#ifdef/#ifndef...#elif...#else...#endif</code>,  <code>defined</code>, <code>#pragma</code>,<code>#error</code></p><p>有极少数关键字有多种语义，例如<code>static</code>、<code>void</code></p><p>掌握上面这些就算入门了。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;C 与 C++相关内容，&lt;br&gt;一部分从网上摘录。&lt;br&gt;个人能力水平有限，&lt;br&gt;不能保证没有错误。&lt;/p&gt;
&lt;p&gt;——王心意，2018.11.13&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C" scheme="http://blog.iwxyi.com/tags/C/"/>
    
      <category term="整理" scheme="http://blog.iwxyi.com/tags/%E6%95%B4%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Qt使用MySQL数据库</title>
    <link href="http://blog.iwxyi.com/2018/11/06/Qt%E4%BD%BF%E7%94%A8MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://blog.iwxyi.com/2018/11/06/Qt使用MySQL数据库/</id>
    <published>2018-11-06T09:43:00.000Z</published>
    <updated>2019-10-13T09:44:31.403Z</updated>
    
    <content type="html"><![CDATA[<h2 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h2><p>1、实现对MySql得数据库插入操作</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">QSqlQuery <span class="title">query</span><span class="params">(dbconn)</span></span>;</span><br><span class="line">query.prepare(<span class="string">"INSERT INTO faceimage(FaceData,StrName,Sijian,Shijian)"</span> <span class="string">"VALUES(:FaceData,:StrName,:Sijian,:Shijian)"</span>);  </span><br><span class="line">query.bindValue(<span class="string">":FaceData"</span>,<span class="keyword">this</span>-&gt;ui-&gt;ImageLabel-&gt;text());  </span><br><span class="line">query.bindValue(<span class="string">":StrName"</span>,<span class="keyword">this</span>-&gt;ui-&gt;userName-&gt;text());</span><br><span class="line">query.bindValue(<span class="string">":Sijian"</span>,<span class="keyword">this</span>-&gt;ui-&gt;idNumber-&gt;text());</span><br><span class="line">query.bindValue(<span class="string">":Shijian"</span>,Catchtime);</span><br><span class="line">query.exec();</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><p>2、实现对MySql得数据库删除操作</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">QSqlQuery <span class="title">query</span><span class="params">(dbconn)</span></span>;</span><br><span class="line">query.prepare(QString(<span class="string">"DELETE FROM faceimage WHERE Faceid=?"</span>));</span><br><span class="line">query.addBindValue(Faceid);</span><br><span class="line">query.exec();</span><br></pre></td></tr></tbody></table></figure><p>3、实现对MySql得数据库得更新操作</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">query.prepare(<span class="string">"update faceimage set StrName=?,Sijian=? where Faceid=?"</span>);</span><br><span class="line">query.addBindValue(<span class="keyword">this</span>-&gt;ui-&gt;XGuserName-&gt;text());</span><br><span class="line">query.addBindValue(<span class="keyword">this</span>-&gt;ui-&gt;XGidNumber-&gt;text());</span><br><span class="line">query.addBindValue(Faceid);</span><br><span class="line">query.exec();</span><br></pre></td></tr></tbody></table></figure><p>4、实现对MySql数据库得遍历操作</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function">QSqlQuery <span class="title">query</span><span class="params">(dbconn)</span></span>;</span><br><span class="line"> query.prepare(sql);</span><br><span class="line"> <span class="keyword">while</span>(query.next())</span><br><span class="line"> {</span><br><span class="line">   m_model-&gt;setItem(i,<span class="number">0</span>,<span class="keyword">new</span> QStandardItem(query.value(<span class="number">0</span>).toString()));</span><br><span class="line">   m_model-&gt;setItem(i,<span class="number">1</span>,<span class="keyword">new</span> QStandardItem(query.value(<span class="number">3</span>).toString()));</span><br><span class="line">   m_model-&gt;setItem(i,<span class="number">2</span>,<span class="keyword">new</span> QStandardItem(query.value(<span class="number">6</span>).toString()));</span><br><span class="line">   m_model-&gt;setItem(i,<span class="number">3</span>,<span class="keyword">new</span> QStandardItem(query.value(<span class="number">2</span>).toString()));</span><br><span class="line">   i++;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;增删改查&quot;&gt;&lt;a href=&quot;#增删改查&quot; class=&quot;headerlink&quot; title=&quot;增删改查&quot;&gt;&lt;/a&gt;增删改查&lt;/h2&gt;&lt;p&gt;1、实现对MySql得数据库插入操作&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;QSqlQuery &lt;span class=&quot;title&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(dbconn)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;query.prepare(&lt;span class=&quot;string&quot;&gt;&quot;INSERT INTO faceimage(FaceData,StrName,Sijian,Shijian)&quot;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;VALUES(:FaceData,:StrName,:Sijian,:Shijian)&quot;&lt;/span&gt;);  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;query.bindValue(&lt;span class=&quot;string&quot;&gt;&quot;:FaceData&quot;&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;-&amp;gt;ui-&amp;gt;ImageLabel-&amp;gt;text());  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;query.bindValue(&lt;span class=&quot;string&quot;&gt;&quot;:StrName&quot;&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;-&amp;gt;ui-&amp;gt;userName-&amp;gt;text());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;query.bindValue(&lt;span class=&quot;string&quot;&gt;&quot;:Sijian&quot;&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;-&amp;gt;ui-&amp;gt;idNumber-&amp;gt;text());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;query.bindValue(&lt;span class=&quot;string&quot;&gt;&quot;:Shijian&quot;&lt;/span&gt;,Catchtime);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;query.exec();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C++" scheme="http://blog.iwxyi.com/tags/C/"/>
    
      <category term="MySQL" scheme="http://blog.iwxyi.com/tags/MySQL/"/>
    
      <category term="Qt" scheme="http://blog.iwxyi.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>C++多个文件共用全局变量</title>
    <link href="http://blog.iwxyi.com/2018/11/06/C-%E5%A4%9A%E4%B8%AA%E6%96%87%E4%BB%B6%E5%85%B1%E7%94%A8%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F/"/>
    <id>http://blog.iwxyi.com/2018/11/06/C-多个文件共用全局变量/</id>
    <published>2018-11-06T00:01:00.000Z</published>
    <updated>2019-10-13T00:04:29.220Z</updated>
    
    <content type="html"><![CDATA[<p>示例：</p><p>头文件：<strong>state.h</strong>   源文件：<strong>state.cpp</strong><br>其它源文件：t1.cpp  t2.cpp  t3.cpp, 这些源文件都包含头文件state.h。</p><p>需要定义一个全局变量供这些源文件中使用：方法如下</p><p>1、在<code>state.h</code>中<strong>声明</strong>全局变量： <code>extern int a;</code></p><p>2、在<code>state.cpp</code>中<strong>定义</strong>该全局变量：<code>int a =10;</code></p><p>这样其它源文件就可以使用该变量啦，只需要 include 一下 <strong>state.cpp</strong></p><a id="more"></a><p>这里需要的是“声明”，不是“定义”！根据C++标准的规定，一个变量声明必须同时满足两个条件，否则就是定义：<br> (1)声明必须使用<strong>extern关键字</strong>；(2)<strong>不能给变量赋初值</strong></p><ul><li><code>extern  int  a;  //声明</code></li><li><code>int  a;   //定义</code></li><li><code>int  a  =  0; //定义</code></li><li><code>extern  int  a  =0;   //定义</code></li></ul><p>头文件中应使用extern关键字声明全局变量（不定义），如果这个变量有多个文件用到，可以<strong>新建一个cpp</strong>，在其中定义，把这个cpp加入工程即可。<strong>头文件请不要定义任何变量</strong>，那是非常业余的行为……</p><blockquote><p>定义专用的 <code>.cpp</code> 文件不需要 include</p></blockquote><p>一般<strong>在头文件中声明，用extern；在cpp中定义</strong>。 如果在头文件中定义，如果这个头文件被多个cpp引用，会造成重复定义的链接错误。</p><p>头文件只能申明全局变量（extern），不可定义（不推荐使用）<br>.cpp里，在最外层定义即可（int gi），直接引用</p><p>如果在.cpp里使用static定义，则该变量只在当前cpp文件中有效，在别的文件中无效<br>在.h里使用static定义，不会进行编译（.h文件不编译），只会在其每个include的cpp文件中包含编译，相当于在.cpp里使用static定义。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;示例：&lt;/p&gt;
&lt;p&gt;头文件：&lt;strong&gt;state.h&lt;/strong&gt;   源文件：&lt;strong&gt;state.cpp&lt;/strong&gt;&lt;br&gt;其它源文件：t1.cpp  t2.cpp  t3.cpp, 这些源文件都包含头文件state.h。&lt;/p&gt;
&lt;p&gt;需要定义一个全局变量供这些源文件中使用：方法如下&lt;/p&gt;
&lt;p&gt;1、在&lt;code&gt;state.h&lt;/code&gt;中&lt;strong&gt;声明&lt;/strong&gt;全局变量： &lt;code&gt;extern int a;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;2、在&lt;code&gt;state.cpp&lt;/code&gt;中&lt;strong&gt;定义&lt;/strong&gt;该全局变量：&lt;code&gt;int a =10;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这样其它源文件就可以使用该变量啦，只需要 include 一下 &lt;strong&gt;state.cpp&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C++" scheme="http://blog.iwxyi.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Qt QTextEdit特定行改变指针</title>
    <link href="http://blog.iwxyi.com/2018/11/05/Qt-QTextEdit%E7%89%B9%E5%AE%9A%E8%A1%8C%E6%94%B9%E5%8F%98%E6%8C%87%E9%92%88/"/>
    <id>http://blog.iwxyi.com/2018/11/05/Qt-QTextEdit特定行改变指针/</id>
    <published>2018-11-05T12:05:00.000Z</published>
    <updated>2019-10-13T12:08:32.701Z</updated>
    
    <content type="html"><![CDATA[<p>行文本形式如下<br>&lt;&lt;word 文档标题&gt;&gt; [word 文档路径] 段落序号</p><a id="more"></a><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> DzfContentEdit::mouseMoveEvent(QMouseEvent *e)</span><br><span class="line">{</span><br><span class="line">    QTextEdit::mouseMoveEvent(e);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 得到鼠标下行文本</span></span><br><span class="line">    <span class="keyword">auto</span> pos = e-&gt;pos();</span><br><span class="line">    <span class="keyword">auto</span> cursor = cursorForPosition(pos);    </span><br><span class="line">    cursor.select(QTextCursor::LineUnderCursor);</span><br><span class="line">    <span class="keyword">auto</span> line = cursor.selectedText();</span><br><span class="line"></span><br><span class="line">    <span class="function">QRegExp <span class="title">reg</span><span class="params">(<span class="string">"\\[(.*docx?)\\]"</span>)</span></span>;</span><br><span class="line">    <span class="keyword">if</span>(reg.indexIn(line) != <span class="number">-1</span>){</span><br><span class="line">        <span class="comment">// 得到文件路径</span></span><br><span class="line">        doc_ = reg.capturedTexts().at(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 若在指定行上, 改变鼠标形状</span></span><br><span class="line">        viewport()-&gt;setCursor(Qt::PointingHandCursor);</span><br><span class="line">    }<span class="keyword">else</span>{</span><br><span class="line">        doc_.clear();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 若不在指定行上, 恢复鼠标形状</span></span><br><span class="line">        viewport()-&gt;setCursor(Qt::IBeamCursor);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">void</span> DzfContentEdit::mouseDoubleClickEvent(QMouseEvent *e)</span><br><span class="line">{    </span><br><span class="line">    <span class="keyword">if</span>(!doc_.isEmpty()){</span><br><span class="line">       <span class="comment">// 文件路径前不加上 "file:///", 路径中含中文字符时出现乱码</span></span><br><span class="line">       doc_.prepend(<span class="string">"file:///"</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 打开文件</span></span><br><span class="line">       QDesktopServices::openUrl(QUrl(doc_));</span><br><span class="line">    }<span class="keyword">else</span>{</span><br><span class="line">        QTextEdit::mouseDoubleClickEvent(e);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;行文本形式如下&lt;br&gt;&amp;lt;&amp;lt;word 文档标题&amp;gt;&amp;gt; [word 文档路径] 段落序号&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C++" scheme="http://blog.iwxyi.com/tags/C/"/>
    
      <category term="Qt" scheme="http://blog.iwxyi.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>ThinkPHP view模板用法</title>
    <link href="http://blog.iwxyi.com/2018/11/05/ThinkPHP-view%E6%A8%A1%E6%9D%BF%E7%94%A8%E6%B3%95/"/>
    <id>http://blog.iwxyi.com/2018/11/05/ThinkPHP-view模板用法/</id>
    <published>2018-11-05T08:38:00.000Z</published>
    <updated>2019-10-13T08:44:15.399Z</updated>
    
    <content type="html"><![CDATA[<h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">if</span> condition=<span class="string">"$monthItem eq I('get.monthParam') "</span>&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/<span class="keyword">if</span>&gt;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;eq name=<span class="string">"userData.user_level"</span> value=<span class="string">"3"</span>&gt;</span><br><span class="line">&lt;li&gt;&lt;a href=<span class="string">""</span> title=<span class="string">""</span>&gt;管理员功能&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;<span class="keyword">else</span>/&gt;</span><br><span class="line">&lt;/eq&gt;</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><h2 id="获取系统变量"><a href="#获取系统变量" class="headerlink" title="获取系统变量"></a>获取系统变量</h2><p>普通的模板变量需要首先赋值后才能在模板中输出，但是系统变量则不需要，可<br>以直接在模板中输出，系统变量的输出通常以<code>$Think</code>开头，例如：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">{$Think.server.script_name} <span class="comment">// 输出$_SERVER['SCRIPT_NAME']变量</span></span><br><span class="line">{$Think.session.user_id} <span class="comment">// 输出$_SESSION['user_id']变量</span></span><br><span class="line">{$Think.get.pageNumber} <span class="comment">// 输出$_GET['pageNumber']变量</span></span><br><span class="line">{$Think.cookie.name} <span class="comment">// 输出$_COOKIE['name']变量</span></span><br></pre></td></tr></tbody></table></figure><h2 id="获取网址"><a href="#获取网址" class="headerlink" title="获取网址"></a>获取网址</h2><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">{:request()-&gt;module()} <span class="comment">// 模块</span></span><br><span class="line">{:request()-&gt;controller()} <span class="comment">// 控制器，注意区分大小写的</span></span><br><span class="line">{:request()-&gt;action()} <span class="comment">// 触发器</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 导航菜单 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> {<span class="attr">eq</span> <span class="attr">name</span>=<span class="string">":request()-&gt;controller()"</span> <span class="attr">value</span>=<span class="string">"Room"</span>}<span class="attr">class</span>=<span class="string">"active"</span>{/<span class="attr">eq</span>}&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"{:url('Room/index')}"</span>&gt;</span>房间管理<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="网址重定向"><a href="#网址重定向" class="headerlink" title="网址重定向"></a>网址重定向</h2><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{:url(<span class="string">'Login/index'</span>)}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;标签&quot;&gt;&lt;a href=&quot;#标签&quot; class=&quot;headerlink&quot; title=&quot;标签&quot;&gt;&lt;/a&gt;标签&lt;/h2&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; condition=&lt;span class=&quot;string&quot;&gt;&quot;$monthItem eq I(&#39;get.monthParam&#39;) &quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;eq name=&lt;span class=&quot;string&quot;&gt;&quot;userData.user_level&quot;&lt;/span&gt; value=&lt;span class=&quot;string&quot;&gt;&quot;3&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;li&amp;gt;&amp;lt;a href=&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt; title=&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&amp;gt;管理员功能&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/eq&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="PHP" scheme="http://blog.iwxyi.com/tags/PHP/"/>
    
      <category term="ThinkPHP" scheme="http://blog.iwxyi.com/tags/ThinkPHP/"/>
    
  </entry>
  
  <entry>
    <title>贪心算法-讲解</title>
    <link href="http://blog.iwxyi.com/2018/11/04/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
    <id>http://blog.iwxyi.com/2018/11/04/贪心算法/</id>
    <published>2018-11-04T12:46:00.000Z</published>
    <updated>2019-10-12T23:14:42.108Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ACM-贪心算法"><a href="#ACM-贪心算法" class="headerlink" title="ACM 贪心算法"></a>ACM 贪心算法</h1><p>贪心算法（又称贪婪算法）是指，在对问题求解时，总是做出在<strong>当前看来是最好的选择</strong>。也就是说，不从整体最优上加以考虑，他所做出的是在某种意义上的<strong>局部最优解</strong>。</p><a id="more"></a><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="钱币找零问题"><a href="#钱币找零问题" class="headerlink" title="钱币找零问题"></a>钱币找零问题</h3><p>假设1元、2元、5元、10元、20元、50元、100元的纸币分别有c0, c1, c2, c3, c4, c5, c6张。现在要用这些钱来支付K元，至少要用多少张纸币？</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> Count[N]={<span class="number">3</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">5</span>};</span><br><span class="line"><span class="keyword">int</span> Value[N]={<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">20</span>,<span class="number">50</span>,<span class="number">100</span>};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> money;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;money);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=N<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> c=min(money/Value[i],Count[i]);</span><br><span class="line">money=money-c*Value[i];</span><br><span class="line">num+=c;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(num!=<span class="number">-1</span>) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, num);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="可分割背包问题"><a href="#可分割背包问题" class="headerlink" title="可分割背包问题"></a>可分割背包问题</h3><p>有一个背包，背包容量是M，有N个物品，要求尽可能让装入背包中的物品总价值最大，但不能超过总容量，物品可以只取一部分。</p><p><strong>输入</strong><br>第一行输入一个正整数n（1&lt;=n&lt;=5）,表示有n组测试数据；<br>随后有n测试数据，每组测试数据的第一行有两个正整数s，m（1&lt;=s&lt;=10）;s表示有s个物品。接下来的s行每行有两个正整数v，w，分别表示物品的单位价值和总质量。<br><strong>输出</strong><br>输出每组测试数据中背包内的物品的价值和，每次输出占一行。<br><strong>样例输入</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">3 15</span><br><span class="line">5 10</span><br><span class="line">2 8</span><br><span class="line">3 9</span><br></pre></td></tr></tbody></table></figure><p><strong>样例输出</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">65</span><br></pre></td></tr></tbody></table></figure><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 10000</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> n, m;</span><br><span class="line">        <span class="keyword">int</span> v[MAXN], w[MAXN];</span><br><span class="line"></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;v[i], &amp;w[i]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n - i - <span class="number">1</span>; j++)</span><br><span class="line">                <span class="keyword">if</span> (v[j] &lt; v[j + <span class="number">1</span>])</span><br><span class="line">                {</span><br><span class="line">                    <span class="keyword">int</span> temp = v[j];</span><br><span class="line">                    v[j] = v[j + <span class="number">1</span>];</span><br><span class="line">                    v[j + <span class="number">1</span>] = temp;</span><br><span class="line"></span><br><span class="line">                    temp = w[j];</span><br><span class="line">                    w[j] = w[j + <span class="number">1</span>];</span><br><span class="line">                    w[j + <span class="number">1</span>] = temp;</span><br><span class="line">                }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        {</span><br><span class="line">        <span class="keyword">if</span> (w[i] &gt;= m)</span><br><span class="line">        {</span><br><span class="line">        ans += m * v[i];</span><br><span class="line">        m = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        {</span><br><span class="line">        ans += w[i] * v[i];</span><br><span class="line">        m -= w[i];</span><br><span class="line">        }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; j++)</span><br><span class="line">        <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>])</span><br><span class="line">        {</span><br><span class="line">            temp = arr[j];</span><br><span class="line">            arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">            arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">        }</span><br></pre></td></tr></tbody></table></figure><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n<span class="number">-1</span>; i++)</span><br><span class="line">{</span><br><span class="line">    min = i;<span class="comment">//查找最小值</span></span><br><span class="line">    <span class="keyword">for</span>(j = i+<span class="number">1</span>; j&lt;n; j++)</span><br><span class="line">        <span class="keyword">if</span>(A[min] &gt; A[j])</span><br><span class="line">            min = j;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(min != i)</span><br><span class="line">        swap(&amp;A[min], &amp;A[i]);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="其他排序"><a href="#其他排序" class="headerlink" title="其他排序"></a>其他排序</h3><p>已经帮你们百度好的<a href="https://www.cnblogs.com/maluning/p/7944809.html" target="_blank" rel="noopener">链接</a></p><p>建议用C++的 algorithm 头文件中的 sort 函数，也是ACM中最常用的排序算法。</p><hr><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>贪心算法不是对所有问题都能得到整体最优解，关键是贪心策略的选择，选择的贪心策略必须具备无后效性，即某个状态以前的过程<strong>不会影响以后的状态</strong>，只与当前状态有关。</p><h3 id="⑴贪心策略：总价值最大"><a href="#⑴贪心策略：总价值最大" class="headerlink" title="⑴贪心策略：总价值最大"></a>⑴贪心策略：总价值最大</h3><p>反例：</p><p>W=30<br>物品：A B C<br>重量：28 12 12<br>价值：30 20 20</p><p>根据策略，首先选取物品A，接下来就无法再选取了，可是，选取B、C则更好。</p><h3 id="⑵贪心策略：重量最小"><a href="#⑵贪心策略：重量最小" class="headerlink" title="⑵贪心策略：重量最小"></a>⑵贪心策略：重量最小</h3><p>它的反例与第一种策略的反例差不多。</p><h3 id="⑶贪心策略：单位量价值最大"><a href="#⑶贪心策略：单位量价值最大" class="headerlink" title="⑶贪心策略：单位量价值最大"></a>⑶贪心策略：单位量价值最大</h3><p>反例：</p><p>W=30<br>物品：A B C<br>重量：28 20 10<br>价值：28 20 10</p><p>根据策略，三种物品单位重量价值一样，程序无法依据现有策略作出判断，如果选择A，则答案错误。</p><blockquote><p>【注意：如果物品可以分割为任意大小，那么策略3可得最优解】</p></blockquote><h3 id="4-DP问题（动态规划）"><a href="#4-DP问题（动态规划）" class="headerlink" title="(4)DP问题（动态规划）"></a>(4)DP问题（动态规划）</h3><p>W=40<br>物品：A B C<br>重量：25 20 15<br>价值：25 20 15</p><p>这需要DP。</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="今年暑假不AC（节目表）"><a href="#今年暑假不AC（节目表）" class="headerlink" title="今年暑假不AC（节目表）"></a>今年暑假不AC（节目表）</h3><p>“今年暑假不AC？”<br>“是的。”<br>“那你干什么呢？”<br>“看世界杯呀，笨蛋！”<br>“@#$%^&amp;*%…”</p><p>确实如此，世界杯来了，球迷的节日也来了，估计很多ACMer也会抛开电脑，奔向电视了。<br>作为球迷，一定想看尽量多的完整的比赛，当然，作为新时代的好青年，你一定还会看一些其它的节目，比如新闻联播（永远不要忘记关心国家大事）、非常6+7、超级女生，以及王小丫的《开心辞典》等等，假设你已经知道了所有你喜欢看的电视节目的转播时间表，你会合理安排吗？（目标是能看尽量多的完整节目）</p><p><strong>Input</strong></p><p>输入数据包含多个测试实例，每个测试实例的第一行只有一个整数n(n&lt;=100)，表示你喜欢看的节目的总数，然后是n行数据，每行包括两个数据Ti_s,Ti_e (1&lt;=i&lt;=n)，分别表示第i个节目的开始和结束时间，为了简化问题，每个时间都用一个正整数表示。n=0表示输入结束，不做处理。</p><p><strong>Output</strong></p><p>对于每个测试实例，输出能完整看到的电视节目的个数，每个测试实例的输出占一行。</p><p><strong>Sample Input</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">12 </span><br><span class="line">1 3 </span><br><span class="line">3 4 </span><br><span class="line">0 7 </span><br><span class="line">3 8 </span><br><span class="line">15 19 </span><br><span class="line">15 20 </span><br><span class="line">10 15 </span><br><span class="line">8 18 </span><br><span class="line">6 12 </span><br><span class="line">5 10 </span><br><span class="line">4 14 </span><br><span class="line">2 9 </span><br><span class="line">0</span><br></pre></td></tr></tbody></table></figure><p><strong>Sample Output</strong> </p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></tbody></table></figure><h4 id="代码（HDU-2037）"><a href="#代码（HDU-2037）" class="headerlink" title="代码（HDU 2037）"></a>代码（HDU 2037）</h4><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i, n, j, tmp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) != EOF &amp;&amp; n != <span class="number">0</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">1</span>, a[<span class="number">100</span>] = {<span class="number">0</span>}, b[<span class="number">100</span>] = {<span class="number">0</span>};</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;a[i], &amp;b[i]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; (n - <span class="number">1</span>); i++)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; (n - <span class="number">1</span> - i); j++)</span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">if</span> (b[j] &gt; b[j + <span class="number">1</span>])</span><br><span class="line">                {</span><br><span class="line">                    tmp = a[j];</span><br><span class="line">                    a[j] = a[j + <span class="number">1</span>];</span><br><span class="line">                    a[j + <span class="number">1</span>] = tmp;</span><br><span class="line"></span><br><span class="line">                    tmp = b[j];</span><br><span class="line">                    b[j] = b[j + <span class="number">1</span>];</span><br><span class="line">                    b[j + <span class="number">1</span>] = tmp;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> time = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">if</span> (a[i] &gt;= b [time])</span><br><span class="line">            {</span><br><span class="line">                time = i;</span><br><span class="line">                count++;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, count);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="阶乘之和"><a href="#阶乘之和" class="headerlink" title="阶乘之和"></a>阶乘之和</h3><p><strong>描述</strong><br>给你一个非负数整数n，判断n是不是一些数（这些数不允许重复使用，且为正数）的阶乘之和，如9=1！+2!+3!，如果是，则输出Yes，否则输出No；</p><p><strong>输入</strong><br>第一行有一个整数0&lt;m&lt;100,表示有m组测试数据；<br>每组测试数据有一个正整数n&lt;1000000;<br><strong>输出</strong><br>如果符合条件，输出Yes，否则输出No;<br><strong>样例输入</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">29</span><br><span class="line">10</span><br></pre></td></tr></tbody></table></figure><p><strong>样例输出</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Yes</span><br><span class="line">No</span><br></pre></td></tr></tbody></table></figure><h3 id="喷水装置（一）"><a href="#喷水装置（一）" class="headerlink" title="喷水装置（一）"></a>喷水装置（一）</h3><p><strong>描述</strong><br>现有一块草坪，长为20米，宽为2米，要在横中心线上放置半径为Ri的喷水装置，每个喷水装置的效果都会让以它为中心的半径为实数Ri(0&lt;Ri&lt;15)的圆被湿润，这有充足的喷水装置i（1&lt;i&lt;600)个，并且一定能把草坪全部湿润，你要做的是：选择尽量少的喷水装置，把整个草坪的全部湿润。</p><p><strong>输入</strong><br>第一行m表示有m组测试数据<br>每一组测试数据的第一行有一个整数数n，n表示共有n个喷水装置，随后的一行，有n个实数ri，ri表示该喷水装置能覆盖的圆的半径。</p><p><strong>输出</strong><br>输出所用装置的个数</p><p><strong>样例输入</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">5</span><br><span class="line">2 3.2 4 4.5 6 </span><br><span class="line">10</span><br><span class="line">1 2 3 1 2 1.2 3 1.1 1 2</span><br></pre></td></tr></tbody></table></figure><p><strong>样例输出</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">5</span><br></pre></td></tr></tbody></table></figure><h3 id="gt-喷水装置（二）"><a href="#gt-喷水装置（二）" class="headerlink" title="> 喷水装置（二）"></a>&gt; 喷水装置（二）</h3><p>改成二维，输入装置个数n、草坪宽 w、高 h（实数），以及每个喷水装置的横坐标和半径。其余题意同上一题。</p><h3 id="过河问题"><a href="#过河问题" class="headerlink" title="过河问题"></a>过河问题</h3><p><strong>描述</strong><br>在漆黑的夜里，N位旅行者来到了一座狭窄而且没有护栏的桥边。如果不借助手电筒的话，大家是无论如何也不敢过桥去的。不幸的是，N个人一共只带了一只手电筒，而桥窄得只够让两个人同时过。如果各自单独过桥的话，N人所需要的时间已知；而如果两人同时过桥，所需要的时间就是走得比较慢的那个人单独行动时所需的时间。问题是，如何设计一个方案，让这N人尽快过桥。 </p><p><strong>输入</strong><br>第一行是一个整数T(1&lt;=T&lt;=20)表示测试数据的组数<br>每组测试数据的第一行是一个整数N(1&lt;=N&lt;=1000)表示共有N个人要过河<br>每组测试数据的第二行是N个整数Si,表示此人过河所需要花时间。(0&lt;Si&lt;=100)<br><strong>输出</strong><br>输出所有人都过河需要用的最少时间<br><strong>样例输入</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">4</span><br><span class="line">1 2 5 10</span><br></pre></td></tr></tbody></table></figure><p><strong>样例输出</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">17</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ACM-贪心算法&quot;&gt;&lt;a href=&quot;#ACM-贪心算法&quot; class=&quot;headerlink&quot; title=&quot;ACM 贪心算法&quot;&gt;&lt;/a&gt;ACM 贪心算法&lt;/h1&gt;&lt;p&gt;贪心算法（又称贪婪算法）是指，在对问题求解时，总是做出在&lt;strong&gt;当前看来是最好的选择&lt;/strong&gt;。也就是说，不从整体最优上加以考虑，他所做出的是在某种意义上的&lt;strong&gt;局部最优解&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="算法" scheme="http://blog.iwxyi.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="讲解" scheme="http://blog.iwxyi.com/tags/%E8%AE%B2%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>ThinkPHP5-学习笔记</title>
    <link href="http://blog.iwxyi.com/2018/11/04/ThinkPHP5-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://blog.iwxyi.com/2018/11/04/ThinkPHP5-学习笔记/</id>
    <published>2018-11-04T08:36:00.000Z</published>
    <updated>2019-10-13T08:43:59.864Z</updated>
    
    <content type="html"><![CDATA[<h1 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h1><h2 id="单一入口：index-php"><a href="#单一入口：index-php" class="headerlink" title="单一入口：index.php"></a>单一入口：index.php</h2><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">define(<span class="string">'APP_DEBUG'</span>, <span class="keyword">true</span>);</span><br><span class="line">define(<span class="string">'APP_NAME'</span>, <span class="string">'App'</span>);         <span class="comment">// 定义应用名称</span></span><br><span class="line">define(<span class="string">'APP_PATH'</span>, <span class="string">'./App2'</span>);      <span class="comment">// 应用路径，生成目录下 /App/ 文件夹，注意别忘了最后的斜线</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'./ThinkPHP/ThinkPHP.php'</span>; <span class="comment">// 加载 ThinkPHP</span></span><br></pre></td></tr></tbody></table></figure><a id="more"></a><h2 id="运行流程：索引控制器"><a href="#运行流程：索引控制器" class="headerlink" title="运行流程：索引控制器"></a>运行流程：索引控制器</h2><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$module = <span class="keyword">isset</span>($_GET[<span class="string">'m'</span>]) ? $_GET[<span class="string">'m'</span>] : <span class="string">'Index'</span>;</span><br><span class="line">$action = <span class="keyword">isset</span>($_GET[<span class="string">'a'</span>]) ? $_GET[<span class="string">'a'</span>] : <span class="string">'Index'</span>;</span><br><span class="line"></span><br><span class="line">$mooc = <span class="keyword">new</span> $module();</span><br><span class="line">$mooc-&gt;$action();</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">index</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>{<span class="keyword">echo</span> <span class="string">"I'm index controler&lt;br /&gt;"</span>; }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Index</span><span class="params">()</span> </span>{<span class="keyword">echo</span> <span class="string">"这是 index 控制器的 index 方法&lt;br /&gt;"</span>; }</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span> </span>{<span class="keyword">echo</span> <span class="string">"这是 index 控制器的 test 方法&lt;br /&gt;"</span>; }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在浏览器地址栏输入： <code>网站地址/?m=index&amp;a=index</code> 来访问 index 的 index 方法<br>使用 <code>?m=index&amp;a=test</code> 来访问 index 的 test 方法</p><p>也可以多建几个 class 和 function，达到不同的 module 和 function</p><h2 id="目录结构解析"><a href="#目录结构解析" class="headerlink" title="目录结构解析"></a>目录结构解析</h2><ul><li>Common 存放当前项目的公共函数</li><li>Conf         存放当前项目的配置文件</li><li>Lang         存放当前项目的语言包</li><li>Lib            存放当前项目的控制器和模型 （存放MVC中的M、C）</li><li>Runtime   存放当前显示的运行时的文件：\Cache\、\Date\、\Logs\、\Temp\、~runtime.php</li><li>Tpl             存放当前项目的模板文件 （存放MVC中的V）</li></ul><h1 id="ThinkPHP-配置文件"><a href="#ThinkPHP-配置文件" class="headerlink" title="ThinkPHP 配置文件"></a>ThinkPHP 配置文件</h1><h2 id="全局设置"><a href="#全局设置" class="headerlink" title="全局设置"></a>全局设置</h2><p>总的文件路径：<code>\ThinkPHP\Conf\convention.php</code></p><h2 id="每个程序的设置"><a href="#每个程序的设置" class="headerlink" title="每个程序的设置"></a>每个程序的设置</h2><p>应用配置路径：<code>\[应用名]\Common\Conf\config.php</code></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">array</span>(</span><br><span class="line"><span class="comment">//'配置项'=&gt;'配置值'</span></span><br><span class="line"><span class="string">'name'</span>=&gt;<span class="string">'Hello'</span></span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><blockquote><p>如果有自定义配置文件，而且入口的 <code>APP_DEBUG</code> 不是为 true 的话，修改了默认的配置文件后，程序不会重新编译，需要重启才能生效。</p></blockquote><p>控制配置路径：<code>[应用名]\Home\Controller\IndexController.class.php</code></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 本类由系统自动生成，仅供测试用途</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Home</span>\<span class="title">Controller</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Think</span>\<span class="title">Controller</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> <span class="keyword">extends</span> <span class="title">Controller</span> </span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">echo</span> C(<span class="string">'name'</span>); <span class="comment">// 根据上面的配置项，输出 Hello</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>针对每个程序的配置，不会和其他程序公用</p></blockquote><h2 id="用户自定义配置文件"><a href="#用户自定义配置文件" class="headerlink" title="用户自定义配置文件"></a>用户自定义配置文件</h2><p>配置文件：<code>\[应用名]\Common\Conf\config.php</code></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">array</span>(</span><br><span class="line"><span class="comment">//'配置项'=&gt;'配置值'</span></span><br><span class="line"><span class="string">'name'</span>=&gt;<span class="string">'Hello'</span>,</span><br><span class="line"><span class="string">'LOAD_EXT_CONFIG'</span>=&gt;<span class="string">'user'</span> <span class="comment">// 加上这一句</span></span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><p><strong>新建</strong>：<code>\[应用名]\Common\Conf\user.php</code></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">array</span>(</span><br><span class="line"><span class="comment">//'配置项'=&gt;'配置值'</span></span><br><span class="line"><span class="string">'user'</span>=&gt;<span class="string">'UUU'</span></span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><p>可以直接用 <code>echo C('user');</code> 来输出配置值</p><h1 id="URL-模式"><a href="#URL-模式" class="headerlink" title="URL 模式"></a>URL 模式</h1><p><strong>URL_MODEL</strong></p><ul><li>1 默认模式    pathinfo 模式</li><li>0 普通模式</li><li>2 重写模式</li><li>3 兼容模式</li></ul><p>在配置文件：<code>[应用名]\Home\Controller\IndexController.class.php</code> 的 index 方法中加上：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> C(<span class="string">'URL_MODEL'</span>);</span><br></pre></td></tr></tbody></table></figure><p>来显示当前的URL模式。</p><h2 id="U-方法"><a href="#U-方法" class="headerlink" title="U() 方法"></a>U() 方法</h2><p>U(‘模块/方法’, array(‘id’=&gt;1), ‘xxx html htm sthml’, true/false, ‘localhost’);</p><ul><li>参数2：URL后面传的值</li><li>参数3：后缀</li><li>参数4：是否需要跳转，true的话会加上 <a href="http://127.0.0.1前缀，（并直接跳转？）" target="_blank" rel="noopener">http://127.0.0.1前缀，（并直接跳转？）</a></li><li>参数5：域名</li></ul><p>用来显示对应的完整的URL</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>编辑配置文件：<code>[应用名]\Home\Controller\IndexController.class.php</code></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 本类由系统自动生成，仅供测试用途</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Home</span>\<span class="title">Controller</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Think</span>\<span class="title">Controller</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> <span class="keyword">extends</span> <span class="title">Controller</span> </span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">echo</span> C(<span class="string">'URL_MODEL'</span>) . <span class="string">"&lt;br /&gt;"</span>;</span><br><span class="line">    <span class="keyword">echo</span> U(<span class="string">'Index/user'</span>, <span class="keyword">array</span>(<span class="string">'id'</span>=&gt;<span class="number">1</span>), <span class="string">'html'</span>, <span class="keyword">false</span>, <span class="string">'localhost'</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">user</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'id:'</span> . $_GET[<span class="string">'id'</span>] . <span class="string">'&lt;br /&gt;'</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"这是 Index 模块的 user 方法"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>打开网站首页，运行结果：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">/ThinkPHP/index.php/Home/Index/user/id/1.html</span><br></pre></td></tr></tbody></table></figure><p>访问网址<code>localhost/ThinkPHP/index.php/Home/Index/user/id/1.html</code>，出现结果：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">id:1</span><br><span class="line">这是 Index 模块的 user 方法</span><br></pre></td></tr></tbody></table></figure><h2 id="修改URL模式"><a href="#修改URL模式" class="headerlink" title="修改URL模式"></a>修改URL模式</h2><p>程序配置文件 <code>\[应用名]\Common\Conf\config.php</code> 加上配置项：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'URL_MODEL'</span>=&gt;<span class="number">0</span></span><br></pre></td></tr></tbody></table></figure><p>或者可以在全局配置文件 <code>\ThinkPHP\Conf\convention.php</code> 中修改</p><h2 id="模式说明"><a href="#模式说明" class="headerlink" title="模式说明"></a>模式说明</h2><p>网站路径为：<a href="http://localhost/ThinkPHP/" target="_blank" rel="noopener">http://localhost/ThinkPHP/</a></p><ul><li>1 默认模式：<a href="http://localhost/ThinkPHP/index.php/Home/Index/user/id/1.html" target="_blank" rel="noopener">http://localhost/ThinkPHP/index.php/Home/Index/user/id/1.html</a></li><li>0 普通模式：<a href="http://localhost/ThinkPHP/index.php?m=Index&amp;a=user&amp;id=1" target="_blank" rel="noopener">http://localhost/ThinkPHP/index.php?m=Index&amp;a=user&amp;id=1</a></li><li>2 重写模式：<a href="http://localhost/ThinkPHP/Index/user/id/1.html" target="_blank" rel="noopener">http://localhost/ThinkPHP/Index/user/id/1.html</a>  需要开启Apache的重写</li><li>3 兼容模式：<a href="http://localhost/ThinkPHP/index.php?s=/Home/Index/user/id/1.html" target="_blank" rel="noopener">http://localhost/ThinkPHP/index.php?s=/Home/Index/user/id/1.html</a> </li></ul><h2 id="隐藏-index-php"><a href="#隐藏-index-php" class="headerlink" title="隐藏 index.php"></a>隐藏 index.php</h2><p>即<strong>重写模式</strong></p><p>打开 Apache 的配置文件 <code>httpd.conf</code>，搜索 <code>rewrite.so</code> ，去除前面的 “#” 号</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#LoadModule rewrite_module modules/mod_rewrite.so // 去除前面的 # 号</span><br></pre></td></tr></tbody></table></figure><p>重启 Apache</p><p>项目目录下建立一个文件：<code>.htaccess</code>，写入以下内容：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;Ifmodule mod_rewrite.c&gt;</span><br><span class="line">RewriteEngine on</span><br><span class="line">RewriteCond %{REQUEST_FILENAME} !-d</span><br><span class="line">RewriteCond %{REQUEST_FILENAME} !-f</span><br><span class="line">RewriteRule ^(.*)$ index.php/$1 [QSA,PT,L]</span><br><span class="line">&lt;/Ifmodule&gt;</span><br></pre></td></tr></tbody></table></figure><p>分别是：开启重写引擎、重写判断条件、重写规则（正则）</p><blockquote><p><strong>404 Not Found : No input file specified</strong></p><p>在Fastcgi模式下，php不支持rewrite的目标网址的PATH_INFO的解析，当我们的 ThinkPHP运行在URL_MODEL=2时，就会出现 No input file specified.的情况。<br>这时可以修改网站目录的.htaccess文件：  将 <code>RewriteRule ^(.*)$ index.php/$1 [QSA,PT,L]</code>  改为 <code>RewriteRule ^(.*)$ index.php?s=$1 [QSA,PT,L]</code></p></blockquote><h2 id="URL-伪静态"><a href="#URL-伪静态" class="headerlink" title="URL 伪静态"></a>URL 伪静态</h2><p>把 shtml 改成和 html 一样作为后缀名来识别</p><p>全局配置文件，<code>‘URL_HTML_SUFFIX' =&gt; ‘html’</code></p><p>在单个项目配置文件中（不建议改全局）改为：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">return array(</span><br><span class="line">// ... =&gt; ...,</span><br><span class="line">'URL_HTML_SUFFIX' =&gt; ‘html|shtml’</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><p>伪静态有益于搜索引擎的抓取</p><h2 id="自定义函数库"><a href="#自定义函数库" class="headerlink" title="自定义函数库"></a>自定义函数库</h2><ol><li><strong>自动加载自定义函数文件</strong><br>函数文件放在项目公共目录<strong>Common</strong>下。<br>项目目录下，需要在配置文件<code>Conf/config.php</code>配置自动加载的函数文件的文件名。配置项为<code>"LOAD_EXT_FILE"</code>，如<code>"LOAD_EXT_FILE"=&gt;"user,mysqldb"</code>表示在项目目录下<code>Common/user.php</code>和<code>Common/mysqldb.php</code>两个文件会自动加载。自动加载多项用逗号隔开。</li><li><strong>手动加载函数文件</strong><br>使用load函数，如<code>load('@.myfunction');</code>表示系统会加载<code>Common/myfunction.php</code>这个文件。</li><li><strong>自动加载自定义类文件</strong><br>类文件放在项目类库<strong>Lib</strong>下。<br>项目目录下，需要在配置文件<code>Conf/conf.php</code>配置自动加载的函数文件的文件夹。配置项为<code>'APP_AUTOLOAD_PATH' =&gt;'‘,</code> ，如<code>'APP_AUTOLOAD_PATH' =&gt;'@.Common'</code>,表示在项目目录下<code>Lib/Common</code>文件夹下的类文件都会被自动加载，当然，类文件名要以<code>***.class.php</code>文件命名。 自动加载多项用逗号隔开。</li><li><strong>手动加载类文件</strong><br>使用<code>import()</code>函数。如 <code>import('@.Common.mysqldb');</code>则系统会加载<code>Lib/Common/mysqldb.class.php</code>文件</li></ol><h1 id="模板技术"><a href="#模板技术" class="headerlink" title="模板技术"></a>模板技术</h1><h2 id="建立项目模板"><a href="#建立项目模板" class="headerlink" title="建立项目模板"></a>建立项目模板</h2><p><strong>模板路径</strong>： <code>\[应用名]\Home\View\模块名\方法名.html</code></p><p>例如 Index 模块的 index 方法：<code>\Application\Home\View\Index\index.html</code></p><h3 id="使用模板"><a href="#使用模板" class="headerlink" title="使用模板"></a>使用模板</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;display();              <span class="comment">// 默认 Index/index</span></span><br><span class="line"><span class="keyword">$this</span>-&gt;display(<span class="string">""</span>);            <span class="comment">// 等同于上一个</span></span><br><span class="line"><span class="keyword">$this</span>-&gt;display(<span class="string">"Index/test"</span>);  <span class="comment">// 非默认模块方法</span></span><br><span class="line"><span class="keyword">$this</span>-&gt;display(<span class="string">"test"</span>);        <span class="comment">// 默认的模块 Index 可省略</span></span><br></pre></td></tr></tbody></table></figure><h2 id="模板的赋值和输出"><a href="#模板的赋值和输出" class="headerlink" title="模板的赋值和输出"></a>模板的赋值和输出</h2><h3 id="方法一：display"><a href="#方法一：display" class="headerlink" title="方法一：display()"></a>方法一：display()</h3><p><code>\[应用名]\Home\Controller\IndexController.class.php</code>：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Home</span>\<span class="title">Controller</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Think</span>\<span class="title">Controller</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> <span class="keyword">extends</span> <span class="title">Controller</span> </span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span>{</span><br><span class="line">    $name = <span class="string">'WXY'</span>;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;myname = $name;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;display();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>\[应用名]\Home\View\Index\index.html</code>：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    Hello World~</span><br><span class="line">    <span class="meta">&lt;?php</span></span><br><span class="line">        <span class="keyword">echo</span> $myname;</span><br><span class="line">    <span class="meta">?&gt;</span></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p>结果：</p><p>Hello World~WXY</p><h3 id="方法二：assign"><a href="#方法二：assign" class="headerlink" title="方法二：assign()"></a>方法二：assign()</h3><p><code>$this-&gt;assign('变量名', 变量值);</code></p><p>\Home\Controller\IndexController.class.php：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$date = date(<span class="string">"Y-m-d"</span>);</span><br><span class="line"><span class="keyword">$this</span>-&gt;assign(<span class="string">'today'</span>, $date)-&gt;assign(<span class="string">'weather'</span>, <span class="string">'sun'</span>); <span class="comment">// 可连起来</span></span><br><span class="line"><span class="keyword">$this</span>-&gt;display();</span><br></pre></td></tr></tbody></table></figure><p>与直接赋值的区别在于，可以多次<strong>连续赋值</strong></p><h2 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h2><p><code>ThinkTemplate.class.php</code> ：<em>（文件位置未找到）</em></p><h3 id="变量运算和输出"><a href="#变量运算和输出" class="headerlink" title="变量运算和输出"></a>变量运算和输出</h3><p>控制  <code>\Home\Controller\IndexController.class.php</code>：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Home</span>\<span class="title">Controller</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Think</span>\<span class="title">Controller</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> <span class="keyword">extends</span> <span class="title">Controller</span> </span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span>{</span><br><span class="line">    $me[<span class="string">'name'</span>] = <span class="string">'WXY'</span>;</span><br><span class="line">        $me[<span class="string">'age'</span>] = <span class="string">'20'</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assign(<span class="string">'me'</span>, $me);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;display();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>模板  <code>\[应用名]\Home\View\Index\index.html</code>：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Hello World~ &lt;br /&gt;</span><br><span class="line">{$me['name']} &lt;br /&gt;</span><br><span class="line">{$me.name} &lt;br /&gt;</span><br><span class="line">{//$me.sex 空的是输出不了的} &lt;br /&gt;</span><br><span class="line">{$me.sex|default='man'} &lt;br /&gt;</span><br><span class="line"></span><br><span class="line">{// $me.age+1 这种是输出不了的} &lt;br /&gt;</span><br><span class="line">{$me['age']+1} &lt;br /&gt;</span><br></pre></td></tr></tbody></table></figure><p>注释是前面加两个斜杠。（也可以在中间加，但是可能会出错）</p><p><code>$me.sex|default='man'</code> 如果 sex 没有定义，那么就能输出默认值。</p><hr><p>算术运算可以使用<code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>、<code>++</code>、<code>–-</code>，此时必须使用<code>$me['age']</code>这种方式。</p><h3 id="调用函数和系统参数"><a href="#调用函数和系统参数" class="headerlink" title="调用函数和系统参数"></a>调用函数和系统参数</h3><p>控制  <code>\Home\Controller\IndexController.class.php</code>：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Home</span>\<span class="title">Controller</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Think</span>\<span class="title">Controller</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> <span class="keyword">extends</span> <span class="title">Controller</span> </span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span>{</span><br><span class="line">    $me[<span class="string">'name'</span>] = <span class="string">'WXY'</span>;</span><br><span class="line">        $me[<span class="string">'age'</span>] = <span class="string">'20'</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;now = time();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;assign(<span class="string">'me'</span>, $me);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;display();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>模板  <code>\[应用名]\Home\View\Index\index.html</code>：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MD5加密：{$me['name']|md5}</span><br><span class="line">加密后并截取前五位：{$me['name']|md5|substr=0,5}</span><br><span class="line">输出时间：{$now}</span><br><span class="line">指定格式的时间：{$now|date='Y-m-d H:i:s',###} 三个#表示传时间戳(即$now)的值</span><br></pre></td></tr></tbody></table></figure><p>函数等同于在控制文件中执行：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> substr(md5($me[<span class="string">'name'</span>]), <span class="number">0</span>, <span class="number">5</span>);</span><br></pre></td></tr></tbody></table></figure><hr><p>系统变量：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">系统时间：{$Think.now} 输出格式化后的时间</span><br><span class="line">系统版本：{$Think.version}</span><br><span class="line">系统版本：{$Think.server.http_host} 输出 localhost</span><br></pre></td></tr></tbody></table></figure><h3 id="volist和foreach循环"><a href="#volist和foreach循环" class="headerlink" title="volist和foreach循环"></a>volist和foreach循环</h3><p>控制  <code>\[应用名]\Home\Controller\IndexController.class.php</code>：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 套在外面的class等已略写</span></span><br><span class="line">$person = <span class="keyword">array</span>(</span><br><span class="line">    <span class="number">1</span> =&gt; <span class="keyword">array</span>(<span class="string">'name'</span>=&gt;<span class="string">'Jack'</span>,<span class="string">'age'</span>=&gt;<span class="string">'18'</span>),</span><br><span class="line">    <span class="number">2</span> =&gt; <span class="keyword">array</span>(<span class="string">'name'</span>=&gt;<span class="string">'Tom'</span>,<span class="string">'age'</span>=&gt;<span class="string">'19'</span>),</span><br><span class="line">    <span class="number">3</span> =&gt; <span class="keyword">array</span>(<span class="string">'name'</span>=&gt;<span class="string">'Peter'</span>,<span class="string">'age'</span>=&gt;<span class="string">'20'</span>),</span><br><span class="line">    <span class="number">4</span> =&gt; <span class="keyword">array</span>(<span class="string">'name'</span>=&gt;<span class="string">'Mary'</span>,<span class="string">'age'</span>=&gt;<span class="string">'21'</span>),</span><br><span class="line">);</span><br><span class="line"><span class="keyword">$this</span>-&gt;assign(<span class="string">'person'</span>, $person);</span><br><span class="line"><span class="keyword">$this</span>-&gt;display();</span><br></pre></td></tr></tbody></table></figure><p>模板文件  <code>\[应用名]\Home\View\Index\index.html</code>：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name='原变量名' id='循环中的变量名'</span><br><span class="line">&lt;volist name='person' id='data'&gt;</span><br><span class="line">{$data['name']}-----{$data['age']} &lt;br/&gt;</span><br><span class="line">&lt;/volist&gt;</span><br></pre></td></tr></tbody></table></figure><p>截取一部分：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">从第二个到第三个</span><br><span class="line">&lt;volist name='person' id='data' offset='1' length='2'&gt;</span><br><span class="line">&lt;/volist&gt;</span><br></pre></td></tr></tbody></table></figure><p>如果没有数据：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">变量不存在时，输出empty中的内容</span><br><span class="line">&lt;volist name='person' id='data' empty='我没数据'&gt;</span><br><span class="line">&lt;/volist&gt;</span><br></pre></td></tr></tbody></table></figure><hr><p>模板文件  <code>\[应用名]\Home\View\Index\index.html</code>：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name='原变量名' item='循环中的变量名'</span><br><span class="line">&lt;foreach name='person' item='data'&gt;</span><br><span class="line">{$data['name']}-----{$data['age']} &lt;br/&gt;</span><br><span class="line">&lt;/volist&gt;</span><br></pre></td></tr></tbody></table></figure><p>foreach 循环没有截取功能</p><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><ul><li>eq =    neq !=</li><li>gt &gt;    egt &gt;=</li><li>lt &lt;    elt &lt;=</li><li>heq ===    nheq !===</li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;for start='1' end='10' comparison='elt' name='k'&gt;</span><br><span class="line">{$k}</span><br><span class="line">&lt;/for&gt;</span><br></pre></td></tr></tbody></table></figure><p>等同于：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; <span class="number">10</span>; $i++){</span><br><span class="line">    <span class="keyword">echo</span> $i;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="if-判断"><a href="#if-判断" class="headerlink" title="if 判断"></a>if 判断</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;if condition='$num gt 10'&gt; num 大于 10</span><br><span class="line">&lt;elseif condition='$num lt 10' /&gt; num 小于 10</span><br><span class="line">&lt;else /&gt; num 等于 10</span><br><span class="line">&lt;/if&gt;</span><br></pre></td></tr></tbody></table></figure><p>别忘了 <code>&lt;elseif /&gt;</code> 和 <code>&lt;else /&gt;</code> 后面结束的<code>/</code>符号，如果没有则会继续运行到下一句（类似于break没写）。</p><h3 id="switch-判断"><a href="#switch-判断" class="headerlink" title="switch 判断"></a>switch 判断</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;switch name='peopleName'&gt;</span><br><span class="line">&lt;case value='laoshi'&gt;老师&lt;/case&gt;</span><br><span class="line">    &lt;case value='xiaoming|xiaohong'&gt;学生&lt;/case&gt;</span><br><span class="line">    &lt;default /&gt;谁都不是</span><br><span class="line">&lt;/switch&gt;</span><br></pre></td></tr></tbody></table></figure><p>同样别忘了 <code>&lt;default /&gt;</code> 后面结束的<code>/</code>符号</p><h3 id="比较标签"><a href="#比较标签" class="headerlink" title="比较标签"></a>比较标签</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;比较标签 name='变量名' value='比较的值' &gt; &lt;/比较标签&gt;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;eq name='num' value='10'&gt; num = 10 </span><br><span class="line">&lt;else /&gt; num != 10</span><br><span class="line">&lt;/eq&gt;</span><br><span class="line"></span><br><span class="line">&lt;neq name='num' value='12'&gt; num != 12 &lt;/neq&gt;</span><br><span class="line"></span><br><span class="line">&lt;compare name='num' value='12' type='eq'&gt; num = 12</span><br><span class="line">&lt;else /&gt; num != 12</span><br><span class="line">&lt;/compare&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="区间标签"><a href="#区间标签" class="headerlink" title="区间标签"></a>区间标签</h3><ul><li>in 在区间里</li><li>notin 不在区间里</li><li>between 连续区间</li><li>notbetween 不在连续区间</li><li>range 只能替换 in 和 notin，不能替换 between</li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;in name='num' value='1,2,3'&gt; 在这个区间</span><br><span class="line">&lt;else /&gt; 不在这个区间</span><br><span class="line">&lt;/in&gt;</span><br><span class="line"></span><br><span class="line">&lt;notin name='num' value='1,2,3'&gt; 不在这个区间 &lt;/notin&gt;</span><br><span class="line"></span><br><span class="line">&lt;between name='num' value='1,10'&gt; 在这个区间</span><br><span class="line">&lt;/between&gt;</span><br><span class="line"></span><br><span class="line">&lt;notbetween name='num' value='1,10'&gt; 不在这个区间</span><br><span class="line">&lt;else /&gt; 居然在这个区间</span><br><span class="line">&lt;/notbetween&gt;</span><br><span class="line"></span><br><span class="line">&lt;range name='num' value='1,11,12' type='in'&gt; 有11这个数</span><br><span class="line">&lt;else /&gt; 没有11这个数</span><br><span class="line">&lt;/range&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{$num &gt; <span class="number">10</span> ? <span class="string">'大于10'</span> : <span class="string">'不大于10'</span>}</span><br></pre></td></tr></tbody></table></figure><h3 id="案例实战"><a href="#案例实战" class="headerlink" title="案例实战"></a>案例实战</h3><p>判断人物有没有成年</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;foreach name='person' item='data'&gt;</span><br><span class="line">&lt;egt name='data.age' value='18'&gt;{$data.name}已经成年了</span><br><span class="line">&lt;else/&gt;{$data.name}还是个孩子</span><br><span class="line">&lt;/egt&gt; &lt;br/&gt;</span><br><span class="line">&lt;/foreach&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="原生态PHP标签"><a href="#原生态PHP标签" class="headerlink" title="原生态PHP标签"></a>原生态PHP标签</h3><p>官方推荐使用<code>&lt;php&gt;</code>而非<code>&lt;?php</code>，因为后者可能会被屏蔽掉。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;php&gt;</span><br><span class="line">    echo "Hello!";</span><br><span class="line">&lt;/php&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="ThinkPHP调试方法"><a href="#ThinkPHP调试方法" class="headerlink" title="ThinkPHP调试方法"></a>ThinkPHP调试方法</h2><p>开启调试模式 <code>define('APP_DEBUG', true);</code></p><p>创建文件 <code>\[应用名]\Conf\debug.php</code> ：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">array</span>(</span><br><span class="line"><span class="string">'name'</span>=&gt;<span class="string">'WXY_Debug'</span>,</span><br><span class="line">    <span class="string">'SHOW_PAGE_TRACE'</span>=&gt;<span class="keyword">true</span>, <span class="comment">// 显示页面 trace 信息</span></span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><p>控制  <code>\Home\Controller\IndexController.class.php</code>：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Home</span>\<span class="title">Controller</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Think</span>\<span class="title">Controller</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> <span class="keyword">extends</span> <span class="title">Controller</span> </span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span>{</span><br><span class="line">    </span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">user</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">echo</span> C(<span class="string">'name'</span>);    <span class="comment">// 方法一：输出调试配置中的变量</span></span><br><span class="line">        trace(<span class="string">'name'</span>, C(<span class="string">'name'</span>)); <span class="comment">// 方法三：trace中的调试 监视变量</span></span><br><span class="line">        dump($_SERVER); <span class="comment">// 方法四：输出变量信息</span></span><br><span class="line">        { <span class="comment">// 方法五：输出运行时间（毫秒）</span></span><br><span class="line">            G(<span class="string">'run'</span>);</span><br><span class="line">            <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; <span class="number">100000</span>; $i++) {</span><br><span class="line">                $count += $i;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">echo</span> G(<span class="string">'run'</span>,<span class="string">'end'</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">$this</span>-&gt;displace(); <span class="comment">// 方法二：开启trace后右下角会出现信息框</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>访问路径：<code>ThinkPHP路径/index.php/Index/user</code></p><p>输出：<code>WXY_Debug</code></p><p>把<code>define('APP_DEBUG', true);</code>取消后，就不会输出了</p><p>同名变量会覆盖普通配置的变量</p><h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2><p>配置文件：<code>\[应用名]\Common\Conf\config.php</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">return array(</span><br><span class="line">/* ...... */</span><br><span class="line">'DB_TYPE'   =&gt; 'mysql',     // 数据类型</span><br><span class="line">'DB_HOST'   =&gt; 'localhost', // 数据服务地址</span><br><span class="line">'DB_NAME'   =&gt; 'test',      // 数据库名</span><br><span class="line">'DB_USER'   =&gt; 'root',      // 数据库用户名</span><br><span class="line">'DB_PWD'    =&gt; 'root',      // 数据库用户密码</span><br><span class="line">'DB_PORT'   =&gt; '3306',      // 数据库端口</span><br><span class="line">'DB_PREFIX' =&gt; 't_',        // 数据库表前缀</span><br><span class="line"></span><br><span class="line">// 开启主从读写分离</span><br><span class="line">'DB_RW_SEPARATE' =&gt; true,</span><br><span class="line">// 多个主数据库服务器</span><br><span class="line">'DB_MASTER_NUM'  =&gt; 2,</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><h2 id="实例化模型"><a href="#实例化模型" class="headerlink" title="实例化模型"></a>实例化模型</h2><h3 id="1、实例化基础模型"><a href="#1、实例化基础模型" class="headerlink" title="1、实例化基础模型"></a>1、实例化基础模型</h3><p>控制文件：<code>[应用名]/Home/Controller/IndexController.class.php</code></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Home</span>\<span class="title">Controller</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Think</span>\<span class="title">Controller</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> <span class="keyword">extends</span> <span class="title">Controller</span> </span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="comment">// $user = new Model('notes'); // 这句不知道为什么会导致崩溃，只能用下面的M方法</span></span><br><span class="line">    $user = M(<span class="string">'notes'</span>);</span><br><span class="line">        $data = $user-&gt;select();</span><br><span class="line">        dump($data); <span class="comment">// 输出所有的信息（数组+映射格式）</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="2、实例化用户自定义模型"><a href="#2、实例化用户自定义模型" class="headerlink" title="2、实例化用户自定义模型"></a>2、实例化用户自定义模型</h3><p><strong>新建 Model 文件</strong>：<code>[应用名]/Home/Model/[名字]Model.class.php</code><br>格式要规范，例如：UserModel.class.php</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Home</span>\<span class="title">Model</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Think</span>\<span class="title">Model</span>; <span class="comment">// 加上这两行，D('Model/User') 可以省略 'Model/'，否则必须全路径</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserModel</span> <span class="keyword">extends</span> <span class="title">Model</span> </span>{</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Hello World"</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>Think/Model 方法不存在 解决方法：</p><p>需要继承<code>RelationModel</code>，引入<code>use Think\Model\RelationModel ;</code></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">use</span> <span class="title">Think</span>\<span class="title">Model</span>\<span class="title">RelationModel</span> ;</span><br><span class="line">&gt; <span class="class"><span class="keyword">class</span> <span class="title">UserModel</span> <span class="keyword">extends</span> <span class="title">RelationModel</span> </span>{ <span class="comment">/*...*/</span> }</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></tbody></table></figure></blockquote><p><strong>Controller 文件</strong>：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// $user = new UserModel(); // 要放到 Home\Controller 下才能用</span></span><br><span class="line">$user = D(<span class="string">'User'</span>);</span><br><span class="line">$data = $user-&gt;select(); <span class="comment">// 需要表存在</span></span><br><span class="line">dump($data);</span><br></pre></td></tr></tbody></table></figure><p>如果 Model 文件不存在，<code>D()</code>方法会自动执行<code>M()</code>方法，即构建<code>基础Model</code></p><h3 id="3、实例化公共模型"><a href="#3、实例化公共模型" class="headerlink" title="3、实例化公共模型"></a>3、实例化公共模型</h3><p>能进行一些通用的方法</p><p><strong>新建 Model 文件</strong>：<code>[应用名]/Home/Model/CommonModel.class.php</code></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Home</span>\<span class="title">Model</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Think</span>\<span class="title">Model</span>\<span class="title">RelationModel</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommonModel</span> <span class="keyword">extends</span> <span class="title">RelationModel</span> </span>{</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">strMake</span><span class="params">($str)</span> </span>{</span><br><span class="line"><span class="keyword">return</span> md5(sha1(md5($str))); <span class="comment">// 统一的字符串加密</span></span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>Controller 文件</strong>：</p><blockquote><p>如果提示找不到 CommonModel，顶部加上声明：<code>use Home\Model\CommonModel;</code></p></blockquote><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span>{</span><br><span class="line">    $user = <span class="keyword">new</span> CommonModel();</span><br><span class="line">    <span class="keyword">echo</span> $user-&gt;strMake(<span class="string">'aaa'</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="用户自定义公共模型"><a href="#用户自定义公共模型" class="headerlink" title="用户自定义公共模型"></a>用户自定义公共模型</h4><p>自定义的<code>XxxModel</code>不要继承<code>Model</code>，继承<code>CommonModel</code>，<code>CommonModel</code>再继承自<code>RelationModel</code></p><h3 id="4、实例化空模型"><a href="#4、实例化空模型" class="headerlink" title="4、实例化空模型"></a>4、实例化空模型</h3><p>Controller 文件：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$model = M();</span><br><span class="line">$model-&gt;query($sql); <span class="comment">// 日常读取 select</span></span><br><span class="line">$model-&gt;execute($sql); <span class="comment">// 写入 update insert，返回修改行数（int）</span></span><br></pre></td></tr></tbody></table></figure><h2 id="CURD操作"><a href="#CURD操作" class="headerlink" title="CURD操作"></a>CURD操作</h2><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><p><strong>controller 文件</strong>：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$data = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">'username'</span> =&gt; <span class="string">''</span>,</span><br><span class="line">    <span class="string">'password'</span> =&gt; <span class="string">''</span>,</span><br><span class="line">);</span><br><span class="line"><span class="keyword">echo</span> M(<span class="string">'User'</span>)-&gt;add($data); <span class="comment">// 返回所在行值</span></span><br></pre></td></tr></tbody></table></figure><h4 id="插入多条数据"><a href="#插入多条数据" class="headerlink" title="插入多条数据"></a>插入多条数据</h4><p>addAll() 方法 （只适合MySQL）</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$data = <span class="keyword">array</span>(</span><br><span class="line">    <span class="number">0</span> =&gt; <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">'username'</span> =&gt; <span class="string">'000'</span>,</span><br><span class="line">        <span class="string">'password'</span> =&gt; <span class="string">'00'</span>,</span><br><span class="line">    ),</span><br><span class="line">    <span class="number">1</span> =&gt; <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">'username'</span> =&gt; <span class="string">'111'</span>,</span><br><span class="line">        <span class="string">'password'</span> =&gt; <span class="string">'11'</span>,</span><br><span class="line">    ),</span><br><span class="line">    <span class="number">2</span> =&gt; <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">'username'</span> =&gt; <span class="string">'222'</span>,</span><br><span class="line">        <span class="string">'password'</span> =&gt; <span class="string">'22'</span>,</span><br><span class="line">    ),</span><br><span class="line">);</span><br><span class="line"><span class="keyword">echo</span> M(<span class="string">'User'</span>)-&gt;addAll($data); <span class="comment">// 返回第一次添加的行数（int）</span></span><br></pre></td></tr></tbody></table></figure><h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><p>M(‘User’)-&gt;select() 会查询两次：</p><ul><li>Show columns from `user`</li><li>SELECT * from `user`</li></ul><p>如果 <code>debug</code> 开启，那么每次 <code>SELECT</code> 前都会查询字段，并缓存起来。</p><p><strong>1、带条件查询</strong>：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$data = M(<span class="string">'User'</span>)-&gt;where(<span class="string">'id=1'</span>)-&gt;select();</span><br></pre></td></tr></tbody></table></figure><p><strong>2、多个条件查询</strong>：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$where[<span class="string">'id'</span>] = <span class="number">1</span>;</span><br><span class="line">$where[<span class="string">'name'</span>] = <span class="string">'a'</span>;</span><br><span class="line">$where[<span class="string">'_logic'</span>] = <span class="string">'or'</span>; <span class="comment">// 默认where逻辑是 AND</span></span><br><span class="line">$data = M(<span class="string">'User'</span>)-&gt;where($where)-&gt;select();</span><br></pre></td></tr></tbody></table></figure><p><strong>3、表达式查询</strong>：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$where[<span class="string">'id'</span>] = <span class="keyword">array</span>(<span class="string">'gt'</span>, <span class="number">1</span>); <span class="comment">// id &gt; 1</span></span><br><span class="line">$data = M(<span class="string">'User'</span>)-&gt;where($where)-&gt;select();</span><br><span class="line"></span><br><span class="line">$where[<span class="string">'id'</span>] = <span class="keyword">array</span>(<span class="string">'not between'</span>, <span class="string">'1,8'</span>); <span class="comment">// id &lt; 1 || id &gt; 8</span></span><br><span class="line"></span><br><span class="line">$where[<span class="string">'username'</span>] = <span class="keyword">array</span>(<span class="string">'like'</span>, <span class="string">'%a'</span>); <span class="comment">// name 以 a 结尾</span></span><br><span class="line"></span><br><span class="line">$where[<span class="string">'username'</span>] = <span class="keyword">array</span>(<span class="string">'like'</span>, <span class="keyword">array</span>(<span class="string">'%e'</span>, <span class="string">'s%'</span>)); <span class="comment">// e结尾 OR s开头</span></span><br></pre></td></tr></tbody></table></figure><p><strong>4、区间查询</strong></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$where[<span class="string">'id'</span>] = <span class="keyword">array</span>(<span class="keyword">array</span>(<span class="string">'gt'</span>,<span class="number">1</span>), <span class="keyword">array</span>(<span class="string">'lt'</span>,<span class="number">10</span>)); <span class="comment">// 1&lt;id&lt;10，默认 AND 运算</span></span><br><span class="line">$where[<span class="string">'id'</span>] = <span class="keyword">array</span>(<span class="keyword">array</span>(<span class="string">'lt'</span>,<span class="number">3</span>), <span class="keyword">array</span>(<span class="string">'gt'</span>,<span class="number">100</span>), <span class="string">'or'</span>); <span class="comment">// id&lt;3 OR id&gt;100</span></span><br></pre></td></tr></tbody></table></figure><p><strong>5、混合用法</strong></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$where[<span class="string">'id'</span>] = <span class="keyword">array</span>(<span class="string">'gt'</span>, <span class="number">10</span>);</span><br><span class="line">$where[<span class="string">'_string'</span>] = <span class="string">'score &gt; 10'</span>; <span class="comment">// 字符串方式（不建议用，容易被SQL注入）</span></span><br><span class="line">$data = M(<span class="string">'User'</span>)-&gt;where($where)-&gt;select();</span><br></pre></td></tr></tbody></table></figure><p>尽量不要用字符串方式，表达式查询会进行字符串格式化，安全</p><p><strong>6、统计用法</strong></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$data = M(<span class="string">'User'</span>)-&gt;count();</span><br><span class="line">dump($data); <span class="comment">// 例如 100条结果 会输出： string(3) "100"</span></span><br><span class="line"></span><br><span class="line">$data = M(<span class="string">'User'</span>)-&gt;max(<span class="string">'score'</span>); <span class="comment">// max  min  avg  sum  都需要带一个参数</span></span><br></pre></td></tr></tbody></table></figure><h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$where[<span class="string">'id'</span>] = <span class="number">1</span>;</span><br><span class="line">$data = M(<span class="string">'User'</span>)-&gt;where($where)-&gt;select();</span><br><span class="line">dump($data);</span><br><span class="line"></span><br><span class="line">$update[<span class="string">'score'</span>] = <span class="number">60</span>;</span><br><span class="line">$where[<span class="string">'id'</span>] = <span class="number">1</span>;</span><br><span class="line">$data = M(<span class="string">'User'</span>)-&gt;where($where)-&gt;save($update); <span class="comment">// 千万不要写成 update()方法</span></span><br><span class="line">dump($data); <span class="comment">// 返回影响的行数</span></span><br></pre></td></tr></tbody></table></figure><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$where[<span class="string">'id'</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//$data = M('User')-&gt;where($where)-&gt;select();</span></span><br><span class="line"><span class="keyword">echo</span> M(<span class="string">'User'</span>)-&gt;where($where)-&gt;delete(); <span class="comment">// 输出1</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> M(<span class="string">'User'</span>)-&gt;delete(<span class="number">3</span>); <span class="comment">// 主要传入主键值（也只能传主键值）</span></span><br></pre></td></tr></tbody></table></figure><h2 id="连贯操作"><a href="#连贯操作" class="headerlink" title="连贯操作"></a>连贯操作</h2><h3 id="排序-order"><a href="#排序-order" class="headerlink" title="排序 order"></a>排序 order</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$data = M(<span class="string">'User'</span>)-&gt;order(<span class="string">'score desc, id asc'</span>)-&gt;select(); <span class="comment">// score从大到小，ID、从小到大</span></span><br></pre></td></tr></tbody></table></figure><h3 id="筛选数据-field"><a href="#筛选数据-field" class="headerlink" title="筛选数据 field"></a>筛选数据 field</h3><p><code>field($string, false);</code> </p><ul><li>参数一 string 传入多个字段用英文逗号分开</li><li>参数二默认为false，即只显示string中的字段；为true时只有string中的字段不显示</li></ul><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$data = M(<span class="string">'User'</span>)-&gt;field(<span class="string">'id, username'</span>)-&gt;select(); <span class="comment">// 只显示 id 和 username</span></span><br></pre></td></tr></tbody></table></figure><h3 id="限制数据量-limit-和-page"><a href="#限制数据量-limit-和-page" class="headerlink" title="限制数据量 limit 和 page"></a>限制数据量 limit 和 page</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$data = M(<span class="string">'User'</span>)-&gt;limit(<span class="number">5</span>)-&gt;select(); <span class="comment">// 0 ~ 5，序号从0开始</span></span><br><span class="line">$data = M(<span class="string">'User'</span>)-&gt;limit(<span class="number">2</span>, <span class="number">5</span>)-&gt;select(); <span class="comment">// 2（第三条） ~ 5</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$data = M(<span class="string">'User'</span>)-&gt;page(<span class="number">1</span>)-&gt;select(); <span class="comment">// 第一页，参数二默认每页20条</span></span><br><span class="line">$data = M(<span class="string">'User'</span>)-&gt;page(<span class="number">1</span>, <span class="number">5</span>)-&gt;select(); <span class="comment">// 第一页，每页5条</span></span><br></pre></td></tr></tbody></table></figure><h3 id="分组-group-和-having"><a href="#分组-group-和-having" class="headerlink" title="分组 group 和 having"></a>分组 group 和 having</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">M(<span class="string">'User'</span>)-&gt;field(<span class="string">'score, count(*) as total'</span>)-&gt;group(<span class="string">'score'</span>)-&gt;select(); <span class="comment">// 每个成绩的数据数量</span></span><br></pre></td></tr></tbody></table></figure><p>输出结果示例：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">arrar(<span class="number">10</span>) {</span><br><span class="line">    [<span class="number">0</span>] =&gt; <span class="keyword">array</span>(<span class="number">2</span>) {</span><br><span class="line">        [<span class="string">"score"</span>] =&gt; string(<span class="number">2</span>) <span class="string">"15"</span></span><br><span class="line">        [<span class="string">"total"</span>] =&gt; string(<span class="number">1</span>) <span class="string">"6"</span></span><br><span class="line">    }</span><br><span class="line">    [<span class="number">1</span>] =&gt; <span class="keyword">array</span>(<span class="number">2</span>) {</span><br><span class="line">        [<span class="string">"score"</span>] =&gt; string(<span class="number">2</span>) <span class="string">"16"</span></span><br><span class="line">        [<span class="string">"total"</span>] =&gt; string(<span class="number">1</span>) <span class="string">"3"</span></span><br><span class="line">    }</span><br><span class="line">    [<span class="number">2</span>]...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>having</strong></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">M(<span class="string">'User'</span>)</span><br><span class="line">    -&gt;field(<span class="string">'score, count(*) as total'</span>)</span><br><span class="line">    -&gt;having(<span class="string">'score &gt;= 20'</span>)</span><br><span class="line">    -&gt;group(<span class="string">'score'</span>)</span><br><span class="line">    -&gt;select(); <span class="comment">// 超过20分的成绩的数据数量</span></span><br></pre></td></tr></tbody></table></figure><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><h3 id="table-方法"><a href="#table-方法" class="headerlink" title="table 方法"></a>table 方法</h3><p><code>table(array('完整表名'=&gt;'别名'))</code></p><p>如果有前缀，表名一定要加前缀（M方法中的表名参数不用加config中设置的前缀）</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">M()-&gt;table(<span class="keyword">array</span>(<span class="string">'tb_user'</span>=&gt;<span class="string">'user'</span>, <span class="string">'tb_info'</span>=&gt;<span class="string">'info'</span>))</span><br><span class="line">    -&gt;where(<span class="string">'user.id=info.userid'</span>)</span><br><span class="line">    -&gt;select(); <span class="comment">// tb_ 为表前缀</span></span><br></pre></td></tr></tbody></table></figure><h3 id="join-方法"><a href="#join-方法" class="headerlink" title="join 方法"></a>join 方法</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">M(<span class="string">'User'</span>)</span><br><span class="line">    -&gt;join(<span class="string">'tb_info on tb_info.userid=tb_user.id'</span>)</span><br><span class="line">    -&gt;select(); <span class="comment">// 默认是左关联，即tb_info中有但tb_user中没有这条信息，也会查出来，此时相当于tb_user中的内容为空</span></span><br><span class="line"></span><br><span class="line">M(<span class="string">'User'</span>)</span><br><span class="line">    -&gt;join(<span class="string">'Right join tb_info on tb_info.userid=tb_user.id'</span>)</span><br><span class="line">    -&gt;select(); <span class="comment">// 右关联</span></span><br><span class="line"></span><br><span class="line">M(<span class="string">'User'</span>)</span><br><span class="line">    -&gt;join(<span class="comment">/**/</span>)</span><br><span class="line">    -&gt;join(<span class="comment">/**/</span>)</span><br><span class="line">    -&gt;select(); <span class="comment">// 使用多个join关联</span></span><br><span class="line"></span><br><span class="line">M(<span class="string">'User'</span>)</span><br><span class="line">    -&gt;join(<span class="keyword">array</span>(<span class="string">'tb_info on tb_info.userid=tb_user.id'</span>, <span class="string">'/**/'</span>, <span class="string">'/**/'</span>))</span><br><span class="line">    -&gt;select(); <span class="comment">// 使用join数组关联</span></span><br></pre></td></tr></tbody></table></figure><h3 id="union-方法"><a href="#union-方法" class="headerlink" title="union 方法"></a>union 方法</h3><p><code>union(string/array, false/true)</code> </p><ul><li>参数二默认false，使用union查询；true 为uni查询（去掉重复结果）</li></ul><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">M(<span class="string">'User'</span>)</span><br><span class="line">    -&gt;field(<span class="string">'username'</span>, <span class="string">'id'</span>)</span><br><span class="line">    -&gt;union(<span class="string">'select username, id from tb_user2'</span>)</span><br><span class="line">    -&gt;select(); <span class="comment">// 查询 tb_user 和 tb_user2 中的 username 和 id</span></span><br><span class="line"></span><br><span class="line">M(<span class="string">'User'</span>)</span><br><span class="line">    -&gt;field(<span class="string">'username'</span>)</span><br><span class="line">    -&gt;union(<span class="keyword">array</span>(<span class="string">'field'</span>=&gt;<span class="string">'username'</span>, <span class="string">'table'</span>=&gt;<span class="string">'tb_user2'</span>))</span><br><span class="line">    -&gt;union(<span class="keyword">array</span>(<span class="string">'field'</span>=&gt;<span class="string">'username'</span>, <span class="string">'table'</span>=&gt;<span class="string">'tb_user3'</span>))</span><br><span class="line">    -&gt;select();</span><br></pre></td></tr></tbody></table></figure><p>查询字段的类型（包括field和union中的顺序）必须是一样的</p><h3 id="过滤查询-distinct"><a href="#过滤查询-distinct" class="headerlink" title="过滤查询 distinct"></a>过滤查询 distinct</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$data = M(<span class="string">'User'</span>)-&gt;distinct(<span class="keyword">true</span>)-&gt;field(<span class="string">'score'</span>)-&gt;order(<span class="string">'score asc'</span>)-&gt;select(); <span class="comment">// 参数 true 为过滤</span></span><br></pre></td></tr></tbody></table></figure><h1 id="关于命名范围的使用"><a href="#关于命名范围的使用" class="headerlink" title="关于命名范围的使用"></a>关于命名范围的使用</h1><p>查询分数超过60的</p><p><code>[应用名]/Home/Model/UserModel.class.php</code></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Home</span>\<span class="title">Model</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Think</span>\<span class="title">Model</span>\<span class="title">RelationModel</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserModel</span> <span class="keyword">extends</span> <span class="title">CommonModel</span> </span>{</span><br><span class="line"><span class="keyword">protected</span> $_scope = <span class="keyword">array</span>(</span><br><span class="line"><span class="comment">/*'命名范围的标识名' =&gt; array(</span></span><br><span class="line"><span class="comment">'属性' =&gt; '值',</span></span><br><span class="line"><span class="comment">支持的方法有：where limit field order table page having group distinct</span></span><br><span class="line"><span class="comment">)*/</span></span><br><span class="line">        </span><br><span class="line"><span class="string">'jige'</span> =&gt; <span class="keyword">array</span>(</span><br><span class="line"><span class="string">'where'</span> =&gt; <span class="keyword">array</span>(</span><br><span class="line"><span class="string">'score'</span>=&gt;<span class="keyword">array</span>(<span class="string">'egt'</span>, <span class="number">60</span>),</span><br><span class="line">),</span><br><span class="line"><span class="string">'order'</span> =&gt; <span class="string">'id asc'</span>,</span><br><span class="line">),</span><br><span class="line">        </span><br><span class="line"><span class="string">'ziduan'</span> =&gt; <span class="keyword">array</span>(</span><br><span class="line"><span class="string">'field'</span> =&gt; <span class="string">'nickname, score'</span></span><br><span class="line">)</span><br><span class="line">);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>[应用名]/Home/Controller/IndexController.class.php</code></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fanwei</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">$user = D(<span class="string">'User'</span>);</span><br><span class="line">$data = $user-&gt;scope(<span class="string">'jige'</span>, <span class="string">'ziduan'</span>)-&gt;select();</span><br><span class="line"><span class="keyword">echo</span> M()-&gt;getLastSql();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>如果两个命名范围冲突（如一个 limit 10，另一个 limit 5，则后面的会覆盖前面的），没冲突（例如 where 条件）则会用 AND 连接</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;运行&quot;&gt;&lt;a href=&quot;#运行&quot; class=&quot;headerlink&quot; title=&quot;运行&quot;&gt;&lt;/a&gt;运行&lt;/h1&gt;&lt;h2 id=&quot;单一入口：index-php&quot;&gt;&lt;a href=&quot;#单一入口：index-php&quot; class=&quot;headerlink&quot; title=&quot;单一入口：index.php&quot;&gt;&lt;/a&gt;单一入口：index.php&lt;/h2&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;define(&lt;span class=&quot;string&quot;&gt;&#39;APP_DEBUG&#39;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;define(&lt;span class=&quot;string&quot;&gt;&#39;APP_NAME&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;App&#39;&lt;/span&gt;);         &lt;span class=&quot;comment&quot;&gt;// 定义应用名称&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;define(&lt;span class=&quot;string&quot;&gt;&#39;APP_PATH&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;./App2&#39;&lt;/span&gt;);      &lt;span class=&quot;comment&quot;&gt;// 应用路径，生成目录下 /App/ 文件夹，注意别忘了最后的斜线&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;./ThinkPHP/ThinkPHP.php&#39;&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// 加载 ThinkPHP&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="PHP" scheme="http://blog.iwxyi.com/tags/PHP/"/>
    
      <category term="学习笔记" scheme="http://blog.iwxyi.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="ThinkPHP" scheme="http://blog.iwxyi.com/tags/ThinkPHP/"/>
    
  </entry>
  
  <entry>
    <title>Python解析网络JSON</title>
    <link href="http://blog.iwxyi.com/2018/11/04/Python%E8%A7%A3%E6%9E%90%E7%BD%91%E7%BB%9CJSON/"/>
    <id>http://blog.iwxyi.com/2018/11/04/Python解析网络JSON/</id>
    <published>2018-11-04T05:39:00.000Z</published>
    <updated>2019-10-13T05:40:22.294Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line">url = <span class="string">"https://gdata.youtube.com/feeds/api.standardfeeds/top_rated?alt=json"</span></span><br><span class="line">response = urlopen(url)</span><br><span class="line">contents = response.read()</span><br><span class="line">text = contents.decode(<span class="string">'utf8'</span>)</span><br><span class="line">data = json.loads(text)</span><br><span class="line"><span class="keyword">for</span> video <span class="keyword">in</span> data[<span class="string">'feed'</span>][<span class="string">'entry'</span>][<span class="number">0</span>:<span class="number">6</span>]:</span><br><span class="line">print(video[<span class="string">'title'</span>][<span class="string">'$t'</span>])</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><p>第1行：从Python标准库中导入名为json的所有代码。<br>第2行：从Python标准urllib库中导入urlopen函数。<br>第3行：给变量url赋值一个YouTube地址。<br>第4行：连接指定地址处的Web服务器并请求指定的Web服务。<br>第5行：获取响应数据并赋值给变量contents。<br>第6行：把contents解码成一个JSON 格式的文本字符串并赋值给变量text。<br>第7行：把text转换为data——一个存储视频信息的Python数据结构。<br>第8行：每次获取一个视频的信息并赋值给变量video。<br>第8行：使用两层Python字典（data[‘feed’][‘entry’]）和切片操作（[0:6]）。<br>第9行：使用print函数打印出视频标题。</p><p>使用第三方Python软件包requests</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">"https://gdata.youtube.com/feeds/api.standardfeeds/top_rated?alt=json"</span></span><br><span class="line">response = requests.get(url)</span><br><span class="line">data = response.json()</span><br><span class="line"><span class="keyword">for</span> video <span class="keyword">in</span> data[<span class="string">'feed'</span>][<span class="string">'entry'</span>][<span class="number">0</span>:<span class="number">6</span>]:</span><br><span class="line">print(video[<span class="string">'title'</span>][<span class="string">'$t'</span>])</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; json&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; urllib.request &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; urlopen&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;url = &lt;span class=&quot;string&quot;&gt;&quot;https://gdata.youtube.com/feeds/api.standardfeeds/top_rated?alt=json&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;response = urlopen(url)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;contents = response.read()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;text = contents.decode(&lt;span class=&quot;string&quot;&gt;&#39;utf8&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;data = json.loads(text)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; video &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; data[&lt;span class=&quot;string&quot;&gt;&#39;feed&#39;&lt;/span&gt;][&lt;span class=&quot;string&quot;&gt;&#39;entry&#39;&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;]:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(video[&lt;span class=&quot;string&quot;&gt;&#39;title&#39;&lt;/span&gt;][&lt;span class=&quot;string&quot;&gt;&#39;$t&#39;&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="Python" scheme="http://blog.iwxyi.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Android ViewPage模板</title>
    <link href="http://blog.iwxyi.com/2018/10/29/Android-ViewPage%E6%A8%A1%E6%9D%BF/"/>
    <id>http://blog.iwxyi.com/2018/10/29/Android-ViewPage模板/</id>
    <published>2018-10-29T03:02:00.000Z</published>
    <updated>2019-10-13T03:03:20.532Z</updated>
    
    <content type="html"><![CDATA[<p>多可左右滑动的分页容器模板</p><a id="more"></a><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.support.v4.app.Fragment;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.app.FragmentManager;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.app.FragmentPagerAdapter;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.view.ViewPager;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.LayoutInflater;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SectionsPagerAdapter mSectionsPagerAdapter; <span class="comment">// 适配器</span></span><br><span class="line">    <span class="keyword">private</span> ViewPager mViewPager; <span class="comment">// 容器</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 通过 FragmentManager 创建适配器</span></span><br><span class="line">        mSectionsPagerAdapter = <span class="keyword">new</span> SectionsPagerAdapter(getSupportFragmentManager());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置 ViewPager 容器</span></span><br><span class="line">        mViewPager = (ViewPager) findViewById(R.id.container);</span><br><span class="line">        mViewPager.setAdapter(mSectionsPagerAdapter);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* fragment 类 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PlaceholderFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>{</span><br><span class="line">        <span class="comment">// 定义一个储存参数的key的常量</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ARG_SECTION_NUMBER = <span class="string">"section_number"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">PlaceholderFragment</span><span class="params">()</span> </span>{</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个 fragment，好像是工厂模式？（静态）</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PlaceholderFragment <span class="title">newInstance</span><span class="params">(<span class="keyword">int</span> sectionNumber)</span> </span>{</span><br><span class="line">            PlaceholderFragment fragment = <span class="keyword">new</span> PlaceholderFragment();</span><br><span class="line">            Bundle args = <span class="keyword">new</span> Bundle();</span><br><span class="line">            args.putInt(ARG_SECTION_NUMBER, sectionNumber);</span><br><span class="line">            fragment.setArguments(args);</span><br><span class="line">            <span class="keyword">return</span> fragment;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回一个 inflate 的 view，并且读取参数并设置</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 Bundle savedInstanceState)</span> </span>{</span><br><span class="line">            View rootView = inflater.inflate(R.layout.fragment_main, container, <span class="keyword">false</span>);</span><br><span class="line">            TextView textView = (TextView) rootView.findViewById(R.id.section_label);</span><br><span class="line">            textView.setText(getString(R.string.section_format, getArguments().getInt(ARG_SECTION_NUMBER)));</span><br><span class="line">            <span class="keyword">return</span> rootView;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 适配器 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SectionsPagerAdapter</span> <span class="keyword">extends</span> <span class="title">FragmentPagerAdapter</span> </span>{</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">SectionsPagerAdapter</span><span class="params">(FragmentManager fm)</span> </span>{</span><br><span class="line">            <span class="keyword">super</span>(fm);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 只在第一次的时候才需要 getItem，创建一个fragment</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Fragment <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>{</span><br><span class="line">            <span class="keyword">return</span> PlaceholderFragment.newInstance(position + <span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>{</span><br><span class="line">            <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;多可左右滑动的分页容器模板&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="Android" scheme="http://blog.iwxyi.com/tags/Android/"/>
    
      <category term="模板" scheme="http://blog.iwxyi.com/tags/%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>Android Color类颜色值坑点</title>
    <link href="http://blog.iwxyi.com/2018/10/29/Android-Color%E7%B1%BB%E9%A2%9C%E8%89%B2%E5%80%BC%E5%9D%91%E7%82%B9/"/>
    <id>http://blog.iwxyi.com/2018/10/29/Android-Color类颜色值坑点/</id>
    <published>2018-10-29T02:39:00.000Z</published>
    <updated>2019-10-13T02:48:06.484Z</updated>
    
    <content type="html"><![CDATA[<p>Color.alpha 0x00~0xFF  00表示完全透明，FF表示完全不透明</p><p>其中有两个方法</p><p>Color.argb(int alpha, int red, int green, int blue);//设置颜色，同步设置颜色的透明度</p><p>Color.rgb(int red, int green, int blue);//设置颜色，默认透明度为0xFF，完全不透明</p><a id="more"></a><hr><p>在面试的时候，笔试的时候，很多题目会提到颜色相同的rgb和argb有哪些？</p><p>如下是我自己验证过的内容</p><p>FFAABB = FFFFAABB != 00FFAABB</p><p>上面的比较简单，很容易理解，比较容易误导人的是这样的</p><p>FFAB ?= FAB  不等于</p><p>FFFAB ?= FAB  等于</p><p>FFFAB ?= FFAB  不等于</p><p>FFAABB ?= FAB 不等于</p><p>得出以下结论：<br>在<strong>只有单个字符去表示颜色时:F == 0F, A == 0A…，可以使用这个公式去替换掉上面这些公式</strong>，转换之后：</p><p>FFAB ?= FAB          -&gt; 0F 0F 0A 0B ?= FF 0F 0A 0B  明显，不相等</p><p>FFFAB ?= FAB        -&gt; FF 0F 0A 0B ?= FF 0F 0A 0B 相等  </p><p>FFFAB ?= FFAB     -&gt; FF 0F 0A 0B ?= 0F 0F 0A 0B 不相等</p><p>FFAABB ?= FAB     -&gt; FF FF AA BB ?= FF 0F 0A 0B 不相等</p><hr><blockquote><p>参考：<a href="https://blog.csdn.net/sunhengzhi_212/article/details/73028313" target="_blank" rel="noopener">https://blog.csdn.net/sunhengzhi_212/article/details/73028313</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Color.alpha 0x00~0xFF  00表示完全透明，FF表示完全不透明&lt;/p&gt;
&lt;p&gt;其中有两个方法&lt;/p&gt;
&lt;p&gt;Color.argb(int alpha, int red, int green, int blue);//设置颜色，同步设置颜色的透明度&lt;/p&gt;
&lt;p&gt;Color.rgb(int red, int green, int blue);//设置颜色，默认透明度为0xFF，完全不透明&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="Android" scheme="http://blog.iwxyi.com/tags/Android/"/>
    
      <category term="踩坑" scheme="http://blog.iwxyi.com/tags/%E8%B8%A9%E5%9D%91/"/>
    
  </entry>
  
  <entry>
    <title>Qt QMap</title>
    <link href="http://blog.iwxyi.com/2018/10/27/Qt-QMap/"/>
    <id>http://blog.iwxyi.com/2018/10/27/Qt-QMap/</id>
    <published>2018-10-27T09:38:00.000Z</published>
    <updated>2019-10-13T09:39:51.610Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-基本应用"><a href="#1-基本应用" class="headerlink" title="1. 基本应用"></a><strong>1. 基本应用</strong></h3><p>下面以“键-值”都是QString的例子说明QMap的基本使用方法。</p><a id="more"></a><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;qmap.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MapTest</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showMap</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">if</span>(!m_map.isEmpty()) <span class="keyword">return</span>;       <span class="comment">//判断map是否为空</span></span><br><span class="line">        {</span><br><span class="line">            m_map.insert(“<span class="number">111</span>″, “aaa”);   <span class="comment">//向map里添加一对“键-值”</span></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!m_map.contains(“<span class="number">222</span>″))        <span class="comment">//判断map里是否已经包含某“键-值”</span></span><br><span class="line">        {</span><br><span class="line">            m_map.insert(“<span class="number">222</span>″, “bbb”);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        m_map[<span class="string">"333"</span>] = “ccc”;             <span class="comment">//另一种添加的方式</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//这种方式既可以用于添加，也可以用于获取，但是你必须知道它确实存在</span></span><br><span class="line">        qDebug(“<span class="built_in">map</span>[<span class="number">333</span>] , value is : ” + m_map[<span class="string">"333"</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(m_map.contains(“<span class="number">111</span>″))</span><br><span class="line">        {</span><br><span class="line">            <span class="comment">//找到特定的“键-值”对</span></span><br><span class="line">            QMap&lt;QString,QString&gt;::iterator it = m_map.find(“<span class="number">111</span>″);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取map里对应的值</span></span><br><span class="line">            qDebug(“find <span class="number">111</span> , value is : ” + it.data());</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        qDebug(“size of <span class="keyword">this</span> <span class="built_in">map</span> is : %d”, m_map.count()); <span class="comment">//获取map包含的总数</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">        QMap&lt;QString,QString&gt;::iterator it; <span class="comment">//遍历map</span></span><br><span class="line">        <span class="keyword">for</span> ( it = m_map.begin(); it != m_map.end(); ++it )</span><br><span class="line">        {</span><br><span class="line">            <span class="comment">//用key()和data()分别获取“键”和“值”</span></span><br><span class="line">            qDebug( “%s: %s”, it.key().ascii(), it.data().ascii());</span><br><span class="line">        }</span><br><span class="line">        m_map.clear(); <span class="comment">//清空map</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    QMap&lt;QString,QString&gt; m_map; <span class="comment">//定义一个QMap对象</span></span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>调用类函数showMap(),显示结果：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">map[333] , value is : ccc</span><br><span class="line">find 111 , value is : aaa</span><br><span class="line"></span><br><span class="line">size of this map is : 3</span><br><span class="line"></span><br><span class="line">111: aaa</span><br><span class="line">222: bbb</span><br><span class="line">333: ccc</span><br></pre></td></tr></tbody></table></figure><hr><h3 id="2-对象的使用"><a href="#2-对象的使用" class="headerlink" title="2. 对象的使用"></a><strong>2. 对象的使用</strong></h3><p>map当中还可以保存类对象、自己定义类对象。</p><p>例子如下（摘自QT帮助文档《Qt Assistant》，更详细的说明参考之）：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;qstring.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;qmap.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;qstring.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义一个Employee类，包含fn、sn、sal属性</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Employee(): sn(<span class="number">0</span>) {}</span><br><span class="line">    Employee( <span class="keyword">const</span> QString&amp; forename, <span class="keyword">const</span> QString&amp; surname, <span class="keyword">int</span> salary )</span><br><span class="line">        : fn(forename), sn(surname), sal(salary) {}</span><br><span class="line"></span><br><span class="line">    <span class="function">QString <span class="title">forename</span><span class="params">()</span> <span class="keyword">const</span> </span>{ <span class="keyword">return</span> fn; }</span><br><span class="line">    <span class="function">QString <span class="title">surname</span><span class="params">()</span> <span class="keyword">const</span> </span>{ <span class="keyword">return</span> sn; }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">salary</span><span class="params">()</span> <span class="keyword">const</span> </span>{ <span class="keyword">return</span> sal; }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setSalary</span><span class="params">( <span class="keyword">int</span> salary )</span> </span>{ sal = salary; }</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> sal;</span><br><span class="line">    QString fn;</span><br><span class="line">    QString sn;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="function">QApplication <span class="title">app</span><span class="params">( argc, argv )</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义一个map类型，值为EmployeeMap对象</span></span><br><span class="line">    <span class="keyword">typedef</span> QMap&lt;QString, Employee&gt; EmployeeMap; </span><br><span class="line">    EmployeeMap <span class="built_in">map</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向map里插入键-值</span></span><br><span class="line">    <span class="built_in">map</span>[<span class="string">"JD001"</span>] = Employee(“John”, “Doe”, <span class="number">50000</span>);</span><br><span class="line">    <span class="built_in">map</span>[<span class="string">"JW002"</span>] = Employee(“Jane”, “Williams”, <span class="number">80000</span>);</span><br><span class="line">    <span class="built_in">map</span>[<span class="string">"TJ001"</span>] = Employee(“Tom”, “Jones”, <span class="number">60000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function">Employee <span class="title">sasha</span><span class="params">( “Sasha”, “Hind”, <span class="number">50000</span> )</span></span>;</span><br><span class="line">    <span class="built_in">map</span>[<span class="string">"SH001"</span>] = sasha;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改map值的内容，因为map采用值传递，所以无效</span></span><br><span class="line">    sasha.setSalary( <span class="number">40000</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 批量打印</span></span><br><span class="line">    EmployeeMap::Iterator it;</span><br><span class="line">    <span class="keyword">for</span> ( it = <span class="built_in">map</span>.begin(); it != <span class="built_in">map</span>.end(); ++it )</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">printf</span>( “%s: %s, %s earns %d/n”,</span><br><span class="line">                it.key().latin1(),</span><br><span class="line">                it.data().surname().latin1(),</span><br><span class="line">                it.data().forename().latin1(),</span><br><span class="line">                it.data().salary() );</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">JD001: Doe, John earns 50000</span><br><span class="line">JW002: Williams, Jane earns 80000</span><br><span class="line">SH001: Hind, Sasha earns 50000</span><br><span class="line">TJ001: Jones, Tom earns 60000</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-基本应用&quot;&gt;&lt;a href=&quot;#1-基本应用&quot; class=&quot;headerlink&quot; title=&quot;1. 基本应用&quot;&gt;&lt;/a&gt;&lt;strong&gt;1. 基本应用&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;下面以“键-值”都是QString的例子说明QMap的基本使用方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C++" scheme="http://blog.iwxyi.com/tags/C/"/>
    
      <category term="Qt" scheme="http://blog.iwxyi.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>基于Qt的图像处理技术和算法</title>
    <link href="http://blog.iwxyi.com/2018/10/27/%E5%9F%BA%E4%BA%8EQt%E7%9A%84%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E6%8A%80%E6%9C%AF%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    <id>http://blog.iwxyi.com/2018/10/27/基于Qt的图像处理技术和算法/</id>
    <published>2018-10-27T08:57:00.000Z</published>
    <updated>2019-10-13T08:58:35.991Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章主要阐述了如何使用Qt在像素级别上对图像进行操作，并实现了一些图像效果，这些效果主要有：灰度，模糊，锐化，添加相框，金属质感，改变图像饱和度，亮度还有白平衡。</p><a id="more"></a><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>文章中，我们将讨论在Qt中修改图像的一些技术和算法，在这之前，你必须知道在Qt中操作图像的一些方法。</p><p>在Qt中有两种表示图像的类，Qt:QImage和QPixmap，还有QBitmap来存储单色的图像，比如遮罩，QPicture在存储QPainter的一些操作指令。</p><p>当我们想要在屏幕上绘制图像的时候，最快的方法就是使用QPixmap，不过坏处就是无法访问和修改像素；</p><p>QImage在IO操作中有很快的速度，并且给出了访问像素的接口，这篇文章中我们就使用这个类。</p><p>如果你是要处理大的图片，比如摄像头拍摄的照片，这种情况最好是将原图缩小之后作为预览图显示在屏幕上，除非我们允许用户缩放图像。有两种加载并缩放图像的方法。</p><p>将图像加载进QImage或者QPixmap，然后调整大小：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">QImage <span class="title">image</span><span class="params">(<span class="string">"sample.png"</span>)</span></span>;</span><br><span class="line">image = image.scaled(width, height);</span><br></pre></td></tr></tbody></table></figure><p>使用QImageReader来读取和缩放图片，然后再加载进QImage中。QImageReader无法将一张图片加载进QPixmap中去，但是可以使用静态方法 QPixmap::fromImage(QImage img)从QImage中加载进QPixmap。这个方法非常快，并且不需要加载大图的内存开销：</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">QImageReader <span class="title">imgReader</span><span class="params">(<span class="string">"sample.png"</span>)</span></span>;</span><br><span class="line">imgReader.setScaledSize(QSize(width, height));</span><br><span class="line">QImage * image;</span><br><span class="line">imgReader.read(image);</span><br></pre></td></tr></tbody></table></figure><p>每一张图片都是由像素点组成，每一个像素都有三个通道：红，绿，蓝，还有一个alpha通道来保存透明度（JPEG格式的图片不支持透明）。每个通道的值是0-255，三个通道都是0的话，表示黑色，都是255表示白色。这篇文章中我们用RGB来表示一种颜色，也就是三个通道的值。</p><p>相比于一个像素一个像素地读取，uchar *  QImage::scanLine(int i)可以一次读取整行的像素值，会更加高效，下面的例子就是按行读取的例子，也是我们将要讲的第一个例子，转灰度图。</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">QImage * MainWindow::greyScale(QImage * origin){</span><br><span class="line">    QImage * newImage = <span class="keyword">new</span> QImage(origin-&gt;width(), origin-&gt;height(), QImage::Format_ARGB32);</span><br><span class="line"> </span><br><span class="line">    QRgb * line;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> y = <span class="number">0</span>; y&lt;newImage-&gt;height(); y++){</span><br><span class="line">        QRgb * line = (QRgb *)origin-&gt;scanLine(y);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>; x&lt;newImage-&gt;width(); x++){</span><br><span class="line">            <span class="keyword">int</span> average = (qRed(line[x]) + qGreen(line[x]) + qRed(line[x]))/<span class="number">3</span>;</span><br><span class="line">            newImage-&gt;setPixel(x,y, qRgb(average, average, average));</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> newImage;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="灰度"><a href="#灰度" class="headerlink" title="灰度"></a>灰度</h2><p>我们要学习的第一个技术就是将彩色图转换成灰度图，我们首先要明白的一点就是，其实标准的灰度图就是每个像素点的三个通道的值一样或者近似，我们的策略就是将每个像素的每个通道的值都调成一样，取R,G,B值为三者的算数平均数就可以了，比如原色是RGB(169,204,69), 那么最终的RGB就是（169+204+69）/3 = 147.</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">QImage * MainWindow::greyScale(QImage * origin){</span><br><span class="line">    QImage * newImage = <span class="keyword">new</span> QImage(origin-&gt;width(), origin-&gt;height(), QImage::Format_ARGB32);</span><br><span class="line"> </span><br><span class="line">    QColor oldColor;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>; x&lt;newImage-&gt;width(); x++){</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> y = <span class="number">0</span>; y&lt;newImage-&gt;height(); y++){</span><br><span class="line">            oldColor = QColor(origin-&gt;pixel(x,y));</span><br><span class="line">            <span class="keyword">int</span> average = (oldColor.red()+oldColor.green()+oldColor.blue())/<span class="number">3</span>;</span><br><span class="line">            newImage-&gt;setPixel(x,y,qRgb(average,average,average));</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> newImage;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="亮度调节"><a href="#亮度调节" class="headerlink" title="亮度调节"></a>亮度调节</h2><p>就如之前我们提到的，白色用RGB(255,255,255)表示，黑色用RGB(0,0,0)表示，所以如果我们需要提高图片的亮度（颜色接近白色），我们需要同时增加三个通道的数值，反之就是变暗。</p><p>在这里我们添加了一个函数参数来决定要提高多少亮度，如果参数是负数的话就是减少亮度了。在每个通道都加上delta值之后，需要做的就是让它不要低于0且不要高于255.</p><h3 id="暖色调"><a href="#暖色调" class="headerlink" title="暖色调"></a>暖色调</h3><p>当我们说一一幅暖色调的图片的时候通常是因为这张图色调偏黄。我们没有黄色的通道，但是红色和绿色混合起来就是黄色，所以我们增加这两个通道值，然后蓝色通道值不变就好了。</p><p>我们使用一个delta参数来决定增加红色和绿色通道的值。一张暖色的图片能够给人一种复古效果，如果是有沙子的图片，图片将会更加生动。</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">QImage * MainWindow::warm(<span class="keyword">int</span> delta, QImage * origin){</span><br><span class="line">    QImage *newImage = <span class="keyword">new</span> QImage(origin-&gt;width(), origin-&gt;height(), QImage::Format_ARGB32);</span><br><span class="line"> </span><br><span class="line">    QColor oldColor;</span><br><span class="line">    <span class="keyword">int</span> r,g,b;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;newImage-&gt;width(); x++){</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> y=<span class="number">0</span>; y&lt;newImage-&gt;height(); y++){</span><br><span class="line">            oldColor = QColor(origin-&gt;pixel(x,y));</span><br><span class="line"> </span><br><span class="line">            r = oldColor.red() + delta;</span><br><span class="line">            g = oldColor.green() + delta;</span><br><span class="line">            b = oldColor.blue();</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//we check if the new values are between 0 and 255</span></span><br><span class="line">            r = qBound(<span class="number">0</span>, r, <span class="number">255</span>);</span><br><span class="line">            g = qBound(<span class="number">0</span>, g, <span class="number">255</span>);</span><br><span class="line"> </span><br><span class="line">            newImage-&gt;setPixel(x,y, qRgb(r,g,b));</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> newImage;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="冷色调"><a href="#冷色调" class="headerlink" title="冷色调"></a>冷色调</h3><p>如果说暖色调的图片偏黄色，那么冷色调的图片应该就是偏蓝色了。在这个方法里面我们只增加蓝色通道的值，红色和绿色的值不变。</p><p>冷色调的图片可以联想到未来，死亡或者，冷。</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">QImage * MainWindow::cool(<span class="keyword">int</span> delta, QImage * origin){</span><br><span class="line">    QImage *newImage = <span class="keyword">new</span> QImage(origin-&gt;width(), origin-&gt;height(), QImage::Format_ARGB32);</span><br><span class="line"> </span><br><span class="line">    QColor oldColor;</span><br><span class="line">    <span class="keyword">int</span> r,g,b;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;newImage-&gt;width(); x++){</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> y=<span class="number">0</span>; y&lt;newImage-&gt;height(); y++){</span><br><span class="line">            oldColor = QColor(origin-&gt;pixel(x,y));</span><br><span class="line"> </span><br><span class="line">            r = oldColor.red();</span><br><span class="line">            g = oldColor.green();</span><br><span class="line">            b = oldColor.blue()+delta;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//we check if the new value is between 0 and 255</span></span><br><span class="line">            b = qBound(<span class="number">0</span>, b, <span class="number">255</span>);</span><br><span class="line"> </span><br><span class="line">            newImage-&gt;setPixel(x,y, qRgb(r,g,b));</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> newImage;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="饱和度"><a href="#饱和度" class="headerlink" title="饱和度"></a>饱和度</h2><p>我们已经说了，颜色由三个通道组成：红，绿，蓝，尽管如此，RGB不是唯一一个表示色彩的方式，在这里，我们使用HSL格式表示色彩 - hue（色相）, saturation（饱和度）, lightness（明度）。</p><p>饱和的图像拥有更加生动的颜色，通常会比较好看，但是有一点要记住：不要滥用饱和度，因为很容易出现失真。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">QImage * MainWindow::saturation(<span class="keyword">int</span> delta, QImage * origin){</span><br><span class="line">    QImage * newImage = <span class="keyword">new</span> QImage(origin-&gt;width(), origin-&gt;height(), QImage::Format_ARGB32);</span><br><span class="line"> </span><br><span class="line">    QColor oldColor;</span><br><span class="line">    QColor newColor;</span><br><span class="line">    <span class="keyword">int</span> h,s,l;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;newImage-&gt;width(); x++){</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> y=<span class="number">0</span>; y&lt;newImage-&gt;height(); y++){</span><br><span class="line">            oldColor = QColor(origin-&gt;pixel(x,y));</span><br><span class="line"> </span><br><span class="line">            newColor = oldColor.toHsl();</span><br><span class="line">            h = newColor.hue();</span><br><span class="line">            s = newColor.saturation()+delta;</span><br><span class="line">            l = newColor.lightness();</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//we check if the new value is between 0 and 255</span></span><br><span class="line">            s = qBound(<span class="number">0</span>, s, <span class="number">255</span>);</span><br><span class="line"> </span><br><span class="line">            newColor.setHsl(h, s, l);</span><br><span class="line"> </span><br><span class="line">            newImage-&gt;setPixel(x, y, qRgb(newColor.red(), newColor.green(), newColor.blue()));</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> newImage;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="模糊"><a href="#模糊" class="headerlink" title="模糊"></a>模糊</h2><p>这个效果相对于之前的有一点点复杂。我们会用到一个卷积滤波器，根据当前像素的颜色和相邻像素的颜色来获得一个新的颜色。同时还有一个kernel的矩阵来决定计算中相邻像素的影响程度。</p><p>原像素会在矩阵的中心，因此我们会使用基数行的行和列。我们不会修改边缘的像素点，因为那些点没有我们需要的相邻像素点，虽然我们也可以只使用有效的像素点。</p><p>举了例子，让我们来看看如何计算像素的RGB值。下面的三个举证代表着当前像素和邻接像素的RGB值，最中间的是当前像素。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">R = 20 102 99</span><br><span class="line">150 200 77 </span><br><span class="line">170 210 105</span><br><span class="line"></span><br><span class="line">G = 22 33 40</span><br><span class="line">17 21 33</span><br><span class="line">8 15 24</span><br><span class="line"></span><br><span class="line">B = 88 70 55</span><br><span class="line">90 72 59</span><br><span class="line">85 69 50</span><br><span class="line"></span><br><span class="line">Kenel =  0 2 0</span><br><span class="line">2 5 2</span><br><span class="line">0 2 0</span><br></pre></td></tr></tbody></table></figure><p>使用滤波器进行计算：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">r = ( (102*2) + (150*2) + (200*5) + (77*2) + (210*2) ) / (2+2+5+2+2) = 159</span><br><span class="line">g = ( (33*2) + ( 17*2) + (21*5) + (33*2) + (15*2) ) / (2+2+5+2+2) = 23</span><br><span class="line">b = ( (70*2) + (90*2) + (72*5) + (59*2) + (69*2) ) / (2+2+5+2+2) = 72</span><br></pre></td></tr></tbody></table></figure><p>由原始的RGB(200, 21, 72)得到了RGB(159, 23, 72).  发现最大的变化是红色的通道，因为红色通道的值差距最大。</p><p>在修改肖像照片的时候通常会使用到模糊的技术，它能后掩盖住皮肤的瑕疵。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">QImage * MainWindow::blur(QImage * origin){</span><br><span class="line">    QImage * newImage = <span class="keyword">new</span> QImage(*origin);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">int</span> kernel [<span class="number">5</span>][<span class="number">5</span>]= {{<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>},</span><br><span class="line">                        {<span class="number">0</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">0</span>},</span><br><span class="line">                        {<span class="number">1</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">1</span>},</span><br><span class="line">                        {<span class="number">0</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">0</span>},</span><br><span class="line">                        {<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>}};</span><br><span class="line">    <span class="keyword">int</span> kernelSize = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">int</span> sumKernel = <span class="number">27</span>;</span><br><span class="line">    <span class="keyword">int</span> r,g,b;</span><br><span class="line">    QColor color;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x=kernelSize/<span class="number">2</span>; x&lt;newImage-&gt;width()-(kernelSize/<span class="number">2</span>); x++){</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> y=kernelSize/<span class="number">2</span>; y&lt;newImage-&gt;height()-(kernelSize/<span class="number">2</span>); y++){</span><br><span class="line"> </span><br><span class="line">            r = <span class="number">0</span>;</span><br><span class="line">            g = <span class="number">0</span>;</span><br><span class="line">            b = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = -kernelSize/<span class="number">2</span>; i&lt;= kernelSize/<span class="number">2</span>; i++){</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = -kernelSize/<span class="number">2</span>; j&lt;= kernelSize/<span class="number">2</span>; j++){</span><br><span class="line">                    color = QColor(origin-&gt;pixel(x+i, y+j));</span><br><span class="line">                    r += color.red()*kernel[kernelSize/<span class="number">2</span>+i][kernelSize/<span class="number">2</span>+j];</span><br><span class="line">                    g += color.green()*kernel[kernelSize/<span class="number">2</span>+i][kernelSize/<span class="number">2</span>+j];</span><br><span class="line">                    b += color.blue()*kernel[kernelSize/<span class="number">2</span>+i][kernelSize/<span class="number">2</span>+j];</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line"> </span><br><span class="line">            r = qBound(<span class="number">0</span>, r/sumKernel, <span class="number">255</span>);</span><br><span class="line">            g = qBound(<span class="number">0</span>, g/sumKernel, <span class="number">255</span>);</span><br><span class="line">            b = qBound(<span class="number">0</span>, b/sumKernel, <span class="number">255</span>);</span><br><span class="line"> </span><br><span class="line">            newImage-&gt;setPixel(x,y, qRgb(r,g,b));</span><br><span class="line"> </span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> newImage;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="锐化"><a href="#锐化" class="headerlink" title="锐化"></a>锐化</h2><p>像模糊中一样，锐化一张图片也会使用一个卷积滤波器，但是kernel矩阵是不一样的，相邻像素对应的值是负的。</p><p>锐化能够处理模糊的照片，能够提升细节。</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">QImage * MainWindow::sharpen(QImage * origin){</span><br><span class="line">    QImage * newImage = <span class="keyword">new</span> QImage(* origin);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">int</span> kernel [<span class="number">3</span>][<span class="number">3</span>]= {{<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>},</span><br><span class="line">                        {<span class="number">-1</span>,<span class="number">5</span>,<span class="number">-1</span>},</span><br><span class="line">                        {<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>}};</span><br><span class="line">    <span class="keyword">int</span> kernelSize = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">int</span> sumKernel = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> r,g,b;</span><br><span class="line">    QColor color;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x=kernelSize/<span class="number">2</span>; x&lt;newImage-&gt;width()-(kernelSize/<span class="number">2</span>); x++){</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> y=kernelSize/<span class="number">2</span>; y&lt;newImage-&gt;height()-(kernelSize/<span class="number">2</span>); y++){</span><br><span class="line"> </span><br><span class="line">            r = <span class="number">0</span>;</span><br><span class="line">            g = <span class="number">0</span>;</span><br><span class="line">            b = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = -kernelSize/<span class="number">2</span>; i&lt;= kernelSize/<span class="number">2</span>; i++){</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = -kernelSize/<span class="number">2</span>; j&lt;= kernelSize/<span class="number">2</span>; j++){</span><br><span class="line">                    color = QColor(origin-&gt;pixel(x+i, y+j));</span><br><span class="line">                    r += color.red()*kernel[kernelSize/<span class="number">2</span>+i][kernelSize/<span class="number">2</span>+j];</span><br><span class="line">                    g += color.green()*kernel[kernelSize/<span class="number">2</span>+i][kernelSize/<span class="number">2</span>+j];</span><br><span class="line">                    b += color.blue()*kernel[kernelSize/<span class="number">2</span>+i][kernelSize/<span class="number">2</span>+j];</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line"> </span><br><span class="line">            r = qBound(<span class="number">0</span>, r/sumKernel, <span class="number">255</span>);</span><br><span class="line">            g = qBound(<span class="number">0</span>, g/sumKernel, <span class="number">255</span>);</span><br><span class="line">            b = qBound(<span class="number">0</span>, b/sumKernel, <span class="number">255</span>);</span><br><span class="line"> </span><br><span class="line">            newImage-&gt;setPixel(x,y, qRgb(r,g,b));</span><br><span class="line"> </span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> newImage;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="添加相框"><a href="#添加相框" class="headerlink" title="添加相框"></a>添加相框</h2><p>绘制一个相框是非常见到那的，我们只需要把相框在原图上面绘制就可以了。这里假设我们已经有一个和图片一样大小的相框了，不一样的话要resize到一样大。</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">QImage * MainWindow::drawFrame(QImage * origin){</span><br><span class="line">    QImage * newImage = <span class="keyword">new</span> QImage(* origin);</span><br><span class="line">    QPainter painter;</span><br><span class="line"> </span><br><span class="line">    painter.begin(newImage);</span><br><span class="line"> </span><br><span class="line">    painter.drawImage(<span class="number">0</span>,<span class="number">0</span>, QImage(<span class="string">":images/frame.png"</span>));</span><br><span class="line"> </span><br><span class="line">    painter.end();</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> newImage;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><blockquote><p>参考：<a href="https://blog.csdn.net/silangquan/article/details/41008183" target="_blank" rel="noopener">https://blog.csdn.net/silangquan/article/details/41008183</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章主要阐述了如何使用Qt在像素级别上对图像进行操作，并实现了一些图像效果，这些效果主要有：灰度，模糊，锐化，添加相框，金属质感，改变图像饱和度，亮度还有白平衡。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C++" scheme="http://blog.iwxyi.com/tags/C/"/>
    
      <category term="Qt" scheme="http://blog.iwxyi.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>Android ViewPage</title>
    <link href="http://blog.iwxyi.com/2018/10/27/Android-ViewPage/"/>
    <id>http://blog.iwxyi.com/2018/10/27/Android-ViewPage/</id>
    <published>2018-10-27T03:01:00.000Z</published>
    <updated>2019-10-13T03:02:14.655Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>（注：本篇文章的例子使用的是ConstraintLayout布局方式） </p></blockquote><p>ViewPage有两种使用方式，一是直接加载布局文件（使用PagerAdapter），二是加载fragment（使用FragmentPagerAdapter）。</p><a id="more"></a><h2 id="一、直接加载布局文件"><a href="#一、直接加载布局文件" class="headerlink" title="一、直接加载布局文件"></a>一、直接加载布局文件</h2><h3 id="1-在主布局中加入ViewPage"><a href="#1-在主布局中加入ViewPage" class="headerlink" title="1. 在主布局中加入ViewPage"></a>1. 在主布局中加入ViewPage</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">android.support.constraint.ConstraintLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">tools:context</span>=<span class="string">"com.example.test.MainActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">android.support.v4.view.ViewPager</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/viewPage"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintLeft_toLeftOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintRight_toRightOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span>&gt;</span><span class="tag">&lt;/<span class="name">android.support.v4.view.ViewPager</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.constraint.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="2-新建三个layout"><a href="#2-新建三个layout" class="headerlink" title="2. 新建三个layout"></a>2. 新建三个layout</h3><p>为了方便我们新建三个基本一样的layout。<br>layout1：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">android.support.constraint.ConstraintLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"layout1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintLeft_toLeftOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintRight_toRightOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintVertical_bias</span>=<span class="string">"0.498"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:layout_constraintBottom_creator</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:layout_constraintLeft_creator</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:layout_constraintRight_creator</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:layout_constraintTop_creator</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginLeft</span>=<span class="string">"0dp"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.constraint.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>这三个布局是添加到ViewPage中的，里面的内容非常简单，当然我们只是为了测试，你可以在其中加入更多的东西。</p><h3 id="3-适配器PagerAdapter"><a href="#3-适配器PagerAdapter" class="headerlink" title="3. 适配器PagerAdapter"></a>3. 适配器PagerAdapter</h3><p>新建ViewPageAdapter继承自PagerAdapter：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.support.v4.view.PagerAdapter;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewPageAdapter</span> <span class="keyword">extends</span> <span class="title">PagerAdapter</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> List&lt;View&gt; list;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ViewPageAdapter</span><span class="params">(List&lt;View&gt; list)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.list = list;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回要滑动的VIew的个数</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> list.size();</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isViewFromObject</span><span class="params">(View view, Object object)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> view == object;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 做了两件事，第一：将当前视图添加到container中，第二：返回当前View</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">instantiateItem</span><span class="params">(ViewGroup container, <span class="keyword">int</span> position)</span> </span>{</span><br><span class="line">        container.addView(list.get(position));</span><br><span class="line">        <span class="keyword">return</span> list.get(position);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 从当前container中删除指定位置（position）的View</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroyItem</span><span class="params">(ViewGroup container, <span class="keyword">int</span> position, Object object)</span> </span>{</span><br><span class="line">        container.removeView(list.get(position));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="4-在Activity中配置ViewPage"><a href="#4-在Activity中配置ViewPage" class="headerlink" title="4. 在Activity中配置ViewPage"></a>4. 在Activity中配置ViewPage</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.support.v4.view.ViewPager;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.LayoutInflater;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> View view1, view2, view3;</span><br><span class="line">    <span class="keyword">private</span> List&lt;View&gt; viewList;<span class="comment">//view数组</span></span><br><span class="line">    <span class="keyword">private</span> ViewPager viewPager;  <span class="comment">//对应的viewPager</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        viewPager = (ViewPager) findViewById(R.id.viewPage);</span><br><span class="line">        LayoutInflater inflater=getLayoutInflater();</span><br><span class="line">        view1 = inflater.inflate(R.layout.layout1, <span class="keyword">null</span>);</span><br><span class="line">        view2 = inflater.inflate(R.layout.layout2,<span class="keyword">null</span>);</span><br><span class="line">        view3 = inflater.inflate(R.layout.layout3, <span class="keyword">null</span>);</span><br><span class="line">    </span><br><span class="line">        viewList = <span class="keyword">new</span> ArrayList&lt;View&gt;();<span class="comment">// 将要分页显示的View装入数组中</span></span><br><span class="line">        viewList.add(view1);</span><br><span class="line">        viewList.add(view2);</span><br><span class="line">        viewList.add(view3);</span><br><span class="line">    </span><br><span class="line">        ViewPageAdapter adapter = <span class="keyword">new</span> ViewPageAdapter(viewList);</span><br><span class="line">        viewPager.setAdapter(adapter);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>上面的代码将layout加载到view中，把view放到数组中并设置到Adapter中，最后给ViewPage设置Adapter。到这里第一种方式实现ViewPage就完成了。</p><hr><h2 id="二、加载fragment"><a href="#二、加载fragment" class="headerlink" title="二、加载fragment"></a>二、加载fragment</h2><p>通过加载fragment设置ViewPage与第一种方式的前两步一样，加载主布局和新建三个layout这里省略直接进行第三步。</p><h3 id="3-新建fragment"><a href="#3-新建fragment" class="headerlink" title="3. 新建fragment"></a>3. 新建fragment</h3><p>fragment1：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.test;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.app.Fragment;</span><br><span class="line"><span class="keyword">import</span> android.view.LayoutInflater;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A simple {<span class="doctag">@link</span> Fragment} subclass.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fragment1</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>{</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Fragment1</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="comment">// Required empty public constructor</span></span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container,</span></span></span><br><span class="line"><span class="function"><span class="params">                             Bundle savedInstanceState)</span> </span>{</span><br><span class="line">        View rootView=inflater.inflate(R.layout.layout1, container, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">return</span> rootView;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>代码很简单，这里新建了三个fragment，分别加载三个layout。</p><h3 id="4-适配器FragmentPagerAdapter"><a href="#4-适配器FragmentPagerAdapter" class="headerlink" title="4. 适配器FragmentPagerAdapter"></a>4. 适配器FragmentPagerAdapter</h3><p>新建ViewPageFragmentAdapter继承自FragmentPagerAdapter：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.support.v4.app.Fragment;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.app.FragmentManager;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.app.FragmentPagerAdapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Administrator on 2017/7/11.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewPageFragmentAdapter</span> <span class="keyword">extends</span> <span class="title">FragmentPagerAdapter</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Fragment&gt; fragmentList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ViewPageFragmentAdapter</span><span class="params">(FragmentManager fm)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>(fm);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFragment</span><span class="params">(Fragment fragment)</span> </span>{</span><br><span class="line">        fragmentList.add(fragment);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Fragment <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> fragmentList.get(position);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> fragmentList.size();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>除了必须要实现的几个方法外，这里我自定义了一个方法addFragment()，用于将fragment传递进来。</p><h3 id="5-在Activity中配置ViewPage"><a href="#5-在Activity中配置ViewPage" class="headerlink" title="5. 在Activity中配置ViewPage"></a>5. 在Activity中配置ViewPage</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.support.v4.view.ViewPager;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.LayoutInflater;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ViewPager viewPager;  <span class="comment">//对应的viewPager</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        viewPager = (ViewPager) findViewById(R.id.viewPage);</span><br><span class="line">    </span><br><span class="line">        ViewPageFragmentAdapter adapter = <span class="keyword">new</span> ViewPageFragmentAdapter(getSupportFragmentManager());</span><br><span class="line">        adapter.addFragment(<span class="keyword">new</span> Fragment1());</span><br><span class="line">        adapter.addFragment(<span class="keyword">new</span> Fragment2());</span><br><span class="line">        adapter.addFragment(<span class="keyword">new</span> Fragment3());</span><br><span class="line">        viewPager.setAdapter(adapter);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>新建适配器，将fragment加入到适配器中并给ViewPage设置适配器。</p><hr><blockquote><p>参考：<a href="https://blog.csdn.net/shanshui911587154/article/details/74963447" target="_blank" rel="noopener">https://blog.csdn.net/shanshui911587154/article/details/74963447</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;（注：本篇文章的例子使用的是ConstraintLayout布局方式） &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ViewPage有两种使用方式，一是直接加载布局文件（使用PagerAdapter），二是加载fragment（使用FragmentPagerAdapter）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="Android" scheme="http://blog.iwxyi.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android Fragment用法</title>
    <link href="http://blog.iwxyi.com/2018/10/23/Android-Fragment%E7%94%A8%E6%B3%95/"/>
    <id>http://blog.iwxyi.com/2018/10/23/Android-Fragment用法/</id>
    <published>2018-10-23T02:44:00.000Z</published>
    <updated>2019-10-13T02:47:44.248Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Android-Fragment-简单实例"><a href="#Android-Fragment-简单实例" class="headerlink" title="Android Fragment 简单实例"></a>Android Fragment 简单实例</h2><a id="more"></a><blockquote><p>这里用的是<code>import android.support.v4.app.FragmentTransaction</code>，而不是<code>import android.app.FragmentTransaction</code>，后者会报错的。</p></blockquote><p><strong>Fragment</strong></p><p><strong>在 <code>onCreateView</code>这里初始化控件</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span></span>{</span><br><span class="line">  <span class="keyword">private</span> TextView tv;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container,</span></span></span><br><span class="line"><span class="function"><span class="params">       Bundle savedInstanceState)</span> </span>{</span><br><span class="line">    View messageLayout = inflater.inflate(R.layout.message, container, <span class="keyword">false</span>);</span><br><span class="line">    tv=(TextView) messageLayout.findViewById(R.id.message);</span><br><span class="line">    tv.setText(<span class="string">"哈哈哈哈哈哈"</span>);</span><br><span class="line">    <span class="keyword">return</span> messageLayout;</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>Activity</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">OnClickListener</span> </span>{</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 用于展示消息的Fragment</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> MessageFragment messageFragment;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 用于展示联系人的Fragment</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> ContactsFragment contactsFragment;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 用于展示动态的Fragment</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> NewsFragment newsFragment;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 用于展示设置的Fragment</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> SettingFragment settingFragment;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 消息界面布局</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> View messageLayout;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 联系人界面布局</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> View contactsLayout;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 动态界面布局</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> View newsLayout;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 设置界面布局</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> View settingLayout;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 用于对Fragment进行管理</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> FragmentManager fragmentManager;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>{</span><br><span class="line">   <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">   setContentView(R.layout.activity_main);</span><br><span class="line">   initViews();</span><br><span class="line">   fragmentManager = getFragmentManager();</span><br><span class="line">   <span class="comment">// 第一次启动时选中第0个tab</span></span><br><span class="line">   setTabSelection(<span class="number">0</span>);</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 在这里获取到每个需要用到的控件的实例，并给它们设置好必要的点击事件。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initViews</span><span class="params">()</span> </span>{</span><br><span class="line">   messageLayout = findViewById(R.id.message_layout);</span><br><span class="line">   contactsLayout = findViewById(R.id.contacts_layout);</span><br><span class="line">   newsLayout = findViewById(R.id.news_layout);</span><br><span class="line">   settingLayout = findViewById(R.id.setting_layout);</span><br><span class="line">   messageLayout.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">   contactsLayout.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">   newsLayout.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">   settingLayout.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>{</span><br><span class="line">   <span class="keyword">switch</span> (v.getId()) {</span><br><span class="line">   <span class="keyword">case</span> R.id.message_layout:</span><br><span class="line">     <span class="comment">// 当点击了消息tab时，选中第1个tab</span></span><br><span class="line">     setTabSelection(<span class="number">0</span>);</span><br><span class="line">     <span class="keyword">break</span>;</span><br><span class="line">   <span class="keyword">case</span> R.id.contacts_layout:</span><br><span class="line">     <span class="comment">// 当点击了联系人tab时，选中第2个tab</span></span><br><span class="line">     setTabSelection(<span class="number">1</span>);</span><br><span class="line">     <span class="keyword">break</span>;</span><br><span class="line">   <span class="keyword">case</span> R.id.news_layout:</span><br><span class="line">      <span class="comment">// 当点击了动态tab时，选中第3个tab</span></span><br><span class="line">      setTabSelection(<span class="number">2</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">   <span class="keyword">case</span> R.id.setting_layout:</span><br><span class="line">       <span class="comment">// 当点击了设置tab时，选中第4个tab</span></span><br><span class="line">      setTabSelection(<span class="number">3</span>);</span><br><span class="line">       <span class="keyword">break</span>;</span><br><span class="line">   <span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 根据传入的index参数来设置选中的tab页。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">* 每个tab页对应的下标。0表示消息，1表示联系人，2表示动态，3表示设置。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setTabSelection</span><span class="params">(<span class="keyword">int</span> index)</span> </span>{</span><br><span class="line">   <span class="comment">// 每次选中之前先清楚掉上次的选中状态</span></span><br><span class="line">   clearSelection();</span><br><span class="line">   <span class="comment">// 开启一个Fragment事务</span></span><br><span class="line">   FragmentTransaction transaction = fragmentManager.beginTransaction();</span><br><span class="line">   <span class="comment">// 先隐藏掉所有的Fragment，以防止有多个Fragment显示在界面上的情况</span></span><br><span class="line">   hideFragments(transaction);</span><br><span class="line">   <span class="keyword">switch</span> (index) {</span><br><span class="line">   <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">     messageLayout.setBackgroundColor(<span class="number">0xff0000ff</span>);</span><br><span class="line"> </span><br><span class="line">     <span class="keyword">if</span> (messageFragment == <span class="keyword">null</span>) {</span><br><span class="line">       <span class="comment">// 如果MessageFragment为空，则创建一个并添加到界面上</span></span><br><span class="line">        messageFragment = <span class="keyword">new</span> MessageFragment();</span><br><span class="line">       transaction.add(R.id.content, messageFragment);</span><br><span class="line">     } <span class="keyword">else</span> {</span><br><span class="line">       <span class="comment">// 如果MessageFragment不为空，则直接将它显示出来</span></span><br><span class="line">       transaction.show(messageFragment);</span><br><span class="line">     }</span><br><span class="line">     <span class="keyword">break</span>;</span><br><span class="line">   <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="comment">// 当点击了联系人tab时，改变控件的图片和文字颜色</span></span><br><span class="line">    contactsLayout.setBackgroundColor(<span class="number">0xff0000ff</span>);</span><br><span class="line">    <span class="keyword">if</span> (contactsFragment == <span class="keyword">null</span>) {</span><br><span class="line">     <span class="comment">// 如果ContactsFragment为空，则创建一个并添加到界面上</span></span><br><span class="line">     contactsFragment = <span class="keyword">new</span> ContactsFragment();</span><br><span class="line">     transaction.add(R.id.content, contactsFragment);</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">     <span class="comment">// 如果ContactsFragment不为空，则直接将它显示出来</span></span><br><span class="line">     transaction.show(contactsFragment);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">   <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="comment">// 当点击了动态tab时，改变控件的图片和文字颜色</span></span><br><span class="line">     newsLayout.setBackgroundColor(<span class="number">0xff0000ff</span>);</span><br><span class="line">     <span class="keyword">if</span> (newsFragment == <span class="keyword">null</span>) {</span><br><span class="line">      <span class="comment">// 如果NewsFragment为空，则创建一个并添加到界面上</span></span><br><span class="line">       newsFragment = <span class="keyword">new</span> NewsFragment();</span><br><span class="line">       transaction.add(R.id.content, newsFragment);</span><br><span class="line">     } <span class="keyword">else</span> {</span><br><span class="line">      <span class="comment">// 如果NewsFragment不为空，则直接将它显示出来</span></span><br><span class="line">      transaction.show(newsFragment);</span><br><span class="line">     }</span><br><span class="line">     <span class="keyword">break</span>;</span><br><span class="line">   <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">     <span class="keyword">default</span>:</span><br><span class="line">     <span class="comment">// 当点击了设置tab时，改变控件的图片和文字颜色</span></span><br><span class="line">     settingLayout.setBackgroundColor(<span class="number">0xff0000ff</span>);</span><br><span class="line">     <span class="keyword">if</span> (settingFragment == <span class="keyword">null</span>) {</span><br><span class="line">     <span class="comment">// 如果SettingFragment为空，则创建一个并添加到界面上</span></span><br><span class="line">     settingFragment = <span class="keyword">new</span> SettingFragment();</span><br><span class="line">     transaction.add(R.id.content, settingFragment);</span><br><span class="line">     } <span class="keyword">else</span> {</span><br><span class="line">     <span class="comment">// 如果SettingFragment不为空，则直接将它显示出来</span></span><br><span class="line">     transaction.show(settingFragment);</span><br><span class="line">     }</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  }</span><br><span class="line"> transaction.commit();</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 将所有的Fragment都置为隐藏状态。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> transaction</span></span><br><span class="line"><span class="comment">* 用于对Fragment执行操作的事务</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">hideFragments</span><span class="params">(FragmentTransaction transaction)</span> </span>{</span><br><span class="line">   <span class="keyword">if</span> (messageFragment != <span class="keyword">null</span>) {</span><br><span class="line">     transaction.hide(messageFragment);</span><br><span class="line">   }</span><br><span class="line">    <span class="keyword">if</span> (contactsFragment != <span class="keyword">null</span>) {</span><br><span class="line">     transaction.hide(contactsFragment);</span><br><span class="line">   }</span><br><span class="line">    <span class="keyword">if</span> (newsFragment != <span class="keyword">null</span>) {</span><br><span class="line">      transaction.hide(newsFragment);</span><br><span class="line">   }</span><br><span class="line">   <span class="keyword">if</span> (settingFragment != <span class="keyword">null</span>) {</span><br><span class="line">     transaction.hide(settingFragment);</span><br><span class="line">   }</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 清除掉所有的选中状态。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">clearSelection</span><span class="params">()</span> </span>{</span><br><span class="line">   messageLayout.setBackgroundColor(<span class="number">0xffffffff</span>);</span><br><span class="line">   contactsLayout.setBackgroundColor(<span class="number">0xffffffff</span>);</span><br><span class="line">   newsLayout.setBackgroundColor(<span class="number">0xffffffff</span>);</span><br><span class="line">   settingLayout.setBackgroundColor(<span class="number">0xffffffff</span>);</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><blockquote><p>参考：<a href="https://www.jb51.net/article/138944.htm" target="_blank" rel="noopener">https://www.jb51.net/article/138944.htm</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Android-Fragment-简单实例&quot;&gt;&lt;a href=&quot;#Android-Fragment-简单实例&quot; class=&quot;headerlink&quot; title=&quot;Android Fragment 简单实例&quot;&gt;&lt;/a&gt;Android Fragment 简单实例&lt;/h2&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="Android" scheme="http://blog.iwxyi.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>睡眠排序法Java版</title>
    <link href="http://blog.iwxyi.com/2018/10/16/%E7%9D%A1%E7%9C%A0%E6%8E%92%E5%BA%8F%E6%B3%95Java%E7%89%88/"/>
    <id>http://blog.iwxyi.com/2018/10/16/睡眠排序法Java版/</id>
    <published>2018-10-16T05:28:00.000Z</published>
    <updated>2019-10-13T05:28:59.350Z</updated>
    
    <content type="html"><![CDATA[<p>基本思想：根据CPU的调度算法实现，对一组数据进行排序，不能存在负数值。</p><p>这个数是多大，那么就在线程里睡眠它的10倍再加10。</p><p>不是睡眠和它的数值一样大的原因是，当数值太小时，误差太大，睡眠的时间不比输出的时间少，那么就会存在不正确的输出结果。</p><a id="more"></a><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SleepSort</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">int</span>[] arr = {<span class="number">1</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">5</span>};</span><br><span class="line">        <span class="comment">//创建指定长度的线程数组</span></span><br><span class="line">        SortThread[] sortThreads = <span class="keyword">new</span> SortThread[arr.length];</span><br><span class="line">        <span class="comment">//指定每个线程数组的值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sortThreads.length; i++) {</span><br><span class="line">            sortThreads[i] = <span class="keyword">new</span> SortThread(arr[i]);</span><br><span class="line">        } </span><br><span class="line">        <span class="comment">//开启每个线程</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sortThreads.length; i++) {</span><br><span class="line">            sortThreads[i].start();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SortThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>{</span><br><span class="line">    <span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SortThread</span><span class="params">(<span class="keyword">int</span> s)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.s = s;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            sleep(s*<span class="number">10</span>+<span class="number">10</span>);  <span class="comment">//睡眠指定的时间</span></span><br><span class="line">        } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//输出该数</span></span><br><span class="line">        System.out.println(s);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;基本思想：根据CPU的调度算法实现，对一组数据进行排序，不能存在负数值。&lt;/p&gt;
&lt;p&gt;这个数是多大，那么就在线程里睡眠它的10倍再加10。&lt;/p&gt;
&lt;p&gt;不是睡眠和它的数值一样大的原因是，当数值太小时，误差太大，睡眠的时间不比输出的时间少，那么就会存在不正确的输出结果。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="Java" scheme="http://blog.iwxyi.com/tags/Java/"/>
    
      <category term="算法" scheme="http://blog.iwxyi.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Android CardView用法</title>
    <link href="http://blog.iwxyi.com/2018/10/14/Android-CardView%E7%94%A8%E6%B3%95/"/>
    <id>http://blog.iwxyi.com/2018/10/14/Android-CardView用法/</id>
    <published>2018-10-14T02:38:00.000Z</published>
    <updated>2019-10-13T03:01:08.475Z</updated>
    
    <content type="html"><![CDATA[<p>今天主要是CardView的用法，CardView是在安卓5.0提出的卡片式控件。首先介绍一下它的配置。<br>在gradle文件下添加依赖库：</p><a id="more"></a><p>compile ‘com.android.support:cardview-v7:22.2.1’</p><p>新版建议吧compile改成implementation，注意版本也要改</p><p><code>import android.support.v7.widget.CardView;</code></p><p>其次介绍一下它的基本属性： </p><ul><li><strong>app:cardBackgroundColor</strong>这是设置背景颜色 </li><li><strong>app:cardCornerRadius</strong>这是设置圆角大小 </li><li><strong>app:cardElevation</strong>这是设置z轴的阴影 </li><li>app:cardMaxElevation这是设置z轴的最大高度值 </li><li>app:cardUseCompatPadding是否使用CompatPadding </li><li>app:cardPreventCornerOverlap是否使用PreventCornerOverlap </li><li>app:contentPadding 设置内容的padding </li><li>app:contentPaddingLeft 设置内容的左padding </li><li>app:contentPaddingTop 设置内容的上padding </li><li>app:contentPaddingRight 设置内容的右padding </li><li>app:contentPaddingBottom 设置内容的底padding</li></ul><p>CardView是在布局中使用的：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line">&lt;FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"</span><br><span class="line">    xmlns:app="http://schemas.android.com/apk/res-auto"</span><br><span class="line">    android:layout_width="match_parent"</span><br><span class="line">    android:layout_height="wrap_content"</span><br><span class="line">    android:layout_marginBottom="10dp"</span><br><span class="line">    android:background="@color/gray"&gt;</span><br><span class="line"></span><br><span class="line">    &lt;android.support.v7.widget.CardView</span><br><span class="line">        android:layout_width="match_parent"</span><br><span class="line">        android:layout_height="match_parent"</span><br><span class="line">        android:layout_marginLeft="10dp"</span><br><span class="line">        android:layout_marginRight="10dp"</span><br><span class="line">        app:cardBackgroundColor="@color/blue"</span><br><span class="line">        app:cardCornerRadius="16dp"</span><br><span class="line">        app:cardElevation="16dp"&gt;</span><br><span class="line"></span><br><span class="line">        &lt;TextView</span><br><span class="line">            android:id="@+id/id_num"</span><br><span class="line">            android:layout_width="wrap_content"</span><br><span class="line">            android:layout_height="wrap_content"</span><br><span class="line">            android:layout_gravity="center"</span><br><span class="line">            android:layout_margin="10dp"</span><br><span class="line">            android:gravity="center"</span><br><span class="line">            android:textColor="@color/white"</span><br><span class="line">            android:textSize="20sp" /&gt;</span><br><span class="line">    &lt;/android.support.v7.widget.CardView&gt;</span><br><span class="line">&lt;/FrameLayout&gt;</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天主要是CardView的用法，CardView是在安卓5.0提出的卡片式控件。首先介绍一下它的配置。&lt;br&gt;在gradle文件下添加依赖库：&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="Android" scheme="http://blog.iwxyi.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>PHP调用Python并获取返回值</title>
    <link href="http://blog.iwxyi.com/2018/10/11/PHP%E8%B0%83%E7%94%A8Python%E5%B9%B6%E8%8E%B7%E5%8F%96%E8%BF%94%E5%9B%9E%E5%80%BC/"/>
    <id>http://blog.iwxyi.com/2018/10/11/PHP调用Python并获取返回值/</id>
    <published>2018-10-11T08:27:00.000Z</published>
    <updated>2019-10-13T11:29:20.058Z</updated>
    
    <content type="html"><![CDATA[## 一：php调用python脚本 并传入参数，并接收返回值<p>php调用python脚本可以用 <code>system()</code>，<code>exec()</code>和<code>passthru()</code> 函数，本篇文章主要介绍<code>exec</code> 函数</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdn.net/20180810085328518?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NDkwNzEz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><a id="more"></a><p>exec有三个参数，第一个参数为一个字符串，包括三个子串，起一个子串为使用的当前系统的解释器，如果直接写python则默认为系统默认的解释器，也可以指定本地python.exe 的路径。第二个子串为所要执行的python脚本的位置。第三个子串为所需传入的参数不限个数，中间用空格分隔，注意格式。子串间空格分割。</p><p>tips:如果使用相对路径指定脚本位置，或者在python脚本中使用了文件的相对路径，都需要改为当前php文件所对应的相对路径。</p><p>第二个参数是php接收的python脚本的返回值，注意，此处的$out中存放的并非python中return的值，并且所有return的值都不会进行保存，$out中存放的是python脚本中输出的值，即为print（）函数所输出的所有数据，每次print（）都会记录为一条字典数据，组合成array数组如下图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdn.net/20180810085356877?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NDkwNzEz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>第三个参数为执行情况的状态码，如果执行成功，返回0，否则返回一个非0数</p><h2 id="二：python获取php传递参数"><a href="#二：python获取php传递参数" class="headerlink" title="二：python获取php传递参数"></a>二：python获取php传递参数</h2><p>导入sys包</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdn.net/20180809201453447?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NDkwNzEz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p>使用sys.argv[ ]数组获取传入参数，第一个传入参数为sys.argv[1],第二个为sys.argv[2]以此类推，不要使用argv【0】</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdn.net/20180810085414603?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NDkwNzEz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p><strong>tips</strong>:如果要获取python脚本的返回值，直接在python脚本中print（）出来，$out数组会自动记录，而system（）和passthru（）在获取返回值上存在一定缺陷。使用数组作为参数，python接收时会将数组变为一个“Arrqy”字符串，所以本文的解决方案为将传入数组写成字符串，在python中重新分割为数组。</p><blockquote><p>在linux上使用php调用python 可能会出现文件写入权限的问题，需要更改文件的读写权限。在linux上调用python脚本时一定要明确指出exec（）函数中python 的绝对路径并安装好所有需要的包，否则会报错</p></blockquote><hr><blockquote><p>参考：<a href="https://blog.csdn.net/qq_39490713/article/details/81543174?utm_source=copy" target="_blank" rel="noopener">https://blog.csdn.net/qq_39490713/article/details/81543174?utm_source=copy</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      ## 一：php调用python脚本 并传入参数，并接收返回值

&lt;p&gt;php调用python脚本可以用 &lt;code&gt;system()&lt;/code&gt;，&lt;code&gt;exec()&lt;/code&gt;和&lt;code&gt;passthru()&lt;/code&gt; 函数，本篇文章主要介绍&lt;code&gt;exec&lt;/code&gt; 函数&lt;/p&gt;
&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                    &lt;img src=&quot;https://img-blog.csdn.net/20180810085328518?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NDkwNzEz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&quot; alt=&quot;&quot; title=&quot;&quot;&gt;
                &lt;/div&gt;
                &lt;div class=&quot;image-caption&quot;&gt;&lt;/div&gt;
            &lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="PHP" scheme="http://blog.iwxyi.com/tags/PHP/"/>
    
      <category term="Python" scheme="http://blog.iwxyi.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu安装Apache2和PHP</title>
    <link href="http://blog.iwxyi.com/2018/10/11/Ubuntu%E5%AE%89%E8%A3%85Apache2%E5%92%8CPHP/"/>
    <id>http://blog.iwxyi.com/2018/10/11/Ubuntu安装Apache2和PHP/</id>
    <published>2018-10-11T06:04:00.000Z</published>
    <updated>2019-10-13T06:05:06.978Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装Apache2和PHP："><a href="#安装Apache2和PHP：" class="headerlink" title="安装Apache2和PHP："></a>安装Apache2和PHP：</h1><p><strong>安装 Apache2：</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install apache2</span><br></pre></td></tr></tbody></table></figure><p><strong>安装PHP模块：</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install php5</span><br></pre></td></tr></tbody></table></figure><p><strong>安装Mysql</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install mysql-server</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><p>其他模块安装：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libapache2-mod-php5</span><br><span class="line">sudo apt-get install libapache2-mod-auth-mysql</span><br><span class="line">sudo apt-get install php5-mysql</span><br><span class="line">sudo apt-get install php5-gd</span><br></pre></td></tr></tbody></table></figure><p>前两个很容易明白，要想apache能够解析PHP，就需要借助这两个模块来找到php engine。第三个在php操作mysql数据库时用到，大多数人都有数据库编程经验，所以这就不用多解释了。第四个GD库。</p><p><strong>1.apache根目录</strong></p><p>安装完apache2，根目录在/var/www下，可以通过<a href="http://localhost/测试一下是否好用。当然也可以在该目录下新建一个文件test.html来试一试http://localhost/test.html。" target="_blank" rel="noopener">http://localhost/测试一下是否好用。当然也可以在该目录下新建一个文件test.html来试一试http://localhost/test.html。</a></p><p>（好像是在<code>/var/www/html/</code>诶）</p><p><strong>2.改变apache2的默认目录到当前的开发目录</strong></p><p>apache2的默认目录配置在/etc/apache2/sites-enabled/00default文件中。</p><p>找到该文件中的DocumentRoot项，将/var/www改为你的开发目录就OK了。</p><p>当然，还有一种方法就是不改变默认目录，只是在var/www下建立一个到你的目录的链接。比如你的目录在/home/username/phptest，那么你只要</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s/home/username/phptest /var/www/phptest</span><br></pre></td></tr></tbody></table></figure><p>这样你就可以通过<a href="http://localhost/phptest访问你的工作目录了。" target="_blank" rel="noopener">http://localhost/phptest访问你的工作目录了。</a></p><p><strong>3、配置中常用命令</strong></p><p>重启apache</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/apache2 restart</span><br></pre></td></tr></tbody></table></figure><hr><h1 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h1><h2 id="Apache2启动失败"><a href="#Apache2启动失败" class="headerlink" title="Apache2启动失败"></a>Apache2启动失败</h2><p>在安装完成后就会显示这错误。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/apache2/apache2.conf</span><br></pre></td></tr></tbody></table></figure><p>最后加入一句: <code>ServerName localhost:80</code></p><h2 id="找不到PHP7-0"><a href="#找不到PHP7-0" class="headerlink" title="找不到PHP7.0"></a>找不到PHP7.0</h2><p><code>Couldn't find any package by regex 'php-7.0'</code></p><p>更新包源：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-add-repository ppa:ondrej/php</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install php7.0</span><br></pre></td></tr></tbody></table></figure><h2 id="端口被占用"><a href="#端口被占用" class="headerlink" title="端口被占用"></a>端口被占用</h2><p><code>Address already in use: AH00072: make_sock: could not bind to address 0.0.0.0:80</code></p><ol><li>用<code>netstat -nlp |grep :80</code>命令看看有什么进程占用了80端口</li><li>例如Nginx，用<code>pkill -9 nginx</code>杀死进程</li><li>再次启动Apache</li></ol><h2 id="启动失败"><a href="#启动失败" class="headerlink" title="启动失败"></a>启动失败</h2><p><code>Segmentation fault</code></p><p>``Action ‘start’ failed.`</p><p>是因为装了多个PHP……彻底卸载PHP，重装即可。</p><hr><h1 id="其他教程"><a href="#其他教程" class="headerlink" title="其他教程"></a>其他教程</h1><h2 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h2><p>sudo apt-get install apache2<br>sudo apt-get install php7.0<br>php -v 查看PHP是否安装成功<br>sudo apt-get install libapache2-mod-php7.0<br>cd /var/www/html 切换到apache项目目录下， 新建文件：sudo vim test.php<br>//vim显示行号：：set nu<br>sudo apt-get install mysql-server mysql-client<br>//mysql设置密码   用户名root<br>//mysql -V 查看安装的版本信息<br>安装php的mysql插件：sudo apt-get install php7.0-mysql<br>安装一些常用的php扩展；sudo apt-get install php7.0-gd php7.0-mbstring php7.0-xml<br>安装composer：sudo apt-get install composer</p><blockquote><p>博客来源：<a href="https://blog.csdn.net/u010071211/article/details/79511928" target="_blank" rel="noopener">https://blog.csdn.net/u010071211/article/details/79511928</a></p></blockquote><h2 id="彻底卸载PHP7"><a href="#彻底卸载PHP7" class="headerlink" title="彻底卸载PHP7"></a>彻底卸载PHP7</h2><p><strong>一、删除php的相关包及配置</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get autoremove php7*</span><br></pre></td></tr></tbody></table></figure><p><strong>二、删除关联</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo find /etc -name "*php*" |xargs rm -rf</span><br></pre></td></tr></tbody></table></figure><p><strong>三、清除dept列表</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt purge `dpkg -l | grep php| awk '{print $2}' |tr "\n" " "`</span><br></pre></td></tr></tbody></table></figure><p><strong>四、检查是否卸载干净（无返回就是卸载完成）</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg -l | grep php7.0</span><br></pre></td></tr></tbody></table></figure><h2 id="移动上传的文件失败"><a href="#移动上传的文件失败" class="headerlink" title="移动上传的文件失败"></a>移动上传的文件失败</h2><p><code>move_upload_file</code></p><p>权限问题</p><p><code>/tmp</code>的权限是<code>drwxrwxrwx</code>，而我的<code>/var/www/html</code> 权限为<code>drwxr-xr-x</code></p><p>修改所在文件夹的权限：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod -R 777 /home</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;安装Apache2和PHP：&quot;&gt;&lt;a href=&quot;#安装Apache2和PHP：&quot; class=&quot;headerlink&quot; title=&quot;安装Apache2和PHP：&quot;&gt;&lt;/a&gt;安装Apache2和PHP：&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;安装 Apache2：&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get install apache2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;安装PHP模块：&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get install php5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;安装Mysql&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get install mysql-server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="Linux" scheme="http://blog.iwxyi.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Android DrawerLayout用法</title>
    <link href="http://blog.iwxyi.com/2018/10/07/Android-DrawerLayout%E7%94%A8%E6%B3%95/"/>
    <id>http://blog.iwxyi.com/2018/10/07/Android-DrawerLayout用法/</id>
    <published>2018-10-07T02:41:00.000Z</published>
    <updated>2019-10-13T02:48:37.266Z</updated>
    
    <content type="html"><![CDATA[<h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><p><strong>NavigationView</strong>：在Material Design中，Navigation drawer导航抽屉，被设计用于应用导航，提供了一种通用的导航方式，体现了设计的一致性。<br>而NavigationView的典型用途就是配合之前v4包的DrawerLayout，作为其中的Drawer部分，即导航菜单的本体部分。NavigationView是一个导航菜单框架，使用menu资源填充数据，使我们可以更简单高效的实现导航菜单。它提供了不错的默认样式、选中项高亮、分组单选、分组子标题、以及可选的Header。</p><a id="more"></a><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">android.support.v4.widget.DrawerLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/drawer_layout"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">FrameLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span><span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.NavigationView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/nav_view"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"150dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">"start"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"#303030"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:headerLayout</span>=<span class="string">"@layout/nav_header"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:itemIconTint</span>=<span class="string">"@color/white"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:itemTextColor</span>=<span class="string">"@color/white"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:menu</span>=<span class="string">"@menu/nav_menu"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.v4.widget.DrawerLayout</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p><strong>注意其中NavigationView的两个自定义属性</strong><br>app:headerLayout接收一个layout，作为导航菜单顶部的Header，可选项。<br>app:menu接收一个menu，作为导航菜单的菜单项，几乎是必选项，不然这个控件就失去意义了。但也可以在运行时动态改变menu属性。<br>用于NavigationView的典型menu文件，应该是一个可选中菜单项的集合。其中checked=”true”的item将会高亮显示，这可以确保用户知道当前选中的菜单项是哪个。item的选中状态可以在代码中设置，代码如下</p></blockquote><h2 id="nav-menu-xml"><a href="#nav-menu-xml" class="headerlink" title="nav_menu.xml"></a>nav_menu.xml</h2><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">menu</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">group</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/g1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:checkableBehavior</span>=<span class="string">"single"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/nav_queue"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:checkable</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:icon</span>=<span class="string">"@mipmap/queue"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:title</span>=<span class="string">"排队"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/nav_count"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:checkable</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:icon</span>=<span class="string">"@mipmap/count"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:title</span>=<span class="string">"统计"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/nav_tv"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:checkable</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:icon</span>=<span class="string">"@mipmap/tv"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:title</span>=<span class="string">"TV设置"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/nav_more"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:checkable</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:icon</span>=<span class="string">"@mipmap/more"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:title</span>=<span class="string">"更多"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="FragmentActivity-java"><a href="#FragmentActivity-java" class="headerlink" title="FragmentActivity.java"></a>FragmentActivity.java</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeActivity</span> <span class="keyword">extends</span> <span class="title">FragmentActivity</span> <span class="keyword">implements</span> <span class="title">NavigationView</span></span></span><br><span class="line"><span class="class">        .<span class="title">OnNavigationItemSelectedListener</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    @InjectView(R.id.nav_view)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> NavigationView navView;</span><br><span class="line">    <span class="comment">//    @InjectView(R.id.drawer_layout)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> DrawerLayout drawerLayout;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> QueueFragment queueFragment;</span><br><span class="line">    <span class="keyword">private</span> MoreFragment moreFragment;</span><br><span class="line">    <span class="keyword">private</span> CountFragment countFragment;</span><br><span class="line">    <span class="keyword">private</span> TVFragment tvFragment;</span><br><span class="line">    <span class="keyword">private</span> FragmentManager fm;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>.onCreate( savedInstanceState );</span><br><span class="line">        setContentView( R.layout.activity_home );</span><br><span class="line"></span><br><span class="line">        navView = (NavigationView) findViewById( R.id.nav_view );</span><br><span class="line">        drawerLayout = (DrawerLayout) findViewById( R.id.drawer_layout );</span><br><span class="line"><span class="comment">//        ButterKnife.inject( this );</span></span><br><span class="line">        init();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">     <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 初始化，默认选中排队选项</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>{</span><br><span class="line">        fm = getSupportFragmentManager();</span><br><span class="line">        queueFragment = <span class="keyword">new</span> QueueFragment();</span><br><span class="line">        FragmentTransaction ft = fm.beginTransaction();</span><br><span class="line">        ft.add( R.id.content, queueFragment, <span class="string">"queue"</span> ).commit(); <span class="comment">// 别忘了 commit</span></span><br><span class="line"></span><br><span class="line">        navView.setNavigationItemSelectedListener( <span class="keyword">this</span> );</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打开侧滑栏</span></span><br><span class="line"><span class="comment">     *这个方法是在其他类里面调用，点击某个按钮可以调出侧滑栏</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showDrawerLayout</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (!HomeActivity.drawerLayout.isDrawerOpen( HomeActivity.navView )) {</span><br><span class="line">            HomeActivity.drawerLayout.openDrawer( HomeActivity.navView );</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 侧滑栏点击</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onNavigationItemSelected</span><span class="params">(@NonNull MenuItem item)</span> </span>{</span><br><span class="line">        FragmentTransaction ft = fm.beginTransaction();</span><br><span class="line">        hideFragment( ft );</span><br><span class="line">        <span class="keyword">switch</span> (item.getItemId()) {</span><br><span class="line">            <span class="keyword">case</span> R.id.nav_queue:<span class="comment">//排队单击事件</span></span><br><span class="line">                <span class="keyword">if</span> (queueFragment == <span class="keyword">null</span>) {</span><br><span class="line">                    queueFragment = <span class="keyword">new</span> QueueFragment();</span><br><span class="line">                    ft.add( R.id.content, queueFragment, <span class="string">"queue"</span> );</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    ft.show( queueFragment );</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.nav_count:<span class="comment">//统计单击事件</span></span><br><span class="line">                <span class="keyword">if</span> (countFragment == <span class="keyword">null</span>) {</span><br><span class="line">                    countFragment = <span class="keyword">new</span> CountFragment();</span><br><span class="line">                    ft.add( R.id.content, countFragment, <span class="string">"count"</span> );</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    ft.show( countFragment );</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.nav_tv:<span class="comment">//TV设置单机时间</span></span><br><span class="line">                <span class="keyword">if</span> (tvFragment == <span class="keyword">null</span>) {</span><br><span class="line">                    tvFragment = <span class="keyword">new</span> TVFragment();</span><br><span class="line">                    ft.add( R.id.content, tvFragment, <span class="string">"tv"</span> );</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    ft.show( tvFragment );</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.nav_more:<span class="comment">//更多点击事件</span></span><br><span class="line">                <span class="keyword">if</span> (moreFragment == <span class="keyword">null</span>) {</span><br><span class="line">                    moreFragment = <span class="keyword">new</span> MoreFragment();</span><br><span class="line">                    ft.add( R.id.content, moreFragment, <span class="string">"more"</span> );</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    ft.show( moreFragment );</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">        ft.commit(); <span class="comment">// 别忘了这里，不然是不会有效果的</span></span><br><span class="line">        drawerLayout.closeDrawers();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 隐藏fragment</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hideFragment</span><span class="params">(FragmentTransaction ft)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (queueFragment != <span class="keyword">null</span>) {</span><br><span class="line">            ft.hide( queueFragment );</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (moreFragment != <span class="keyword">null</span>) {</span><br><span class="line">            ft.hide( moreFragment );</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (countFragment != <span class="keyword">null</span>) {</span><br><span class="line">            ft.hide( countFragment );</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (tvFragment != <span class="keyword">null</span>) {</span><br><span class="line">            ft.hide( tvFragment );</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这是其中一个子Fragment的例子，其余的都一样</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mxt.net.protect.UI.fragment;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.Nullable;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.app.Fragment;</span><br><span class="line"><span class="keyword">import</span> android.view.LayoutInflater;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mxt.net.protect.R;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Spencer on 2017/3/11.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TVFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> View view;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, @Nullable ViewGroup container, Bundle savedInstanceState)</span> </span>{</span><br><span class="line">        view = inflater.inflate(R.layout.tv_fragment, container, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">return</span> view;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><blockquote><p>参考：<a href="https://blog.csdn.net/u010068253/article/details/70155261" target="_blank" rel="noopener">https://blog.csdn.net/u010068253/article/details/70155261</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;布局&quot;&gt;&lt;a href=&quot;#布局&quot; class=&quot;headerlink&quot; title=&quot;布局&quot;&gt;&lt;/a&gt;布局&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;NavigationView&lt;/strong&gt;：在Material Design中，Navigation drawer导航抽屉，被设计用于应用导航，提供了一种通用的导航方式，体现了设计的一致性。&lt;br&gt;而NavigationView的典型用途就是配合之前v4包的DrawerLayout，作为其中的Drawer部分，即导航菜单的本体部分。NavigationView是一个导航菜单框架，使用menu资源填充数据，使我们可以更简单高效的实现导航菜单。它提供了不错的默认样式、选中项高亮、分组单选、分组子标题、以及可选的Header。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="Android" scheme="http://blog.iwxyi.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Qt仿音乐播放器托盘菜单</title>
    <link href="http://blog.iwxyi.com/2018/10/01/Qt%E4%BB%BF%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8%E6%89%98%E7%9B%98%E8%8F%9C%E5%8D%95/"/>
    <id>http://blog.iwxyi.com/2018/10/01/Qt仿音乐播放器托盘菜单/</id>
    <published>2018-10-01T11:13:00.000Z</published>
    <updated>2019-10-13T12:45:02.928Z</updated>
    
    <content type="html"><![CDATA[<p>QT自定义菜单（仿音乐播放器托盘菜单）</p><a id="more"></a><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> SystemTray::createPlayAction()</span><br><span class="line">{</span><br><span class="line"><span class="comment">// 菜单总控件</span></span><br><span class="line">play_widget = <span class="keyword">new</span> QWidget();</span><br><span class="line">play_widget_action = <span class="keyword">new</span> QWidgetAction(pop_menu);</span><br><span class="line"></span><br><span class="line">play_button = <span class="keyword">new</span> QPushButton();</span><br><span class="line">backward_button = <span class="keyword">new</span> QPushButton();</span><br><span class="line">forward_button = <span class="keyword">new</span> QPushButton();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正在播放的音乐名字</span></span><br><span class="line">music_name_label = <span class="keyword">new</span> QLabel();</span><br><span class="line">music_name_label-&gt;setFixedWidth(MUSIC_NAME_WIDTH);</span><br><span class="line">music_name_label-&gt;setAlignment(Qt::AlignCenter);</span><br><span class="line">music_name_label-&gt;setText('player');</span><br><span class="line">music_name_label-&gt;setEnabled(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 暂停按钮</span></span><br><span class="line">QPixmap play_pixmap(':/action/pause');</span><br><span class="line">play_button-&gt;setIcon(play_pixmap);</span><br><span class="line">play_button-&gt;setIconSize(play_pixmap.size());</span><br><span class="line">play_button-&gt;setObjectName('transparentButton');</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上一曲按钮</span></span><br><span class="line">QPixmap backward_pixmap(':/action/backward');</span><br><span class="line">backward_button-&gt;setIcon(backward_pixmap);</span><br><span class="line">backward_button-&gt;setIconSize(backward_pixmap.size());</span><br><span class="line">backward_button-&gt;setObjectName('transparentButton');</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下一曲按钮</span></span><br><span class="line">QPixmap forward_pixmap(':/action/forward');</span><br><span class="line">forward_button-&gt;setIcon(forward_pixmap);</span><br><span class="line">forward_button-&gt;setIconSize(forward_pixmap.size());</span><br><span class="line">forward_button-&gt;setObjectName('transparentButton');</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置鼠标</span></span><br><span class="line">backward_button-&gt;setCursor(Qt::PointingHandCursor);</span><br><span class="line">play_button-&gt;setCursor(Qt::PointingHandCursor);</span><br><span class="line">forward_button-&gt;setCursor(Qt::PointingHandCursor);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 播放控件布局（横向）</span></span><br><span class="line">QHBoxLayout *layout = <span class="keyword">new</span> QHBoxLayout();</span><br><span class="line">layout-&gt;addWidget(backward_button);</span><br><span class="line">layout-&gt;addWidget(play_button);</span><br><span class="line">layout-&gt;addWidget(forward_button);</span><br><span class="line">layout-&gt;setSpacing(<span class="number">0</span>);</span><br><span class="line">layout-&gt;setContentsMargins(<span class="number">20</span>, <span class="number">0</span>, <span class="number">20</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 总体布局（纵向）</span></span><br><span class="line">QVBoxLayout *layout2 = <span class="keyword">new</span> QVBoxLayout();</span><br><span class="line">layout2-&gt;addLayout(layout);</span><br><span class="line">layout2-&gt;addWidget(music_name_label, <span class="number">0</span>, Qt::AlignCenter);</span><br><span class="line">layout2-&gt;setSpacing(<span class="number">5</span>);</span><br><span class="line">layout2-&gt;setContentsMargins(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">play_widget-&gt;setLayout(layout2);</span><br><span class="line">play_widget_action-&gt;setDefaultWidget(play_widget);</span><br><span class="line"></span><br><span class="line">connect(play_button, &amp;QPushButton::clicked, <span class="keyword">this</span>, &amp;SystemTray::play);</span><br><span class="line">connect(backward_button, &amp;QPushButton::clicked, <span class="keyword">this</span>, &amp;SystemTray::skipBackward);</span><br><span class="line">connect(forward_button, &amp;QPushButton::clicked, <span class="keyword">this</span>, &amp;SystemTray::skipForward);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;QT自定义菜单（仿音乐播放器托盘菜单）&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C++" scheme="http://blog.iwxyi.com/tags/C/"/>
    
      <category term="Qt" scheme="http://blog.iwxyi.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>修电脑</title>
    <link href="http://blog.iwxyi.com/2018/09/24/%E4%BF%AE%E7%94%B5%E8%84%91/"/>
    <id>http://blog.iwxyi.com/2018/09/24/修电脑/</id>
    <published>2018-09-24T12:39:00.000Z</published>
    <updated>2019-10-13T00:25:03.212Z</updated>
    
    <content type="html"><![CDATA[<h2 id="WIN无操作自动休眠"><a href="#WIN无操作自动休眠" class="headerlink" title="WIN无操作自动休眠"></a>WIN无操作自动休眠</h2><p>这是系统<strong>无人值守时睡眠时间</strong>的设定，默认是两分钟。</p><a id="more"></a><p>解决方法：</p><p><code>regedit</code>进入注册表管理器，定位到<code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Power\PowerSettings\238C9FA8-0AAD-41ED-83F4-97BE242C8F20\7bc4a2f9-d8fc-4469-b07b-33eb785aaca0</code>，修改<code>attributes</code>的值为2。</p><p>进入高级电源设置，在睡眠选项中会出现“无人参与系统睡眠超时”，将默认的2分钟修改成你想要的时间。</p><h2 id="开关操作中心"><a href="#开关操作中心" class="headerlink" title="开关操作中心"></a>开关操作中心</h2><p><code>regedit</code>进入注册表编辑器，<code>计算机\HKEY_CURRENT_USER\Software\Policies\Microsoft\Windows\Explorer</code>新建项<code>DisableNotificationCenter</code>，值为1时关闭操作中心。重启电脑生效。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;WIN无操作自动休眠&quot;&gt;&lt;a href=&quot;#WIN无操作自动休眠&quot; class=&quot;headerlink&quot; title=&quot;WIN无操作自动休眠&quot;&gt;&lt;/a&gt;WIN无操作自动休眠&lt;/h2&gt;&lt;p&gt;这是系统&lt;strong&gt;无人值守时睡眠时间&lt;/strong&gt;的设定，默认是两分钟。&lt;/p&gt;
    
    </summary>
    
    
      <category term="修电脑" scheme="http://blog.iwxyi.com/categories/%E4%BF%AE%E7%94%B5%E8%84%91/"/>
    
    
      <category term="Windows" scheme="http://blog.iwxyi.com/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Android RecyclerView添加点击事件</title>
    <link href="http://blog.iwxyi.com/2018/09/22/Android-RecyclerView%E6%B7%BB%E5%8A%A0%E7%82%B9%E5%87%BB%E4%BA%8B%E4%BB%B6/"/>
    <id>http://blog.iwxyi.com/2018/09/22/Android-RecyclerView添加点击事件/</id>
    <published>2018-09-22T02:53:00.000Z</published>
    <updated>2019-10-13T02:54:39.316Z</updated>
    
    <content type="html"><![CDATA[<p>使用 <code>Recyclerview</code> 时，如果要添加 item 的点击监听等功能，可以在 <code>Recyclerview.Adapter</code> 的 <code>onBindViewHolder</code> 中设置</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">holder.tv.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() {</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>{</span><br><span class="line">            <span class="keyword">int</span> pos=holder.getLayoutPosition();</span><br><span class="line">        }</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><p>注意需要把 <code>onBindViewHolder</code> 中的 <code>holder</code> 参数改成 <code>filnal</code> 类型</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用 &lt;code&gt;Recyclerview&lt;/code&gt; 时，如果要添加 item 的点击监听等功能，可以在 &lt;code&gt;Recyclerview.Adapter&lt;/code&gt; 的 &lt;code&gt;onBindViewHolder&lt;/code&gt; 中设置&lt;/p&gt;
&lt;figure 
      
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="Android" scheme="http://blog.iwxyi.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Qt添加Q_OBJECT后编译出错解决方案</title>
    <link href="http://blog.iwxyi.com/2018/09/21/Qt%E6%B7%BB%E5%8A%A0Q-OBJECT%E5%90%8E%E7%BC%96%E8%AF%91%E5%87%BA%E9%94%99%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://blog.iwxyi.com/2018/09/21/Qt添加Q-OBJECT后编译出错解决方案/</id>
    <published>2018-09-21T09:03:00.000Z</published>
    <updated>2019-10-13T09:03:50.469Z</updated>
    
    <content type="html"><![CDATA[<p>在Qt编写过程中，如多线程使用信号槽时，需要添加Q_OBJECT，但是在添加之后发现编译老会出错。如下：</p><a id="more"></a><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadSxxx</span> :</span> <span class="keyword">public</span> QThread</span><br><span class="line">{</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line">ThreadSxxx ();</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line">    signaltrig();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>编译后总是提示 <code>undefined reference to vtable for "xxxx"</code> 的错误问题。</p><p>出现该错误的原因是此时的Q_OBJECT是半途加入的，你需要让项目重新加载编译，解决的办法是直接在.pro文件中<strong>随便改动一点东西</strong>，即使是随便加个空格都可以，此时再编译就可以通过。</p><p>若没有这么做，即使你对整个项目进行清除再重新构建都是不行的。</p><hr><blockquote><p>参考：<a href="https://blog.csdn.net/xzq413520903/article/details/79554318" target="_blank" rel="noopener">https://blog.csdn.net/xzq413520903/article/details/79554318</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Qt编写过程中，如多线程使用信号槽时，需要添加Q_OBJECT，但是在添加之后发现编译老会出错。如下：&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C++" scheme="http://blog.iwxyi.com/tags/C/"/>
    
      <category term="Qt" scheme="http://blog.iwxyi.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>Android点击图片显示像素颜色值</title>
    <link href="http://blog.iwxyi.com/2018/09/16/Android%E7%82%B9%E5%87%BB%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E5%83%8F%E7%B4%A0%E9%A2%9C%E8%89%B2%E5%80%BC/"/>
    <id>http://blog.iwxyi.com/2018/09/16/Android点击图片显示像素颜色值/</id>
    <published>2018-09-16T03:07:00.000Z</published>
    <updated>2019-10-13T03:09:13.043Z</updated>
    
    <content type="html"><![CDATA[<p>包含知识点：</p><ul><li>选择图片（相册+拍照）</li><li>正方形裁剪</li><li>图片压缩</li><li>图片点击</li></ul><a id="more"></a><p><img src="%5Cimages%5Cpasted-7.png" alt="upload successful"></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/ll"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span> &gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/btnColor"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"fill_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">"top"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"获取图片"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/iv_image"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:scaleType</span>=<span class="string">"fitCenter"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wxy.treecalc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Bitmap;</span><br><span class="line"><span class="keyword">import</span> android.graphics.BitmapFactory;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Color;</span><br><span class="line"><span class="keyword">import</span> android.net.Uri;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.provider.MediaStore;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.view.MotionEvent;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.View.OnClickListener;</span><br><span class="line"><span class="keyword">import</span> android.view.View.OnTouchListener;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.ImageView;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TextView tv_rgb;</span><br><span class="line">    <span class="keyword">private</span> ImageView iv_image;</span><br><span class="line">    <span class="keyword">private</span> Bitmap bitmap;</span><br><span class="line">    <span class="keyword">private</span> String TAG = <span class="string">"RGBActivity"</span>;</span><br><span class="line">    <span class="keyword">private</span> Button btnColor;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NONE = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PHOTOHRAPH = <span class="number">1</span>;<span class="comment">// 拍照</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PHOTOZOOM = <span class="number">2</span>; <span class="comment">// 缩放</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PHOTORESOULT = <span class="number">3</span>;<span class="comment">// 结果</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String IMAGE_UNSPECIFIED = <span class="string">"image/*"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TEMP_JPG_NAME = <span class="string">"temp.jpg"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        tv_rgb = (TextView) findViewById(R.id.textview);</span><br><span class="line">        btnColor = (Button) findViewById(R.id.btnColor);</span><br><span class="line">        iv_image = (ImageView) findViewById(R.id.iv_image);</span><br><span class="line"></span><br><span class="line">        btnColor.setOnClickListener(<span class="keyword">new</span> OnClickListener() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>{</span><br><span class="line">                openAlbum();</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">        iv_image.setOnTouchListener(<span class="keyword">new</span> OnTouchListener() {</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouch</span><span class="params">(View v, MotionEvent event)</span> </span>{</span><br><span class="line">                <span class="keyword">int</span> x = (<span class="keyword">int</span>) event.getX();</span><br><span class="line">                <span class="keyword">int</span> y = (<span class="keyword">int</span>) event.getY();</span><br><span class="line">                <span class="keyword">if</span> (event.getAction() == MotionEvent.ACTION_UP) {</span><br><span class="line">                    <span class="keyword">int</span> color = bitmap.getPixel(x, y);</span><br><span class="line">                    <span class="comment">// 如果你想做的更细致的话 可以把颜色值的R G B 拿到做响应的处理</span></span><br><span class="line">                    <span class="keyword">int</span> r = Color.red(color);</span><br><span class="line">                    <span class="keyword">int</span> g = Color.green(color);</span><br><span class="line">                    <span class="keyword">int</span> b = Color.blue(color);</span><br><span class="line">                    <span class="keyword">int</span> a = Color.alpha(color);</span><br><span class="line">                    Log.i(TAG, <span class="string">"r="</span> + r + <span class="string">",g="</span> + g + <span class="string">",b="</span> + b);</span><br><span class="line">                    tv_rgb.setText(<span class="string">"a="</span> + a + <span class="string">",r="</span> + r + <span class="string">",g="</span> + g + <span class="string">",b="</span></span><br><span class="line">                            + b);</span><br><span class="line">                    btnColor.setTextColor(Color.rgb(r, g, b));</span><br><span class="line">                }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打开相册</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">openAlbum</span><span class="params">()</span> </span>{</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_PICK, <span class="keyword">null</span>);</span><br><span class="line">        intent.setDataAndType(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, <span class="string">"image/*"</span>);</span><br><span class="line">        startActivityForResult(intent, PHOTOZOOM);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>{</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="keyword">if</span> (resultCode == NONE)</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (data == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 读取相册缩放图片</span></span><br><span class="line">            <span class="keyword">if</span> (requestCode == PHOTOZOOM) {</span><br><span class="line">                <span class="keyword">if</span> (data != <span class="keyword">null</span>) {</span><br><span class="line">                    startPhotoZoom(data.getData());</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 处理结果</span></span><br><span class="line">            <span class="keyword">if</span> (requestCode == PHOTORESOULT) {</span><br><span class="line">                Bundle extras = data.getExtras();</span><br><span class="line">                <span class="keyword">if</span> (extras != <span class="keyword">null</span>) {</span><br><span class="line">                    bitmap = extras.getParcelable(<span class="string">"data"</span>);</span><br><span class="line">                    <span class="comment">//ByteArrayOutputStream stream = new ByteArrayOutputStream();</span></span><br><span class="line">                    comp(bitmap);</span><br><span class="line">                    <span class="comment">//bitmap.compress(Bitmap.CompressFormat.JPEG, 100, stream);</span></span><br><span class="line">                    iv_image.setImageBitmap(bitmap);</span><br><span class="line">                   <span class="comment">/* logoName = FileUtils.getFilename(MainAppUtil.getCustom().getSusername());</span></span><br><span class="line"><span class="comment">                    FileUtils.writeFile(Constants.LOGO_CACHE_PATH, logoName, photo);*/</span></span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="keyword">super</span>.onActivityResult(requestCode, resultCode, data);</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line"></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Bitmap <span class="title">compressImage</span><span class="params">(Bitmap image)</span> </span>{</span><br><span class="line"></span><br><span class="line">        ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        image.compress(Bitmap.CompressFormat.JPEG, <span class="number">100</span>, baos);<span class="comment">//质量压缩方法，这里100表示不压缩，把压缩后的数据存放到baos中</span></span><br><span class="line">        <span class="keyword">int</span> options = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">while</span> (baos.toByteArray().length / <span class="number">1024</span> &gt; <span class="number">100</span>) { <span class="comment">//循环判断如果压缩后图片是否大于100kb,大于继续压缩</span></span><br><span class="line">            baos.reset();<span class="comment">//重置baos即清空baos</span></span><br><span class="line">            image.compress(Bitmap.CompressFormat.JPEG, options, baos);<span class="comment">//这里压缩options%，把压缩后的数据存放到baos中</span></span><br><span class="line">            options -= <span class="number">10</span>;<span class="comment">//每次都减少10</span></span><br><span class="line">        }</span><br><span class="line">        ByteArrayInputStream isBm = <span class="keyword">new</span> ByteArrayInputStream(baos.toByteArray());<span class="comment">//把压缩后的数据baos存放到ByteArrayInputStream中</span></span><br><span class="line">        Bitmap bitmap = BitmapFactory.decodeStream(isBm, <span class="keyword">null</span>, <span class="keyword">null</span>);<span class="comment">//把ByteArrayInputStream数据生成图片</span></span><br><span class="line">        <span class="keyword">return</span> bitmap;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Bitmap <span class="title">comp</span><span class="params">(Bitmap image)</span> </span>{</span><br><span class="line"></span><br><span class="line">        ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        image.compress(Bitmap.CompressFormat.JPEG, <span class="number">100</span>, baos);</span><br><span class="line">        <span class="keyword">if</span> (baos.toByteArray().length / <span class="number">1024</span> &gt; <span class="number">1024</span>) {</span><br><span class="line">            <span class="comment">//判断如果图片大于1M,进行压缩避免在生成图片（BitmapFactory.decodeStream）时溢出</span></span><br><span class="line">            baos.reset();<span class="comment">//重置baos即清空baos</span></span><br><span class="line">            image.compress(Bitmap.CompressFormat.JPEG, <span class="number">50</span>, baos);</span><br><span class="line">            <span class="comment">//这里压缩50%，把压缩后的数据存放到baos中</span></span><br><span class="line">        }</span><br><span class="line">        ByteArrayInputStream isBm = <span class="keyword">new</span> ByteArrayInputStream(baos.toByteArray());</span><br><span class="line">        BitmapFactory.Options newOpts = <span class="keyword">new</span> BitmapFactory.Options();</span><br><span class="line">        <span class="comment">//开始读入图片，此时把options.inJustDecodeBounds 设回true了</span></span><br><span class="line">        newOpts.inJustDecodeBounds = <span class="keyword">true</span>;</span><br><span class="line">        Bitmap bitmap = BitmapFactory.decodeStream(isBm, <span class="keyword">null</span>, newOpts);</span><br><span class="line">        newOpts.inJustDecodeBounds = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> w = newOpts.outWidth;</span><br><span class="line">        <span class="keyword">int</span> h = newOpts.outHeight;</span><br><span class="line">        <span class="comment">//现在主流手机比较多是800*500分辨率，所以高和宽我们设置为</span></span><br><span class="line">        <span class="keyword">float</span> hh = <span class="number">800f</span>;<span class="comment">//这里设置高度为800f</span></span><br><span class="line">        <span class="keyword">float</span> ww = <span class="number">500f</span>;<span class="comment">//这里设置宽度为500f</span></span><br><span class="line">        <span class="comment">//缩放比。由于是固定比例缩放，只用高或者宽其中一个数据进行计算即可</span></span><br><span class="line">        <span class="keyword">int</span> be = <span class="number">1</span>;<span class="comment">//be=1表示不缩放</span></span><br><span class="line">        <span class="keyword">if</span> (w &gt; h &amp;&amp; w &gt; ww) {<span class="comment">//如果宽度大的话根据宽度固定大小缩放</span></span><br><span class="line">            be = (<span class="keyword">int</span>) (newOpts.outWidth / ww);</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (w &lt; h &amp;&amp; h &gt; hh) {<span class="comment">//如果高度高的话根据宽度固定大小缩放</span></span><br><span class="line">            be = (<span class="keyword">int</span>) (newOpts.outHeight / hh);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (be &lt;= <span class="number">0</span>)</span><br><span class="line">            be = <span class="number">1</span>;</span><br><span class="line">        newOpts.inSampleSize = be;<span class="comment">//设置缩放比例</span></span><br><span class="line">        <span class="comment">//重新读入图片，注意此时已经把options.inJustDecodeBounds 设回false了</span></span><br><span class="line">        isBm = <span class="keyword">new</span> ByteArrayInputStream(baos.toByteArray());</span><br><span class="line">        bitmap = BitmapFactory.decodeStream(isBm, <span class="keyword">null</span>, newOpts);</span><br><span class="line">        <span class="keyword">return</span> compressImage(bitmap);<span class="comment">//压缩好比例大小后再进行质量压缩</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startPhotoZoom</span><span class="params">(Uri uri)</span> </span>{</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(<span class="string">"com.android.camera.action.CROP"</span>);</span><br><span class="line">        intent.setDataAndType(uri, IMAGE_UNSPECIFIED);</span><br><span class="line">        intent.putExtra(<span class="string">"crop"</span>, <span class="string">"true"</span>);</span><br><span class="line">        <span class="comment">// aspectX aspectY 是宽高的比例</span></span><br><span class="line">        intent.putExtra(<span class="string">"aspectX"</span>, <span class="number">1</span>);</span><br><span class="line">        intent.putExtra(<span class="string">"aspectY"</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// outputX outputY 是裁剪图片宽高</span></span><br><span class="line">        intent.putExtra(<span class="string">"outputX"</span>, <span class="number">300</span>);</span><br><span class="line">        intent.putExtra(<span class="string">"outputY"</span>, <span class="number">300</span>);</span><br><span class="line">        intent.putExtra(<span class="string">"return-data"</span>, <span class="keyword">true</span>);</span><br><span class="line">        startActivityForResult(intent, PHOTORESOULT);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;包含知识点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选择图片（相册+拍照）&lt;/li&gt;
&lt;li&gt;正方形裁剪&lt;/li&gt;
&lt;li&gt;图片压缩&lt;/li&gt;
&lt;li&gt;图片点击&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="Android" scheme="http://blog.iwxyi.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android读取图片颜色值</title>
    <link href="http://blog.iwxyi.com/2018/09/15/Android%E8%AF%BB%E5%8F%96%E5%9B%BE%E7%89%87%E9%A2%9C%E8%89%B2%E5%80%BC/"/>
    <id>http://blog.iwxyi.com/2018/09/15/Android读取图片颜色值/</id>
    <published>2018-09-15T03:12:00.000Z</published>
    <updated>2019-10-13T03:15:15.186Z</updated>
    
    <content type="html"><![CDATA[<p>Android SDK中提供了Bitmap图片每个像素颜色读取的方法：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Bitmap src =  BitmapFactory.decodeResource(getResources(),R.drawable.imgbg);</span><br><span class="line"><span class="keyword">int</span> height = src.getHeight();</span><br><span class="line"><span class="keyword">int</span> width = src.getWidth();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; height; y++) {</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; width; x++) {</span><br><span class="line">        <span class="keyword">int</span> pixelColor = src.getPixel(x, y); <span class="comment">// 颜色值</span></span><br><span class="line">        <span class="keyword">int</span> A = Color.alpha(pixelColor); <span class="comment">// A R G B</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Android SDK中提供了Bitmap图片每个像素颜色读取的方法：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/sp
      
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="Android" scheme="http://blog.iwxyi.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Qt QListView拖拽排序</title>
    <link href="http://blog.iwxyi.com/2018/09/11/Qt-QListView%E6%8B%96%E6%8B%BD%E6%8E%92%E5%BA%8F/"/>
    <id>http://blog.iwxyi.com/2018/09/11/Qt-QListView拖拽排序/</id>
    <published>2018-09-11T09:37:00.000Z</published>
    <updated>2019-10-13T09:38:33.998Z</updated>
    
    <content type="html"><![CDATA[<h1 id="拖拽事件流程"><a href="#拖拽事件流程" class="headerlink" title="拖拽事件流程"></a>拖拽事件流程</h1><a id="more"></a><ol><li>mousePressEvent  鼠标按下</li><li>mouseMoveEvent  鼠标开始移动（接下来换成dragMoveEvent）</li><li>dragEnterEvent      开始拖拽</li><li>dragMoveEvent</li><li>dragMoveEvent</li><li>…(重复)</li><li>dragMoveEvent</li><li>dragMoveEvent</li><li>dropEvent                鼠标松开的时候触发（拖到外面不会触发）</li></ol><p>拖拽没有 mouseReleaseEvent，只在点击时有</p><p>如果拖到 QListView 的底部空白，根据点获取到的索引是 -1</p><h1 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h1><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> DRAG_TABLE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DRAG_TABLE_H</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QTableWidget&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QListWidget&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtGui&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDrag&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DragListWidget</span> :</span> <span class="keyword">public</span> QListWidget</span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">DragListWidget(QWidget *parent = <span class="number">0</span>);</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mousePressEvent</span><span class="params">(QMouseEvent *event)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mouseMoveEvent</span><span class="params">(QMouseEvent *event)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dragEnterEvent</span><span class="params">(QDragEnterEvent *event)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dragMoveEvent</span><span class="params">(QDragMoveEvent *event)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dropEvent</span><span class="params">(QDropEvent *event)</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">QPoint startPos;</span><br><span class="line">QPoint endPos;</span><br><span class="line">};</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></tbody></table></figure><h1 id="源文件"><a href="#源文件" class="headerlink" title="源文件"></a>源文件</h1><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"DragTable.h"</span></span></span><br><span class="line"> </span><br><span class="line">DragListWidget::DragListWidget(QWidget *parent):QListWidget(parent)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">this</span>-&gt;setCurrentRow(<span class="number">10</span>);</span><br><span class="line">addItem(<span class="string">"1"</span>);</span><br><span class="line">addItem(<span class="string">"2"</span>);</span><br><span class="line">addItem(<span class="string">"3"</span>);</span><br><span class="line">addItem(<span class="string">"4"</span>);</span><br><span class="line">addItem(<span class="string">"5"</span>);</span><br><span class="line">addItem(<span class="string">"6"</span>);</span><br><span class="line">addItem(<span class="string">"7"</span>);</span><br><span class="line">addItem(<span class="string">"8"</span>);</span><br><span class="line">addItem(<span class="string">"9"</span>);</span><br><span class="line">addItem(<span class="string">"10"</span>);</span><br><span class="line"><span class="keyword">this</span>-&gt;setAcceptDrops(<span class="literal">true</span>);<span class="comment">//设置QListWidget的Item项可以被拖拽</span></span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="keyword">void</span> DragListWidget::mousePressEvent( QMouseEvent *event )</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (event-&gt;button() == Qt::LeftButton)</span><br><span class="line">startPos = event-&gt;pos();</span><br><span class="line">QListWidget::mousePressEvent(event);</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="keyword">void</span> DragListWidget::mouseMoveEvent(QMouseEvent *event)</span><br><span class="line">{</span><br><span class="line">QListWidgetItem *item = currentItem();</span><br><span class="line">mimeData = <span class="keyword">new</span> QMimeData;</span><br><span class="line">mimeData-&gt;setText(item-&gt;text());</span><br><span class="line">QDrag *drag = <span class="keyword">new</span> QDrag(<span class="keyword">this</span>);</span><br><span class="line">drag-&gt;setMimeData(mimeData);</span><br><span class="line"><span class="comment">//drag-&gt;setPixmap(pixmap);</span></span><br><span class="line">Qt::DropAction dropAction = drag-&gt;exec(Qt::CopyAction | Qt::MoveAction, Qt::CopyAction);</span><br><span class="line"><span class="keyword">if</span>(dropAction == Qt::MoveAction)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">delete</span> item;<span class="comment">//删除原有的item,在dropEvent(QDropEvent *event)函数中插入item</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="keyword">void</span> DragListWidget::mouseReleaseEvent(QMouseEvent *event)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> distance = (endPos - startPos).manhattanLength();</span><br><span class="line"><span class="keyword">if</span> (distance &gt;= QApplication::startDragDistance())</span><br><span class="line">{</span><br><span class="line">startDrag();</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="keyword">void</span> DragListWidget::dragEnterEvent( QDragEnterEvent *event )</span><br><span class="line">{</span><br><span class="line">DragListWidget *source = (DragListWidget *)((<span class="keyword">void</span>*)(event-&gt;source()));</span><br><span class="line"><span class="keyword">if</span> (source &amp;&amp; source == <span class="keyword">this</span>) {</span><br><span class="line">event-&gt;setDropAction(Qt::MoveAction);</span><br><span class="line">event-&gt;accept();</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="keyword">void</span> DragListWidget::dragMoveEvent( QDragMoveEvent *event )</span><br><span class="line">{</span><br><span class="line">DragListWidget *source = (DragListWidget *)((<span class="keyword">void</span>*)(event-&gt;source()));</span><br><span class="line"><span class="keyword">if</span> (source &amp;&amp; source == <span class="keyword">this</span>) {</span><br><span class="line">event-&gt;setDropAction(Qt::MoveAction);</span><br><span class="line">event-&gt;accept();</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="keyword">void</span> DragListWidget::dropEvent( QDropEvent *event )</span><br><span class="line">{</span><br><span class="line">DragListWidget *source = (DragListWidget *)((<span class="keyword">void</span>*)(event-&gt;source()));</span><br><span class="line"><span class="keyword">if</span> (source &amp;&amp; source == <span class="keyword">this</span>) </span><br><span class="line">{</span><br><span class="line">endPos = event-&gt;pos();<span class="comment">//得到鼠标移动到的坐标</span></span><br><span class="line">QListWidgetItem *itemRow = itemAt(endPos);.<span class="comment">//通过endPos获取鼠标位置所在的行</span></span><br><span class="line"><span class="keyword">int</span> rowCount = row(itemRow);</span><br><span class="line">insertItem(rowCount + <span class="number">1</span>,mimeData-&gt;text());<span class="comment">//row+1 为鼠标所指向的行，如果只是向末尾位置插入，把insertItem(rowCount + 1,mimeData-&gt;text())改为addItem(mimeData-&gt;text())</span></span><br><span class="line">event-&gt;setDropAction(Qt::MoveAction);</span><br><span class="line">event-&gt;accept();</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>博客来源：<a href="https://blog.csdn.net/yueye30121/article/details/12508675" target="_blank" rel="noopener">https://blog.csdn.net/yueye30121/article/details/12508675</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;拖拽事件流程&quot;&gt;&lt;a href=&quot;#拖拽事件流程&quot; class=&quot;headerlink&quot; title=&quot;拖拽事件流程&quot;&gt;&lt;/a&gt;拖拽事件流程&lt;/h1&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C++" scheme="http://blog.iwxyi.com/tags/C/"/>
    
      <category term="Qt" scheme="http://blog.iwxyi.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>Qt QListView实现双击编辑</title>
    <link href="http://blog.iwxyi.com/2018/09/11/Qt-QListView%E5%AE%9E%E7%8E%B0%E5%8F%8C%E5%87%BB%E7%BC%96%E8%BE%91/"/>
    <id>http://blog.iwxyi.com/2018/09/11/Qt-QListView实现双击编辑/</id>
    <published>2018-09-11T09:36:00.000Z</published>
    <updated>2019-10-13T09:37:11.297Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Delegate-部分"><a href="#Delegate-部分" class="headerlink" title="Delegate 部分"></a>Delegate 部分</h1><p>关键是重写这四个函数：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">QWidget *<span class="title">createEditor</span><span class="params">(QWidget *parent, <span class="keyword">const</span> QStyleOptionViewItem &amp;option, <span class="keyword">const</span> QModelIndex&amp;index)</span> <span class="keyword">const</span></span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setEditorData</span><span class="params">(QWidget *editor, <span class="keyword">const</span> QModelIndex &amp;index)</span> <span class="keyword">const</span></span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setModelData</span><span class="params">(QWidget *editor, QAbstractItemModel *model, <span class="keyword">const</span> QModelIndex &amp;index)</span> <span class="keyword">const</span></span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateEditorGeometry</span><span class="params">(QWidget *editor, <span class="keyword">const</span> QStyleOptionViewItem &amp;option, <span class="keyword">const</span>  QModelIndex &amp;index)</span> <span class="keyword">const</span></span>;</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><h2 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h2><p><code>combodelegate.h</code></p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ComboDelegate</span>:</span><span class="keyword">public</span> QItemDelegate</span><br><span class="line">{</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ComboDelegate(QObject *parent=<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function">QWidget *<span class="title">createEditor</span><span class="params">(QWidget *parent, <span class="keyword">const</span> QStyleOptionViewItem &amp;option, <span class="keyword">const</span> QModelIndex&amp;index)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setEditorData</span><span class="params">(QWidget *editor, <span class="keyword">const</span> QModelIndex &amp;index)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setModelData</span><span class="params">(QWidget *editor, QAbstractItemModel *model, <span class="keyword">const</span> QModelIndex &amp;index)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateEditorGeometry</span><span class="params">(QWidget *editor, <span class="keyword">const</span> QStyleOptionViewItem &amp;option, <span class="keyword">const</span>  QModelIndex &amp;index)</span> <span class="keyword">const</span></span>;</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><h2 id="源文件"><a href="#源文件" class="headerlink" title="源文件"></a>源文件</h2><p><code>combodelegate.cpp</code></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">QWidget *ComboDelegate::createEditor(QWidget *parent, <span class="keyword">const</span> QStyleOptionViewItem &amp;option, <span class="keyword">const</span> QModelIndex &amp;index) <span class="keyword">const</span></span><br><span class="line">{</span><br><span class="line">    QComboBox *editor=<span class="keyword">new</span> QComboBox(parent);</span><br><span class="line">    editor-&gt;addItem(<span class="string">"程序员"</span>);</span><br><span class="line">    editor-&gt;addItem(<span class="string">"网管"</span>);</span><br><span class="line">    editor-&gt;addItem(<span class="string">"修电脑的"</span>);</span><br><span class="line">    editor-&gt;addItem(<span class="string">"送水的"</span>);</span><br><span class="line">    editor-&gt;installEventFilter(<span class="keyword">const_cast</span>&lt;ComboDelegate*&gt;(<span class="keyword">this</span>));</span><br><span class="line">    <span class="keyword">return</span> editor;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="keyword">void</span> ComboDelegate::setEditorData(QWidget *editor, <span class="keyword">const</span> QModelIndex &amp;index) <span class="keyword">const</span></span><br><span class="line">{</span><br><span class="line">    QString str=index.model()-&gt;data(index).toString();</span><br><span class="line">    QComboBox *box=<span class="keyword">static_cast</span>&lt;QComboBox*&gt;(editor);</span><br><span class="line">    <span class="keyword">int</span> i=box-&gt;findText(str);</span><br><span class="line">    box-&gt;setCurrentIndex(i);</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="keyword">void</span> ComboDelegate::setModelData(QWidget *editor, QAbstractItemModel *model, <span class="keyword">const</span> QModelIndex &amp;index) <span class="keyword">const</span></span><br><span class="line">{</span><br><span class="line">    QComboBox *box=<span class="keyword">static_cast</span>&lt;QComboBox*&gt;(editor);</span><br><span class="line">    QString str=box-&gt;currentText();</span><br><span class="line">    model-&gt;setData(index,str);</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="keyword">void</span> ComboDelegate::updateEditorGeometry(QWidget *editor, <span class="keyword">const</span> QStyleOptionViewItem &amp;option, <span class="keyword">const</span> QModelIndex &amp;index) <span class="keyword">const</span></span><br><span class="line">{</span><br><span class="line">    editor-&gt;setGeometry(option.rect);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="Model-部分"><a href="#Model-部分" class="headerlink" title="Model 部分"></a>Model 部分</h1><p>重写 <code>flag()</code> 函数 和 <code>setData()</code> 函数</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Qt::<span class="function">ItemFlags <span class="title">flags</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;index)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    Qt::ItemFlags flags = QAbstractItemModel::flags(index);</span><br><span class="line">    flags |= Qt::ItemIsEditable; <span class="comment">// 允许编辑</span></span><br><span class="line">    <span class="keyword">return</span> flags;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">setData</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;index, <span class="keyword">const</span> QVariant &amp;value, <span class="keyword">int</span> role)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (!index.isValid()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (role == Qt::EditRole) <span class="comment">// 可以手动设置 role</span></span><br><span class="line">    {</span><br><span class="line">        ; <span class="comment">// 通过 index 来设置 value</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="View-部分"><a href="#View-部分" class="headerlink" title="View 部分"></a>View 部分</h1><h2 id="手动实现重命名"><a href="#手动实现重命名" class="headerlink" title="手动实现重命名"></a>手动实现重命名</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> NovelDirListView::slotRenameChapter()</span><br><span class="line">{</span><br><span class="line">    edit(currentIndex()); <span class="comment">// 手动重命名函数</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Delegate-部分&quot;&gt;&lt;a href=&quot;#Delegate-部分&quot; class=&quot;headerlink&quot; title=&quot;Delegate 部分&quot;&gt;&lt;/a&gt;Delegate 部分&lt;/h1&gt;&lt;p&gt;关键是重写这四个函数：&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;QWidget *&lt;span class=&quot;title&quot;&gt;createEditor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(QWidget *parent, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; QStyleOptionViewItem &amp;amp;option, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; QModelIndex	&amp;amp;index)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setEditorData&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(QWidget *editor, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; QModelIndex &amp;amp;index)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setModelData&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(QWidget *editor, QAbstractItemModel *model, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; QModelIndex &amp;amp;index)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;updateEditorGeometry&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(QWidget *editor, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; QStyleOptionViewItem &amp;amp;option, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;  QModelIndex &amp;amp;index)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C++" scheme="http://blog.iwxyi.com/tags/C/"/>
    
      <category term="Qt" scheme="http://blog.iwxyi.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>AJAX实现图片拖拽上传</title>
    <link href="http://blog.iwxyi.com/2018/09/11/AJAX%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E6%8B%96%E6%8B%BD%E4%B8%8A%E4%BC%A0/"/>
    <id>http://blog.iwxyi.com/2018/09/11/AJAX实现图片拖拽上传/</id>
    <published>2018-09-11T07:44:00.000Z</published>
    <updated>2019-10-13T07:46:01.065Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-html中div标签预览显示，button标签触发上传事件"><a href="#1-html中div标签预览显示，button标签触发上传事件" class="headerlink" title="1.html中div标签预览显示，button标签触发上传事件"></a>1.html中div标签预览显示，button标签触发上传事件</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>  <span class="attr">id</span>=<span class="string">"drop_area"</span> <span class="attr">style</span>=<span class="string">"border:3px dashed silver;width:200px; height:200px"</span>&gt;</span>将图片拖拽到此<span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"xhr2()"</span>&gt;</span>ajax上传<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><a id="more"></a><h2 id="2-禁止浏览器打开文件行为"><a href="#2-禁止浏览器打开文件行为" class="headerlink" title="2.禁止浏览器打开文件行为"></a>2.禁止浏览器打开文件行为</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"drop"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>{  <span class="comment">//拖离   </span></span><br><span class="line">    e.preventDefault();      </span><br><span class="line">})  </span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"dragleave"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>{  <span class="comment">//拖后放   </span></span><br><span class="line">    e.preventDefault();      </span><br><span class="line">})  </span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"dragenter"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>{  <span class="comment">//拖进  </span></span><br><span class="line">    e.preventDefault();      </span><br><span class="line">})  </span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"dragover"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>{  <span class="comment">//拖来拖去    </span></span><br><span class="line">    e.preventDefault();      </span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h2 id="3-拖拽-预览文件"><a href="#3-拖拽-预览文件" class="headerlink" title="3.拖拽,预览文件"></a>3.拖拽,预览文件</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">'drop_area'</span>); <span class="comment">//拖拽区域     </span></span><br><span class="line">box.addEventListener(<span class="string">"drop"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>{           </span><br><span class="line">    <span class="keyword">var</span> fileList = e.dataTransfer.files; <span class="comment">//获取文件对象    </span></span><br><span class="line">    <span class="comment">//检测是否是拖拽文件到页面的操作            </span></span><br><span class="line">    <span class="keyword">if</span>(fileList.length == <span class="number">0</span>){                </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;            </span><br><span class="line">    }             </span><br><span class="line">    <span class="comment">//拖拉图片到浏览器，可以实现预览功能    </span></span><br><span class="line">    <span class="comment">//规定视频格式  </span></span><br><span class="line">    <span class="built_in">Array</span>.prototype.S=<span class="built_in">String</span>.fromCharCode(<span class="number">2</span>);  </span><br><span class="line">    <span class="built_in">Array</span>.prototype.in_array=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>{  </span><br><span class="line">        <span class="keyword">var</span> r=<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="keyword">this</span>.S+e+<span class="keyword">this</span>.S);  </span><br><span class="line">        <span class="keyword">return</span> (r.test(<span class="keyword">this</span>.S+<span class="keyword">this</span>.join(<span class="keyword">this</span>.S)+<span class="keyword">this</span>.S));  </span><br><span class="line">    };  </span><br><span class="line">    <span class="keyword">var</span> video_type=[<span class="string">"video/mp4"</span>,<span class="string">"video/ogg"</span>];  </span><br><span class="line">      </span><br><span class="line">    <span class="comment">//创建一个url连接,供src属性引用  </span></span><br><span class="line">    <span class="keyword">var</span> fileurl = <span class="built_in">window</span>.URL.createObjectURL(fileList[<span class="number">0</span>]);                </span><br><span class="line">    <span class="keyword">if</span>(fileList[<span class="number">0</span>].type.indexOf(<span class="string">'image'</span>) === <span class="number">0</span>){  <span class="comment">//如果是图片  </span></span><br><span class="line">        <span class="keyword">var</span> str=<span class="string">"&lt;img width='200px' height='200px' src='"</span>+fileurl+<span class="string">"'&gt;"</span>;  </span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">'drop_area'</span>).innerHTML=str;                   </span><br><span class="line">    }<span class="keyword">else</span> <span class="keyword">if</span>(video_type.in_array(fileList[<span class="number">0</span>].type)){   <span class="comment">//如果是规定格式内的视频                    </span></span><br><span class="line">        <span class="keyword">var</span> str=<span class="string">"&lt;video width='200px' height='200px' controls='controls' src='"</span>+fileurl+<span class="string">"'&gt;&lt;/video&gt;"</span>;  </span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">'drop_area'</span>).innerHTML=str;        </span><br><span class="line">    }<span class="keyword">else</span>{ <span class="comment">//其他格式，输出文件名  </span></span><br><span class="line">        <span class="comment">//alert("不预览");  </span></span><br><span class="line">        <span class="keyword">var</span> str=<span class="string">"文件名字:"</span>+fileList[<span class="number">0</span>].name;  </span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">'drop_area'</span>).innerHTML=str;      </span><br><span class="line">    }         </span><br><span class="line">    resultfile = fileList[<span class="number">0</span>];             </span><br><span class="line">},<span class="literal">false</span>);</span><br></pre></td></tr></tbody></table></figure><h2 id="4-ajax上传"><a href="#4-ajax上传" class="headerlink" title="4.ajax上传"></a>4.ajax上传</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">xhr2</span>(<span class="params"></span>)</span>{  </span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();<span class="comment">//第一步  </span></span><br><span class="line">    <span class="comment">//新建一个FormData对象  </span></span><br><span class="line">    <span class="keyword">var</span> formData = <span class="keyword">new</span> FormData(); <span class="comment">//++++++++++  </span></span><br><span class="line">    <span class="comment">//追加文件数据  </span></span><br><span class="line">    formData.append(<span class="string">'file'</span>, resultfile);  </span><br><span class="line">    <span class="comment">//post方式  </span></span><br><span class="line">    xhr.open(<span class="string">'POST'</span>, <span class="string">'xhr2.php'</span>); <span class="comment">//第二步骤  </span></span><br><span class="line">    <span class="comment">//发送请求  </span></span><br><span class="line">    xhr.send(formData);  <span class="comment">//第三步骤  </span></span><br><span class="line">    <span class="comment">//ajax返回  </span></span><br><span class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{ <span class="comment">//第四步  </span></span><br><span class="line">　　　　<span class="keyword">if</span> ( xhr.readyState == <span class="number">4</span> &amp;&amp; xhr.status == <span class="number">200</span> ) {  </span><br><span class="line">　　　　　　<span class="built_in">console</span>.log( xhr.responseText );        </span><br><span class="line">　　　　}  </span><br><span class="line">　　};  </span><br><span class="line">    <span class="comment">//设置超时时间  </span></span><br><span class="line">    xhr.timeout = <span class="number">10000</span>;  </span><br><span class="line">    xhr.ontimeout = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>{  </span><br><span class="line">　　　　alert(<span class="string">'请求超时！'</span>);  </span><br><span class="line">　　}           </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="5-PHP保存文件"><a href="#5-PHP保存文件" class="headerlink" title="5.PHP保存文件"></a>5.PHP保存文件</h2><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line">    print_r($_FILES[<span class="string">"file"</span>]);  </span><br><span class="line">    $name = $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>]; <span class="comment">//中文可能乱码使用iconv函数  </span></span><br><span class="line">    move_uploaded_file($_FILES[<span class="string">"file"</span>][<span class="string">"tmp_name"</span>],iconv(<span class="string">"UTF-8"</span>,<span class="string">"gb2312"</span>,$name));  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><hr><blockquote><p>参考：<a href="https://blog.csdn.net/wjn2000414/article/details/80396056" target="_blank" rel="noopener">https://blog.csdn.net/wjn2000414/article/details/80396056</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-html中div标签预览显示，button标签触发上传事件&quot;&gt;&lt;a href=&quot;#1-html中div标签预览显示，button标签触发上传事件&quot; class=&quot;headerlink&quot; title=&quot;1.html中div标签预览显示，button标签触发上传事件&quot;&gt;&lt;/a&gt;1.html中div标签预览显示，button标签触发上传事件&lt;/h2&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;  &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;drop_area&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;border:3px dashed silver;width:200px; height:200px&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;将图片拖拽到此&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;onclick&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;xhr2()&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;ajax上传&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="JS" scheme="http://blog.iwxyi.com/tags/JS/"/>
    
      <category term="AJAX" scheme="http://blog.iwxyi.com/tags/AJAX/"/>
    
      <category term="PHP" scheme="http://blog.iwxyi.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>Android自定义控件之QQ红点</title>
    <link href="http://blog.iwxyi.com/2018/09/11/Android%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6%E4%B9%8BQQ%E7%BA%A2%E7%82%B9/"/>
    <id>http://blog.iwxyi.com/2018/09/11/Android自定义控件之QQ红点/</id>
    <published>2018-09-11T03:34:00.000Z</published>
    <updated>2019-10-13T03:36:26.926Z</updated>
    
    <content type="html"><![CDATA[# 拖拽效果<p>拖拽效果的实现其实是用贝塞尔曲线去构成的，这里上一张图就很明白</p><p> <img src="https://img-blog.csdn.net/20160608194703222" alt="img"></p><a id="more"></a><p>可以看到，所谓的拖拽效果只是在两个圆圈之间根据两个圆同侧切点和圆心连线中点三个点构建一条二阶贝塞尔曲线，另一侧也是，将其用颜色填充，就构成了qq红点的拖拽效果，是不是很简单</p><p>那么我们这里的目标就是先算出p0，p1,Q0三个点的坐标</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> endX = nowFingerPoint.x;</span><br><span class="line"><span class="keyword">float</span> endY = nowFingerPoint.y;</span><br><span class="line"><span class="keyword">float</span> dx = endX - startX;</span><br><span class="line"><span class="keyword">float</span> dy = endY - startY;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">float</span> distance = (<span class="keyword">float</span>) Math.sqrt(Math.pow(endY-startY, <span class="number">2</span>) + Math.pow(endX-startX, <span class="number">2</span>));</span><br><span class="line">radius = <span class="number">50</span> - distance/<span class="number">15</span>;</span><br><span class="line">radius = radius&lt;<span class="number">20</span> ? <span class="number">20</span> : radius;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">double</span> a = Math.atan(dy / dx);</span><br><span class="line"><span class="keyword">float</span> offsetX = (<span class="keyword">float</span>) (radius * Math.sin(a));</span><br><span class="line"><span class="keyword">float</span> offsetY = (<span class="keyword">float</span>) (radius * Math.cos(a));</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 根据角度算出四边形的四个点</span></span><br><span class="line"><span class="keyword">float</span> x1 = startX - offsetX;</span><br><span class="line"><span class="keyword">float</span> y1 = startY + offsetY;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">float</span> x2 = endX - offsetX;</span><br><span class="line"><span class="keyword">float</span> y2 = endY + offsetY;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">float</span> x3 = endX + offsetX;</span><br><span class="line"><span class="keyword">float</span> y3 = endY - offsetY;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">float</span> x4 = startX + offsetX;</span><br><span class="line"><span class="keyword">float</span> y4 = startY - offsetY;</span><br></pre></td></tr></tbody></table></figure><ul><li>然后要做的就是画两个圆点，以及把这四个点连起来构成贝塞尔曲线</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> anchorX = (startX + endX) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">float</span> anchorY = (startY + endY) / <span class="number">2</span>;</span><br><span class="line"> </span><br><span class="line">path.reset();</span><br><span class="line"> </span><br><span class="line">path.reset();</span><br><span class="line">path.moveTo(x1, y1);</span><br><span class="line">path.quadTo(anchorX, anchorY, x2, y2);</span><br><span class="line">path.lineTo(x3, y3);</span><br><span class="line">path.quadTo(anchorX, anchorY, x4, y4);</span><br><span class="line">path.lineTo(x1, y1);</span><br></pre></td></tr></tbody></table></figure><ul><li>画圆点，响应移动事件这些就不写了，我直接贴源码</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QQ_message_drag_effect</span> <span class="keyword">extends</span> <span class="title">View</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">QQ_message_drag_effect</span><span class="params">(Context context)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">QQ_message_drag_effect</span><span class="params">(Context context, @Nullable AttributeSet attrs)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">QQ_message_drag_effect</span><span class="params">(Context context, @Nullable AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">int</span> width;</span><br><span class="line">    <span class="keyword">int</span> height;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class="line">        setMeasuredDimension(width = ((ViewGroup)getParent()).getMeasuredWidth(),height = ((ViewGroup)getParent()).getMeasuredHeight());</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">float</span> radius = <span class="number">50</span>;</span><br><span class="line">    PointF startPoint = <span class="keyword">new</span> PointF(<span class="number">300</span>,<span class="number">500</span>);</span><br><span class="line">    PointF nowFingerPoint = <span class="keyword">new</span> PointF();</span><br><span class="line">    <span class="keyword">boolean</span> isMoveing = <span class="keyword">false</span>;</span><br><span class="line"> </span><br><span class="line">    Paint paint = <span class="keyword">new</span> Paint();</span><br><span class="line">    Path path = <span class="keyword">new</span> Path();</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> x = (<span class="keyword">int</span>) event.getX();</span><br><span class="line">        <span class="keyword">int</span> y = (<span class="keyword">int</span>) event.getY();</span><br><span class="line">        <span class="keyword">switch</span> (event.getAction()){</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">                <span class="keyword">if</span>((x &lt; startPoint.x + radius &amp;&amp; x &gt; startPoint.x - radius) &amp;&amp;</span><br><span class="line">                        (y &lt; startPoint.y + radius &amp;&amp; y &gt; startPoint.y - radius)){</span><br><span class="line">                    isMoveing = <span class="keyword">true</span>;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">                <span class="keyword">if</span>(isMoveing){</span><br><span class="line">                    nowFingerPoint.y = y;</span><br><span class="line">                    nowFingerPoint.x = x;</span><br><span class="line">                    invalidate();</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">                isMoveing = <span class="keyword">false</span>;</span><br><span class="line">                radius = <span class="number">50</span>;</span><br><span class="line">                invalidate();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">float</span> startX = startPoint.x;</span><br><span class="line">        <span class="keyword">float</span> startY = startPoint.y;</span><br><span class="line"> </span><br><span class="line">        paint.setColor(Color.RED);</span><br><span class="line">        canvas.drawCircle(startX,startY,radius,paint);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span>(isMoveing){</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">float</span> endX = nowFingerPoint.x;</span><br><span class="line">            <span class="keyword">float</span> endY = nowFingerPoint.y;</span><br><span class="line">            <span class="keyword">float</span> dx = endX - startX;</span><br><span class="line">            <span class="keyword">float</span> dy = endY - startY;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">float</span> distance = (<span class="keyword">float</span>) Math.sqrt(Math.pow(endY-startY, <span class="number">2</span>) + Math.pow(endX-startX, <span class="number">2</span>));</span><br><span class="line">            radius = <span class="number">50</span> - distance/<span class="number">15</span>;</span><br><span class="line">            radius = radius&lt;<span class="number">20</span> ? <span class="number">20</span> : radius;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">double</span> a = Math.atan(dy / dx);</span><br><span class="line">            <span class="keyword">float</span> offsetX = (<span class="keyword">float</span>) (radius * Math.sin(a));</span><br><span class="line">            <span class="keyword">float</span> offsetY = (<span class="keyword">float</span>) (radius * Math.cos(a));</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// 根据角度算出四边形的四个点</span></span><br><span class="line">            <span class="keyword">float</span> x1 = startX - offsetX;</span><br><span class="line">            <span class="keyword">float</span> y1 = startY + offsetY;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">float</span> x2 = endX - offsetX;</span><br><span class="line">            <span class="keyword">float</span> y2 = endY + offsetY;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">float</span> x3 = endX + offsetX;</span><br><span class="line">            <span class="keyword">float</span> y3 = endY - offsetY;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">float</span> x4 = startX + offsetX;</span><br><span class="line">            <span class="keyword">float</span> y4 = startY - offsetY;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">float</span> anchorX = (startX + endX) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">float</span> anchorY = (startY + endY) / <span class="number">2</span>;</span><br><span class="line"> </span><br><span class="line">            path.reset();</span><br><span class="line"> </span><br><span class="line">            path.reset();</span><br><span class="line">            path.moveTo(x1, y1);</span><br><span class="line">            path.quadTo(anchorX, anchorY, x2, y2);</span><br><span class="line">            path.lineTo(x3, y3);</span><br><span class="line">            path.quadTo(anchorX, anchorY, x4, y4);</span><br><span class="line">            path.lineTo(x1, y1);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">            canvas.drawPath(path,paint);</span><br><span class="line"> </span><br><span class="line">            canvas.drawCircle(endX,endY,radius,paint);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><blockquote><p>参考：<a href="https://blog.csdn.net/asffghfgfghfg1556/article/details/80409902" target="_blank" rel="noopener">https://blog.csdn.net/asffghfgfghfg1556/article/details/80409902</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      # 拖拽效果

&lt;p&gt;拖拽效果的实现其实是用贝塞尔曲线去构成的，这里上一张图就很明白&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://img-blog.csdn.net/20160608194703222&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="Android" scheme="http://blog.iwxyi.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Node.js-学习笔记</title>
    <link href="http://blog.iwxyi.com/2018/09/02/Node-js-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://blog.iwxyi.com/2018/09/02/Node-js-学习笔记/</id>
    <published>2018-09-02T07:27:00.000Z</published>
    <updated>2019-10-13T07:29:00.705Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><p>全篇教程来源：菜鸟教程 <a href="https://www.runoob.com/nodejs/nodejs-tutorial.html" target="_blank" rel="noopener">https://www.runoob.com/nodejs/nodejs-tutorial.html</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>64 位安装包下载地址 : <a href="https://nodejs.org/dist/v4.4.3/node-v4.4.3-x64.msi" target="_blank" rel="noopener">https://nodejs.org/dist/v4.4.3/node-v4.4.3-x64.msi</a> </p><h2 id="第一个应用"><a href="#第一个应用" class="headerlink" title="第一个应用"></a>第一个应用</h2><ol><li><p>引入 required 模块</p><p>我们使用 <strong>require</strong> 指令来载入 http 模块，并将实例化的 HTTP 赋值给变量 http，实例如下:</p></li></ol><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><ol start="2"><li><p>创建服务器</p><p>使用 <code>http.createServer()</code> 方法创建服务器，并使用 <code>listen</code> 方法绑定 <code>8888</code> 端口。 函数通过 <code>request</code>, <code>response</code> 参数来接收和响应数据。</p><p>实例如下，在你项目的根目录下创建一个叫 <code>server.js</code> 的文件，并写入以下代码：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>{</span><br><span class="line">    <span class="comment">// 发送 HTTP 头部 </span></span><br><span class="line">    <span class="comment">// HTTP 状态值: 200 : OK</span></span><br><span class="line">    <span class="comment">// 内容类型: text/plain</span></span><br><span class="line">    response.writeHead(<span class="number">200</span>, {<span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>});</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送响应数据 "Hello World"</span></span><br><span class="line">    response.end(<span class="string">'Hello World\n'</span>);</span><br><span class="line">}).listen(<span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 终端打印如下信息</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Server running at http://127.0.0.1:8888/'</span>);</span><br></pre></td></tr></tbody></table></figure><p>以上代码完成了一个可以工作的 HTTP 服务器。</p><p>使用 <strong>node</strong> 命令执行以上的代码：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node server.js</span><br><span class="line">Server running at http:<span class="comment">//127.0.0.1:8888/</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>接下来，打开浏览器访问 <a href="http://127.0.0.1:8888/，你会看到一个写着" target="_blank" rel="noopener">http://127.0.0.1:8888/，你会看到一个写着</a> “Hello World”的网页。</p></li></ol><h2 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h2><p>NPM是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题，常见的使用场景有以下几种：</p><ul><li>允许用户从NPM服务器下载别人编写的第三方包到本地使用。</li><li>允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。</li><li>允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。</li></ul><p>新版的nodejs已经集成了npm。</p><blockquote><p>npm安装教程：<a href="https://www.runoob.com/nodejs/nodejs-npm.html" target="_blank" rel="noopener">https://www.runoob.com/nodejs/nodejs-npm.html</a></p></blockquote><h3 id="使用-npm-命令安装模块"><a href="#使用-npm-命令安装模块" class="headerlink" title="使用 npm 命令安装模块"></a>使用 npm 命令安装模块</h3><p>npm 安装 Node.js 模块语法格式如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install &lt;Module Name&gt;</span><br></pre></td></tr></tbody></table></figure><p>以下实例，我们使用 npm 命令安装常用的 Node.js web框架模块 <strong>express</strong>:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install express      # 本地安装</span><br><span class="line">npm install express -g   # 全局安装</span><br></pre></td></tr></tbody></table></figure><p>安装好之后，express 包就放在了工程目录下的 node_modules 目录中，因此在代码中只需要通过 <strong>require(‘express’)</strong> 的方式就好，无需指定第三方包路径。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var express = require('express');</span><br></pre></td></tr></tbody></table></figure><h2 id="Node-js-REPL-交互式解释器"><a href="#Node-js-REPL-交互式解释器" class="headerlink" title="Node.js REPL(交互式解释器)"></a>Node.js REPL(交互式解释器)</h2><p>Node.js REPL(Read Eval Print Loop:交互式解释器) 表示一个电脑的环境，类似 Window 系统的终端或 Unix/Linux shell，我们可以在终端中输入命令，并接收系统的响应。</p><h3 id="REPL-语法"><a href="#REPL-语法" class="headerlink" title="REPL 语法"></a>REPL 语法</h3><h4 id="启动-Node-的终端"><a href="#启动-Node-的终端" class="headerlink" title="启动 Node 的终端"></a>启动 Node 的终端</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ node</span><br><span class="line">&gt;</span><br></pre></td></tr></tbody></table></figure><p>这时就可以在 &gt; 后输入简单的表达式，并按下回车键来计算结果。</p><h4 id="简单的表达式运算"><a href="#简单的表达式运算" class="headerlink" title="简单的表达式运算"></a>简单的表达式运算</h4><p>在 Node.js REPL 的命令行窗口中执行简单的数学运算：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ node</span><br><span class="line">&gt; 5 / 2</span><br><span class="line">2.5</span><br><span class="line">&gt; 1 + ( 2 * 3 ) - 4</span><br><span class="line">3</span><br></pre></td></tr></tbody></table></figure><h4 id="使用变量"><a href="#使用变量" class="headerlink" title="使用变量"></a>使用变量</h4><p>变量声明需要使用 <strong>var</strong> 关键字，如果没有使用 var 关键字变量会直接打印出来。</p><p>使用 <strong>var</strong> 关键字的变量可以使用 console.log() 来输出变量。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ node</span><br><span class="line">&gt; x = 10</span><br><span class="line">10</span><br><span class="line">&gt; var y = 10</span><br><span class="line">undefined</span><br><span class="line">&gt; x + y</span><br><span class="line">20</span><br><span class="line">&gt; console.log("Hello World")</span><br><span class="line">Hello World</span><br><span class="line">undefined</span><br></pre></td></tr></tbody></table></figure><h4 id="多行表达式"><a href="#多行表达式" class="headerlink" title="多行表达式"></a>多行表达式</h4><p>Node REPL 支持输入多行表达式，这就有点类似 JavaScript。接下来让我们来执行一个 do-while 循环：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ node</span><br><span class="line">&gt; var x = 0</span><br><span class="line">undefined</span><br><span class="line">&gt; do {</span><br><span class="line">... x++;</span><br><span class="line">... console.log("x: " + x);</span><br><span class="line">... } while ( x &lt; 3 );</span><br><span class="line">x: 1</span><br><span class="line">x: 2</span><br><span class="line">x: 3</span><br><span class="line">undefined</span><br></pre></td></tr></tbody></table></figure><p><strong>…</strong> 三个点的符号是系统自动生成的，回车换行后即可。Node 会自动检测是否为连续的表达式。</p><h4 id="下划线-变量"><a href="#下划线-变量" class="headerlink" title="下划线(_)变量"></a>下划线(_)变量</h4><p><strong>使用下划线(_)获取上一个表达式的运算结果</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ node</span><br><span class="line">&gt; 10 + 20</span><br><span class="line">30</span><br><span class="line">&gt; console.log(_ + _)</span><br><span class="line">60</span><br><span class="line">undefined</span><br></pre></td></tr></tbody></table></figure><h3 id="REPL-命令"><a href="#REPL-命令" class="headerlink" title="REPL 命令"></a>REPL 命令</h3><ul><li><strong>ctrl + c</strong> - 退出当前终端，可能会提示 <strong>.exit</strong></li><li><strong>ctrl + c 按下两次</strong> - 退出 Node REPL。</li><li><strong>ctrl + d</strong> - 退出 Node REPL.</li><li><strong>向上/向下 键</strong> - 查看输入的历史命令</li><li><strong>tab 键</strong> - 列出当前命令</li><li><strong>.help</strong> - 列出使用命令</li><li><strong>.break</strong> - 退出多行表达式</li><li><strong>.clear</strong> - 退出多行表达式</li><li><strong>.save filename</strong> - 保存当前的 Node REPL 会话到指定文件</li><li><strong>.load filename</strong> - 载入当前 Node REPL 会话的文件内容。</li></ul><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><h2 id="Node-js-回调函数"><a href="#Node-js-回调函数" class="headerlink" title="Node.js 回调函数"></a>Node.js 回调函数</h2><p>Node.js 异步编程的直接体现就是回调 ，其所有 API 都支持回调函数。</p><h3 id="阻塞代码实例"><a href="#阻塞代码实例" class="headerlink" title="阻塞代码实例"></a>阻塞代码实例</h3><p>main.js 文件代码：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>); <span class="comment">// file stream 模块？</span></span><br><span class="line"><span class="keyword">var</span> data = fs.readFileSync(<span class="string">'input.txt'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(data.toString());</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"程序执行结束!"</span>);</span><br></pre></td></tr></tbody></table></figure><p>运行程序：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ node main.js</span><br></pre></td></tr></tbody></table></figure><h3 id="非阻塞代码实例"><a href="#非阻塞代码实例" class="headerlink" title="非阻塞代码实例"></a>非阻塞代码实例</h3><p>main.js 文件代码：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line">fs.readFile(<span class="string">'input.txt'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>{</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line">    <span class="built_in">console</span>.log(data.toString());</span><br><span class="line">});</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"程序执行结束!"</span>);</span><br></pre></td></tr></tbody></table></figure><h2 id="Node-js-事件"><a href="#Node-js-事件" class="headerlink" title="Node.js 事件"></a>Node.js 事件</h2><p>通过引入 events 模块，并通过实例化 EventEmitter 类来绑定和监听事件，如下实例：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> events = <span class="built_in">require</span>(<span class="string">'events'</span>);               <span class="comment">// 引入 events 模块</span></span><br><span class="line"><span class="keyword">var</span> eventEmitter = <span class="keyword">new</span> events.EventEmitter(); <span class="comment">// 创建 eventEmitter 对象</span></span><br></pre></td></tr></tbody></table></figure><p>以下程序绑定事件处理程序：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eventEmitter.on(<span class="string">'eventName'</span>, eventHandler);   <span class="comment">// 绑定事件及事件的处理程序</span></span><br></pre></td></tr></tbody></table></figure><p>我们可以通过程序触发事件：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eventEmitter.emit(<span class="string">'eventName'</span>); <span class="comment">// 触发事件</span></span><br></pre></td></tr></tbody></table></figure><p>绑定示例：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> events = <span class="built_in">require</span>(<span class="string">'events'</span>);</span><br><span class="line"><span class="keyword">var</span> eventEmitter = <span class="keyword">new</span> events.EventEmitter();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> connectHandler = <span class="function"><span class="keyword">function</span> <span class="title">connected</span>(<span class="params"></span>) </span>{    <span class="comment">// 创建事件处理程序</span></span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">'连接成功。'</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">eventEmitter.on(<span class="string">'connection'</span>, connectHandler); <span class="comment">// 绑定 connection 事件处理程序</span></span><br><span class="line"></span><br><span class="line">eventEmitter.emit(<span class="string">'connection'</span>);               <span class="comment">// 触发 connection 事件</span></span><br></pre></td></tr></tbody></table></figure><h3 id="EventEmitter-类"><a href="#EventEmitter-类" class="headerlink" title="EventEmitter 类"></a>EventEmitter 类</h3><p>events 模块只提供了一个对象：<code>events.EventEmitter</code>。EventEmitter 的核心就是事件触发与事件监听器功能的封装。</p><p>EventEmitter 对象如果在实例化时发生错误，会触发 error 事件。当添加新的监听器时，newListener 事件会触发，当监听器被移除时，removeListener 事件被触发。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>).EventEmitter;</span><br><span class="line"><span class="keyword">var</span> event = <span class="keyword">new</span> EventEmitter(); </span><br><span class="line">event.on(<span class="string">'ev'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{ </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'ev 事件触发'</span>); </span><br><span class="line">}); </span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{ </span><br><span class="line">    event.emit(<span class="string">'ev'</span>); </span><br><span class="line">}, <span class="number">1000</span>); <span class="comment">// 定时1秒</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> events = <span class="built_in">require</span>(<span class="string">'events'</span>); </span><br><span class="line"><span class="keyword">var</span> emitter = <span class="keyword">new</span> events.EventEmitter(); </span><br><span class="line">emitter.on(<span class="string">'ev'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">arg1, arg2</span>) </span>{ </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'listener1'</span>, arg1, arg2); </span><br><span class="line">}); </span><br><span class="line">emitter.on(<span class="string">'ev'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">arg1, arg2</span>) </span>{ </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'listener2'</span>, arg1, arg2); </span><br><span class="line">}); </span><br><span class="line">emitter.emit(<span class="string">'ev'</span>, <span class="string">'arg1 参数'</span>, <span class="string">'arg2 参数'</span>);</span><br></pre></td></tr></tbody></table></figure><p>运行结果：两个事件监听器回调函数被先后调用。</p><p><strong>EventEmitter 的属性</strong></p><ol><li><code>addListener(event, listener)</code> 为指定事件添加一个监听器到监听器数组的尾部。</li><li><code>on(event, listener)</code> 为指定事件注册一个监听器，接受一个字符串 event 和一个回调函数。</li></ol><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.on(<span class="string">'ev'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">stream</span>) </span>{ ; });</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li><code>once(event, listener)</code> 为指定事件注册一个单次监听器，即 监听器最多只会触发一次，触发后立刻解除该监听器</li></ol><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.once(<span class="string">'ev'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">stream</span>) </span>{ ; });</span><br></pre></td></tr></tbody></table></figure><ol start="4"><li><code>removeListener(event, listener)</code> 移除指定事件的某个监听器，监听器必须是该事件已经注册过的监听器。它接受两个参数，第一个是事件名称，第二个是回调函数名称。</li></ol><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.removeListener(<span class="string">'ev'</span>, callback);</span><br></pre></td></tr></tbody></table></figure><ol start="5"><li><code>removeAllListeners([event])</code> 移除所有事件的所有监听器， 如果指定事件，则移除指定事件的所有监听器。</li><li><code>setMaxListeners(n)</code> 默认情况下， EventEmitters 如果你添加的监听器超过 10 个就会输出警告信息。 setMaxListeners 函数用于提高监听器的默认限制的数量。</li><li><code>listeners(event)</code> 返回指定事件的监听器数组。  </li><li><code>emit(event, [arg1], [arg2], [...])</code> 按参数的顺序执行每个监听器，如果事件有注册监听返回 true，否则返回 false。</li></ol><p><strong>类方法</strong></p><ol><li><code>listenerCount(emitter, event)</code> 返回指定事件的监听器数量。</li></ol><p><strong>事件</strong></p><ol><li><code>newListener</code><ul><li>event - 字符串，事件名称</li><li>listener- 处理事件函数该事件在添加新监听器时被触发。</li></ul></li><li><code>removeListener</code><ul><li>event - 字符串，事件名称</li><li>listener - 处理事件函数从指定监听器数组中删除一个监听器。需要注意的是，此操作将会改变处于被删监听器之后的那些监听器的索引。</li></ul></li></ol><p>实例：获取特定事件数量</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> events = <span class="built_in">require</span>(<span class="string">'events'</span>);</span><br><span class="line"><span class="keyword">var</span> eventEmitter = <span class="keyword">new</span> events.EventEmitter();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> listener1 = <span class="function"><span class="keyword">function</span> <span class="title">listener1</span>(<span class="params"></span>) </span>{;}</span><br><span class="line"><span class="keyword">var</span> listener2 = <span class="function"><span class="keyword">function</span> <span class="title">listener2</span>(<span class="params"></span>) </span>{;}</span><br><span class="line"></span><br><span class="line"><span class="comment">// addListener 和 on 效果一样的</span></span><br><span class="line">eventEmitter.addListener(<span class="string">'connection'</span>, listener1);</span><br><span class="line">eventEmitter.on(<span class="string">'connection'</span>, listener2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> eventListeners = <span class="built_in">require</span>(<span class="string">'events'</span>).EventEmitter.listenerCount(eventEmitter,<span class="string">'connection'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(eventListeners + <span class="string">" 个监听器监听连接事件。"</span>);</span><br><span class="line"></span><br><span class="line">eventEmitter.removeListener(<span class="string">'connection'</span>, listener1);</span><br><span class="line"></span><br><span class="line">eventEmitter.emit(<span class="string">'connection'</span>);</span><br></pre></td></tr></tbody></table></figure><h3 id="error-事件"><a href="#error-事件" class="headerlink" title="error 事件"></a>error 事件</h3><p>如果没有响应的监听器，Node.js 会把它当作异常，退出程序并输出错误信息。 </p><p>一般要为会触发 error 事件的对象设置监听器，避免遇到错误后整个程序崩溃。 </p><h3 id="继承-EventEmitter"><a href="#继承-EventEmitter" class="headerlink" title="继承 EventEmitter"></a>继承 EventEmitter</h3><p>大多数时候我们不会直接使用 EventEmitter，而是在对象中继承它。包括 fs、net、 http 在内的，只要是支持事件响应的核心模块都是 EventEmitter 的子类。</p><h1 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h1><h2 id="Node-js-Buffer-缓冲区"><a href="#Node-js-Buffer-缓冲区" class="headerlink" title="Node.js Buffer 缓冲区"></a>Node.js Buffer 缓冲区</h2><p>JavaScript 语言自身只有字符串数据类型，没有二进制数据类型。</p><p>但在处理像TCP流或文件流时，必须使用到二进制数据。因此在 Node.js中，定义了一个 Buffer 类，该类用来创建一个专门存放二进制数据的缓存区。</p><h3 id="Buffer-与字符编码"><a href="#Buffer-与字符编码" class="headerlink" title="Buffer 与字符编码"></a>Buffer 与字符编码</h3><p>Buffer 实例一般用于表示编码字符的序列，比如 UTF-8 、 UCS2 、 Base64 、或十六进制编码的数据。 通过使用显式的字符编码，就可以在 Buffer 实例与普通的 JavaScript 字符串之间进行相互转换。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buf = Buffer.from(<span class="string">'runoob'</span>, <span class="string">'ascii'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(buf.toString(<span class="string">'hex'</span>)); <span class="comment">// 输出 72756e6f6f62</span></span><br><span class="line"><span class="built_in">console</span>.log(buf.toString(<span class="string">'base64'</span>)); <span class="comment">// 输出 cnVub29i</span></span><br></pre></td></tr></tbody></table></figure><p><strong>Node.js 目前支持的字符编码包括：</strong></p><ul><li><strong>ascii</strong> - 仅支持 7 位 ASCII 数据。如果设置去掉高位的话，这种编码是非常快的。</li><li><strong>utf8</strong> - 多字节编码的 Unicode 字符。许多网页和其他文档格式都使用 UTF-8 。</li><li><strong>utf16le</strong> - 2 或 4 个字节，小字节序编码的 Unicode 字符。支持代理对（U+10000 至 U+10FFFF）。</li><li><strong>ucs2</strong> - <strong>utf16le</strong> 的别名。</li><li><strong>base64</strong> - Base64 编码。</li><li><strong>latin1</strong> - 一种把 <strong>Buffer</strong> 编码成一字节编码的字符串的方式。</li><li><strong>binary</strong> - <strong>latin1</strong> 的别名。</li><li><strong>hex</strong> - 将每个字节编码为两个十六进制字符。</li></ul><hr><h3 id="创建-Buffer-类"><a href="#创建-Buffer-类" class="headerlink" title="创建 Buffer 类"></a>创建 Buffer 类</h3><p>Buffer 提供了以下 API 来创建 Buffer 类：</p><ul><li><strong>Buffer.alloc(size[, fill[, encoding]])：</strong> 返回一个指定大小的 Buffer 实例，如果没有设置 fill，则默认填满 0</li><li><strong>Buffer.allocUnsafe(size)：</strong> 返回一个指定大小的 Buffer 实例，但是它不会被初始化，所以它可能包含敏感的数据</li><li><strong>Buffer.allocUnsafeSlow(size)</strong></li><li><strong>Buffer.from(array)：</strong> 返回一个被 array 的值初始化的新的 Buffer 实例（传入的 array 的元素只能是数字，不然就会自动被 0 覆盖）</li><li><strong>Buffer.from(arrayBuffer[, byteOffset[, length]])：</strong> 返回一个新建的与给定的 ArrayBuffer 共享同一内存的 Buffer。</li><li><strong>Buffer.from(buffer)：</strong> 复制传入的 Buffer 实例的数据，并返回一个新的 Buffer 实例</li><li><strong>Buffer.from(string[, encoding])：</strong> 返回一个被 string 的值初始化的新的 Buffer 实例</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个长度为 10、且用 0 填充（默认）的 Buffer。</span></span><br><span class="line"><span class="keyword">const</span> buf1 = Buffer.alloc(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个长度为 10、且用 0x1 填充的 Buffer。 </span></span><br><span class="line"><span class="keyword">const</span> buf2 = Buffer.alloc(<span class="number">10</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个长度为 10、且未初始化的 Buffer，这个方法比调用 Buffer.alloc() 更快，</span></span><br><span class="line"><span class="comment">// 但返回的 Buffer 实例可能包含旧数据，因此需要使用 fill() 或 write() 重写。</span></span><br><span class="line"><span class="keyword">const</span> buf3 = Buffer.allocUnsafe(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个包含 [0x1, 0x2, 0x3] 的 Buffer。</span></span><br><span class="line"><span class="keyword">const</span> buf4 = Buffer.from([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个包含 UTF-8 字节 [0x74, 0xc3, 0xa9, 0x73, 0x74] 的 Buffer。</span></span><br><span class="line"><span class="keyword">const</span> buf5 = Buffer.from(<span class="string">'tést'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个包含 Latin-1 字节 [0x74, 0xe9, 0x73, 0x74] 的 Buffer。</span></span><br><span class="line"><span class="keyword">const</span> buf6 = Buffer.from(<span class="string">'tést'</span>, <span class="string">'latin1'</span>);</span><br></pre></td></tr></tbody></table></figure><h3 id="写入缓冲区"><a href="#写入缓冲区" class="headerlink" title="写入缓冲区"></a>写入缓冲区</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">buf.write(string[, offset[, length]][, encoding])</span><br></pre></td></tr></tbody></table></figure><ul><li><strong>string</strong> - 写入缓冲区的字符串。</li><li><strong>offset</strong> - 缓冲区开始写入的索引值，默认为 0 。</li><li><strong>length</strong> - 写入的字节数，默认为 buffer.length</li><li><strong>encoding</strong> - 使用的编码。默认为 ‘utf8’ 。</li></ul><p>根据 encoding 的字符编码写入 string 到 buf 中的 offset 位置。如果 buf 没有足够的空间保存整个字符串，则只会写入 string 的一部分。 只部分解码的字符不会被写入。</p><p><strong>返回值</strong>：返回实际写入的大小。如果 buffer 空间不足， 则只会写入部分字符串。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">buf = Buffer.alloc(<span class="number">256</span>);</span><br><span class="line">len = buf.write(<span class="string">"www.runoob.com"</span>); <span class="comment">// 14</span></span><br></pre></td></tr></tbody></table></figure><h3 id="从缓冲区读取数据"><a href="#从缓冲区读取数据" class="headerlink" title="从缓冲区读取数据"></a>从缓冲区读取数据</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">buf.toString([encoding[, start[, end]]])</span><br></pre></td></tr></tbody></table></figure><ul><li><strong>encoding</strong> - 使用的编码。默认为 ‘utf8’ 。</li><li><strong>start</strong> - 指定开始读取的索引位置，默认为 0。</li><li><strong>end</strong> - 结束位置，默认为缓冲区的末尾。</li></ul><p><strong>返回值</strong>：解码缓冲区数据并使用指定的编码返回字符串。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">buf = Buffer.alloc(<span class="number">26</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; <span class="number">26</span> ; i++) {</span><br><span class="line">  buf[i] = i + <span class="number">97</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( buf.toString(<span class="string">'ascii'</span>));       <span class="comment">// 输出: abcdefghijklmnopqrstuvwxyz</span></span><br><span class="line"><span class="built_in">console</span>.log( buf.toString(<span class="string">'ascii'</span>,<span class="number">0</span>,<span class="number">5</span>));   <span class="comment">// 输出: abcde</span></span><br><span class="line"><span class="built_in">console</span>.log( buf.toString(<span class="string">'utf8'</span>,<span class="number">0</span>,<span class="number">5</span>));    <span class="comment">// 输出: abcde</span></span><br><span class="line"><span class="built_in">console</span>.log( buf.toString(<span class="literal">undefined</span>,<span class="number">0</span>,<span class="number">5</span>)); <span class="comment">// 使用 'utf8' 编码, 并输出: abcde</span></span><br></pre></td></tr></tbody></table></figure><h3 id="将-Buffer-转换为-JSON-对象"><a href="#将-Buffer-转换为-JSON-对象" class="headerlink" title="将 Buffer 转换为 JSON 对象"></a>将 Buffer 转换为 JSON 对象</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">buf.toJSON()</span><br></pre></td></tr></tbody></table></figure><p>当字符串化一个 Buffer 实例时，<a href="https://www.runoob.com/js/javascript-json-stringify.html" target="_blank" rel="noopener">JSON.stringify()</a> 会隐式地调用该 toJSON()。</p><p><strong>返回值</strong>：返回 JSON 对象。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buf = Buffer.from([<span class="number">0x1</span>, <span class="number">0x2</span>, <span class="number">0x3</span>, <span class="number">0x4</span>, <span class="number">0x5</span>]);</span><br><span class="line"><span class="keyword">const</span> json = <span class="built_in">JSON</span>.stringify(buf);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(json); <span class="comment">// 输出: {"type":"Buffer","data":[1,2,3,4,5]}</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> copy = <span class="built_in">JSON</span>.parse(json, (key, value) =&gt; {</span><br><span class="line">  <span class="keyword">return</span> value &amp;&amp; value.type === <span class="string">'Buffer'</span> ? Buffer.from(value.data) : value;</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(copy); <span class="comment">// 输出: &lt;Buffer 01 02 03 04 05&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="缓冲区合并"><a href="#缓冲区合并" class="headerlink" title="缓冲区合并"></a>缓冲区合并</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Buffer.concat(list[, totalLength])</span><br></pre></td></tr></tbody></table></figure><ul><li><strong>list</strong> - 用于合并的 Buffer 对象数组列表。</li><li><strong>totalLength</strong> - 指定合并后Buffer对象的总长度。</li></ul><p><strong>返回值</strong>：返回一个多个成员合并的新 Buffer 对象。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> buffer1 = Buffer.from((<span class="string">'Hello '</span>));</span><br><span class="line"><span class="keyword">var</span> buffer2 = Buffer.from((<span class="string">'World!'</span>));</span><br><span class="line"><span class="keyword">var</span> buffer3 = Buffer.concat([buffer1,buffer2]);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"buffer3: "</span> + buffer3.toString()); <span class="comment">// buffer3: Hello World!</span></span><br></pre></td></tr></tbody></table></figure><h3 id="缓冲区比较"><a href="#缓冲区比较" class="headerlink" title="缓冲区比较"></a>缓冲区比较</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">buf.compare(otherBuffer);</span><br></pre></td></tr></tbody></table></figure><ul><li><strong>otherBuffer</strong> - 与 <strong>buf</strong> 对象比较的另外一个 Buffer 对象。</li></ul><p><strong>返回值</strong>：返回一个数字，表示 <strong>buf</strong> 在 <strong>otherBuffer</strong> 之前，之后或相同。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> buffer1 = Buffer.from(<span class="string">'ABC'</span>);</span><br><span class="line"><span class="keyword">var</span> buffer2 = Buffer.from(<span class="string">'ABCD'</span>);</span><br><span class="line"><span class="keyword">var</span> result = buffer1.compare(buffer2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(result &lt; <span class="number">0</span>) {</span><br><span class="line">   <span class="built_in">console</span>.log(buffer1 + <span class="string">" 在 "</span> + buffer2 + <span class="string">"之前"</span>);</span><br><span class="line">}<span class="keyword">else</span> <span class="keyword">if</span>(result == <span class="number">0</span>){ }</span><br></pre></td></tr></tbody></table></figure><h3 id="拷贝缓冲区"><a href="#拷贝缓冲区" class="headerlink" title="拷贝缓冲区"></a>拷贝缓冲区</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">buf.copy(targetBuffer[, targetStart[, sourceStart[, sourceEnd]]])</span><br></pre></td></tr></tbody></table></figure><ul><li><strong>targetBuffer</strong> - 要拷贝的 Buffer 对象。</li><li><strong>targetStart</strong> - 数字, 可选, 默认: 0</li><li><strong>sourceStart</strong> - 数字, 可选, 默认: 0</li><li><strong>sourceEnd</strong> - 数字, 可选, 默认: buffer.length</li></ul><p><strong>返回值</strong>：没有返回值。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> buf1 = Buffer.from(<span class="string">'abcdefghijkl'</span>);</span><br><span class="line"><span class="keyword">var</span> buf2 = Buffer.from(<span class="string">'RUNOOB'</span>);</span><br><span class="line">buf2.copy(buf1, <span class="number">2</span>); <span class="comment">//将 buf2 插入到 buf1 指定位置上</span></span><br><span class="line"><span class="built_in">console</span>.log(buf1.toString()); <span class="comment">// abRUNOOBijkl</span></span><br></pre></td></tr></tbody></table></figure><h3 id="缓冲区裁剪"><a href="#缓冲区裁剪" class="headerlink" title="缓冲区裁剪"></a>缓冲区裁剪</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">buf.slice([start[, end]])</span><br></pre></td></tr></tbody></table></figure><ul><li><strong>start</strong> - 数字, 可选, 默认: 0</li><li><strong>end</strong> - 数字, 可选, 默认: buffer.length</li></ul><p><strong>返回值</strong>：返回一个新的缓冲区，它和旧缓冲区指向同一块内存，但是从索引 start 到 end 的位置剪切。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> buffer1 = Buffer.from(<span class="string">'hello'</span>);</span><br><span class="line"><span class="keyword">var</span> buffer2 = buffer1.slice(<span class="number">0</span>,<span class="number">2</span>); <span class="comment">// 剪切缓冲区</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"buffer2: "</span> + buffer2.toString()); <span class="comment">// he</span></span><br></pre></td></tr></tbody></table></figure><h3 id="缓冲区长度"><a href="#缓冲区长度" class="headerlink" title="缓冲区长度"></a>缓冲区长度</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">buf.length;</span><br></pre></td></tr></tbody></table></figure><p><strong>返回值</strong>：返回 Buffer 对象所占据的内存长度。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> buffer = Buffer.from(<span class="string">'www.runoob.com'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"buffer length: "</span> + buffer.length); <span class="comment">// 14</span></span><br></pre></td></tr></tbody></table></figure><h2 id="Node-js-Stream"><a href="#Node-js-Stream" class="headerlink" title="Node.js Stream"></a>Node.js Stream</h2><p>Stream 是一个抽象接口，Node 中有很多对象实现了这个接口。例如，对http 服务器发起请求的request 对象就是一个 Stream，还有stdout（标准输出）。</p><p>Node.js，Stream 有四种流类型：</p><ul><li><strong>Readable</strong> - 可读操作。</li><li><strong>Writable</strong> - 可写操作。</li><li><strong>Duplex</strong> - 可读可写操作.</li><li><strong>Transform</strong> - 操作被写入数据，然后读出结果。</li></ul><p>所有的 Stream 对象都是 EventEmitter 的实例。常用的事件有：</p><ul><li><strong>data</strong> - 当有数据可读时触发。</li><li><strong>end</strong> - 没有更多的数据可读时触发。</li><li><strong>error</strong> - 在接收和写入过程中发生错误时触发。</li><li><strong>finish</strong> - 所有数据已被写入到底层系统时触发。</li></ul><h3 id="从流中读取数据"><a href="#从流中读取数据" class="headerlink" title="从流中读取数据"></a>从流中读取数据</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>); <span class="comment">// file stream 的缩写吧</span></span><br><span class="line"><span class="keyword">var</span> data = <span class="string">''</span>;<span class="comment">// 存储读出的内容</span></span><br><span class="line"><span class="keyword">var</span> readerStream = fs.createReadStream(<span class="string">'input.txt'</span>); <span class="comment">// 创建可读流</span></span><br><span class="line"></span><br><span class="line">readerStream.setEncoding(<span class="string">'UTF8'</span>); <span class="comment">// 设置编码为 utf8。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理流事件 --&gt; data, end, error</span></span><br><span class="line">readerStream.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>) </span>{ data += chunk; } );</span><br><span class="line">readerStream.on(<span class="string">'end'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{ <span class="built_in">console</span>.log(data); } );</span><br><span class="line">readerStream.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>{ <span class="built_in">console</span>.log(err.stack); } );</span><br></pre></td></tr></tbody></table></figure><h3 id="写入流"><a href="#写入流" class="headerlink" title="写入流"></a>写入流</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"><span class="keyword">var</span> data = <span class="string">'菜鸟教程官网地址：www.runoob.com'</span>;</span><br><span class="line"><span class="keyword">var</span> writerStream = fs.createWriteStream(<span class="string">'output.txt'</span>); <span class="comment">// 创建一个可以写入的流</span></span><br><span class="line"></span><br><span class="line">writerStream.write(data,<span class="string">'UTF8'</span>); <span class="comment">// 使用 utf8 编码写入数据</span></span><br><span class="line">writerStream.end(); <span class="comment">// 标记文件末尾</span></span><br><span class="line"></span><br><span class="line">writerStream.on(<span class="string">'finish'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{ <span class="built_in">console</span>.log(<span class="string">"写入完成。"</span>); } );</span><br><span class="line">writerStream.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>{ <span class="built_in">console</span>.log(err.stack); } );</span><br></pre></td></tr></tbody></table></figure><h3 id="管道流"><a href="#管道流" class="headerlink" title="管道流"></a>管道流</h3><p>管道提供了一个输出流到输入流的机制。通常我们用于从一个流中获取数据并将数据传递到另外一个流中。</p><p>以下实例通过读取一个文件内容并将内容写入到另外一个文件中。：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"><span class="keyword">var</span> readerStream = fs.createReadStream(<span class="string">'input.txt'</span>);   <span class="comment">// 创建一个可读流</span></span><br><span class="line"><span class="keyword">var</span> writerStream = fs.createWriteStream(<span class="string">'output.txt'</span>); <span class="comment">// 创建一个可写流</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 管道读写操作：读取 input.txt 文件内容，并将内容写入到 output.txt 文件中</span></span><br><span class="line">readerStream.pipe(writerStream);</span><br></pre></td></tr></tbody></table></figure><h3 id="链式流"><a href="#链式流" class="headerlink" title="链式流"></a>链式流</h3><p>链式是通过连接输出流到另外一个流并创建多个流操作链的机制。链式流一般用于管道操作。</p><p>用管道和链式来压缩和解压文件：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"><span class="keyword">var</span> zlib = <span class="built_in">require</span>(<span class="string">'zlib'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩 input.txt 文件为 input.txt.gz</span></span><br><span class="line">fs.createReadStream(<span class="string">'input.txt'</span>)</span><br><span class="line">  .pipe(zlib.createGzip())</span><br><span class="line">  .pipe(fs.createWriteStream(<span class="string">'input.txt.gz'</span>));</span><br><span class="line">  </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"文件压缩完成。"</span>);</span><br></pre></td></tr></tbody></table></figure><p>执行完以上操作后，我们可以看到当前目录下生成了 input.txt 的压缩文件 input.txt.gz。 </p><p>接下来，反过来解压该文件，代码如下： </p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"><span class="keyword">var</span> zlib = <span class="built_in">require</span>(<span class="string">'zlib'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解压 input.txt.gz 文件为 input.txt</span></span><br><span class="line">fs.createReadStream(<span class="string">'input.txt.gz'</span>)</span><br><span class="line">  .pipe(zlib.createGunzip())</span><br><span class="line">  .pipe(fs.createWriteStream(<span class="string">'input.txt'</span>));</span><br><span class="line">  </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"文件解压完成。"</span>);</span><br></pre></td></tr></tbody></table></figure><h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><h2 id="Node-js-模块系统"><a href="#Node-js-模块系统" class="headerlink" title="Node.js 模块系统"></a>Node.js 模块系统</h2><p>模块是Node.js 应用程序的基本组成部分，文件和模块是一一对应的。</p><h3 id="创建模块"><a href="#创建模块" class="headerlink" title="创建模块"></a>创建模块</h3><p>在 Node.js 中，创建一个模块非常简单，如下我们创建一个 <strong>main.js</strong> 文件，代码如下:</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hello = <span class="built_in">require</span>(<span class="string">'./hello'</span>);</span><br><span class="line">hello.world();</span><br></pre></td></tr></tbody></table></figure><p>以上实例中，代码 <code>require('./hello')</code> 引入了当前目录下的 hello.js 文件（<code>./</code> 为当前目录，node.js 默认后缀为 js）。</p><p>Node.js 提供了 exports 和 require 两个对象，其中 exports 是模块公开的接口，require 用于从外部获取一个模块的接口，即所获取模块的 exports 对象。</p><p>接下来我们就来创建 <strong>hello.js</strong> 文件，代码如下：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">exports.world = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Hello World'</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在以上示例中，hello.js 通过 exports 对象把 world 作为模块的访问接口，在 main.js 中通过 require(‘./hello’) 加载这个模块，然后就可以直接访 问 hello.js 中 exports 对象的成员函数了。</p><h4 id="封装对象到模块"><a href="#封装对象到模块" class="headerlink" title="封装对象到模块"></a>封装对象到模块</h4><p>有时候我们只是想把一个对象封装到模块中，格式如下：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>例如：</p><p><strong><em>hello.js</em></strong></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Hello</span>(<span class="params"></span>) </span>{ </span><br><span class="line">    <span class="keyword">var</span> name; </span><br><span class="line">    <span class="keyword">this</span>.setName = <span class="function"><span class="keyword">function</span>(<span class="params">thyName</span>) </span>{ </span><br><span class="line">        name = thyName; </span><br><span class="line">    }; </span><br><span class="line">    <span class="keyword">this</span>.sayHello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{ </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Hello '</span> + name); </span><br><span class="line">    }; </span><br><span class="line">}; </span><br><span class="line"><span class="built_in">module</span>.exports = Hello;</span><br></pre></td></tr></tbody></table></figure><p>这样就可以直接获得这个对象了：</p><p><strong><em>main.js</em></strong></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Hello = <span class="built_in">require</span>(<span class="string">'./hello'</span>); </span><br><span class="line">hello = <span class="keyword">new</span> Hello(); </span><br><span class="line">hello.setName(<span class="string">'BYVoid'</span>); </span><br><span class="line">hello.sayHello();</span><br></pre></td></tr></tbody></table></figure><p>模块接口的唯一变化是使用 <code>module.exports = Hello</code> 代替了<code>exports.world = function(){}</code>。 在外部引用该模块时，其接口对象就是要输出的 <code>Hello</code> 对象本身，而不是原先的 <code>exports</code>。</p><h3 id="服务端模块"><a href="#服务端模块" class="headerlink" title="服务端模块"></a>服务端模块</h3><p>Node.js 中自带了一个叫做 <strong>http</strong> 的模块。</p><p>模块加载顺序：文件模块缓存 -&gt; 原生模块 -&gt; 文件</p><h2 id="Node-js-函数"><a href="#Node-js-函数" class="headerlink" title="Node.js 函数"></a>Node.js 函数</h2><p>一个函数可以作为另一个函数的参数。我们可以先定义一个函数，然后传递，也可以在传递参数的地方直接定义函数。例如：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params">word</span>) </span>{</span><br><span class="line">    <span class="built_in">console</span>.log(word);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">execute</span>(<span class="params">someFunction, value</span>) </span>{</span><br><span class="line">    someFunction(value);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">execute(say, <span class="string">"Hello"</span>);</span><br></pre></td></tr></tbody></table></figure><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><p>把一个函数作为变量传递，绕开“先定义，再传递”</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">execute</span>(<span class="params">someFunction, value</span>) </span>{</span><br><span class="line">    someFunction(value);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">execute(<span class="function"><span class="keyword">function</span>(<span class="params">word</span>)</span>{ <span class="built_in">console</span>.log(word) }, <span class="string">"Hello"</span>);</span><br></pre></td></tr></tbody></table></figure><h2 id="Node-js-路由"><a href="#Node-js-路由" class="headerlink" title="Node.js 路由"></a>Node.js 路由</h2><p>我们要为路由提供请求的 URL 和其他需要的 GET 及 POST 参数，随后路由需要根据这些数据来执行相应的代码。</p><p>我们需要的所有数据都会包含在 request 对象中，该对象作为 onRequest() 回调函数的第一个参数传递。但是为了解析这些数据，我们需要额外的 Node.JS 模块，它们分别是 url 和 querystring 模块。</p><p>找出浏览器请求的 URL 路径：</p><p><strong><em>server.js</em></strong></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">"url"</span>);</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params">route</span>) </span>{</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">onRequest</span>(<span class="params">request, response</span>) </span>{</span><br><span class="line">        <span class="keyword">var</span> pathname = url.parse(request.url).pathname;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Request for "</span> + pathname + <span class="string">" received."</span>);</span><br><span class="line"></span><br><span class="line">        route(pathname);</span><br><span class="line"></span><br><span class="line">        response.writeHead(<span class="number">200</span>, {<span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span>});</span><br><span class="line">        response.write(<span class="string">"Hello World"</span>);</span><br><span class="line">        response.end();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    http.createServer(onRequest).listen(<span class="number">8888</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Server has started."</span>);</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line">exports.start = start;</span><br></pre></td></tr></tbody></table></figure><p><strong><em>router.js</em></strong></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">route</span>(<span class="params">pathname</span>) </span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"About to route a request for "</span> + pathname);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">exports.route = route;</span><br></pre></td></tr></tbody></table></figure><p><strong><em>index.js</em></strong></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> server = <span class="built_in">require</span>(<span class="string">"./server"</span>);</span><br><span class="line"><span class="keyword">var</span> router = <span class="built_in">require</span>(<span class="string">"./router"</span>);</span><br><span class="line"> </span><br><span class="line">server.start(router.route);</span><br></pre></td></tr></tbody></table></figure><p><code>$ node index.js</code>，浏览器访问 <code>http://127.0.0.1:8888</code></p><blockquote><p>输出会有比较烦人的 /favicon.ico 请求相关的部分（可无视）</p></blockquote><h2 id="Node-js-全局对象"><a href="#Node-js-全局对象" class="headerlink" title="Node.js 全局对象"></a>Node.js 全局对象</h2><p>在浏览器 JavaScript 中，通常 window 是全局对象， 而 Node.js 中的全局对象是 global，所有全局变量（除了 global 本身以外）都是 global 对象的属性。global 最根本的作用是作为全局变量的宿主。</p><p>当你定义一个全局变量时，这个变量同时也会成为全局对象的属性，反之亦然。需要注意的是，在 Node.js 中你不可能在最外层定义变量，因为所有用户代码都是属于当前模块的， 而模块本身不是最外层上下文。</p><p><strong>注意：</strong> 最好不要使用 var 定义变量以避免引入全局变量，因为全局变量会污染命名空间，提高代码的耦合风险。</p><ul><li><p><code>__filename</code></p><p>当前正在执行的脚本的文件名。输出文件所在位置的绝对路径，且和命令行参数所指定的文件名不一定相同。 如果在模块中，返回的值是模块文件的路径。</p></li><li><p><code>__dirname</code></p><p>当前执行脚本所在的目录。</p></li><li><p><code>setTimeout(cb, ms)</code></p><p>在指定的毫秒(ms)数后执行指定函数(cb)。只执行一次指定函数。</p><p>返回一个代表定时器的句柄值。</p></li><li><p><code>clearTimeout(t)</code></p><p>用于停止一个之前通过 setTimeout() 创建的定时器。 参数 <strong>t</strong> 是通过 setTimeout() 函数创建的定时器。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printHello</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">"Hello, World!"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> t = setTimeout(printHello, <span class="number">2000</span>); <span class="comment">// 两秒后执行以上函数</span></span><br><span class="line"></span><br><span class="line">clearTimeout(t); <span class="comment">// 清除定时器</span></span><br></pre></td></tr></tbody></table></figure></li><li><p><code>setInterval(cb, ms)</code></p><p>在指定的毫秒(ms)数后执行指定函数(cb)。会不停地调用，直到清除或关闭。</p><p>返回一个代表定时器的句柄值。可以使用 <strong>clearInterval(t)</strong> 函数来清除定时器。</p></li><li><p><code>console</code></p><p>提供控制台标准输出：log / info / error / warn / dir / time / timeEnd / trace / assert</p></li><li><p><code>process</code></p><p>描述当前Node.js 进程状态的对象，提供了一个与操作系统的简单接口。</p><p>exit / beforeExit / uncaughtException / Signal 事件</p><p>退出状态码、属性、方法：<a href="https://www.runoob.com/nodejs/nodejs-global-object.html" target="_blank" rel="noopener">菜鸟教程</a></p></li></ul><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><h2 id="Node-js-常用工具"><a href="#Node-js-常用工具" class="headerlink" title="Node.js 常用工具"></a>Node.js 常用工具</h2><p>util 是一个Node.js 核心模块，提供常用函数的集合，用于弥补核心JavaScript 的功能 过于精简的不足。</p><h3 id="util-inherits"><a href="#util-inherits" class="headerlink" title="util.inherits"></a>util.inherits</h3><p>实现对象间原型继承的函数</p><p>JavaScript 的面向对象特性是基于原型的，与常见的基于类的不同。JavaScript 没有提供对象继承的语言级别特性，而是通过原型复制来实现的。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>); </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Base</span>(<span class="params"></span>) </span>{ </span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'base'</span>; </span><br><span class="line">    <span class="keyword">this</span>.base = <span class="number">1991</span>; </span><br><span class="line">    <span class="keyword">this</span>.sayHello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{ </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Hello '</span> + <span class="keyword">this</span>.name); </span><br><span class="line">    }; </span><br><span class="line">} </span><br><span class="line">Base.prototype.showName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{ </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">}; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub</span>(<span class="params"></span>) </span>{ </span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'sub'</span>; </span><br><span class="line">} </span><br><span class="line">util.inherits(Sub, Base); </span><br><span class="line"><span class="keyword">var</span> objBase = <span class="keyword">new</span> Base(); </span><br><span class="line">objBase.showName(); <span class="comment">// base</span></span><br><span class="line">objBase.sayHello(); <span class="comment">// Hello base</span></span><br><span class="line"><span class="built_in">console</span>.log(objBase); <span class="comment">// { name: 'base', base: 1991, sayHello: [Function] } </span></span><br><span class="line"><span class="keyword">var</span> objSub = <span class="keyword">new</span> Sub();</span><br><span class="line">objSub.showName(); <span class="comment">// sub</span></span><br><span class="line"><span class="comment">//objSub.sayHello(); // (构造函数中的不会继承)</span></span><br><span class="line"><span class="built_in">console</span>.log(objSub); { <span class="attr">name</span>: <span class="string">'sub'</span> }</span><br></pre></td></tr></tbody></table></figure><p>我们定义了一个基础对象 Base 和一个继承自 Base 的 Sub，Base 有三个在构造函数内定义的属性和一个原型中定义的函数，通过util.inherits 实现继承。</p><p><strong>注意：</strong>Sub 仅仅继承了Base 在原型中定义的函数，而构造函数内部创造的 base 属 性和 sayHello 函数都<strong>没有</strong>被 Sub 继承。</p><p>同时，在原型中定义的属性不会被 console.log 作 为对象的属性输出。如果我们去掉 objSub.sayHello(); 这行的注释，将会看到：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">node.js:<span class="number">201</span> </span><br><span class="line"><span class="keyword">throw</span> e; <span class="comment">// process.nextTick error, or 'error' event on first tick </span></span><br><span class="line">^ </span><br><span class="line">TypeError: Object #&amp;lt;Sub&amp;gt; has no method 'sayHello' </span><br><span class="line">at <span class="built_in">Object</span>.&amp;lt;anonymous&amp;gt; (<span class="regexp">/home/</span>byvoid/utilinherits.js:<span class="number">29</span>:<span class="number">8</span>) </span><br><span class="line">at Module._compile (<span class="built_in">module</span>.js:<span class="number">441</span>:<span class="number">26</span>) </span><br><span class="line">at <span class="built_in">Object</span>..js (<span class="built_in">module</span>.js:<span class="number">459</span>:<span class="number">10</span>) </span><br><span class="line">at Module.load (<span class="built_in">module</span>.js:<span class="number">348</span>:<span class="number">31</span>) </span><br><span class="line">at <span class="built_in">Function</span>._load (<span class="built_in">module</span>.js:<span class="number">308</span>:<span class="number">12</span>) </span><br><span class="line">at <span class="built_in">Array</span><span class="number">.0</span> (<span class="built_in">module</span>.js:<span class="number">479</span>:<span class="number">10</span>) </span><br><span class="line">at EventEmitter._tickCallback (node.js:<span class="number">192</span>:<span class="number">40</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="util-inspect"><a href="#util-inspect" class="headerlink" title="util.inspect"></a>util.inspect</h3><p><strong>util.inspect(object,[showHidden],[depth],[colors])</strong> 是一个将任意对象转换 为字符串的方法，通常用于调试和错误输出。它至少接受一个参数 object，即要转换的对象。</p><ul><li><code>showHidden</code> 是一个可选参数，如果值为 true，将会输出更多隐藏信息。</li><li><code>depth</code> 表示最大递归的层数，如果对象很复杂，你可以指定层数以控制输出信息的多 少。如果不指定depth，默认会递归2层，指定为 null 表示将不限递归层数完整遍历对象。 如果color 值为 true，输出格式将会以ANSI 颜色编码，通常用于在终端显示更漂亮 的效果。</li></ul><p>特别要指出的是，<code>util.inspect</code> 并不会简单地直接把对象转换为字符串，即使该对象定义了 <code>toString</code> 方法也不会调用。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>); </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>{ </span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'byvoid'</span>; </span><br><span class="line">    <span class="keyword">this</span>.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{ </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name; </span><br><span class="line">    }; </span><br><span class="line">} </span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Person(); </span><br><span class="line"><span class="built_in">console</span>.log(util.inspect(obj)); </span><br><span class="line"><span class="built_in">console</span>.log(util.inspect(obj, <span class="literal">true</span>));</span><br></pre></td></tr></tbody></table></figure><p>运行结果是：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Person { <span class="attr">name</span>: <span class="string">'byvoid'</span>, <span class="attr">toString</span>: [<span class="built_in">Function</span>] }</span><br><span class="line">Person {</span><br><span class="line">  name: <span class="string">'byvoid'</span>,</span><br><span class="line">  toString: </span><br><span class="line">   { [<span class="built_in">Function</span>]</span><br><span class="line">     [length]: <span class="number">0</span>,</span><br><span class="line">     [name]: <span class="string">''</span>,</span><br><span class="line">     [<span class="built_in">arguments</span>]: <span class="literal">null</span>,</span><br><span class="line">     [caller]: <span class="literal">null</span>,</span><br><span class="line">     [prototype]: { [<span class="keyword">constructor</span>]: [Circular] } } }</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;环境配置&quot;&gt;&lt;a href=&quot;#环境配置&quot; class=&quot;headerlink&quot; title=&quot;环境配置&quot;&gt;&lt;/a&gt;环境配置&lt;/h1&gt;&lt;p&gt;全篇教程来源：菜鸟教程 &lt;a href=&quot;https://www.runoob.com/nodejs/nodejs-tutorial.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.runoob.com/nodejs/nodejs-tutorial.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;64 位安装包下载地址 : &lt;a href=&quot;https://nodejs.org/dist/v4.4.3/node-v4.4.3-x64.msi&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://nodejs.org/dist/v4.4.3/node-v4.4.3-x64.msi&lt;/a&gt; &lt;/p&gt;
&lt;h2 id=&quot;第一个应用&quot;&gt;&lt;a href=&quot;#第一个应用&quot; class=&quot;headerlink&quot; title=&quot;第一个应用&quot;&gt;&lt;/a&gt;第一个应用&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;引入 required 模块&lt;/p&gt;
&lt;p&gt;我们使用 &lt;strong&gt;require&lt;/strong&gt; 指令来载入 http 模块，并将实例化的 HTTP 赋值给变量 http，实例如下:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; http = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;http&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="学习笔记" scheme="http://blog.iwxyi.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Node.js" scheme="http://blog.iwxyi.com/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>Bat常用脚本命令</title>
    <link href="http://blog.iwxyi.com/2018/09/01/Bat%E5%B8%B8%E7%94%A8%E8%84%9A%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
    <id>http://blog.iwxyi.com/2018/09/01/Bat常用脚本命令/</id>
    <published>2018-09-01T12:40:00.000Z</published>
    <updated>2019-10-12T12:41:10.078Z</updated>
    
    <content type="html"><![CDATA[<p><strong>run.bat—打开百度</strong></p><figure class="highlight bat"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">path</span>=<span class="variable">%path%</span>; C:\Program Files (x86)\Internet Explorer\</span><br><span class="line"><span class="built_in">start</span> iexplore http://www.baidu.com</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><p><strong>将c盘下所有文件名输出到a.txt中，如果没有a文件，则在bat同一目录下创建一个</strong></p><figure class="highlight bat"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dir</span> c:\*.* &gt;a.txt</span><br></pre></td></tr></tbody></table></figure><p><strong>执行另一个批处理文件</strong></p><figure class="highlight bat"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> c:\code\run.bat</span><br></pre></td></tr></tbody></table></figure><p><strong>echo回显</strong></p><figure class="highlight bat"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off      表示在此语句后所有运行的命令都不显示命令行本身 </span><br><span class="line"><span class="built_in">cd</span> code          进入code文件夹</span><br><span class="line"><span class="built_in">echo</span> enter code directory     显示enter code directory</span><br><span class="line"><span class="keyword">call</span> run.bat</span><br></pre></td></tr></tbody></table></figure><p><strong>增加入参</strong></p><figure class="highlight bat"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"> <span class="built_in">type</span> %<span class="number">1</span> </span><br><span class="line"> <span class="built_in">type</span> %<span class="number">2</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>cmd为 run.bat a.txt b.txt<br>控制台会显示出a和b的文件内容</p></blockquote><p><strong>for循环的使用</strong></p><figure class="highlight bat"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bat脚本</span><br><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="keyword">for</span> <span class="variable">%%t</span> <span class="keyword">in</span> (*.bat *.txt) <span class="keyword">do</span> <span class="built_in">type</span> <span class="variable">%%t</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>注意1，打印的是bat和txt文件的内容<br>注意2，此bat放在需打印文件内容的文件一个目录层级下</p></blockquote><figure class="highlight bat"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="keyword">FOR</span> /L <span class="variable">%%i</span> <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">20</span>) <span class="keyword">DO</span> <span class="built_in">echo</span> <span class="variable">%%i</span></span><br></pre></td></tr></tbody></table></figure><p><strong>if/else判断语句的使用</strong></p><figure class="highlight bat"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">bat脚本</span><br><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="keyword">if</span> {<span class="variable">%1}=={%</span><span class="number">2</span>} (</span><br><span class="line"><span class="built_in">echo</span> eq l.</span><br><span class="line">) <span class="keyword">else</span> (</span><br><span class="line"><span class="built_in">echo</span> <span class="keyword">not</span> eq l.</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><p>cmd输入run.bat 1 2<br>结果为 not eq 1</p><p><strong>在一个批处理文件内最多可以使用10个替换参数(%0到%9)</strong></p><figure class="highlight bat"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">exist</span> a.txt (</span><br><span class="line">    <span class="built_in">echo</span> This is a.txt</span><br><span class="line">    <span class="built_in">type</span> a.txt</span><br><span class="line">)<span class="keyword">else</span> (</span><br><span class="line">    <span class="built_in">echo</span> a.txt missing.</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><p><strong>判断当前目录下是否有a.txt</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@ECHO OFF</span><br><span class="line">IF EXIST D:\*.XLS () else (GOTO fail)</span><br><span class="line">PAUSE </span><br><span class="line">:fail</span><br><span class="line">ECHO 没找到文件</span><br></pre></td></tr></tbody></table></figure><p><strong>删除文件</strong></p><figure class="highlight bat"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">del</span> a.txt</span><br></pre></td></tr></tbody></table></figure><blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; 注意：指定路径会删除该路径下所有文件</span><br><span class="line">&gt;</span><br></pre></td></tr></tbody></table></figure></blockquote><p><strong>移动、拷贝文件、文件夹</strong></p><figure class="highlight bat"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">move</span> c:\a.txt c:\code\a.txt </span><br><span class="line"></span><br><span class="line"><span class="built_in">copy</span> c:\code\a.txt c:\a.txt </span><br><span class="line"></span><br><span class="line"><span class="built_in">rd</span> c:\code\abc\abc   <span class="built_in">REM</span> 删除非空文件夹</span><br></pre></td></tr></tbody></table></figure><p><strong>GOTO语句</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@ECHO OFF</span><br><span class="line">GOTO SECOND</span><br><span class="line">:FIRST</span><br><span class="line">echo I AM FIRST</span><br><span class="line">:SECOND</span><br><span class="line">echo I AM SECOND</span><br></pre></td></tr></tbody></table></figure><p><strong>choice/errorlevel的用法</strong></p><figure class="highlight bat"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off </span><br><span class="line">choice /C <span class="number">123</span> /M "RUN1,RUN2,RUN3"</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">errorlevel</span> <span class="number">3</span> <span class="keyword">goto</span> RUN3</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">errorlevel</span> <span class="number">2</span> <span class="keyword">goto</span> RUN2 </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">errorlevel</span> <span class="number">1</span> <span class="keyword">goto</span> RUN1 </span><br><span class="line"></span><br><span class="line">:RUN1  </span><br><span class="line"><span class="function">c:\<span class="title">code</span>\<span class="title">RUN1</span> </span></span><br><span class="line"><span class="function"><span class="title">goto</span> <span class="title">RUN3</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">:<span class="title">RUN2</span></span></span><br><span class="line"><span class="function"><span class="title">c</span>:\<span class="title">code</span>\<span class="title">RUN2</span></span></span><br><span class="line"><span class="function"><span class="title">goto</span> <span class="title">RUN3</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">:<span class="title">RUN3</span></span></span><br><span class="line"><span class="function"><span class="title">echo</span> <span class="title">good</span> <span class="title">bye</span></span></span><br></pre></td></tr></tbody></table></figure><p><strong>set</strong></p><figure class="highlight bat"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">set</span> a=aa1bb1aa2bb2</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">%a%</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> b=<span class="number">12</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">%b%</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> /a c=<span class="number">39</span>/<span class="number">10</span>           </span><br><span class="line"><span class="built_in">echo</span> <span class="variable">%c%</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight bat"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">set</span> p=aaa</span><br><span class="line"><span class="keyword">if</span> <span class="variable">%p%</span>==aaa (</span><br><span class="line">      <span class="built_in">echo</span> <span class="variable">%p%</span></span><br><span class="line">      <span class="built_in">set</span> p=bbb</span><br><span class="line">      <span class="built_in">echo</span> <span class="variable">%p%</span></span><br><span class="line">      )</span><br></pre></td></tr></tbody></table></figure><p>输出 aaa aaa</p><figure class="highlight bat"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">set</span> p=aaa</span><br><span class="line"><span class="keyword">if</span> <span class="variable">%p%</span>==aaa (</span><br><span class="line">      <span class="built_in">echo</span> <span class="variable">%p%</span></span><br><span class="line">      <span class="built_in">set</span> /p p=bbb</span><br><span class="line">      <span class="built_in">echo</span> <span class="variable">%p%</span></span><br><span class="line">      )</span><br></pre></td></tr></tbody></table></figure><p>输出 aaa bbb</p><figure class="highlight bat"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">%CD%</span>                    #代表当前目录的字符串</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">%DATE%</span>                  #当前日期</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">%TIME%</span>                  #当前时间</span><br></pre></td></tr></tbody></table></figure><p><strong>从FTP下载文件</strong></p><figure class="highlight bat"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> open <span class="number">10</span>.<span class="number">86</span>.<span class="number">56</span>.<span class="number">6</span> &gt;ftp.txt      <span class="built_in">rem</span> ftp server ip</span><br><span class="line"></span><br><span class="line">@<span class="built_in">echo</span> user mos&gt;&gt;ftp.txt             <span class="built_in">rem</span> 用户名</span><br><span class="line"></span><br><span class="line">@<span class="built_in">echo</span> mos&gt;&gt;ftp.txt                  <span class="built_in">rem</span> 密码</span><br><span class="line"></span><br><span class="line">@<span class="built_in">echo</span> <span class="built_in">cd</span> test&gt;&gt;ftp.txt              <span class="built_in">rem</span> 文件路径</span><br><span class="line"></span><br><span class="line">@<span class="built_in">echo</span> get mw-license-switch-conffile.xml&gt;&gt;ftp.txt <span class="built_in">rem</span> 文件名</span><br><span class="line"></span><br><span class="line">@<span class="built_in">echo</span> bye&gt;&gt;ftp.txt</span><br><span class="line"></span><br><span class="line">ftp -i -n -s:ftp.txt                <span class="built_in">rem</span> 文件存放在脚本所在路径下</span><br></pre></td></tr></tbody></table></figure><p><strong>切换盘符</strong></p><figure class="highlight bat"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> current_dir=C:\Program Files\HaoZip    </span><br><span class="line"><span class="built_in">pushd</span> <span class="variable">%current_dir%</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="variable">%cd%</span></span><br></pre></td></tr></tbody></table></figure><hr><blockquote><p>博客来源：<a href="https://www.cnblogs.com/laislabonita/p/7145731.html" target="_blank" rel="noopener">https://www.cnblogs.com/laislabonita/p/7145731.html</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;run.bat—打开百度&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bat&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;path&lt;/span&gt;=&lt;span class=&quot;variable&quot;&gt;%path%&lt;/span&gt;; C:\Program Files (x86)\Internet Explorer\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;start&lt;/span&gt; iexplore http://www.baidu.com&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="Bat" scheme="http://blog.iwxyi.com/tags/Bat/"/>
    
  </entry>
  
  <entry>
    <title>搭建FFM</title>
    <link href="http://blog.iwxyi.com/2018/08/30/%E6%90%AD%E5%BB%BAFFM/"/>
    <id>http://blog.iwxyi.com/2018/08/30/搭建FFM/</id>
    <published>2018-08-30T05:48:00.000Z</published>
    <updated>2019-10-13T06:15:49.503Z</updated>
    
    <content type="html"><![CDATA[<h2 id="FFM-说明"><a href="#FFM-说明" class="headerlink" title="FFM 说明"></a>FFM 说明</h2><p>实现无需qq后台，直接借助服务器接收消息通过谷歌云端推送FCM推送到安卓手机，需要科学上网(除非你在国外)和谷歌服务框架，节省手机电量，顺便支持Android 7.0+的通知栏回复。</p><blockquote><p>现在 Web QQ 已经挂掉了，此应用从此失效</p></blockquote><a id="more"></a><h2 id="一键脚本"><a href="#一键脚本" class="headerlink" title="一键脚本"></a>一键脚本</h2><p>打基础，cpanm、Mojo-Webqq 这些就不用再装了，直接从下面的第三步开始。不过可能会出问题，最好还是按照下面的步骤来一遍。</p><p>再安装一下依赖，直接启动。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install git -y</span><br><span class="line">git clone https://github.com/null-ecp/FFM-one-step.git &amp;&amp; source ~/FFM-one-step/GCM.sh</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="分步安装"><a href="#分步安装" class="headerlink" title="分步安装"></a>分步安装</h2><h3 id="1-安装Cpanm"><a href="#1-安装Cpanm" class="headerlink" title="1.安装Cpanm"></a>1.安装Cpanm</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -kL https://cpanmin.us | perl - App::cpanminus</span><br></pre></td></tr></tbody></table></figure><h3 id="2-安装Mojo-Webqq"><a href="#2-安装Mojo-Webqq" class="headerlink" title="2.安装Mojo-Webqq"></a>2.安装Mojo-Webqq</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cpanm Mojo::Webqq</span><br></pre></td></tr></tbody></table></figure><blockquote><p>部分centos在这一步会报错，重新执行<code>cpanm Mojo::Webqq</code>即可</p></blockquote><h3 id="3-安装Webqq-Encryption"><a href="#3-安装Webqq-Encryption" class="headerlink" title="3.安装Webqq::Encryption"></a>3.安装Webqq::Encryption</h3><h4 id="先安装依赖"><a href="#先安装依赖" class="headerlink" title="先安装依赖:"></a>先安装依赖:</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y perl-Crypt-OpenSSL-RSA perl-Crypt-OpenSSL-Bignum</span><br></pre></td></tr></tbody></table></figure><h4 id="继续安装模块"><a href="#继续安装模块" class="headerlink" title="继续安装模块"></a>继续安装模块</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cpanm Webqq::Encryption</span><br></pre></td></tr></tbody></table></figure><p>如果 失败则再次安装一遍依赖</p><h3 id="4-安装FCM-For-Mojo"><a href="#4-安装FCM-For-Mojo" class="headerlink" title="4.安装FCM For Mojo"></a>4.安装FCM For Mojo</h3><h4 id="安装git包管理器"><a href="#安装git包管理器" class="headerlink" title="安装git包管理器"></a>安装git包管理器</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y git</span><br></pre></td></tr></tbody></table></figure><h4 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -sL https://rpm.nodesource.com/setup_9.x | bash -</span><br><span class="line">yum -y install nodejs</span><br></pre></td></tr></tbody></table></figure><h4 id="随后依次执行以下命令"><a href="#随后依次执行以下命令" class="headerlink" title="随后依次执行以下命令"></a>随后依次执行以下命令</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/RikkaApps/FCM-for-Mojo-Server.git</span><br><span class="line">cd FCM-for-Mojo-Server</span><br><span class="line">cp config.example.js config.js</span><br><span class="line">npm install</span><br></pre></td></tr></tbody></table></figure><p>自此安装完成</p><hr><h2 id="后台运行-screen"><a href="#后台运行-screen" class="headerlink" title="后台运行 screen"></a>后台运行 screen</h2><p>为了让程序在断开ssh后也能运行，可以安装screen</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y screen</span><br></pre></td></tr></tbody></table></figure><h3 id="新建screen"><a href="#新建screen" class="headerlink" title="新建screen"></a>新建screen</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screen -S qq</span><br></pre></td></tr></tbody></table></figure><h3 id="screen常用命令"><a href="#screen常用命令" class="headerlink" title="screen常用命令"></a>screen常用命令</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">screen -S [name] //新建screen</span><br><span class="line">screen -r [name] //切换到一个screen</span><br><span class="line">screen -ls //列出所有的screen</span><br><span class="line">exit //关闭当前screen</span><br></pre></td></tr></tbody></table></figure><p>可以使用<code>Ctrl+a+d</code>来将当前screen移至后台</p><h3 id="启动FFM"><a href="#启动FFM" class="headerlink" title="启动FFM"></a>启动FFM</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h2><p>不管可能会 <code>time out</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//临时关闭</span><br><span class="line">systemctl stop firewalld</span><br><span class="line">//禁止开机启动</span><br><span class="line">systemctl disable firewalld</span><br></pre></td></tr></tbody></table></figure><h2 id="VIM-用法"><a href="#VIM-用法" class="headerlink" title="VIM 用法"></a>VIM 用法</h2><ul><li>i 在前面编辑</li><li>a 在后面编辑</li><li>:wq 保存退出</li><li>:q 退出</li></ul><h2 id="修改HOSTS"><a href="#修改HOSTS" class="headerlink" title="修改HOSTS"></a>修改HOSTS</h2><p>修改命令</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/hosts</span><br></pre></td></tr></tbody></table></figure><h3 id="404问题"><a href="#404问题" class="headerlink" title="404问题"></a>404问题</h3><blockquote><p>connect.qq.com/proxy.html 404</p></blockquote><p>解决方法是 修改HOSTS改为：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">112.90.143.119 web2.qq.com</span><br></pre></td></tr></tbody></table></figure><h2 id="一键机器人"><a href="#一键机器人" class="headerlink" title="一键机器人"></a>一键机器人</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cpanm Mojo::Webqq &amp;&amp; perl -MMojo::Webqq -e "Mojo::Webqq-&gt;new-&gt;load('ShowMsg')-&gt;load('SmartReply')-&gt;run()"</span><br></pre></td></tr></tbody></table></figure><blockquote><p>不过现在好像用不了了？</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;FFM-说明&quot;&gt;&lt;a href=&quot;#FFM-说明&quot; class=&quot;headerlink&quot; title=&quot;FFM 说明&quot;&gt;&lt;/a&gt;FFM 说明&lt;/h2&gt;&lt;p&gt;实现无需qq后台，直接借助服务器接收消息通过谷歌云端推送FCM推送到安卓手机，需要科学上网(除非你在国外)和谷歌服务框架，节省手机电量，顺便支持Android 7.0+的通知栏回复。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;现在 Web QQ 已经挂掉了，此应用从此失效&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="搭建" scheme="http://blog.iwxyi.com/categories/%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="服务器" scheme="http://blog.iwxyi.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Qt QListView和QListWidget用法</title>
    <link href="http://blog.iwxyi.com/2018/08/19/Qt-QListView%E5%92%8CQListWidget%E7%94%A8%E6%B3%95/"/>
    <id>http://blog.iwxyi.com/2018/08/19/Qt-QListView和QListWidget用法/</id>
    <published>2018-08-19T09:34:00.000Z</published>
    <updated>2019-10-13T09:34:51.806Z</updated>
    
    <content type="html"><![CDATA[<p><code>QListView</code>与<code>QTreeView</code>一样，也是采取的mvc模式，添加数据时，用相应的模式</p><a id="more"></a><h2 id="1、初始化时添加数据"><a href="#1、初始化时添加数据" class="headerlink" title="1、初始化时添加数据"></a>1、初始化时添加数据</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">QStandardItemModel *model = <span class="keyword">new</span> QStandardItemModel(<span class="keyword">this</span>); <span class="comment">//可以把这行放到头文件里面</span></span><br><span class="line"></span><br><span class="line">QStandardItem *item = <span class="keyword">new</span> QStandardItem(<span class="string">"item1"</span>);  </span><br><span class="line">model-&gt;appendRow(item);  </span><br><span class="line">item = <span class="keyword">new</span> QStandardItem(<span class="string">"item2"</span>);  </span><br><span class="line">model-&gt;appendRow(item);  </span><br><span class="line">ui-&gt;listViewTask-&gt;setModel(model);</span><br></pre></td></tr></tbody></table></figure><h2 id="2、根据用户操作来添加数据"><a href="#2、根据用户操作来添加数据" class="headerlink" title="2、根据用户操作来添加数据"></a>2、根据用户操作来添加数据</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">QStandardItem *item = <span class="keyword">new</span> QStandardItem(<span class="string">"item3"</span>);  </span><br><span class="line">QStandardItemModel *model = <span class="keyword">dynamic_cast</span>&lt;QStandardItemModel*&gt;(ui-&gt;listViewTask-&gt;model());  </span><br><span class="line"></span><br><span class="line">model-&gt;appendRow(item);</span><br></pre></td></tr></tbody></table></figure><h2 id="3、删除数据"><a href="#3、删除数据" class="headerlink" title="3、删除数据"></a>3、删除数据</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">QStandardItemModel *model = <span class="keyword">dynamic_cast</span>&lt;QStandardItemModel*&gt;(ui-&gt;listViewTask-&gt;model());  </span><br><span class="line">model-&gt;removeRow(ui-&gt;listViewTask-&gt;currentIndex().row());</span><br></pre></td></tr></tbody></table></figure><h2 id="4-获取行数；"><a href="#4-获取行数；" class="headerlink" title="4.获取行数；"></a>4.获取行数；</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> row_num = ui-&gt;listViewTask-&gt;model()-&gt;rowCount();</span><br></pre></td></tr></tbody></table></figure><h2 id="5-选中指定的行号"><a href="#5-选中指定的行号" class="headerlink" title="5.选中指定的行号"></a>5.选中指定的行号</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">QModelIndex qindex = m_listviewmodel_-&gt;index(index,<span class="number">0</span>);   <span class="comment">//默认选中 index</span></span><br><span class="line">ui-&gt;listViewTask-&gt;setCurrentIndex(qindex);</span><br></pre></td></tr></tbody></table></figure><h2 id="6-设置滚动方式"><a href="#6-设置滚动方式" class="headerlink" title="6.设置滚动方式"></a>6.设置滚动方式</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> QAbstractItemView::ScrollMode  </span><br><span class="line">Constant    Value   Description  </span><br><span class="line">QAbstractItemView::ScrollPerItem    <span class="number">0</span>   The view will scroll the contents one item at a time.  </span><br><span class="line">QAbstractItemView::ScrollPerPixel   <span class="number">1</span>   The view will scroll the contents one pixel at a time.  </span><br><span class="line"></span><br><span class="line"><span class="comment">//设置为像素滚动；</span></span><br><span class="line">setVerticalScrollMode(QAbstractItemView::ScrollPerPixel);</span><br></pre></td></tr></tbody></table></figure><h2 id="7-初始化并设置隔行彩色显示；"><a href="#7-初始化并设置隔行彩色显示；" class="headerlink" title="7.初始化并设置隔行彩色显示；"></a>7.初始化并设置隔行彩色显示；</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>  standardItemModel = <span class="keyword">new</span> QStandardItemModel(<span class="keyword">this</span>);  </span><br><span class="line"><span class="number">2.</span>   </span><br><span class="line"><span class="number">3.</span>     QStringList strList;  </span><br><span class="line"><span class="number">4.</span>     strList.append(<span class="string">"string1"</span>);  </span><br><span class="line"><span class="number">5.</span>     strList.append(<span class="string">"string2"</span>);  </span><br><span class="line"><span class="number">6.</span>     strList.append(<span class="string">"string3"</span>);  </span><br><span class="line"><span class="number">7.</span>     strList.append(<span class="string">"string4"</span>);  </span><br><span class="line"><span class="number">8.</span>     strList.append(<span class="string">"string5"</span>);  </span><br><span class="line"><span class="number">9.</span>     strList.append(<span class="string">"string6"</span>);  </span><br><span class="line"><span class="number">10.</span>     strList.append(<span class="string">"string7"</span>);  </span><br><span class="line"><span class="number">11.</span>     strList &lt;&lt; <span class="string">"string8"</span>;  </span><br><span class="line"><span class="number">12.</span>     strList += <span class="string">"string9"</span>;  </span><br><span class="line"><span class="number">13.</span>     <span class="keyword">int</span> nCount = strList.size();  </span><br><span class="line"><span class="number">14.</span>     <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nCount; i++)  </span><br><span class="line"><span class="number">15.</span>     {  </span><br><span class="line"><span class="number">16.</span>         QString <span class="built_in">string</span> = <span class="keyword">static_cast</span>&lt;QString&gt;(strList.at(i));  </span><br><span class="line"><span class="number">17.</span>         QStandardItem *item = <span class="keyword">new</span> QStandardItem(<span class="built_in">string</span>);  </span><br><span class="line"><span class="number">18.</span>         <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">1</span>)  </span><br><span class="line"><span class="number">19.</span>         {  </span><br><span class="line"><span class="number">20.</span>             <span class="function">QLinearGradient <span class="title">linearGrad</span><span class="params">(QPointF(<span class="number">0</span>, <span class="number">0</span>), QPointF(<span class="number">200</span>, <span class="number">200</span>))</span></span>;  </span><br><span class="line"><span class="number">21.</span>             linearGrad.setColorAt(<span class="number">0</span>, Qt::darkGreen);  </span><br><span class="line"><span class="number">22.</span>             linearGrad.setColorAt(<span class="number">1</span>, Qt::yellow);  </span><br><span class="line"><span class="number">23.</span>             <span class="function">QBrush <span class="title">brush</span><span class="params">(linearGrad)</span></span>;  </span><br><span class="line"><span class="number">24.</span>             item-&gt;setBackground(brush);  </span><br><span class="line"><span class="number">25.</span>         }  </span><br><span class="line"><span class="number">26.</span>         standardItemModel-&gt;appendRow(item);  </span><br><span class="line"><span class="number">27.</span>     }  </span><br><span class="line"><span class="number">28.</span>     listView-&gt;setModel(standardItemModel);  </span><br><span class="line"><span class="number">29.</span>     listView-&gt;setFixedSize(<span class="number">200</span>,<span class="number">300</span>);  </span><br><span class="line"><span class="number">30.</span>     connect(listView,SIGNAL(clicked(QModelIndex)),<span class="keyword">this</span>,SLOT(itemClicked(QModelIndex)));  </span><br><span class="line"><span class="number">31.</span> }</span><br></pre></td></tr></tbody></table></figure><h2 id="8、更新某一行；"><a href="#8、更新某一行；" class="headerlink" title="8、更新某一行；"></a>8、更新某一行；</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> row=listview-&gt;currentIndex().row();</span><br><span class="line"><span class="keyword">if</span>(row!=<span class="number">-1</span>)</span><br><span class="line">{</span><br><span class="line"> QModelIndex index=listmodel-&gt;index(row);</span><br><span class="line"> QString str=listmodel-&gt;data(index,Qt::DisplayRole).toString();<span class="comment">//get data</span></span><br><span class="line"> <span class="keyword">bool</span> ok;</span><br><span class="line"> QString text = QInputDialog::getText(<span class="keyword">this</span>, tr(<span class="string">"edit item"</span>),</span><br><span class="line">         tr(<span class="string">"please edit item"</span>), QLineEdit::Normal,</span><br><span class="line">         str, &amp;ok);</span><br><span class="line"> <span class="keyword">if</span> (ok &amp;&amp; !text.isEmpty())</span><br><span class="line"> {</span><br><span class="line">  listmodel-&gt;setData(index,text,Qt::EditRole);</span><br><span class="line">  listview-&gt;setCurrentIndex(index);</span><br><span class="line"> }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line"> QMessageBox::information(<span class="literal">NULL</span>,tr(<span class="string">"information"</span>),tr(<span class="string">"please select a item"</span>));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="QListWidget"><a href="#QListWidget" class="headerlink" title="QListWidget"></a>QListWidget</h1><p><code>QListWidget</code> 是派生于<code>QListView</code>的。有了QListWidget ，QListView便是废了；因为QListWidget 能完成所有QListView的。没有必要再用listview</p><h2 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> QString strInput = XGlobal::mGetInputString(<span class="string">"请输入任务名称，比如上传省局节点机"</span>);</span><br><span class="line">   <span class="keyword">if</span>(strInput.isEmpty())   </span><br><span class="line">{   </span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line">   QListWidgetItem *pItem = <span class="keyword">new</span> QListWidgetItem();</span><br><span class="line">   pItem-&gt;setText(strInput);</span><br><span class="line">   ui-&gt;listViewTask-&gt;addItem(pItem);</span><br></pre></td></tr></tbody></table></figure><p>或者这样也行</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">QStringList strList;</span><br><span class="line">strList&lt;&lt; <span class="string">"Item1"</span>&lt;&lt;<span class="string">"Item2"</span>&lt;&lt; <span class="string">"Item3"</span>&lt;&lt;<span class="string">"Item4"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>-&gt;addItems(strList);</span><br></pre></td></tr></tbody></table></figure><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***** 删除单个列表项 *****/</span></span><br><span class="line"><span class="keyword">void</span> MainWindow::deletebtn()</span><br><span class="line">{</span><br><span class="line">    <span class="comment">//获取列表项的指针</span></span><br><span class="line">    QListWidgetItem *item = ui-&gt;listWidget-&gt;takeItem(ui-&gt;listWidget-&gt;currentRow());</span><br><span class="line">    <span class="keyword">delete</span> item;        <span class="comment">//释放指针所指向的列表项</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***** 删除多个列表项 *****/</span></span><br><span class="line"><span class="keyword">void</span> MainWindow::delallbtn()</span><br><span class="line">{</span><br><span class="line">    <span class="keyword">int</span> num = ui-&gt;listWidget-&gt;count();  <span class="comment">//获取列表项的总数目</span></span><br><span class="line">    ui-&gt;listWidget-&gt;setFocus(); <span class="comment">//将光标设置到列表框上，若注释该语句，则删除时，要手动将焦点设置到列表框，即点击列表项</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)</span><br><span class="line">    {   <span class="comment">//逐个获取列表项的指针，并删除</span></span><br><span class="line">        QListWidgetItem *item = ui-&gt;listWidget-&gt;takeItem(ui-&gt;listWidget-&gt;currentRow());</span><br><span class="line">        <span class="keyword">delete</span> item;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***** 添加多个列表项 *****/</span></span><br><span class="line"><span class="keyword">void</span> MainWindow::addallbtn()</span><br><span class="line">{</span><br><span class="line">    QStringList FileNames = QFileDialog::getOpenFileNames(<span class="keyword">this</span>,<span class="string">"打开"</span>,QDir::currentPath(),<span class="string">"所有文件(*.*);;文本文档(*.txt)"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法1  整体添加</span></span><br><span class="line"><span class="comment">//    ui-&gt;listWidget-&gt;addItems(FileNames);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法2  逐个添加</span></span><br><span class="line">    <span class="keyword">int</span> index=<span class="number">0</span>,count=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//    QListWidgetItem *item = new QListWidgetItem;  //…………注释1</span></span><br><span class="line">    count = FileNames.count();              <span class="comment">//获取打开文件的总数目</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    for(index = 0;index&lt;count;index++)    //这样会报错，无法先取出栈底元素  //注释2</span></span><br><span class="line">    <span class="keyword">for</span>(index=count<span class="number">-1</span>;index&gt;=<span class="number">0</span>;index--)     <span class="comment">//QList&lt;QString&gt;的数据结构是栈，只能从栈顶取元素</span></span><br><span class="line">   {</span><br><span class="line">        QListWidgetItem *item = <span class="keyword">new</span> QListWidgetItem;</span><br><span class="line">        item-&gt;setText(FileNames.takeAt(index)); <span class="comment">//逐个设置列表项的文本</span></span><br><span class="line"><span class="comment">//        qDebug()&lt;&lt;FileNames.takeAt(index);        //…………注释3</span></span><br><span class="line">        ui-&gt;listWidget-&gt;addItem(item);      <span class="comment">//加载列表项到列表框</span></span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="点击"><a href="#点击" class="headerlink" title="点击"></a>点击</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***** 列表项单击操作 *****/</span></span><br><span class="line"><span class="keyword">void</span> MainWindow::singleclicked(QListWidgetItem* item)</span><br><span class="line">{</span><br><span class="line">QMessageBox::information(<span class="keyword">this</span>,<span class="string">"单击消息"</span>,<span class="string">"单击"</span>+item-&gt;text());</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***** 列表项双击操作 *****/</span></span><br><span class="line"><span class="keyword">void</span> MainWindow::doubleclicked(QListWidgetItem* item)</span><br><span class="line">{</span><br><span class="line">QMessageBox::information(<span class="keyword">this</span>,<span class="string">"双击消息"</span>,<span class="string">"双击"</span>+item-&gt;text());</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;QListView&lt;/code&gt;与&lt;code&gt;QTreeView&lt;/code&gt;一样，也是采取的mvc模式，添加数据时，用相应的模式&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C++" scheme="http://blog.iwxyi.com/tags/C/"/>
    
      <category term="Qt" scheme="http://blog.iwxyi.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>Qt实现窗口关闭动画</title>
    <link href="http://blog.iwxyi.com/2018/08/18/Qt%E5%AE%9E%E7%8E%B0%E7%AA%97%E5%8F%A3%E5%85%B3%E9%97%AD%E5%8A%A8%E7%94%BB/"/>
    <id>http://blog.iwxyi.com/2018/08/18/Qt实现窗口关闭动画/</id>
    <published>2018-08-18T11:00:00.000Z</published>
    <updated>2019-10-13T11:01:24.519Z</updated>
    
    <content type="html"><![CDATA[<p>现在很多软件在窗口状态切换的时候都会带那么一些小动画，看起来还挺酷的。比如程序退出的时候，有些软件会展现一个 窗口合拢的效果；比如QQ贴边隐藏、展现会有一个滑出滑入的动画效果，如果要我们自己实现也可以，就是动态改变窗口大小和位置嘛，但效率如何就不敢保证啦。还好Qt早就为我们准备了这么一个动画框架：<strong>QAbstractAnimation</strong>. </p><a id="more"></a><p>这个抽象类被 <strong>QAnimationGroup, QPauseAnimation, and QVariantAnimation</strong>这3个类继承，第一个主要是完成动画的并行播放，第二个是为并行播放提供单个动画的暂停，第三个是提供任意Variant类型的动画效果,它被<strong>QPropertyAnimation</strong>继承。完成窗口关闭动画效果只要用这个类就行了。</p><p>下面说一下实现流程：<br>首先当窗口关闭的时候会接收到一个closeEvent,当我们截获到这个closeEvent的时候就要播放关闭动画，当动画播放完毕，我们就关闭窗口,代码如下:</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> StyledWindow::playCloseAnimation()</span><br><span class="line">{</span><br><span class="line">    setMinimumSize(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    QPropertyAnimation* closeAnimation = <span class="keyword">new</span> QPropertyAnimation(<span class="keyword">this</span>,<span class="string">"geometry"</span>);</span><br><span class="line">    closeAnimation-&gt;setStartValue(geometry());</span><br><span class="line">    closeAnimation-&gt;setEndValue(QRect(geometry().x(),geometry().y()+height()/<span class="number">2</span>,width(),<span class="number">0</span>));</span><br><span class="line">    closeAnimation-&gt;setDuration(<span class="number">300</span>);</span><br><span class="line">    closeAnimationState = hasplayed;</span><br><span class="line">    connect(closeAnimation,SIGNAL(finished()),<span class="keyword">this</span>,SLOT(close()));</span><br><span class="line">    closeAnimation-&gt;start(QAbstractAnimation::DeleteWhenStopped);</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> StyledWindow::closeEvent(QCloseEvent *event)</span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span>(isPlayCloseAnimation &amp;&amp; closeAnimationState == notplay){</span><br><span class="line">        playCloseAnimation();</span><br><span class="line">        event-&gt;ignore();</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span>{</span><br><span class="line">        event-&gt;accept();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>第一行是为了防止窗口设置了最小值，改变不了大小！这要注意一下！<br>我把playCloseAnimation()弄成了虚函数，这样继承这个类的时候只要重新实现虚函数就可以完成不一样的关闭动画，无需再重写closeEvent().<br>但是注意了,这段代码仅对无边框的窗口有效，如果你的窗口不是无边框的那么需要改变的是frameGeometry属性，但是这个属性只有读函数，没有写函数，你必须自己实现一个写函数，然后利用Q_Property宏声明一下才行，详细的请查询 Q_Property System</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在很多软件在窗口状态切换的时候都会带那么一些小动画，看起来还挺酷的。比如程序退出的时候，有些软件会展现一个 窗口合拢的效果；比如QQ贴边隐藏、展现会有一个滑出滑入的动画效果，如果要我们自己实现也可以，就是动态改变窗口大小和位置嘛，但效率如何就不敢保证啦。还好Qt早就为我们准备了这么一个动画框架：&lt;strong&gt;QAbstractAnimation&lt;/strong&gt;. &lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C++" scheme="http://blog.iwxyi.com/tags/C/"/>
    
      <category term="Qt" scheme="http://blog.iwxyi.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>Qt控件渐变消失</title>
    <link href="http://blog.iwxyi.com/2018/08/18/Qt%E6%8E%A7%E4%BB%B6%E6%B8%90%E5%8F%98%E6%B6%88%E5%A4%B1/"/>
    <id>http://blog.iwxyi.com/2018/08/18/Qt控件渐变消失/</id>
    <published>2018-08-18T10:58:00.000Z</published>
    <updated>2019-10-13T10:59:33.238Z</updated>
    
    <content type="html"><![CDATA[<h1 id="QT控件渐变消失"><a href="#QT控件渐变消失" class="headerlink" title="QT控件渐变消失"></a>QT控件渐变消失</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 Qt 开发中，经常会设置某些控件透明的透明度，比如设置QLabel字体渐变隐藏，设置某个按钮渐变消失等等，这在消息提示框中会常用到，显示一定时间后让控件有一个动画逐渐消失的过程，其实原理很简单，就是设置控件的透明度，直到透明度为0后再将控件设置为隐藏即可。动画的过程可以用两种方式来实现，第一是通过定时器，不断的设置控件的透明度，第二是通过QPropertyAnimation来实现，当然，后者会更简单。那么该如何设置控件透明度呢，这里需要用到QGraphicsOpacityEffect类。</p><a id="more"></a><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>当然，还可以将 QLabel 换成其他控件，比如 QPushButton等等。 </p><p>来看源码：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Widget::Widget(QWidget *parent) :</span><br><span class="line">    QWidget(parent),</span><br><span class="line">    ui(<span class="keyword">new</span> Ui::Widget)</span><br><span class="line">{</span><br><span class="line">    ui-&gt;setupUi(<span class="keyword">this</span>);</span><br><span class="line">    m_pGraphicsOpacityEffect = <span class="keyword">new</span> QGraphicsOpacityEffect(ui-&gt;label);</span><br><span class="line">    m_pGraphicsOpacityEffect-&gt;setOpacity(<span class="number">1</span>);</span><br><span class="line">    ui-&gt;label-&gt;setGraphicsEffect(m_pGraphicsOpacityEffect);</span><br><span class="line"></span><br><span class="line">    m_pNameAnimation = <span class="keyword">new</span> QPropertyAnimation(m_pGraphicsOpacityEffect,<span class="string">"opacity"</span>,<span class="keyword">this</span>);</span><br><span class="line">    m_pNameAnimation-&gt;setEasingCurve(QEasingCurve::Linear);</span><br><span class="line">    m_pNameAnimation-&gt;setDuration(<span class="number">2500</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">Widget::~Widget()</span><br><span class="line">{</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">    <span class="keyword">delete</span> m_pGraphicsOpacityEffect;</span><br><span class="line">    <span class="keyword">delete</span> m_pNameAnimation;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Widget::on_pushButton_clicked()</span><br><span class="line">{</span><br><span class="line">    m_pNameAnimation-&gt;setStartValue(<span class="number">1</span>);</span><br><span class="line">    m_pNameAnimation-&gt;setEndValue(<span class="number">0</span>);</span><br><span class="line">    m_pNameAnimation-&gt;start(QAbstractAnimation::KeepWhenStopped);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>代码很简单，就是QGraphicsOpacityEffect + QPropertyAnimation来实现想要的效果。</p><p>以上是设置控件的透明度，如果想要设置窗口透明度，需要用到 QWidget 的函数setWindowOpacity来实现，原理和上面一样，也可以通过QPropertyAnimation来实现动画效果。</p><hr><blockquote><p>参考：<a href="https://blog.csdn.net/luoyayun361/article/details/77921311" target="_blank" rel="noopener">https://blog.csdn.net/luoyayun361/article/details/77921311</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;QT控件渐变消失&quot;&gt;&lt;a href=&quot;#QT控件渐变消失&quot; class=&quot;headerlink&quot; title=&quot;QT控件渐变消失&quot;&gt;&lt;/a&gt;QT控件渐变消失&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在 Qt 开发中，经常会设置某些控件透明的透明度，比如设置QLabel字体渐变隐藏，设置某个按钮渐变消失等等，这在消息提示框中会常用到，显示一定时间后让控件有一个动画逐渐消失的过程，其实原理很简单，就是设置控件的透明度，直到透明度为0后再将控件设置为隐藏即可。动画的过程可以用两种方式来实现，第一是通过定时器，不断的设置控件的透明度，第二是通过QPropertyAnimation来实现，当然，后者会更简单。那么该如何设置控件透明度呢，这里需要用到QGraphicsOpacityEffect类。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C++" scheme="http://blog.iwxyi.com/tags/C/"/>
    
      <category term="Qt" scheme="http://blog.iwxyi.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>Qt定时器</title>
    <link href="http://blog.iwxyi.com/2018/08/18/Qt%E5%AE%9A%E6%97%B6%E5%99%A8/"/>
    <id>http://blog.iwxyi.com/2018/08/18/Qt定时器/</id>
    <published>2018-08-18T09:50:00.000Z</published>
    <updated>2019-10-13T09:51:35.645Z</updated>
    
    <content type="html"><![CDATA[<p>有两种方法实现定时器。</p><h2 id="第一种："><a href="#第一种：" class="headerlink" title="第一种："></a>第一种：</h2><p>1.新建GUI工程，工程名可以设置为timer。并在主界面上添加一个标签，并设置其内容为”0000-00-00 00:00:00 星期日“。</p><p>2.在mainwindow.h中添加槽函数声明。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> slots:</span><br><span class="line">       <span class="function"><span class="keyword">void</span> <span class="title">timerUpDate</span><span class="params">()</span></span>;</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><p>3.在mainwindow.cpp中添加代码。</p><p>添加<code>#include &lt;QtCore&gt;</code>的头文件包含，这样就包含了QtCore下的所有文件。</p><p>构造函数里添加代码：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">QTimer *timer = <span class="keyword">new</span> QTimer(<span class="keyword">this</span>); <span class="comment">//新建定时器</span></span><br><span class="line"></span><br><span class="line">connect(timer,SIGNAL(timeout()),<span class="keyword">this</span>,SLOT(timeUpDate())); <span class="comment">//关联定时器计满信号和相应的槽函数。</span></span><br><span class="line"></span><br><span class="line">timer-&gt;start(<span class="number">1000</span>); <span class="comment">//定时器开始计时，其中1000表示1000ms即1s,每1000ms就会触发一次槽函数。</span></span><br></pre></td></tr></tbody></table></figure><p>4.然后实现更新函数。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">voidMainWindow::timerUpDate()</span><br><span class="line">{</span><br><span class="line">       QDateTime time = QDateTime::currentDateTime();<span class="comment">//获取系统现在的时间</span></span><br><span class="line"></span><br><span class="line">       QString str = time.toString(<span class="string">"yyyy-MM-dd hh:mm:ss dddd"</span>);<span class="comment">//设置系统时间显示格式</span></span><br><span class="line"></span><br><span class="line">       ui-&gt;label-&gt;setText(str);<span class="comment">//在标签上显示时间</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>5.运行程序，效果如图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img.my.csdn.net/uploads/201303/12/1363054884_1085.PNG" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="第二种：使用事件（有点像单片机中的定时器）"><a href="#第二种：使用事件（有点像单片机中的定时器）" class="headerlink" title="第二种：使用事件（有点像单片机中的定时器）"></a>第二种：使用事件（有点像单片机中的定时器）</h2><p>1.新建工程。在窗口中添加标签。</p><p>2.在main.cpp中添加代码，实现中文显示。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>  <span class="meta-string">&lt;QTextCodec&gt;</span></span></span><br><span class="line"></span><br><span class="line">QTextCodec::setCodecForTr(QTextCodec::codecForLocale());</span><br></pre></td></tr></tbody></table></figure><p>3.在mainwindow.h中添加代码。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">timeEvent</span><span class="params">(QTimerEvent *)</span></span>;</span><br></pre></td></tr></tbody></table></figure><p>4.在mainwindow.cpp中添加代码</p><p>添加头文件 <code>#include &lt;QtCore&gt;</code></p><p>在构造函数里添加以下代码。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">startTimer(<span class="number">1000</span>);<span class="comment">//其返回值为1，即其timerId为1</span></span><br><span class="line">startTimer(<span class="number">5000</span>);<span class="comment">//其返回值为2,即其timerId为2</span></span><br><span class="line">startTimer(<span class="number">10000</span>);<span class="comment">//其返回值为3，即其timerId为3</span></span><br></pre></td></tr></tbody></table></figure><p>添加了三个定时器，它们的timerId分别为1,2,3,。注意第几个定时器的返回值就是几。所以要注意定时器顺序。</p><p>在下面添加函数实现。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">voidMainWindow::timerEvent(QTimerEvent *t)<span class="comment">//定时器时间</span></span><br><span class="line">{</span><br><span class="line">       <span class="keyword">switch</span>(t-&gt;timerId())；<span class="comment">//判断定时器的句柄</span></span><br><span class="line">       {</span><br><span class="line">              <span class="keyword">case</span> <span class="number">1</span>:ui-&gt;label-&gt;setText(tr(<span class="string">"每秒产生一个随机数:%1"</span>).arg(qrand()%<span class="number">10</span>));<span class="keyword">break</span>;</span><br><span class="line">              <span class="keyword">case</span> <span class="number">2</span>:ui-&gt;label_2-&gt;setText(tr(<span class="string">"5秒后软件将关闭"</span>));<span class="keyword">break</span>;</span><br><span class="line">              <span class="keyword">case</span> <span class="number">3</span>:qApp-&gt;quit();<span class="keyword">break</span>;<span class="comment">//退出系统</span></span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这里添加了三个定时器，并都在定时器时间中判断他们，然后执行相应的功能，这样就不用每个定时器都写一个关联函数和槽函数</p><h3 id="随机数的实现："><a href="#随机数的实现：" class="headerlink" title="随机数的实现："></a>随机数的实现：</h3><p>上面程序中<code>qrand()</code>,可以产生随机数，<code>qrand()%10</code>可以产生0~9之间的随机数。要想产生100以内的随机数就得%100，以此类推<br>但这样每次启动程序后，都按同一种顺序产生随机数，为了实现每次启动程序产生不同的初始值，我们可以使用<code>qsrand(time(0))</code>;实现设置随机数的初始值<br>而程序每次启动时<code>time(0)</code>返回的值都不同，这样就实现了产生不同初始值的功能。<br>我们将<code>qsrand(time(0));</code>一句加入到构造函数里。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有两种方法实现定时器。&lt;/p&gt;
&lt;h2 id=&quot;第一种：&quot;&gt;&lt;a href=&quot;#第一种：&quot; class=&quot;headerlink&quot; title=&quot;第一种：&quot;&gt;&lt;/a&gt;第一种：&lt;/h2&gt;&lt;p&gt;1.新建GUI工程，工程名可以设置为timer。并在主界面上添加一个标签，并设置其内容为”0000-00-00 00:00:00 星期日“。&lt;/p&gt;
&lt;p&gt;2.在mainwindow.h中添加槽函数声明。&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; slots:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;timerUpDate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C++" scheme="http://blog.iwxyi.com/tags/C/"/>
    
      <category term="Qt" scheme="http://blog.iwxyi.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>Qt自定义Model、View、Delegate</title>
    <link href="http://blog.iwxyi.com/2018/08/18/Qt%E8%87%AA%E5%AE%9A%E4%B9%89Model%E3%80%81View%E3%80%81Delegate/"/>
    <id>http://blog.iwxyi.com/2018/08/18/Qt自定义Model、View、Delegate/</id>
    <published>2018-08-18T09:30:00.000Z</published>
    <updated>2019-10-13T09:32:20.764Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何使用Model-View-delegate自定义列表"><a href="#如何使用Model-View-delegate自定义列表" class="headerlink" title="如何使用Model View delegate自定义列表"></a>如何使用Model View delegate自定义列表</h1><p>这是一个演示Model/View Programming 中自定义model，自定义delegate用法的程序。 通过自定义的model，delegate，实现自定义的列表元素。</p><a id="more"></a><p>目标是构造一个列表，其中每个列表元素包含若干图片，文字， 按钮等。要实现这样的功能，第一反应是 自己定义一个widget，把图片文字控件放在里面加上layout， 然后再用使用void QAbstractItemView::setIndexWidget，加LlistView或TableView里面。</p><p> 当界面元素固定，少量的时候，这是首选，但是要看到setIndexWidget帮助文档里面的警告，这样做是有效率代价的，如果列表有100项，那么就要加入100个widget， 很大的消耗。 使用delegate的话你可以只是paint 每个元素， 在需要操作的时候才构建真正的控件，而画控件可以用QStyle::drawControl() 画出来，当然这样做你需要构造，自己的model，delegate， 自己做数据绑定。 这样做效率很高，因为只有当前的控件是真的，其他都是画上去的！ </p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><ul><li>关于Model/View Programming的使用，最好的文档当然是Qt自己的帮助，建议先通读一遍， 同时参考Qt中的例子：</li><li>StringListModel ：位于doc\src\snippets\stringlistmodel， 这个例子的代码都在帮助的 Creating New Models这一章，建议阅读的时候顺手做一下，而我下面的例子是在这个例子基础上改成的。</li><li>SpinBoxDelegate：这个例子用以演示 如何自定义delegate， 来实现自定义的表元素，每个列表元是个spinbox， 可以编辑。这个例子解释了自定义delegate 的方方面面，但是用的model 是框架自带的</li><li>PixelDelegate： 这是个很漂亮的例子，演示了model view delegate的强大威力，其model 和delegate的自定义程度很高，演示了model和delegate之间的数据交互。遗憾的是这是个只读的例子，就是说并不能通过model改变data。</li><li>StarDelegate： 这个例子演示了如何定制delegate， 使用了自定义的数据结构，和编辑器，效果很强大，我们的自定义控件也期望这个目标。遗憾是没有定制model。</li><li>我们期望自己的StarDelegatedelegate能画上图片等元素 如StarDelegate，PixelDelegate， 又能支持一些系统控件（button，checkbox…）如SpinBoxDelegate，但是上面三个强大的例子都没能完全达到这个目标，所以才写这篇文章。</li><li>下面开始新建一个QT工程，选Mobile QT Application， 在ui中拖入一个ListView。</li></ul><h2 id="自定义model"><a href="#自定义model" class="headerlink" title="自定义model"></a>自定义model</h2><p>为了说明问题，这里用最简单的数据结构，一个QStringList， model 是 数据的直接接口，有了String， 我们可以显示文字，也可以作为路径读取图片，在这个小例子中足够了。按照帮助中 Creating New Models的顺序，首先我们做一个只读的model， 在mainWindow.cpp中 对listview 加载model：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">parserModel *model = <span class="keyword">new</span> parserModel(strings, <span class="keyword">this</span>);</span><br><span class="line">ui-&gt;listView-&gt;setModel(model);</span><br></pre></td></tr></tbody></table></figure><h4 id="只读的model"><a href="#只读的model" class="headerlink" title="只读的model"></a>只读的model</h4><p>只读的model 只需要实现rowCount ，data 两个方法， 这里为ListView服务，所以我们继承QAbstractListModel， 如果用TableView的话，可以像PixelDelegate那样使用QAbstractTableModel。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">parserModel</span> :</span> <span class="keyword">public</span> QAbstractListModel</span><br><span class="line">{</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    parserModel(<span class="keyword">const</span> QStringList &amp;strings, QObject *parent = <span class="number">0</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//basic function for a read-only model</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">rowCount</span> <span class="params">( <span class="keyword">const</span> QModelIndex &amp; parent = QModelIndex() )</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">QVariant <span class="title">data</span> <span class="params">( <span class="keyword">const</span> QModelIndex &amp; index, <span class="keyword">int</span> role = Qt::DisplayRole )</span> <span class="keyword">const</span> </span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">//simple data source just a QStringList, if need can add other list of QString, int, bool, struct or class</span></span><br><span class="line">    QStringList stringList;</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>想要 rowCount 能返回string list 中string的个数，所以我们这样写：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> parserModel::rowCount(<span class="keyword">const</span> QModelIndex &amp;parent) <span class="keyword">const</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">return</span> stringList.count();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>接下来关键的 data 函数，这个函数是 View 或 Delegate 获取数据的主要接口，我们想要显示文字，图片，都是从model中直接获得，我们这样写：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">QVariant parserModel::data(<span class="keyword">const</span> QModelIndex &amp;index, <span class="keyword">int</span> role) <span class="keyword">const</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span> ( (!index.isValid()) || (index.row() &gt;= stringList.size()))</span><br><span class="line">        <span class="keyword">return</span> QVariant();</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>(role == Qt::UserRole)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">return</span> stringList.at(index.row());</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>( role == Qt::UserRole+<span class="number">1</span>)</span><br><span class="line">    {</span><br><span class="line">        QPixmap pixmap;</span><br><span class="line">        pixmap.load(stringList.at(index.row()));</span><br><span class="line">        <span class="keyword">return</span> pixmap.scaled(<span class="number">80</span>, <span class="number">80</span>,Qt::KeepAspectRatioByExpanding, Qt::FastTransformation);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>( role == Qt::UserRole+<span class="number">2</span>)</span><br><span class="line">    {</span><br><span class="line">        QPixmap pixmap;</span><br><span class="line">        pixmap.load(stringList.at(index.row()));</span><br><span class="line">        <span class="keyword">return</span> pixmap.scaled(<span class="number">20</span>, <span class="number">20</span>,Qt::KeepAspectRatio, Qt::FastTransformation);</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> QVariant();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这里默认是返回QVariant()， 关键是看中间返回的东西，必须结合后面的Delegate实现来一起看。 当delegate 或 view 询问数据的时候会传给data方法两个参数，就是问model要 位于 index这个地方的具有role数据，enum Qt::ItemDataRole 中常见的role是</p><ul><li>Qt::DisplayRole 返回 QString 文字</li><li>Qt::DecorationRole 返回 QPixmap 图片</li></ul><p>但是如果你想要返回另一幅图的话，就要用其他的role了，所以这里我全用 Qt::UserRole，来解释这个问题。 一个解释Qt::ItemDataRole 的例子是 Color Editor Factory，在这个例子中列表显示颜色和颜色名，都是从颜色名字符串中读数据，但是显示的时候一个是颜色方块，和名字，这就是同一个数据的两种表现形式，两个role。更进一步的，你可以在model中再引用一个struct 或者class Data， 当被询问不同的role的时候返回 Data.str1,或 Data.int2, 这样同一个index可以返回不同的数据，不同的数据类型。也可以是SQL查询的结果，在选择语句中传入不同的查询参数，这取决于你的数据结构，总之data被model 包装隔离了。不清楚没关系，下面我们看delegate如何数据。</p><h2 id="自定义delegate"><a href="#自定义delegate" class="headerlink" title="自定义delegate"></a>自定义delegate</h2><p>QT 4.6以后推荐自定义delegate 继承自QStyledItemDelegate，使用styleSheet来显示。不失一般性，这里先用QItemDelegate来说明问题。在mainWindow.cpp中 对listview 加载delegate：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MyDelegate *delegate = <span class="keyword">new</span> MyDelegate(<span class="keyword">this</span>);</span><br><span class="line">ui-&gt;listView-&gt;setItemDelegate(delegate);</span><br></pre></td></tr></tbody></table></figure><h4 id="只读的delegate"><a href="#只读的delegate" class="headerlink" title="只读的delegate"></a>只读的delegate</h4><p>先做只读的功能，需要重写 paint，和sizeHint 这个函数</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDelegate</span> :</span> <span class="keyword">public</span> QItemDelegate</span><br><span class="line">{</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">MyDelegate</span><span class="params">(QObject *parent = <span class="number">0</span>)</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//basic function for a read-only delegate, you can draw anything with the painter</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">paint</span> <span class="params">( QPainter * painter, <span class="keyword">const</span> QStyleOptionViewItem &amp; option, <span class="keyword">const</span> QModelIndex &amp; index )</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">QSize <span class="title">sizeHint</span> <span class="params">( <span class="keyword">const</span> QStyleOptionViewItem &amp; option, <span class="keyword">const</span> QModelIndex &amp; index )</span> <span class="keyword">const</span></span>;</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>sizeHint用于指定绘制每个列表项的大小，关键是paint方法， 有了paint，我们就可以任意定制我们的列表</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> MyDelegate::paint ( QPainter * painter, <span class="keyword">const</span> QStyleOptionViewItem &amp; option, <span class="keyword">const</span> QModelIndex &amp; index ) <span class="keyword">const</span></span><br><span class="line">{</span><br><span class="line">    QStyleOptionViewItemV4 opt = setOptions(index, option);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// prepare</span></span><br><span class="line">    painter-&gt;save();</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// get the data and the rectangles</span></span><br><span class="line">    <span class="keyword">const</span> QPixmap&amp; pixmap = qvariant_cast&lt;QPixmap&gt;(index.data(Qt::UserRole+<span class="number">1</span>));</span><br><span class="line">    QRect decorationRect = QRect(opt.rect.topLeft(), QSize(<span class="number">80</span>,<span class="number">80</span>));</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">const</span> QString&amp; text = index.data(Qt::UserRole).toString();</span><br><span class="line">    <span class="function">QFontMetrics <span class="title">fm</span><span class="params">(painter-&gt;font())</span></span>;</span><br><span class="line">    QRect displayRect = QRect(decorationRect.topRight()+QPoint(<span class="number">20</span>,<span class="number">30</span>),QSize(fm.width(text),fm.height()));</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">const</span> QPixmap&amp; pixmapSmall = qvariant_cast&lt;QPixmap&gt;(index.data(Qt::UserRole+<span class="number">2</span>));</span><br><span class="line">    QRect smallIconRect = QRect(opt.rect.topRight()-QPoint(<span class="number">100</span>,<span class="number">-20</span>), QSize(<span class="number">20</span>,<span class="number">20</span>));</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    drawBackground(painter, opt, index);</span><br><span class="line"> </span><br><span class="line">    painter-&gt;drawPixmap(decorationRect, pixmap);</span><br><span class="line">    painter-&gt;drawText(displayRect, text);</span><br><span class="line">    painter-&gt;drawPixmap(smallIconRect, pixmapSmall);</span><br><span class="line"> </span><br><span class="line">    drawFocus(painter, opt, displayRect);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// done</span></span><br><span class="line">    painter-&gt;restore();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>参见最后的效果图，这里每一个列表项有两幅图，一行文字，图片和文字都是用 qvariant_cast<qpixmap>(index.data(Qt::UserRole+1)); index.data(Qt::UserRole).toString(); 取得的，注意qvariant_cast的用法。</qpixmap></p><p>index.data(Qt::UserRole+1) 会调用model中的 QVariant data ( const QModelIndex &amp; index, int role ) const 方法。 delegate 的role和 model 的role对应。 通过修改model中data的实现，可以使得delegate显示不同的东西，而delegate的代码不需变动，实现了数据的隔离。到目前为止一个只读的自定义列表就完成了，在paint方法中加入下面的代码，可以画出一个pushButton， 但是点击没有反应，这需要在下面的编辑功能中实现。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">QStyleOptionButton opt;</span><br><span class="line">opt.state |= QStyle::State_Enabled;</span><br><span class="line">opt.rect = option.rect.adjusted(<span class="number">1</span>, <span class="number">1</span>, <span class="number">-10</span>, <span class="number">-10</span>);</span><br><span class="line">opt.text = trUtf8(<span class="string">"Button text"</span>);</span><br><span class="line">QApplication::style()-&gt;drawControl(QStyle::CE_PushButton, &amp;opt, painter, <span class="number">0</span>);</span><br></pre></td></tr></tbody></table></figure><h4 id="item中显示不同的字体"><a href="#item中显示不同的字体" class="headerlink" title="item中显示不同的字体"></a>item中显示不同的字体</h4><p>这里是painter的使用技巧，要在同一个列表项中的显示的不同的字体，需要在新的的 painter-&gt;save，painter-&gt;restore段中写， 如下的代码段实现了最后的效果图</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> MyDelegate::paint ( QPainter * painter, <span class="keyword">const</span> QStyleOptionViewItem &amp; opt, <span class="keyword">const</span> QModelIndex &amp; index ) <span class="keyword">const</span></span><br><span class="line">{</span><br><span class="line">    painter-&gt;save();</span><br><span class="line">    <span class="comment">// get the data and the rectangles   </span></span><br><span class="line">    <span class="keyword">const</span> QString&amp; text = index.data(Qt::UserRole).toString();</span><br><span class="line">    QRect displayRect;<span class="comment">//set the paint rect</span></span><br><span class="line">    painter-&gt;setPen(QColor(<span class="number">255</span>,<span class="number">127</span>,<span class="number">127</span>));</span><br><span class="line">    painter-&gt;drawText(displayRect, text);</span><br><span class="line"> </span><br><span class="line">    painter-&gt;restore();</span><br><span class="line"> </span><br><span class="line">    painter-&gt;save();</span><br><span class="line">    <span class="comment">// get the data and the rectangles   </span></span><br><span class="line">    <span class="keyword">const</span> QString&amp; text2 = index.data(Qt::UserRole+<span class="number">1</span>).toString();</span><br><span class="line">    QRect displayRect2;<span class="comment">//set the paint rect</span></span><br><span class="line">    painter-&gt;setPen(QColor(<span class="number">255</span>,<span class="number">122</span>,<span class="number">0</span>));</span><br><span class="line">    painter-&gt;drawText(displayRect2, text2);</span><br><span class="line"> </span><br><span class="line">    painter-&gt;restore();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="增加编辑功能"><a href="#增加编辑功能" class="headerlink" title="增加编辑功能"></a>增加编辑功能</h2><h4 id="可编辑的model"><a href="#可编辑的model" class="headerlink" title="可编辑的model"></a>可编辑的model</h4><p>要使model可以修改data，我们需要重写flags，setData ， 修改后的model变成：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">parserModel</span> :</span> <span class="keyword">public</span> QAbstractListModel</span><br><span class="line">{</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    parserModel(<span class="keyword">const</span> QStringList &amp;strings, QObject *parent = <span class="number">0</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//basic function for a read-only model</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">rowCount</span> <span class="params">( <span class="keyword">const</span> QModelIndex &amp; parent = QModelIndex() )</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">QVariant <span class="title">data</span> <span class="params">( <span class="keyword">const</span> QModelIndex &amp; index, <span class="keyword">int</span> role = Qt::DisplayRole )</span> <span class="keyword">const</span> </span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//for a editable model</span></span><br><span class="line">    Qt::<span class="function">ItemFlags <span class="title">flags</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;index)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">setData</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;index, <span class="keyword">const</span> QVariant &amp;value, <span class="keyword">int</span> role)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">//simple data source just a QStringList, if need can add other list of QString, int, bool, struct or class</span></span><br><span class="line">    QStringList stringList;</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>其中 flags方法非常重要，需要根据具体的user case 来设定，这个例子处理的简单草率。 来看setData</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> parserModel::setData(<span class="keyword">const</span> QModelIndex &amp;index,</span><br><span class="line">                              <span class="keyword">const</span> QVariant &amp;value, <span class="keyword">int</span> role)</span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span> (index.isValid() &amp;&amp; role == Qt::EditRole) {</span><br><span class="line"> </span><br><span class="line">        stringList.replace(index.row(), value.toString());</span><br><span class="line">        <span class="function">emit <span class="title">dataChanged</span><span class="params">(index, index)</span></span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>由于我们使用的是简单的QListView， 要使用标准的Qt::EditRole来传递编辑数据。数据修改结束发射signal 提示listview 改变显示。 emit dataChanged(index, index);</p><h4 id="可编辑的delegate"><a href="#可编辑的delegate" class="headerlink" title="可编辑的delegate"></a>可编辑的delegate</h4><p>要使delegate可以修改data，我们需要重写createEditor ，setEditorData ，setModelData ，updateEditorGeometry ， 修改后的delegate变成：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDelegate</span> :</span> <span class="keyword">public</span> QItemDelegate</span><br><span class="line">{</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">MyDelegate</span><span class="params">(QObject *parent = <span class="number">0</span>)</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//basic function for a read-only delegate, you can draw anything with the painter</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">paint</span> <span class="params">( QPainter * painter, <span class="keyword">const</span> QStyleOptionViewItem &amp; option, <span class="keyword">const</span> QModelIndex &amp; index )</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">QSize <span class="title">sizeHint</span> <span class="params">( <span class="keyword">const</span> QStyleOptionViewItem &amp; option, <span class="keyword">const</span> QModelIndex &amp; index )</span> <span class="keyword">const</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//for a editable delegate</span></span><br><span class="line">    <span class="function">QWidget * <span class="title">createEditor</span> <span class="params">( QWidget * parent, <span class="keyword">const</span> QStyleOptionViewItem &amp; option, <span class="keyword">const</span> QModelIndex &amp; index )</span> <span class="keyword">const</span> </span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setEditorData</span> <span class="params">( QWidget * editor, <span class="keyword">const</span> QModelIndex &amp; index )</span> <span class="keyword">const</span> </span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setModelData</span> <span class="params">( QWidget * editor, QAbstractItemModel * model, <span class="keyword">const</span> QModelIndex &amp; index )</span> <span class="keyword">const</span>  </span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateEditorGeometry</span> <span class="params">( QWidget * editor, <span class="keyword">const</span> QStyleOptionViewItem &amp; option, <span class="keyword">const</span> QModelIndex &amp; index )</span> <span class="keyword">const</span> </span>;</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>由于我们这里的数据只是QString, 于是用了个QLineEdit，如果还有其他数据需要编辑，可以做一个widget，在里面加入 QLineEdit ，QSpinBox，checkbox等editor，或自定义的editor如StarDelegate。然后在setModelData 中响应。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">QWidget * MyDelegate::createEditor ( QWidget * parent, <span class="keyword">const</span> QStyleOptionViewItem &amp; option, <span class="keyword">const</span> QModelIndex &amp; index ) <span class="keyword">const</span></span><br><span class="line">{</span><br><span class="line">    QLineEdit *editor = <span class="keyword">new</span> QLineEdit(parent);</span><br><span class="line">    <span class="keyword">return</span> editor;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">void</span> MyDelegate::setModelData ( QWidget * editor, QAbstractItemModel * model, <span class="keyword">const</span> QModelIndex &amp; index ) <span class="keyword">const</span></span><br><span class="line">{</span><br><span class="line">    QLineEdit *textEdit = qobject_cast&lt;QLineEdit *&gt;(editor) ;</span><br><span class="line">    model-&gt;setData(index, qVariantFromValue(textEdit-&gt;text()));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>setEditorData需要读取Model数据</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> MyDelegate::setEditorData ( QWidget * editor, <span class="keyword">const</span> QModelIndex &amp; index ) <span class="keyword">const</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">const</span> QString&amp; text = index.data(Qt::UserRole).toString();</span><br><span class="line">    QLineEdit *textEdit = qobject_cast&lt;QLineEdit *&gt;(editor) ;</span><br><span class="line">    textEdit-&gt;setText(text);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>列表的元素被选中进入编辑状态后，描绘就不通过paint了，这个时候要重做一遍，好在只需做一次特殊处理，用updateEditorGeometry</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> MyDelegate::updateEditorGeometry ( QWidget * editor, <span class="keyword">const</span> QStyleOptionViewItem &amp; option, <span class="keyword">const</span> QModelIndex &amp; index ) <span class="keyword">const</span></span><br><span class="line">{</span><br><span class="line"> </span><br><span class="line">    QRect decorationRect = QRect(option.rect.topLeft(), QSize(<span class="number">80</span>,<span class="number">80</span>));</span><br><span class="line">    QRect displayRect = QRect(decorationRect.topRight()+QPoint(<span class="number">20</span>,<span class="number">30</span>),QSize(<span class="number">150</span>,<span class="number">25</span>));<span class="comment">//QRect(decorationRect.topRight()+QPoint(20,30),QSize(50,50));</span></span><br><span class="line">    editor-&gt;setGeometry(displayRect);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>至此一个可编辑的自定义listview就做出来了， 通过修改字符串指向已存在的图像的路径，可以改变列表中的图片。 限于篇幅自定义的按钮留待以后实现。</p><h2 id="使用StyleSheet定制listview的外观"><a href="#使用StyleSheet定制listview的外观" class="headerlink" title="使用StyleSheet定制listview的外观"></a>使用StyleSheet定制listview的外观</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">listView-&gt;setStyleSheet(ss);</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;如何使用Model-View-delegate自定义列表&quot;&gt;&lt;a href=&quot;#如何使用Model-View-delegate自定义列表&quot; class=&quot;headerlink&quot; title=&quot;如何使用Model View delegate自定义列表&quot;&gt;&lt;/a&gt;如何使用Model View delegate自定义列表&lt;/h1&gt;&lt;p&gt;这是一个演示Model/View Programming 中自定义model，自定义delegate用法的程序。 通过自定义的model，delegate，实现自定义的列表元素。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C++" scheme="http://blog.iwxyi.com/tags/C/"/>
    
      <category term="Qt" scheme="http://blog.iwxyi.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>Qt::ItemDataRole</title>
    <link href="http://blog.iwxyi.com/2018/08/18/Qt-ItemDataRole/"/>
    <id>http://blog.iwxyi.com/2018/08/18/Qt-ItemDataRole/</id>
    <published>2018-08-18T09:28:00.000Z</published>
    <updated>2019-10-13T09:29:14.809Z</updated>
    
    <content type="html"><![CDATA[<p>model中的每个item项都有相关联的数据元素，都有自己的role，这些roles被用于view需要那种类型的model。自定义的model需要返回这些类型的数据。 </p><a id="more"></a><p>通用的roles和相关联的种类：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Constant          Value Description</span><br><span class="line">Qt::DisplayRole     0   The key data to be rendered in the form of text.</span><br><span class="line">                        数据以文本形式出现. (QString)</span><br><span class="line">Qt::DecorationRole  1   The data to be rendered as a decoration in the form of an icon. </span><br><span class="line">                        数据作为图标出现(QColor, QIcon or QPixmap)                                                                   </span><br><span class="line">Qt::EditRole        2   The data in a form suitable for editing in an editor. </span><br><span class="line">                        表单中的数据适合在编辑器中编辑(QString)</span><br><span class="line">Qt::ToolTipRole     3   The data displayed in the item's tooltip. </span><br><span class="line">                        数据显示Item提示(QString)</span><br><span class="line">Qt::StatusTipRole   4   The data displayed in the status bar.</span><br><span class="line">                        数据现在在 status bar中 (QString)</span><br><span class="line">Qt::WhatsThisRole   5   The data displayed for the item in "What's This?" mode. </span><br><span class="line">                        数据显示在"What's This?"mode中(QString)</span><br><span class="line">Qt::SizeHintRole    13  The size hint for the item that will be supplied to views. </span><br><span class="line">                        项的大小提供给Views。</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;model中的每个item项都有相关联的数据元素，都有自己的role，这些roles被用于view需要那种类型的model。自定义的model需要返回这些类型的数据。 &lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C++" scheme="http://blog.iwxyi.com/tags/C/"/>
    
      <category term="Qt" scheme="http://blog.iwxyi.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>Qt自定义列表Delegate</title>
    <link href="http://blog.iwxyi.com/2018/08/18/Qt%E8%87%AA%E5%AE%9A%E4%B9%89%E5%88%97%E8%A1%A8Delegate/"/>
    <id>http://blog.iwxyi.com/2018/08/18/Qt自定义列表Delegate/</id>
    <published>2018-08-18T09:26:00.000Z</published>
    <updated>2019-10-13T09:28:14.035Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实现功能："><a href="#实现功能：" class="headerlink" title="实现功能："></a>实现功能：</h2><p>Model/View框架中的Delgate负责单元格的显示。自己定义如何编辑列表listwidget中的项item。<br>1、定义每一项的显示大小。<br>2、显示其data：显示姓名、电话号码，插入表示性别data的图像。</p><a id="more"></a><h2 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h2><p>1、派生一个QStyledItemDelegate的类对象MyItemDrawer。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MYITEMDRAWER_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MYITEMDRAWER_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QStyledItemDelegate&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QIcon&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyItemDrawer</span> :</span> <span class="keyword">public</span> QStyledItemDelegate</span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    MyItemDrawer(QWidget *parent);</span><br><span class="line"><span class="keyword">private</span>: <span class="comment">//重写两个虚函数 </span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">(QPainter *painter,<span class="keyword">const</span> QStyleOptionViewItem &amp;option,<span class="keyword">const</span> QModelIndex &amp;index)</span><span class="keyword">const</span></span>;   <span class="comment">//显示性别图片</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> QSize <span class="title">sizeHint</span><span class="params">(<span class="keyword">const</span> QStyleOptionViewItem &amp;option, <span class="keyword">const</span> QModelIndex &amp;index)</span> <span class="keyword">const</span></span>;   <span class="comment">//更改item显示的大小</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    QPixmap m_male; <span class="comment">// 声明表示性别的两个QPixmap类型图片</span></span><br><span class="line">    QPixmap m_female;</span><br><span class="line"></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// MYITEMDRAWER_H</span></span></span><br><span class="line"><span class="number">123456789101112131415161718192021</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"myitemdrawer.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QPainter&gt;</span></span></span><br><span class="line"></span><br><span class="line">MyItemDrawer::MyItemDrawer(QWidget *parent)</span><br><span class="line">{</span><br><span class="line">    m_male.load(<span class="string">"C:/Users/Maggie/Downloads/male.png"</span>);  <span class="comment">//析构函数中初始化图片</span></span><br><span class="line">    m_female.load(<span class="string">"C:/Users/Maggie/Downloads/female.png"</span>);</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">QSize MyItemDrawer::sizeHint(<span class="keyword">const</span> QStyleOptionViewItem &amp;option, <span class="keyword">const</span> QModelIndex &amp;index) <span class="keyword">const</span></span><br><span class="line">{</span><br><span class="line">    QSize size=QStyledItemDelegate::sizeHint(option,index);</span><br><span class="line">    size.setHeight(<span class="number">80</span>); </span><br><span class="line">    <span class="keyword">return</span> size;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">void</span> MyItemDrawer::paint(QPainter* painter,<span class="keyword">const</span> QStyleOptionViewItem &amp;option,<span class="keyword">const</span> QModelIndex &amp;index)<span class="keyword">const</span></span><br><span class="line">{</span><br><span class="line">    QRect rect=option.rect;</span><br><span class="line">    rect.adjust(<span class="number">2</span>,<span class="number">2</span>,<span class="number">-2</span>,<span class="number">-2</span>); <span class="comment">//缩小一圈</span></span><br><span class="line">    QString name=index.data(Qt::DisplayRole).toString();  <span class="comment">//得到item的数据 姓名</span></span><br><span class="line">    QString phone=index.data(Qt::UserRole+<span class="number">1</span>).toString(); <span class="comment">//得到item的数据 电话号码</span></span><br><span class="line">    <span class="keyword">bool</span> gender=index.data(Qt::UserRole+<span class="number">1</span>).toBool();<span class="comment">//得到item的数据 性别</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(option.state&amp;QStyle::State_Selected)</span><br><span class="line">    {</span><br><span class="line">        painter-&gt;setBrush(QColor(<span class="number">0xCC</span>,<span class="number">0xAA</span>,<span class="number">0xaa</span>));   </span><br><span class="line">        painter-&gt;drawRoundedRect(rect,<span class="number">2</span>,<span class="number">2</span>);     <span class="comment">//给每个item的背景涂色  </span></span><br><span class="line">        painter-&gt;setBrush(Qt::NoBrush);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">1</span>)  <span class="comment">//显示姓名</span></span><br><span class="line">    {</span><br><span class="line">            QRect dst=rect;</span><br><span class="line">            dst.setLeft(rect.left()+<span class="number">40</span>);</span><br><span class="line">            dst.setBottom(rect.top()+<span class="number">20</span>);</span><br><span class="line">            painter-&gt;drawText(dst,Qt::AlignLeft|Qt::AlignVCenter,name);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">1</span>)  <span class="comment">//显示电话号码</span></span><br><span class="line">    {</span><br><span class="line">        QRect dst = rect;</span><br><span class="line">        dst.setLeft(rect.left() + <span class="number">40</span>);</span><br><span class="line">        dst.setTop(rect.top() + <span class="number">20</span>);</span><br><span class="line">        painter-&gt;drawText(dst, Qt::AlignLeft | Qt::AlignVCenter,phone);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">1</span>)  <span class="comment">//显示图片</span></span><br><span class="line">    {</span><br><span class="line">            QRect dst=rect;</span><br><span class="line">            dst.setRight(rect.left()+<span class="number">40</span>);</span><br><span class="line">            <span class="function">QRect <span class="title">area</span><span class="params">(<span class="number">0</span>,<span class="number">0</span>,<span class="number">24</span>,<span class="number">24</span>)</span></span>;</span><br><span class="line">            area.moveCenter(dst.center());</span><br><span class="line">            painter-&gt;drawPixmap(area,gender?m_male:m_female);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>2、MainWindow主窗口类中实现AddItem函数：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> MainWindow::AddItem(QString name,QString phone,<span class="keyword">bool</span> gender)</span><br><span class="line">{</span><br><span class="line">   QListWidgetItem *item=<span class="keyword">new</span> QListWidgetItem();</span><br><span class="line">   item-&gt;setData(Qt::DisplayRole,name);</span><br><span class="line">   item-&gt;setData(Qt::UserRole+<span class="number">1</span>,phone);</span><br><span class="line">   item-&gt;setData(Qt::UserRole+<span class="number">2</span>,gender);</span><br><span class="line">   ui-&gt;listWidget-&gt;addItem(item);</span><br><span class="line">}<span class="number">12345678</span></span><br></pre></td></tr></tbody></table></figure><p>3、在MainWindow类构造函数中：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">AddItem(<span class="string">"zzn"</span>,<span class="string">"13922233333"</span>,<span class="literal">false</span>);  <span class="comment">//加入多项数据</span></span><br><span class="line">AddItem(<span class="string">"hw"</span>,<span class="string">"13833322222"</span>,<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">ui-&gt;listWidget-&gt;setItemDelegate(<span class="keyword">new</span> MyItemDrawer(ui-&gt;listWidget)); </span><br><span class="line"><span class="comment">//给listwidget设置delegate，如果不设置自己写的，默认框架里也会有一个delegate。</span></span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;实现功能：&quot;&gt;&lt;a href=&quot;#实现功能：&quot; class=&quot;headerlink&quot; title=&quot;实现功能：&quot;&gt;&lt;/a&gt;实现功能：&lt;/h2&gt;&lt;p&gt;Model/View框架中的Delgate负责单元格的显示。自己定义如何编辑列表listwidget中的项item。&lt;br&gt;1、定义每一项的显示大小。&lt;br&gt;2、显示其data：显示姓名、电话号码，插入表示性别data的图像。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C++" scheme="http://blog.iwxyi.com/tags/C/"/>
    
      <category term="Qt" scheme="http://blog.iwxyi.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>Qt QListWidget实现复杂的列表控件</title>
    <link href="http://blog.iwxyi.com/2018/08/15/Qt-QListView%E5%AE%9E%E7%8E%B0%E5%A4%8D%E6%9D%82%E7%9A%84%E5%88%97%E8%A1%A8%E6%8E%A7%E4%BB%B6/"/>
    <id>http://blog.iwxyi.com/2018/08/15/Qt-QListView实现复杂的列表控件/</id>
    <published>2018-08-15T09:35:00.000Z</published>
    <updated>2019-10-13T09:36:19.973Z</updated>
    
    <content type="html"><![CDATA[<p>主要用这个函数：</p><p><code>void QListWidget::setItemWidget(QListWidgetItem * item, QWidget * widget)</code></p><p>然后应用css样式美化。 </p><a id="more"></a><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">ui-&gt;alarmListWidget-&gt;setResizeMode(QListView::Adjust);</span><br><span class="line">ui-&gt;alarmListWidget-&gt;setAutoScroll(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">QWidget *wContainer = <span class="keyword">new</span> QWidget(ui-&gt;alarmListWidget);</span><br><span class="line">QHBoxLayout *hLayout = <span class="keyword">new</span> QHBoxLayout(wContainer);</span><br><span class="line"></span><br><span class="line">QLabel *alarmIcon = <span class="keyword">new</span> QLabel(tr(<span class="string">"beih"</span>));</span><br><span class="line">QLabel *placeLabel = <span class="keyword">new</span> QLabel(tr(<span class="string">"北京"</span>));</span><br><span class="line">QLabel *videoNumLabel = <span class="keyword">new</span> QLabel(tr(<span class="string">"8"</span>));</span><br><span class="line">QLabel *dateLabel = <span class="keyword">new</span> QLabel(tr(<span class="string">"2013-4-16"</span>));</span><br><span class="line">QLabel *alarmMsgLabel = <span class="keyword">new</span> QLabel(tr(<span class="string">"违章搭建"</span>));</span><br><span class="line"><span class="comment">//QPushButton *pDeleteBtn = new QPushButton(QIcon(),tr("delete"));</span></span><br><span class="line"></span><br><span class="line">hLayout-&gt;addWidget(alarmIcon);</span><br><span class="line">hLayout-&gt;addStretch(<span class="number">1</span>);<span class="comment">//将空白没有widget的地方分成了若干份，按比例分配</span></span><br><span class="line">hLayout-&gt;addWidget(placeLabel);</span><br><span class="line">hLayout-&gt;addStretch(<span class="number">1</span>);</span><br><span class="line">hLayout-&gt;addWidget(videoNumLabel);</span><br><span class="line">hLayout-&gt;addStretch(<span class="number">1</span>);</span><br><span class="line">hLayout-&gt;addWidget(dateLabel);</span><br><span class="line">hLayout-&gt;addStretch(<span class="number">1</span>);<span class="comment">//将空白没有widget的地方分成了若干份，按比例分配</span></span><br><span class="line">hLayout-&gt;addWidget(alarmMsgLabel);</span><br><span class="line">hLayout-&gt;setContentsMargins(<span class="number">5</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">5</span>);<span class="comment">//关键代码，如果没有很可能显示不出来</span></span><br><span class="line"><span class="comment">// wContainer-&gt;setLayout(hLayout);//如果layout在创建时就已经将父窗口指针当参数，那就不用setlayout</span></span><br><span class="line">wContainer-&gt;resize(<span class="number">350</span>,<span class="number">50</span>);</span><br><span class="line"><span class="comment">// wContainer-&gt;show();</span></span><br><span class="line"></span><br><span class="line">QListWidgetItem *alarmItem = <span class="keyword">new</span> QListWidgetItem(ui-&gt;alarmListWidget);</span><br><span class="line">ui-&gt;alarmListWidget-&gt;setItemWidget(alarmItem,wContainer);</span><br></pre></td></tr></tbody></table></figure><hr><blockquote><p>参考：<a href="https://blog.csdn.net/xzh_blue/article/details/49178395" target="_blank" rel="noopener">https://blog.csdn.net/xzh_blue/article/details/49178395</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要用这个函数：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;void QListWidget::setItemWidget(QListWidgetItem * item, QWidget * widget)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;然后应用css样式美化。 &lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C++" scheme="http://blog.iwxyi.com/tags/C/"/>
    
      <category term="Qt" scheme="http://blog.iwxyi.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>IIS允许下载APK安装包</title>
    <link href="http://blog.iwxyi.com/2018/08/10/IIS%E5%85%81%E8%AE%B8%E4%B8%8B%E8%BD%BDAPK%E5%AE%89%E8%A3%85%E5%8C%85/"/>
    <id>http://blog.iwxyi.com/2018/08/10/IIS允许下载APK安装包/</id>
    <published>2018-08-10T12:41:00.000Z</published>
    <updated>2019-10-12T23:20:33.150Z</updated>
    
    <content type="html"><![CDATA[<h2 id="IIS允许下载APK安装包（MIME类型配置）"><a href="#IIS允许下载APK安装包（MIME类型配置）" class="headerlink" title="IIS允许下载APK安装包（MIME类型配置）"></a>IIS允许下载APK安装包（MIME类型配置）</h2><p>IIS7MIME配置过程：</p><p>打开IIS信息服务管理器，找到要添加配置的网站；</p><p>在该网站的功能视图中单击”MIME类型“按钮（如果在功能视图中没有MIME按钮，则需要通过服务器管理器中角色管理进行添加），打开MIME类型设置窗口；</p><a id="more"></a><p>在操作栏里点击”添加“按钮；</p><p>单机”确定“保存设置；</p><p>重启IIS，使设置生效。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;IIS允许下载APK安装包（MIME类型配置）&quot;&gt;&lt;a href=&quot;#IIS允许下载APK安装包（MIME类型配置）&quot; class=&quot;headerlink&quot; title=&quot;IIS允许下载APK安装包（MIME类型配置）&quot;&gt;&lt;/a&gt;IIS允许下载APK安装包（MIME类型配置）&lt;/h2&gt;&lt;p&gt;IIS7MIME配置过程：&lt;/p&gt;
&lt;p&gt;打开IIS信息服务管理器，找到要添加配置的网站；&lt;/p&gt;
&lt;p&gt;在该网站的功能视图中单击”MIME类型“按钮（如果在功能视图中没有MIME按钮，则需要通过服务器管理器中角色管理进行添加），打开MIME类型设置窗口；&lt;/p&gt;
    
    </summary>
    
    
      <category term="运维" scheme="http://blog.iwxyi.com/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="服务器" scheme="http://blog.iwxyi.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Qt菊花转动画</title>
    <link href="http://blog.iwxyi.com/2018/08/10/Qt%E8%8F%8A%E8%8A%B1%E8%BD%AC%E5%8A%A8%E7%94%BB/"/>
    <id>http://blog.iwxyi.com/2018/08/10/Qt菊花转动画/</id>
    <published>2018-08-10T10:49:00.000Z</published>
    <updated>2019-10-13T10:50:22.065Z</updated>
    
    <content type="html"><![CDATA[<p>菊花圆圈转动动画</p><a id="more"></a><p><strong>CustomProgressIndicator.h</strong></p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> CUSTOMPROGRESSINDICATOR_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CUSTOMPROGRESSINDICATOR_H</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QWidget&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QColor&gt;</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 菊花转 进度类，基于代码无需图片资源</span></span><br><span class="line"><span class="comment">* 作者：陈鲁勇</span></span><br><span class="line"><span class="comment">* 邮箱：727057301@qq.com</span></span><br><span class="line"><span class="comment">* 创建时间：2017年2月10日16:26:48</span></span><br><span class="line"><span class="comment">* QT版本：5.0.2</span></span><br><span class="line"><span class="comment">* CSDN：http://blog.csdn.net/csnd_ayo </span></span><br><span class="line"><span class="comment">* **************************************</span></span><br><span class="line"><span class="comment">* 说明：</span></span><br><span class="line"><span class="comment">*   使用前请确保在QT.pro中加入 C++11 的支持</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 示例代码：</span></span><br><span class="line"><span class="comment">    pIndicator = new CustomProgressIndicator(this);</span></span><br><span class="line"><span class="comment">    pIndicator-&gt;setColor(Qt::red);</span></span><br><span class="line"><span class="comment">    pIndicator-&gt;startAnimation();</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomProgressIndicator</span> :</span> <span class="keyword">public</span> QWidget</span><br><span class="line">{</span><br><span class="line">    Q_OBJECT</span><br><span class="line">    Q_PROPERTY(<span class="keyword">int</span> delay READ animationDelay WRITE setAnimationDelay)</span><br><span class="line">    Q_PROPERTY(<span class="keyword">bool</span> displayedWhenStopped READ isDisplayedWhenStopped WRITE setDisplayedWhenStopped)</span><br><span class="line">    Q_PROPERTY(QColor color READ color WRITE setColor)</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    CustomProgressIndicator(QWidget* parent = <span class="number">0</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">animationDelay</span><span class="params">()</span> <span class="keyword">const</span> </span>{ <span class="keyword">return</span> delay_; }</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/*  动画是否正在进行中  */</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isAnimated</span> <span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/*  动画完毕后，是否隐藏菊花转  */</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isDisplayedWhenStopped</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/*  当前菊花转的颜色  */</span></span><br><span class="line">    <span class="function"><span class="keyword">const</span> QColor &amp; <span class="title">color</span><span class="params">()</span> <span class="keyword">const</span> </span>{ <span class="keyword">return</span> color_; }</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/*  虚函数：当前大小  */</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> QSize <span class="title">sizeHint</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setBackground</span><span class="params">(<span class="keyword">const</span> QString&amp; _icon)</span> </span>{</span><br><span class="line">        currentPix_ = QPixmap(_icon);</span><br><span class="line">    }</span><br><span class="line">signals:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Finished</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/*  开始动画  */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">startAnimation</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/*  停止动画  */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">stopAnimation</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/*  设置菊花转的转速  */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setAnimationDelay</span><span class="params">(<span class="keyword">int</span> delay)</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/*  动画完毕后，是否隐藏菊花转  */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setDisplayedWhenStopped</span><span class="params">(<span class="keyword">bool</span> state)</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/*  设置菊花转颜色  */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setColor</span><span class="params">(<span class="keyword">const</span> QColor &amp; color)</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 进度</span></span><br><span class="line"><span class="comment">     * 参数 _progress：当前进度 0 &lt; _progress &lt; 100</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onProgress</span><span class="params">(<span class="keyword">short</span> _progress)</span> </span>{ progress_ = _progress; }</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="comment">/*  系统基类函数 */</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">timerEvent</span><span class="params">(QTimerEvent * event)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">paintEvent</span><span class="params">(QPaintEvent * event)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">/*  角度  */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> angle_;</span><br><span class="line">    <span class="comment">/*  定时器ID  */</span></span><br><span class="line">    <span class="keyword">int</span> timerId_;</span><br><span class="line">    <span class="comment">/*  转速  */</span></span><br><span class="line">    <span class="keyword">int</span> delay_;</span><br><span class="line">    <span class="comment">/*  是否隐藏  */</span></span><br><span class="line">    <span class="keyword">bool</span> displayedWhenStopped_;</span><br><span class="line">    <span class="comment">/*  菊花转颜色  */</span></span><br><span class="line">    QColor color_;</span><br><span class="line">    <span class="comment">/*  进度  */</span></span><br><span class="line">    <span class="keyword">short</span> progress_;</span><br><span class="line">    <span class="comment">/*  背景图  */</span></span><br><span class="line">    QPixmap currentPix_;</span><br><span class="line">};</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// CUSTOMPROGRESSINDICATOR_H</span></span></span><br></pre></td></tr></tbody></table></figure><p><strong>CustomProgressIndicator.cpp</strong></p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"customprogressindicator.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QPainter&gt;</span></span></span><br><span class="line"> </span><br><span class="line">CustomProgressIndicator::CustomProgressIndicator(QWidget* parent)</span><br><span class="line">    : QWidget(parent),</span><br><span class="line">      angle_(<span class="number">0</span>),</span><br><span class="line">      timerId_(<span class="number">-1</span>),</span><br><span class="line">      delay_(<span class="number">20</span>),</span><br><span class="line">      displayedWhenStopped_(<span class="literal">false</span>),</span><br><span class="line">      color_(Qt::green) {</span><br><span class="line">    setSizePolicy(QSizePolicy::Fixed, QSizePolicy::Fixed);</span><br><span class="line">    setFocusPolicy(Qt::NoFocus);</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="keyword">bool</span> CustomProgressIndicator::isAnimated () <span class="keyword">const</span> {</span><br><span class="line">    <span class="keyword">return</span> (timerId_ != <span class="number">-1</span>);</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="keyword">void</span> CustomProgressIndicator::setDisplayedWhenStopped(<span class="keyword">bool</span> state) {</span><br><span class="line">    displayedWhenStopped_ = state;</span><br><span class="line"> </span><br><span class="line">    update();</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="keyword">bool</span> CustomProgressIndicator::isDisplayedWhenStopped() <span class="keyword">const</span> {</span><br><span class="line">    <span class="keyword">return</span> displayedWhenStopped_;</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="keyword">void</span> CustomProgressIndicator::startAnimation() {</span><br><span class="line">    angle_ = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (timerId_ == <span class="number">-1</span>) {</span><br><span class="line">       timerId_ = startTimer(delay_);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="keyword">void</span> CustomProgressIndicator::stopAnimation() {</span><br><span class="line">    <span class="keyword">if</span> (timerId_ != <span class="number">-1</span>) {</span><br><span class="line">        killTimer(timerId_);</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    timerId_ = <span class="number">-1</span>;</span><br><span class="line"> </span><br><span class="line">    update();</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="keyword">void</span> CustomProgressIndicator::setAnimationDelay(<span class="keyword">int</span> delay) {</span><br><span class="line">    <span class="keyword">if</span> (timerId_ != <span class="number">-1</span>){</span><br><span class="line">        killTimer(timerId_);</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    delay_ = delay;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (timerId_ != <span class="number">-1</span>){</span><br><span class="line">        timerId_ = startTimer(delay_);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="keyword">void</span> CustomProgressIndicator::setColor(<span class="keyword">const</span> QColor &amp; color) {</span><br><span class="line">    color_ = color;</span><br><span class="line"> </span><br><span class="line">    update();</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line">QSize CustomProgressIndicator::sizeHint() <span class="keyword">const</span> {</span><br><span class="line">    <span class="keyword">return</span> QSize(<span class="number">25</span>,<span class="number">25</span>);</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">void</span> CustomProgressIndicator::timerEvent(QTimerEvent * <span class="comment">/*event*/</span>) {</span><br><span class="line">    angle_ = (angle_+<span class="number">30</span>)%<span class="number">360</span>;</span><br><span class="line"> </span><br><span class="line">    update();</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="keyword">void</span> CustomProgressIndicator::paintEvent(QPaintEvent * <span class="comment">/*event*/</span>) {</span><br><span class="line">    <span class="function">QPainter <span class="title">p</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line">    p.setRenderHint(QPainter::Antialiasing);</span><br><span class="line">    <span class="keyword">if</span> (!displayedWhenStopped_ &amp;&amp; !isAnimated()) {</span><br><span class="line">        p.drawPixmap(rect(),currentPix_);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">int</span> width = qMin(<span class="keyword">this</span>-&gt;width(), <span class="keyword">this</span>-&gt;height());</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">int</span> outerRadius = (width<span class="number">-1</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> innerRadius = ((width<span class="number">-1</span>) &gt;&gt; <span class="number">1</span>)*<span class="number">0.38</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">int</span> capsuleHeight = outerRadius - innerRadius;</span><br><span class="line">    <span class="keyword">int</span> capsuleWidth  = (width &gt; <span class="number">32</span> ) ? capsuleHeight *<span class="number">.23</span> : capsuleHeight *<span class="number">.35</span>;</span><br><span class="line">    <span class="keyword">int</span> capsuleRadius = capsuleWidth &gt;&gt; <span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* 撰写进度 */</span></span><br><span class="line">    <span class="keyword">if</span> (progress_ &gt; <span class="number">0</span> &amp;&amp; progress_ &lt; <span class="number">100</span>) {</span><br><span class="line">        p.setPen(color_);</span><br><span class="line">        p.drawText(rect(), Qt::AlignCenter, QString(<span class="string">"%1%"</span>).arg(progress_));</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (progress_ == <span class="number">100</span>) {</span><br><span class="line">        stopAnimation();</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">12</span>; ++i) {</span><br><span class="line">        QColor color = color_;</span><br><span class="line">        color.setAlphaF(<span class="number">1.0f</span> - (i/<span class="number">12.0f</span>));</span><br><span class="line">        p.setPen(Qt::NoPen);</span><br><span class="line">        p.setBrush(color);</span><br><span class="line">        p.save();</span><br><span class="line">        p.translate(rect().center());</span><br><span class="line">        p.rotate(angle_ - i*<span class="number">30.0f</span>);</span><br><span class="line">        p.drawRoundedRect(((-capsuleWidth) &gt;&gt; <span class="number">1</span>), -(innerRadius+capsuleHeight), capsuleWidth, capsuleHeight, capsuleRadius, capsuleRadius);</span><br><span class="line">        p.restore();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;菊花圆圈转动动画&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C++" scheme="http://blog.iwxyi.com/tags/C/"/>
    
      <category term="Qt" scheme="http://blog.iwxyi.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>fread和fwrite转移文件数据</title>
    <link href="http://blog.iwxyi.com/2018/08/04/fread%E5%92%8Cfwrite%E8%BD%AC%E7%A7%BB%E6%96%87%E4%BB%B6%E6%95%B0%E6%8D%AE/"/>
    <id>http://blog.iwxyi.com/2018/08/04/fread和fwrite转移文件数据/</id>
    <published>2018-08-04T12:18:00.000Z</published>
    <updated>2019-10-12T12:15:15.046Z</updated>
    
    <content type="html"><![CDATA[<p>读取文件，再写入到另一个文件里面：</p><p><strong>1、获取文件大小</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FILE* fp_size = fopen(<span class="string">"T:/img.jpg"</span>, <span class="string">"rb"</span>);</span><br><span class="line">fseek(fp_size, <span class="number">0</span>, SEEK_END);</span><br><span class="line"><span class="keyword">int</span> size = ftell(fp_size);</span><br><span class="line">fclose(fp_size);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"文件大小(指针偏移计算):"</span> &lt;&lt; size; <span class="comment">// 字节大小</span></span><br></pre></td></tr></tbody></table></figure><a id="more"></a><p><strong>2、读取文件</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FILE* fp_read = fopen(<span class="string">"T:/img.jpg"</span>, <span class="string">"rb"</span>);</span><br><span class="line"><span class="keyword">int</span>* buffer = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(size+<span class="number">4</span>); <span class="comment">// 可以改成其他类型也没事，比如 char*</span></span><br><span class="line">fread(buffer, size, <span class="number">1</span>, fp_read);</span><br><span class="line">fclose(fp_read);</span><br></pre></td></tr></tbody></table></figure><p><strong>3、写入到另一个文件</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FILE* fp_write = fopen(<span class="string">"T:/img1.png"</span>, <span class="string">"wb"</span>);</span><br><span class="line">fwrite(buffer,size, <span class="number">1</span>, fp_write);</span><br><span class="line">fclose(fp_write);</span><br></pre></td></tr></tbody></table></figure><p><code>fread</code>和<code>write</code>的<code>size</code>可以更大，不影响结果（表示上限）</p><hr><p>实测一张jpg图片：</p><ul><li>size超过体积，保存的会是size的大小</li><li>1/10时：图片只有一半显示，体积也只有1/10</li><li>1/4时：上方5/6的部分清晰，剩下的模糊</li><li>1/2时：虽然体积只有一半，但是好像一样清晰……</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;读取文件，再写入到另一个文件里面：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、获取文件大小&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;FILE* fp_size = fopen(&lt;span class=&quot;string&quot;&gt;&quot;T:/img.jpg&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;rb&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fseek(fp_size, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, SEEK_END);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; size = ftell(fp_size);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fclose(fp_size);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;文件大小(指针偏移计算):&quot;&lt;/span&gt; &amp;lt;&amp;lt; size; &lt;span class=&quot;comment&quot;&gt;// 字节大小&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C" scheme="http://blog.iwxyi.com/tags/C/"/>
    
      <category term="文件" scheme="http://blog.iwxyi.com/tags/%E6%96%87%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>快速排序</title>
    <link href="http://blog.iwxyi.com/2018/08/04/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    <id>http://blog.iwxyi.com/2018/08/04/快速排序/</id>
    <published>2018-08-04T12:10:00.000Z</published>
    <updated>2019-10-13T12:10:36.838Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;arr, <span class="keyword">int</span> p, <span class="keyword">int</span> r)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> x = arr[r];</span><br><span class="line"><span class="keyword">int</span> i = p - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = p; j &lt;= r - <span class="number">1</span>; j++) {</span><br><span class="line"><span class="keyword">if</span> (arr[j] &lt;= x) {</span><br><span class="line">i += <span class="number">1</span>;</span><br><span class="line">swap(arr[i], arr[j]);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">swap(arr[i + <span class="number">1</span>], arr[r]);</span><br><span class="line"><span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;arr, <span class="keyword">int</span> p, <span class="keyword">int</span> r)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (p &lt; r) {</span><br><span class="line"><span class="keyword">int</span> q = partition(arr, p, r);</span><br><span class="line">QuickSort(arr, p, q - <span class="number">1</span>);</span><br><span class="line">QuickSort(arr, q + <span class="number">1</span>, r);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C++" scheme="http://blog.iwxyi.com/tags/C/"/>
    
      <category term="STL" scheme="http://blog.iwxyi.com/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>Qt无边框鼠标移动</title>
    <link href="http://blog.iwxyi.com/2018/08/04/Qt%E6%97%A0%E8%BE%B9%E6%A1%86%E9%BC%A0%E6%A0%87%E7%A7%BB%E5%8A%A8/"/>
    <id>http://blog.iwxyi.com/2018/08/04/Qt无边框鼠标移动/</id>
    <published>2018-08-04T09:04:00.000Z</published>
    <updated>2019-10-13T09:04:52.602Z</updated>
    
    <content type="html"><![CDATA[<p>拖动控件，即拖动窗口</p><a id="more"></a><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="title">voidmousePressEvent</span><span class="params">(QMouseEvent* e)</span></span>;    <span class="comment">// 鼠标的单击事件</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="title">voidmouseMoveEvent</span><span class="params">(QMouseEvent* e)</span></span>;    <span class="comment">// 鼠标的移动事件</span></span><br><span class="line"></span><br><span class="line"><span class="function">virtualvoid <span class="title">mouseReleaseEvent</span><span class="params">(QMouseEvent* e)</span></span>;  <span class="comment">// 鼠标的单击释放事件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> m_bIsWindowMoveable;</span><br><span class="line"></span><br><span class="line">voidClassName::mousePressEvent(QMouseEvent* e)</span><br><span class="line">{</span><br><span class="line">         <span class="keyword">if</span>(e-&gt;button() ==  Qt::LeftButton)</span><br><span class="line">         {</span><br><span class="line">                   m_bIsWindowMoveable = <span class="literal">true</span>;</span><br><span class="line">         }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> ClassName:mouseMoveEvent(QMouseEvent*e)</span><br><span class="line">{</span><br><span class="line">         <span class="keyword">if</span>(m_ bIsWindowMoveable)</span><br><span class="line">         {</span><br><span class="line">                   move(e-&gt;globalPos());</span><br><span class="line">         }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">voidClassName::mouseReleaseEvent(QMouseEvent* e)</span><br><span class="line">{</span><br><span class="line">         m_bIsWindowMoveable = <span class="literal">false</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;拖动控件，即拖动窗口&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C++" scheme="http://blog.iwxyi.com/tags/C/"/>
    
      <category term="Qt" scheme="http://blog.iwxyi.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>HTML表格单元格悬浮提示</title>
    <link href="http://blog.iwxyi.com/2018/08/01/HTML%E8%A1%A8%E6%A0%BC%E5%8D%95%E5%85%83%E6%A0%BC%E6%82%AC%E6%B5%AE%E6%8F%90%E7%A4%BA/"/>
    <id>http://blog.iwxyi.com/2018/08/01/HTML表格单元格悬浮提示/</id>
    <published>2018-08-01T05:07:00.000Z</published>
    <updated>2019-10-13T05:08:50.948Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">title</span>=<span class="string">"点击了解详细信息"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>要显示的文本<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;sp
      
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="HTML" scheme="http://blog.iwxyi.com/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>Swing框架-学习笔记</title>
    <link href="http://blog.iwxyi.com/2018/07/09/Swing%E6%A1%86%E6%9E%B6-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://blog.iwxyi.com/2018/07/09/Swing框架-学习笔记/</id>
    <published>2018-07-09T05:26:00.000Z</published>
    <updated>2019-10-13T08:44:23.412Z</updated>
    
    <content type="html"><![CDATA[<h1 id="绘图"><a href="#绘图" class="headerlink" title="绘图"></a>绘图</h1><p>相关的类：</p><ul><li>JFrame</li><li>JPanel</li></ul><a id="more"></a><h2 id="画到画板"><a href="#画到画板" class="headerlink" title="画到画板"></a>画到画板</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.JFrame;</span><br><span class="line"><span class="keyword">import</span> java.awt.Color;</span><br><span class="line"><span class="keyword">import</span> java.awt.Panel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">         <span class="comment">// 创建容器</span></span><br><span class="line">JFrame frame = <span class="keyword">new</span> JFrame();</span><br><span class="line">frame.setSize(<span class="number">200</span>, <span class="number">300</span>);</span><br><span class="line">frame.setLocation(<span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">frame.setVisible(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// 创建画板</span></span><br><span class="line">Panel panel = <span class="keyword">new</span> Panel();</span><br><span class="line">panel.setBackground(Color.YELLOW);</span><br><span class="line">         <span class="comment">// 添加容器到画板</span></span><br><span class="line">frame.add(panel);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="画板子类"><a href="#画板子类" class="headerlink" title="画板子类"></a>画板子类</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.Color;</span><br><span class="line"><span class="keyword">import</span> java.awt.Graphics;</span><br><span class="line"><span class="keyword">import</span> java.awt.Panel;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">M</span> <span class="keyword">extends</span> <span class="title">Panel</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> x[], y[];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">M</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">         <span class="comment">// 初始化星星随机坐标</span></span><br><span class="line">x = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">300</span>];</span><br><span class="line">y = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">300</span>];</span><br><span class="line">Random random = <span class="keyword">new</span> Random();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">300</span>; i++) {</span><br><span class="line">x[i] = random.nextInt(<span class="number">1000</span>);</span><br><span class="line">y[i] = random.nextInt(<span class="number">600</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">(Graphics g)</span> </span>{</span><br><span class="line"><span class="keyword">super</span>.paint(g);</span><br><span class="line"><span class="keyword">this</span>.setBackground(Color.black);</span><br><span class="line">         <span class="comment">// 画月亮</span></span><br><span class="line">g.setColor(Color.white);</span><br><span class="line">g.fillArc(<span class="number">860</span>, <span class="number">100</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">0</span>, <span class="number">360</span>);</span><br><span class="line">         <span class="comment">// 画星星（文字）</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">300</span>; i++) {</span><br><span class="line">g.drawString(<span class="string">"*"</span>, x[i], y[i]);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="动态绘图"><a href="#动态绘图" class="headerlink" title="动态绘图"></a>动态绘图</h3><p>main</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">M panel = <span class="keyword">new</span> M();</span><br><span class="line">frame.add(panel);</span><br><span class="line"></span><br><span class="line">Thread t = <span class="keyword">new</span> Thread(panel);</span><br><span class="line">panel.run(); <span class="comment">// 开始多线程运行方法一</span></span><br><span class="line"><span class="comment">//t.start(); // 开始多线程运行方法二</span></span><br></pre></td></tr></tbody></table></figure><p>M</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">M</span> <span class="keyword">extends</span> <span class="title">JPanel</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) {</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; x.length; i++) {</span><br><span class="line">x[i]--;</span><br><span class="line">y[i]++;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">try</span> { <span class="comment">// 定时（动态）操作</span></span><br><span class="line">Thread.sleep(<span class="number">100</span>);</span><br><span class="line">} <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">e.printStackTrace();</span><br><span class="line">}</span><br><span class="line">             <span class="comment">// 重绘函数</span></span><br><span class="line">repaint();</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="解决闪烁"><a href="#解决闪烁" class="headerlink" title="解决闪烁"></a>解决闪烁</h4><p>JPanel 自带双重缓冲。</p><h3 id="动态绘图2"><a href="#动态绘图2" class="headerlink" title="动态绘图2"></a>动态绘图2</h3><p>构造函数：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">move(); <span class="comment">// 直接调用</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">new</span> Thread() {</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">            </span><br><span class="line">            <span class="comment">/* ... 位置初始化 ... */</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) {</span><br><span class="line">                </span><br><span class="line">               <span class="comment">/* ... 控件移动 ... */</span></span><br><span class="line">                </span><br><span class="line">                repaint();</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    Thread.sleep(<span class="number">24</span>);</span><br><span class="line">                } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }.start();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="无边框"><a href="#无边框" class="headerlink" title="无边框"></a>无边框</h3><p>frame.setUndecorated(true);</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">JFrame frame = <span class="keyword">new</span> JFrame();</span><br><span class="line">BallPanel panel = <span class="keyword">new</span> BallPanel();</span><br><span class="line"></span><br><span class="line">frame.setBounds(<span class="number">100</span>, <span class="number">100</span>, <span class="number">1000</span>, <span class="number">600</span>); <span class="comment">// 代替setLocation和setSize</span></span><br><span class="line">frame.setBackground(Color.YELLOW);</span><br><span class="line">frame.setUndecorated(<span class="keyword">true</span>);</span><br><span class="line">frame.add(panel);</span><br><span class="line">frame.setVisible(<span class="keyword">true</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>实测setVisible必须在add和setUndecorated后面</p><h3 id="设置图片"><a href="#设置图片" class="headerlink" title="设置图片"></a>设置图片</h3><p><code>Graphics.drawImage()</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">(Graphics g)</span> </span>{</span><br><span class="line">    <span class="keyword">super</span>.paint(g);</span><br><span class="line"></span><br><span class="line">    g.drawImage(<span class="keyword">new</span> ImageIcon(<span class="string">"img/pic.jpg"</span>).getImage(), <span class="number">0</span>, <span class="number">0</span>, <span class="keyword">this</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="鼠标拖动"><a href="#鼠标拖动" class="headerlink" title="鼠标拖动"></a>鼠标拖动</h2><p>main 使用工具类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">JFrame frame = <span class="keyword">new</span> JFrame();</span><br><span class="line">LocationUtil lUtil = <span class="keyword">new</span> LocationUtil(frame); <span class="comment">// 设置鼠标可拖动的工具类</span></span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>util：LocationUtil 工具类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.event.MouseEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.MouseListener;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.MouseMotionListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.JFrame;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocationUtil</span> </span>{</span><br><span class="line">JFrame frame;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> xx, yy;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> isDraging = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LocationUtil</span><span class="params">(JFrame f)</span> </span>{</span><br><span class="line"><span class="keyword">this</span>.frame = f;</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 鼠标按键事件</span></span><br><span class="line">frame.addMouseListener(<span class="keyword">new</span> MouseListener() {</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseReleased</span><span class="params">(MouseEvent e)</span> </span>{</span><br><span class="line">isDraging = <span class="keyword">false</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mousePressed</span><span class="params">(MouseEvent e)</span> </span>{</span><br><span class="line">isDraging = <span class="keyword">true</span>;</span><br><span class="line">xx = e.getX();</span><br><span class="line">yy = e.getY();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseExited</span><span class="params">(MouseEvent e)</span> </span>{</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseEntered</span><span class="params">(MouseEvent e)</span> </span>{</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseClicked</span><span class="params">(MouseEvent e)</span> </span>{</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 鼠标移动事件</span></span><br><span class="line">frame.addMouseMotionListener(<span class="keyword">new</span> MouseMotionListener() {</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseMoved</span><span class="params">(MouseEvent e)</span> </span>{</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseDragged</span><span class="params">(MouseEvent e)</span> </span>{</span><br><span class="line"><span class="keyword">if</span> (isDraging == <span class="keyword">true</span>) {</span><br><span class="line"><span class="keyword">int</span> left = frame.getLocation().x;</span><br><span class="line"><span class="keyword">int</span> top = frame.getLocation().y;</span><br><span class="line">frame.setLocation(left + e.getX() - xx, top + e.getY() - yy);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">});</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="设置成屏幕大小"><a href="#设置成屏幕大小" class="headerlink" title="设置成屏幕大小"></a>设置成屏幕大小</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Dimension screensize = <span class="keyword">new</span> Dimension();</span><br><span class="line">screensize = tk.getScreenSize();</span><br><span class="line">width = screensize.getWidth();</span><br><span class="line">height = screensize.getHeight();</span><br><span class="line">jframe.setSize((<span class="keyword">int</span>)width, (<span class="keyword">int</span>)height);</span><br><span class="line">jframe.setLocation(<span class="number">0</span>, <span class="number">0</span>);</span><br></pre></td></tr></tbody></table></figure><h1 id="java语法"><a href="#java语法" class="headerlink" title="java语法"></a>java语法</h1><h2 id="单个变量形成数组"><a href="#单个变量形成数组" class="headerlink" title="单个变量形成数组"></a>单个变量形成数组</h2><p>数组引用的是单个变量的地址空间，所以是同一个</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Student s1 = <span class="keyword">new</span> Student();</span><br><span class="line">Student s2 = <span class="keyword">new</span> Student();</span><br><span class="line"></span><br><span class="line">Student[] ss = <span class="keyword">new</span> Student[] { s1, s2 };</span><br><span class="line"></span><br><span class="line">System.out.println(ss[<span class="number">1</span>] == s2); <span class="comment">// true</span></span><br></pre></td></tr></tbody></table></figure><h2 id="向上转型"><a href="#向上转型" class="headerlink" title="向上转型"></a>向上转型</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">pout</span><span class="params">(Object o)</span> </span>{</span><br><span class="line">    System.out.println(o.toString());</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"></span><br><span class="line">    Boolean b = <span class="keyword">new</span> Boolean(<span class="keyword">false</span>);</span><br><span class="line">    pout(b);</span><br><span class="line"></span><br><span class="line">    String s = <span class="keyword">new</span> String(<span class="string">"1431"</span>);</span><br><span class="line">    pout(s);</span><br><span class="line"></span><br><span class="line">    Integer i = <span class="keyword">new</span> Integer(<span class="number">1000</span>);</span><br><span class="line">    pout(i);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="子类的创建、继承、覆盖"><a href="#子类的创建、继承、覆盖" class="headerlink" title="子类的创建、继承、覆盖"></a>子类的创建、继承、覆盖</h2><ul><li>构造函数只能调用，不能继承</li><li>创建子类对象时在调用子类的构造器<strong>前</strong>，会调用父类的（无参）构造器</li><li>先对父类初始化，再对子类初始化</li><li>子类构造器中使用<code>super([参数])</code>来调用父类的构造器</li><li>如果父类只有有参构造器，则必须在子类构造函数<strong>第一行</strong>使用<code>super([参数])</code>来调用</li><li>类、字段、构造器不存在覆盖的概念</li><li>静态区优先于对象而创建，也不存在覆盖的概念（隐藏）。调用使用<code>类名.方法</code>，而非<code>类示例.方法</code></li><li>遮蔽 三种情况<ol><li>局部变量和成员变量同名，使用<code>this</code></li><li>子类和父类存在同名成员变量，使用<code>super</code>调用父类成员变量</li><li>子类和父类存在相同静态方法，方法不存在覆盖</li></ol></li></ul><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>一个对象可以有多种形态<br>    1. 父类指针指向子类对象<br>    2. 把子类对象复制给父类的变量<br>    3. 继承是多态的前提，没有继承就没有多态</p><p>多态的好处<br>    - 把不同的子类对象都当做父类类型来看<br>    - 可以屏蔽不同子类对象之间的差异</p><p>父类和子类同时存在静态方法时：<br>    - 直接调用静态方法（子类）<br>    - 父类名.静态方法<br>静态方法不是覆盖，而属于隐藏</p><p>多态是对象的概念，和类没有关系 <strong>√</strong></p><p><code>instanceof</code> 判断是否是某个（父）类的实例</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (a <span class="keyword">instanceof</span> A) <span class="comment">// true</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">B extends A;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (b <span class="keyword">instanceof</span> A) <span class="comment">// true</span></span><br></pre></td></tr></tbody></table></figure><p>(其实还有其他更深的用法，例如 <code>c instanceof C</code> 有 true 也有 false)</p><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i      = <span class="number">129</span>;</span><br><span class="line"></span><br><span class="line">Integer I1 = <span class="keyword">new</span> Integer(<span class="number">129</span>);</span><br><span class="line"></span><br><span class="line">Integer I2 = <span class="keyword">new</span> Integer(<span class="number">129</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (i == I1)       <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (I1 == I2)      <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (I1.equals(I2)) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">Integer I3 = <span class="keyword">new</span> Integer(<span class="number">127</span>);</span><br><span class="line"></span><br><span class="line">Integer I4 = <span class="keyword">new</span> Integer(<span class="number">127</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (I3 == I4) <span class="comment">// true, 享元模式</span></span><br></pre></td></tr></tbody></table></figure><p>当 &lt; 128 时，Integer对象都是共享的;<br>当 &gt;=128 时，才真正分配对象</p><p>就是用一个Integer数组先<strong>缓存</strong>了，后面如果是在 [-128, 127] 区间内的数直接从缓存数组中取，否则才构造新的Integer。<br>缓存思想还是很重要的。</p><h1 id="控件常用函数"><a href="#控件常用函数" class="headerlink" title="控件常用函数"></a>控件常用函数</h1><h2 id="JFrame"><a href="#JFrame" class="headerlink" title="JFrame"></a>JFrame</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">setBounds(<span class="number">200</span>, <span class="number">50</span>, <span class="number">900</span>, <span class="number">700</span>);</span><br><span class="line">setUndecorated(<span class="keyword">true</span>); <span class="comment">// 无边框</span></span><br><span class="line">setIconImage(<span class="keyword">new</span> ImageIcon(<span class="string">""</span>).getImage());</span><br><span class="line">add(panel);</span><br><span class="line">setVisible(<span class="keyword">true</span>);</span><br><span class="line">setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br></pre></td></tr></tbody></table></figure><h2 id="JPanel"><a href="#JPanel" class="headerlink" title="JPanel"></a>JPanel</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setBackground(Color.black);</span><br></pre></td></tr></tbody></table></figure><h2 id="JButton"><a href="#JButton" class="headerlink" title="JButton"></a>JButton</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">setBounds(<span class="number">100</span>, <span class="number">100</span>, <span class="number">200</span>, <span class="number">200</span>);</span><br><span class="line">addActionListener(click);</span><br><span class="line">setActionCommand(<span class="string">"close"</span>);</span><br><span class="line">setBackground(Color.WHITE);</span><br><span class="line">setOpaque(<span class="keyword">false</span>); <span class="comment">// 透明</span></span><br><span class="line">setBorderPainted(<span class="keyword">false</span>); <span class="comment">// 无边框</span></span><br><span class="line">setContentAreaFilled(<span class="keyword">false</span>); <span class="comment">// 按下透明</span></span><br><span class="line">setIcon(<span class="keyword">new</span> ImageIcon(<span class="string">""</span>));</span><br></pre></td></tr></tbody></table></figure><h2 id="JLabel"><a href="#JLabel" class="headerlink" title="JLabel"></a>JLabel</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">setLayout(<span class="keyword">null</span>);</span><br><span class="line">setOpaque(<span class="keyword">false</span>);</span><br><span class="line">setBounds(<span class="number">19</span>, <span class="number">70</span>, <span class="number">235</span>, <span class="number">57</span>);</span><br><span class="line">setFont(<span class="keyword">new</span> Font(<span class="string">"宋体"</span>, Font.BOLD, <span class="number">20</span>));</span><br><span class="line">setForeground(Color.white);</span><br><span class="line">add(label2)</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;绘图&quot;&gt;&lt;a href=&quot;#绘图&quot; class=&quot;headerlink&quot; title=&quot;绘图&quot;&gt;&lt;/a&gt;绘图&lt;/h1&gt;&lt;p&gt;相关的类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JFrame&lt;/li&gt;
&lt;li&gt;JPanel&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="学习笔记" scheme="http://blog.iwxyi.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java" scheme="http://blog.iwxyi.com/tags/Java/"/>
    
      <category term="Swing" scheme="http://blog.iwxyi.com/tags/Swing/"/>
    
  </entry>
  
  <entry>
    <title>PHP调用Python</title>
    <link href="http://blog.iwxyi.com/2018/07/08/PHP%E8%B0%83%E7%94%A8Python/"/>
    <id>http://blog.iwxyi.com/2018/07/08/PHP调用Python/</id>
    <published>2018-07-08T08:26:00.000Z</published>
    <updated>2019-10-13T08:26:45.936Z</updated>
    
    <content type="html"><![CDATA[<p><code>$output = shell_exec('python script/test.py');</code></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$output = shell_exec(<span class="string">'python script/test.py'</span>);</span><br><span class="line">$array = explode(<span class="string">','</span>, $output);</span><br><span class="line"><span class="keyword">foreach</span> ($array <span class="keyword">as</span> $value) {</span><br><span class="line">    <span class="keyword">echo</span> $value;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;$output = shell_exec(&#39;python script/test.py&#39;);&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;
      
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="PHP" scheme="http://blog.iwxyi.com/tags/PHP/"/>
    
      <category term="Python" scheme="http://blog.iwxyi.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>E4A+PHP上传图片</title>
    <link href="http://blog.iwxyi.com/2018/07/08/E4A-PHP%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/"/>
    <id>http://blog.iwxyi.com/2018/07/08/E4A-PHP上传图片/</id>
    <published>2018-07-08T08:18:00.000Z</published>
    <updated>2019-10-13T08:19:21.836Z</updated>
    
    <content type="html"><![CDATA[<p><strong>E4A</strong></p><figure class="highlight vb"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">变量 协议头 为 哈希表</span><br><span class="line">变量 常规参数 为 哈希表</span><br><span class="line">变量 文件参数 为 哈希表</span><br><span class="line">协议头=创建 哈希表</span><br><span class="line">常规参数=创建 哈希表</span><br><span class="line">文件参数=创建 哈希表</span><br><span class="line"></span><br><span class="line">协议头.加入项目(<span class="string">"User-Agent"</span>,<span class="string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36"</span>)</span><br><span class="line">文件参数.加入项目("img",图片地址) // 图片</span><br><span class="line">常规参数.加入项目("photoname", 取文件名(图片名称)) // 图片文件名</span><br><span class="line">okPOST1.开始POST(<span class="number">1</span>,网络路径 &amp; <span class="string">"uphoto.php"</span>,协议头,常规参数,文件参数,<span class="string">"GBK"</span>)</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><figure class="highlight vb"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">事件 okPOST1.POST进度(任务ID 为 整数型,进度 为 整数型)</span><br><span class="line">设置进度对话框进度(进度)</span><br><span class="line">结束 事件</span><br><span class="line"></span><br><span class="line">事件 okPOST1.POST完毕(任务ID 为 整数型,返回内容 为 文本型)</span><br><span class="line">关闭进度对话框()</span><br><span class="line">结束 事件</span><br></pre></td></tr></tbody></table></figure><p><strong>PHP</strong></p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">"public_module.php"</span>;</span><br><span class="line"></span><br><span class="line">$photoname = seize0(<span class="string">"photoname"</span>);</span><br><span class="line">$name = $_FILES[<span class="string">"img"</span>][<span class="string">"name"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (strlen($name) &lt; <span class="number">1</span>) { <span class="keyword">echo</span> <span class="string">"&lt;script&gt;alert('图片不能为空');history.go(-1);&lt;/script&gt;"</span>;</span><br><span class="line"><span class="keyword">exit</span>();</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>($_FILES[<span class="string">"img"</span>][<span class="string">"name"</span>])) {<span class="comment">//提取文件域内容名称，并判断</span></span><br><span class="line">$path = <span class="string">"photo/"</span>;</span><br><span class="line"></span><br><span class="line">$result = move_uploaded_file($_FILES[<span class="string">"img"</span>][<span class="string">"tmp_name"</span>], $path . $photoname);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> T;</span><br><span class="line">}</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;E4A&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight vb&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;变量 协议头 为 哈希表&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;变量 常规参数 为 哈希表&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;变量 文件参数 为 哈希表&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;协议头=创建 哈希表&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;常规参数=创建 哈希表&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;文件参数=创建 哈希表&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;协议头.加入项目(&lt;span class=&quot;string&quot;&gt;&quot;User-Agent&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;文件参数.加入项目(&quot;img&quot;,图片地址) // 图片&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;常规参数.加入项目(&quot;photoname&quot;, 取文件名(图片名称)) // 图片文件名&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;okPOST1.开始POST(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,网络路径 &amp;amp; &lt;span class=&quot;string&quot;&gt;&quot;uphoto.php&quot;&lt;/span&gt;,协议头,常规参数,文件参数,&lt;span class=&quot;string&quot;&gt;&quot;GBK&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="PHP" scheme="http://blog.iwxyi.com/tags/PHP/"/>
    
      <category term="E4A" scheme="http://blog.iwxyi.com/tags/E4A/"/>
    
  </entry>
  
  <entry>
    <title>Python手动安装插件</title>
    <link href="http://blog.iwxyi.com/2018/07/08/Python%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B6/"/>
    <id>http://blog.iwxyi.com/2018/07/08/Python手动安装插件/</id>
    <published>2018-07-08T05:40:00.000Z</published>
    <updated>2019-10-13T05:41:07.365Z</updated>
    
    <content type="html"><![CDATA[<p>路径：<code>C:\Users\Administrator\AppData\Local\Programs\Python\Python35\Scripts</code></p><p>cmd 命令：<code>pip install nltk</code>（注：下载很慢很慢20kb/s）</p><p>更新：<code>pip install --upgrade nltk</code></p><a id="more"></a><p>插件列表：</p><p><code>pip install flake8</code> 检测插件</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;路径：&lt;code&gt;C:\Users\Administrator\AppData\Local\Programs\Python\Python35\Scripts&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;cmd 命令：&lt;code&gt;pip install nltk&lt;/code&gt;（注：下载很慢很慢20kb/s）&lt;/p&gt;
&lt;p&gt;更新：&lt;code&gt;pip install --upgrade nltk&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="Python" scheme="http://blog.iwxyi.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>CentOS安装可视化界面</title>
    <link href="http://blog.iwxyi.com/2018/07/07/CentOS%E5%AE%89%E8%A3%85%E5%8F%AF%E8%A7%86%E5%8C%96%E7%95%8C%E9%9D%A2/"/>
    <id>http://blog.iwxyi.com/2018/07/07/CentOS安装可视化界面/</id>
    <published>2018-07-07T05:59:00.000Z</published>
    <updated>2019-10-13T06:16:02.870Z</updated>
    
    <content type="html"><![CDATA[<p>在联网的情况下使用yum命令安装即可<br>需要安装x window服务与desktop桌面，不分先后，命令如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum groupinstall "GNOME Desktop"</span><br><span class="line">yum groupinstall "X Window System"</span><br></pre></td></tr></tbody></table></figure><p>最后启动<br>输入命令</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">startX</span><br></pre></td></tr></tbody></table></figure><p>如果在本地使用即可正常切换，通过ssh登录则不能切换，会报错</p><a id="more"></a><h2 id="可视化桌面卸载"><a href="#可视化桌面卸载" class="headerlink" title="可视化桌面卸载"></a>可视化桌面卸载</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum groupremove 'MATE Desktop' -y</span><br><span class="line">yum groupremove 'X Window System' -y</span><br></pre></td></tr></tbody></table></figure><h2 id="找不到包"><a href="#找不到包" class="headerlink" title="找不到包"></a>找不到包</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">No packages in any requested group available to install or update</span><br></pre></td></tr></tbody></table></figure><p>通过下面语句来看能安装的group，选择名字来安装</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum grouplist</span><br></pre></td></tr></tbody></table></figure><h2 id="控制"><a href="#控制" class="headerlink" title="控制"></a>控制</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install xrdp</span><br></pre></td></tr></tbody></table></figure><p>然后使用windows自带的远程桌面控制</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在联网的情况下使用yum命令安装即可&lt;br&gt;需要安装x window服务与desktop桌面，不分先后，命令如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yum groupinstall &quot;GNOME Desktop&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yum groupinstall &quot;X Window System&quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;最后启动&lt;br&gt;输入命令&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;startX&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;如果在本地使用即可正常切换，通过ssh登录则不能切换，会报错&lt;/p&gt;
    
    </summary>
    
    
      <category term="搭建" scheme="http://blog.iwxyi.com/categories/%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="Linux" scheme="http://blog.iwxyi.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Node.js添加字符串到文本文件末尾</title>
    <link href="http://blog.iwxyi.com/2018/07/05/Node-js%E6%B7%BB%E5%8A%A0%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%88%B0%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6%E6%9C%AB%E5%B0%BE/"/>
    <id>http://blog.iwxyi.com/2018/07/05/Node-js添加字符串到文本文件末尾/</id>
    <published>2018-07-05T07:29:00.000Z</published>
    <updated>2019-10-13T07:30:34.754Z</updated>
    
    <content type="html"><![CDATA[<p>有这么一个需求：想把input里面的内容写到outInput里面去，但是上面的方法都是把文档里面的内容重置了，只想添加，而且保留原内容怎么办呢？</p><p>可以在可读流创建完毕的回调函数里面进行操作，看代码：</p><a id="more"></a><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">let</span> data = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">let</span> data2 = <span class="string">'你的小青蛙是真的可爱'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.读取流</span></span><br><span class="line"><span class="keyword">let</span> readStream = fs.createReadStream(<span class="string">"input.txt"</span>); <span class="comment">//创建可读流</span></span><br><span class="line">readStream.setEncoding(<span class="string">'UTF8'</span>); <span class="comment">//设置utf-8编码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//处理流事件</span></span><br><span class="line">readStream.on(<span class="string">'data'</span>, chunk =&gt; data += chunk);</span><br><span class="line">readStream.on(<span class="string">'end'</span>, () =&gt; writeS(data));</span><br><span class="line">readStream.on(<span class="string">"error"</span>, err =&gt; <span class="built_in">console</span>.log(err.strck));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"程序1执行完毕"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.写入流</span></span><br><span class="line"><span class="keyword">let</span> writeS = <span class="function"><span class="params">dataS</span> =&gt;</span>{  <span class="comment">//创建可写流</span></span><br><span class="line">    <span class="keyword">let</span> writeStream = fs.createWriteStream(<span class="string">"outInput.txt"</span>);</span><br><span class="line">    writeStream.write(data2+dataS, <span class="string">"UTF8"</span>); <span class="comment">//使用utf-8写入流   </span></span><br><span class="line">    writeStream.end(); <span class="comment">//标记文件末尾</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//处理事件流</span></span><br><span class="line">    writeStream.on(<span class="string">"finish"</span>, () =&gt; <span class="built_in">console</span>.log(<span class="string">"写入完成"</span>));</span><br><span class="line">    writeStream.on(<span class="string">"error"</span>, err =&gt; <span class="built_in">console</span>.log(err.stack));</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"程序2执行完毕"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>如此，便可以啦！</p><hr><p>如上面可能存在覆盖状态,可以设置写入流的追加参数来解决:</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> read = fs.createReadStream(<span class="string">'input.txt'</span>);</span><br><span class="line"><span class="keyword">var</span> write = fs.createWriteStream(<span class="string">'out.txt'</span>, { <span class="string">'flags'</span>: <span class="string">'a'</span> }); <span class="comment">//设置第二个参数append</span></span><br><span class="line">read.pipe(write); <span class="comment">//管道流读写操作</span></span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有这么一个需求：想把input里面的内容写到outInput里面去，但是上面的方法都是把文档里面的内容重置了，只想添加，而且保留原内容怎么办呢？&lt;/p&gt;
&lt;p&gt;可以在可读流创建完毕的回调函数里面进行操作，看代码：&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="Node.js" scheme="http://blog.iwxyi.com/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>C#-学习笔记</title>
    <link href="http://blog.iwxyi.com/2018/06/23/C-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://blog.iwxyi.com/2018/06/23/C-学习笔记/</id>
    <published>2018-06-22T23:21:00.000Z</published>
    <updated>2019-10-13T11:38:43.469Z</updated>
    
    <content type="html"><![CDATA[<h1 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h1><blockquote><p>需要C++基础</p></blockquote><a id="more"></a><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><figure class="highlight c#"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">HelloWorldApplication</span></span><br><span class="line">{</span><br><span class="line">   <span class="keyword">class</span> <span class="title">HelloWorld</span></span><br><span class="line">   {</span><br><span class="line">      <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>      {</span><br><span class="line">         <span class="comment">/* 我的第一个 C# 程序*/</span></span><br><span class="line">         Console.WriteLine(<span class="string">"Hello World"</span>);</span><br><span class="line">         Console.ReadKey();</span><br><span class="line">      }</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>上面程序的各个部分： </p><ul><li>程序的第一行 <strong>using System;</strong> - <strong>using</strong> 关键字用于在程序中包含 <strong>System</strong> 命名空间。 一个程序一般有多个 <strong>using</strong> 语句。</li><li>下一行是 <strong>namespace</strong> 声明。一个 namespace 是一系列的类。<strong>HelloWorldApplication</strong> 命名空间包含了类 HelloWorld。</li></ul><p>几个注意点：</p><ul><li>C# 是大小写敏感的。</li><li>所有的语句和表达式必须以分号（;）结尾。</li><li>程序的执行从 Main 方法开始。</li><li>与 Java 不同的是，文件名可以不同于类的名称。</li></ul><hr><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h3 id="数据类型：引用类型"><a href="#数据类型：引用类型" class="headerlink" title="数据类型：引用类型"></a>数据类型：引用类型</h3><p>引用类型不包含存储在变量中的实际数据，但它们包含对变量的引用。换句话说，它们指的是一个内存位置。</p><p>内置的引用类型有：<strong>object</strong>、<strong>dynamic</strong> 和 <strong>string</strong>。</p><h4 id="对象（Object）类型"><a href="#对象（Object）类型" class="headerlink" title="对象（Object）类型"></a>对象（Object）类型</h4><p><strong>对象（Object）类型</strong> 是 C# 通用类型系统（Common Type System - CTS）中所有数据类型的终极基类。Object 是 System.Object 类的别名。所以对象（Object）类型可以被分配任何其他类型（值类型、引用类型、预定义类型或用户自定义类型）的值。但是，在分配值之前，需要先进行类型转换。</p><p>当一个值类型转换为对象类型时，则被称为 <strong>装箱</strong>；另一方面，当一个对象类型转换为值类型时，则被称为 <strong>拆箱</strong>。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">object obj;</span><br><span class="line">obj = 100; // 这是装箱</span><br></pre></td></tr></tbody></table></figure><h4 id="动态（Dynamic）类型"><a href="#动态（Dynamic）类型" class="headerlink" title="动态（Dynamic）类型"></a>动态（Dynamic）类型</h4><p>存储任何类型的值在动态数据类型变量中。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dynamic &lt;variable_name&gt; = value;</span><br></pre></td></tr></tbody></table></figure><p>例如：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dynamic d = 20;</span><br></pre></td></tr></tbody></table></figure><p>动态类型与对象类型相似，但是<strong>对象类型变量的类型检查是在编译时发生的，而动态类型变量的类型检查是在运行时发生的</strong>。</p><h4 id="字符串（String）类型"><a href="#字符串（String）类型" class="headerlink" title="字符串（String）类型"></a>字符串（String）类型</h4><p><strong>字符串（String）类型</strong> 允许您给变量分配任何字符串值。字符串（String）类型是 System.String 类的别名。它是从对象（Object）类型派生的。字符串（String）类型的值可以通过两种形式进行分配：引号和 @引号。</p><p>例如：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String str = "runoob.com";</span><br></pre></td></tr></tbody></table></figure><p>一个 @引号字符串：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@"runoob.com";</span><br></pre></td></tr></tbody></table></figure><p>C# string 字符串的前面可以加 @（称作”逐字字符串”）将转义字符（\）当作普通字符对待，比如：</p><p><code>string str = @"C:\Windows";</code>   等价于   <code>string str = "C:\\Windows";</code></p><p>@ 字符串中可以任意换行，换行符及缩进空格都计算在字符串长度之内。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string str = @"&lt;script type=""text/javascript""&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">    --&gt;</span><br><span class="line">&lt;/script&gt;";</span><br></pre></td></tr></tbody></table></figure><p>用户自定义引用类型有：class、interface 或 delegate。</p><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>C# 提供了下列内置的类型转换方法：</p><table><thead><tr><th>序号</th><th>方法 &amp; 描述</th></tr></thead><tbody><tr><td>1</td><td><strong>ToBoolean</strong> 如果可能的话，把类型转换为布尔型。</td></tr><tr><td>2</td><td><strong>ToByte</strong> 把类型转换为字节类型。</td></tr><tr><td>3</td><td><strong>ToChar</strong> 如果可能的话，把类型转换为单个 Unicode 字符类型。</td></tr><tr><td>4</td><td><strong>ToDateTime</strong> 把类型（整数或字符串类型）转换为 日期-时间 结构。</td></tr><tr><td>5</td><td><strong>ToDecimal</strong> 把浮点型或整数类型转换为十进制类型。</td></tr><tr><td>6</td><td><strong>ToDouble</strong> 把类型转换为双精度浮点型。</td></tr><tr><td>7</td><td><strong>ToInt16</strong> 把类型转换为 16 位整数类型。</td></tr><tr><td>8</td><td><strong>ToInt32</strong> 把类型转换为 32 位整数类型。</td></tr><tr><td>9</td><td><strong>ToInt64</strong> 把类型转换为 64 位整数类型。</td></tr><tr><td>10</td><td><strong>ToSbyte</strong> 把类型转换为有符号字节类型。</td></tr><tr><td>11</td><td><strong>ToSingle</strong> 把类型转换为小浮点数类型。</td></tr><tr><td>12</td><td><strong>ToString</strong> 把类型转换为字符串类型。</td></tr><tr><td>13</td><td><strong>ToType</strong> 把类型转换为指定类型。</td></tr><tr><td>14</td><td><strong>ToUInt16</strong> 把类型转换为 16 位无符号整数类型。</td></tr><tr><td>15</td><td><strong>ToUInt32</strong> 把类型转换为 32 位无符号整数类型。</td></tr><tr><td>16</td><td><strong>ToUInt64</strong> 把类型转换为 64 位无符号整数类型。</td></tr></tbody></table><p>例如：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.ToString()</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;入门&quot;&gt;&lt;a href=&quot;#入门&quot; class=&quot;headerlink&quot; title=&quot;入门&quot;&gt;&lt;/a&gt;入门&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;需要C++基础&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="学习笔记" scheme="http://blog.iwxyi.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="CSharp" scheme="http://blog.iwxyi.com/tags/CSharp/"/>
    
  </entry>
  
  <entry>
    <title>Win32 SDK绘制字体及透明文字</title>
    <link href="http://blog.iwxyi.com/2018/06/19/VC-%E7%BB%98%E5%88%B6%E5%AD%97%E4%BD%93%E5%8F%8A%E9%80%8F%E6%98%8E%E6%96%87%E5%AD%97/"/>
    <id>http://blog.iwxyi.com/2018/06/19/VC-绘制字体及透明文字/</id>
    <published>2018-06-19T01:40:00.000Z</published>
    <updated>2019-10-13T12:33:45.754Z</updated>
    
    <content type="html"><![CDATA[<p>在hdc上绘制文字：<code>CreateFont</code></p><a id="more"></a><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">HDC hdc;</span><br><span class="line">HFONT hf;</span><br><span class="line">TEXTMETRIC tm;</span><br><span class="line"><span class="keyword">double</span> len;</span><br><span class="line"><span class="keyword">int</span> left;</span><br><span class="line"></span><br><span class="line">hdc = GetDC(hWnd);</span><br><span class="line">hf = CreateFont(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY, DEFAULT_PITCH, <span class="string">"楷体"</span>); <span class="comment">// (HFONT) GetStockObject(0)</span></span><br><span class="line">SelectObject(hdc, hf); <span class="comment">// 绑定画笔</span></span><br><span class="line">SetTextColor(hdc, <span class="number">0x0000FF</span><span class="comment">/*BGR*/</span>); <span class="comment">// 绑定颜色</span></span><br><span class="line">GetTextMetrics(hdc, &amp;tm); <span class="comment">// 绑定大小</span></span><br><span class="line">len = <span class="built_in">strlen</span>(str) * tm.tmAveCharWidth; <span class="comment">// 要画的文字总长度</span></span><br><span class="line">left = R - len / <span class="number">2</span>; <span class="comment">// 居中对齐</span></span><br><span class="line">TextOut(hdc, left, <span class="number">0</span>, str, <span class="built_in">strlen</span>(str));</span><br><span class="line">DeleteObject(hf);</span><br><span class="line">cheight += tm.tmHeight; <span class="comment">// 下一行的高度</span></span><br></pre></td></tr></tbody></table></figure><p>设置文字背景透明</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SetBkMode(mdc, TRANSPARENT);</span><br></pre></td></tr></tbody></table></figure><p>还有两句额外的设置颜色的</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SetTextColor(mdc, RGB(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">SetBkColor(mdc, RGB(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在hdc上绘制文字：&lt;code&gt;CreateFont&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C++" scheme="http://blog.iwxyi.com/tags/C/"/>
    
      <category term="Win32 SDK" scheme="http://blog.iwxyi.com/tags/Win32-SDK/"/>
    
  </entry>
  
  <entry>
    <title>SQL查询及删除重复记录</title>
    <link href="http://blog.iwxyi.com/2018/06/15/SQL%E6%9F%A5%E8%AF%A2%E5%8F%8A%E5%88%A0%E9%99%A4%E9%87%8D%E5%A4%8D%E8%AE%B0%E5%BD%95/"/>
    <id>http://blog.iwxyi.com/2018/06/15/SQL查询及删除重复记录/</id>
    <published>2018-06-15T10:38:00.000Z</published>
    <updated>2019-10-12T12:33:16.357Z</updated>
    
    <content type="html"><![CDATA[<p>1、查找表中多余的重复记录，重复记录是根据单个字段（peopleId）来判断</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> people</span><br><span class="line"><span class="keyword">where</span> peopleId <span class="keyword">in</span> (<span class="keyword">select</span> peopleId <span class="keyword">from</span> people <span class="keyword">group</span> <span class="keyword">by</span> peopleId <span class="keyword">having</span> <span class="keyword">count</span>(peopleId) &gt; <span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><p>2、删除表中多余的重复记录，重复记录是根据单个字段（peopleId）来判断，只留有rowid最小的记录</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> people</span><br><span class="line"><span class="keyword">where</span> peopleId <span class="keyword">in</span> (<span class="keyword">select</span> peopleId <span class="keyword">from</span> people <span class="keyword">group</span> <span class="keyword">by</span> peopleId <span class="keyword">having</span> <span class="keyword">count</span>(peopleId) &gt; <span class="number">1</span>)</span><br><span class="line"><span class="keyword">and</span> <span class="keyword">rowid</span> <span class="keyword">not</span> <span class="keyword">in</span> (<span class="keyword">select</span> <span class="keyword">min</span>(<span class="keyword">rowid</span>) <span class="keyword">from</span> people <span class="keyword">group</span> <span class="keyword">by</span> peopleId <span class="keyword">having</span> <span class="keyword">count</span>(peopleId )&gt;<span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure><p>3、查找表中多余的重复记录（多个字段）</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> vitae a</span><br><span class="line"><span class="keyword">where</span> (a.peopleId,a.seq) <span class="keyword">in</span> (<span class="keyword">select</span> peopleId,seq <span class="keyword">from</span> vitae <span class="keyword">group</span> <span class="keyword">by</span> peopleId,seq <span class="keyword">having</span> <span class="keyword">count</span>(*) &gt; <span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure><p>4、删除表中多余的重复记录（多个字段），只留有rowid最小的记录</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> vitae a</span><br><span class="line"><span class="keyword">where</span> (a.peopleId,a.seq) <span class="keyword">in</span> (<span class="keyword">select</span> peopleId,seq <span class="keyword">from</span> vitae <span class="keyword">group</span> <span class="keyword">by</span> peopleId,seq <span class="keyword">having</span> <span class="keyword">count</span>(*) &gt; <span class="number">1</span>)</span><br><span class="line"><span class="keyword">and</span> <span class="keyword">rowid</span> <span class="keyword">not</span> <span class="keyword">in</span> (<span class="keyword">select</span> <span class="keyword">min</span>(<span class="keyword">rowid</span>) <span class="keyword">from</span> vitae <span class="keyword">group</span> <span class="keyword">by</span> peopleId,seq <span class="keyword">having</span> <span class="keyword">count</span>(*)&gt;<span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure><p>5、查找表中多余的重复记录（多个字段），不包含rowid最小的记录</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> vitae a</span><br><span class="line"><span class="keyword">where</span> (a.peopleId,a.seq) <span class="keyword">in</span> (<span class="keyword">select</span> peopleId,seq <span class="keyword">from</span> vitae <span class="keyword">group</span> <span class="keyword">by</span> peopleId,seq <span class="keyword">having</span> <span class="keyword">count</span>(*) &gt; <span class="number">1</span>)</span><br><span class="line"><span class="keyword">and</span> <span class="keyword">rowid</span> <span class="keyword">not</span> <span class="keyword">in</span> (<span class="keyword">select</span> <span class="keyword">min</span>(<span class="keyword">rowid</span>) <span class="keyword">from</span> vitae <span class="keyword">group</span> <span class="keyword">by</span> peopleId,seq <span class="keyword">having</span> <span class="keyword">count</span>(*)&gt;<span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1、查找表中多余的重复记录，重复记录是根据单个字段（peopleId）来判断&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; * &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; people&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt; peopleId &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; peopleId &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; people &lt;span class=&quot;keyword&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;by&lt;/span&gt; peopleId &lt;span class=&quot;keyword&quot;&gt;having&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;count&lt;/span&gt;(peopleId) &amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="SQL" scheme="http://blog.iwxyi.com/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>JS发送数据XMLHttpRequest</title>
    <link href="http://blog.iwxyi.com/2018/06/13/JS%E5%8F%91%E9%80%81%E6%95%B0%E6%8D%AEXMLHttpRequest/"/>
    <id>http://blog.iwxyi.com/2018/06/13/JS发送数据XMLHttpRequest/</id>
    <published>2018-06-13T07:52:00.000Z</published>
    <updated>2019-10-13T11:05:22.050Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JS-发送数据-XMLHttpRequest"><a href="#JS-发送数据-XMLHttpRequest" class="headerlink" title="JS 发送数据 XMLHttpRequest"></a>JS 发送数据 XMLHttpRequest</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sendData</span>(<span class="params">data</span>)</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">var</span> XHR = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    <span class="keyword">var</span> urlEncodedData = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">var</span> urlEncodedDataPairs = [];</span><br><span class="line">    <span class="keyword">var</span> name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (name <span class="keyword">in</span> data)</span><br><span class="line">    {</span><br><span class="line">        urlEncodedDataPairs.push(<span class="built_in">encodeURIComponent</span>(name) + <span class="string">'='</span> + <span class="built_in">encodeURIComponent</span>(data[name]));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    urlEncodedData = urlEncodedDataPairs.join(<span class="string">'&amp;'</span>).replace(<span class="regexp">/%20/g</span>, <span class="string">'+'</span>);</span><br><span class="line"></span><br><span class="line">    XHR.addEventListener(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>)</span></span><br><span class="line"><span class="function">        </span>{</span><br><span class="line">            alert(<span class="string">'发送成功'</span>);</span><br><span class="line">        }</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    XHR.addEventListener(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>)</span></span><br><span class="line"><span class="function">        </span>{</span><br><span class="line">            alert(<span class="string">'发送失败'</span>);</span><br><span class="line">        }</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    XHR.open(<span class="string">'POST'</span>, <span class="string">'https://example.com/cors.php'</span>);</span><br><span class="line"></span><br><span class="line">    XHR.setRequestHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/x-www-form-urlencoded'</span>);</span><br><span class="line"></span><br><span class="line">    XHR.send(urlEncodedData);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><hr><h2 id="JS-发送数据-XMLHttpRequest-和-FormDate"><a href="#JS-发送数据-XMLHttpRequest-和-FormDate" class="headerlink" title="JS 发送数据 XMLHttpRequest 和 FormDate"></a>JS 发送数据 XMLHttpRequest 和 FormDate</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sendData</span>(<span class="params">data</span>)</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">var</span> XHR = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    <span class="keyword">var</span> FD = <span class="keyword">new</span> FormData();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把我们的数据添加到这个FormData对象中</span></span><br><span class="line">    <span class="keyword">for</span> (name <span class="keyword">in</span> data)</span><br><span class="line">    {</span><br><span class="line">        FD.append(name, data[name]);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义数据成功发送并返回后执行的操作</span></span><br><span class="line">    XHR.addEventListener(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>)</span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        alert(<span class="string">'Yeah! Data sent and response loaded.'</span>);</span><br><span class="line">    });</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义发生错误时执行的操作</span></span><br><span class="line">    XHR.addEventListener(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>)</span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        alert(<span class="string">'Oups! Something goes wrong.'</span>);</span><br><span class="line">    }</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置请求地址和方法</span></span><br><span class="line">    XHR.open(<span class="string">'POST'</span>, <span class="string">'http://ucommbieber.unl.edu/CORS/cors.php'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送这个formData对象,HTTP请求头会自动设置</span></span><br><span class="line">    XHR.send(FD);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;JS-发送数据-XMLHttpRequest&quot;&gt;&lt;a href=&quot;#JS-发送数据-XMLHttpRequest&quot; class=&quot;headerlink&quot; title=&quot;JS 发送数据 XMLHttpRequest&quot;&gt;&lt;/a&gt;JS 发送数据 XMLHttpRequest&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sendData&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;data&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; XHR = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; XMLHttpRequest();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; urlEncodedData = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; urlEncodedDataPairs = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (name &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; data)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    {&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        urlEncodedDataPairs.push(&lt;span class=&quot;built_in&quot;&gt;encodeURIComponent&lt;/span&gt;(name) + &lt;span class=&quot;string&quot;&gt;&#39;=&#39;&lt;/span&gt; + &lt;span class=&quot;built_in&quot;&gt;encodeURIComponent&lt;/span&gt;(data[name]));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    urlEncodedData = urlEncodedDataPairs.join(&lt;span class=&quot;string&quot;&gt;&#39;&amp;amp;&#39;&lt;/span&gt;).replace(&lt;span class=&quot;regexp&quot;&gt;/%20/g&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;+&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    XHR.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;load&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;event&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;        &lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            alert(&lt;span class=&quot;string&quot;&gt;&#39;发送成功&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        }&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    XHR.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;error&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;event&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;        &lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            alert(&lt;span class=&quot;string&quot;&gt;&#39;发送失败&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        }&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    XHR.open(&lt;span class=&quot;string&quot;&gt;&#39;POST&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;https://example.com/cors.php&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    XHR.setRequestHeader(&lt;span class=&quot;string&quot;&gt;&#39;Content-Type&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;application/x-www-form-urlencoded&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    XHR.send(urlEncodedData);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="JS" scheme="http://blog.iwxyi.com/tags/JS/"/>
    
      <category term="HTTP" scheme="http://blog.iwxyi.com/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>JS打开网址</title>
    <link href="http://blog.iwxyi.com/2018/06/13/JS%E6%89%93%E5%BC%80%E7%BD%91%E5%9D%80/"/>
    <id>http://blog.iwxyi.com/2018/06/13/JS打开网址/</id>
    <published>2018-06-13T07:51:00.000Z</published>
    <updated>2019-10-13T07:51:54.432Z</updated>
    
    <content type="html"><![CDATA[<p>当前标签打开网址</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.location.href=url;</span><br></pre></td></tr></tbody></table></figure><p>新标签页打开网址</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.open(url);</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;当前标签打开网址&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;
      
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="JS" scheme="http://blog.iwxyi.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>AJAX实现前后端实时通讯</title>
    <link href="http://blog.iwxyi.com/2018/06/13/AJAX%E5%AE%9E%E7%8E%B0%E5%89%8D%E5%90%8E%E7%AB%AF%E5%AE%9E%E6%97%B6%E9%80%9A%E8%AE%AF/"/>
    <id>http://blog.iwxyi.com/2018/06/13/AJAX实现前后端实时通讯/</id>
    <published>2018-06-13T07:43:00.000Z</published>
    <updated>2019-10-13T07:44:42.999Z</updated>
    
    <content type="html"><![CDATA[<p>需要 JS 和 后端结合在一起</p><a id="more"></a><hr><p>发送向服务器发送数据</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sendAjax</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">var</span> info = <span class="built_in">document</span>.getElementById(<span class="string">"info"</span>).value;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> XHR = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> FD = <span class="keyword">new</span> FormData();</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest)</span><br><span class="line">XHR = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.ActiveXObject)</span><br><span class="line">XHR = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> ;</span><br><span class="line"></span><br><span class="line">FD.append(<span class="string">"info"</span>, info); <span class="comment">// 添加信息</span></span><br><span class="line"></span><br><span class="line">XHR.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span> (XHR.readyState == <span class="number">4</span> &amp;&amp; XHR.status == <span class="number">200</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">var</span> text = XHR.responseText; <span class="comment">// 返回的文本</span></span><br><span class="line"></span><br><span class="line">sendAjax(); <span class="comment">// 继续AJAX</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">XHR.open(<span class="string">'POST'</span>, <span class="string">'ajax.php'</span>, <span class="literal">true</span>);</span><br><span class="line">XHR.send(FD);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h1 id="以云笺的实时通讯为例"><a href="#以云笺的实时通讯为例" class="headerlink" title="以云笺的实时通讯为例"></a>以云笺的实时通讯为例</h1><p>切换实时通讯的开关</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sync = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">var</span> sync_auto = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> sync_last_text = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">var</span> save_time = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> save_text = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">switch_sync</span>(<span class="params"></span>) // 开关实时同步</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span> (sync == <span class="literal">false</span>)</span><br><span class="line">{</span><br><span class="line">sync = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">mdui.snackbar({</span><br><span class="line">message: <span class="string">'已开启当前页同步'</span>,</span><br><span class="line">buttonText: <span class="string">'帮助'</span>,</span><br><span class="line">onButtonClick: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">;</span><br><span class="line">},</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">sendAjax();</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line">sync = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">mdui.snackbar({</span><br><span class="line">message: <span class="string">'已关闭当前页同步'</span>,</span><br><span class="line">buttonText: <span class="string">'帮助'</span>,</span><br><span class="line">onButtonClick: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">;</span><br><span class="line">},</span><br><span class="line">});</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>发送向服务器发送数据</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sendAjax</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span> (sync == <span class="literal">false</span>)</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> name = <span class="built_in">document</span>.getElementById(<span class="string">"name"</span>).value;</span><br><span class="line"><span class="keyword">var</span> info = <span class="built_in">document</span>.getElementById(<span class="string">"info"</span>).value;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (name == <span class="string">""</span>) <span class="keyword">return</span> ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> XHR = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> FD = <span class="keyword">new</span> FormData();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 去掉首尾空格</span></span><br><span class="line"><span class="keyword">var</span> noblank_name = name.replace(<span class="regexp">/(^\s*)|(\s*$)/g</span>,<span class="string">""</span>);</span><br><span class="line"><span class="keyword">if</span> (noblank_name != name){</span><br><span class="line">name = noblank_name;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"name"</span>).value = name;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest)</span><br><span class="line">{</span><br><span class="line">XHR = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.ActiveXObject)</span><br><span class="line">{</span><br><span class="line">XHR = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">FD.append(<span class="string">"name"</span>, name);</span><br><span class="line">FD.append(<span class="string">"info"</span>, info);</span><br><span class="line">FD.append(<span class="string">"info2"</span>, sync_last_text);</span><br><span class="line"></span><br><span class="line">XHR.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">if</span> (XHR.readyState == <span class="number">4</span> &amp;&amp; XHR.status == <span class="number">200</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (sync == <span class="literal">false</span>) <span class="keyword">return</span> ; <span class="comment">// 连接中关闭</span></span><br><span class="line"><span class="keyword">var</span> new_info = XHR.responseText; <span class="comment">// 新的信息</span></span><br><span class="line"><span class="comment">// new_info = new_info.replace(/\r/, ""); // 返回的信息莫名多了 \r，还不能直接去掉</span></span><br><span class="line">new_info = <span class="built_in">decodeURI</span>((<span class="built_in">encodeURI</span>(new_info)).replace(<span class="regexp">/%0D/g</span>, <span class="string">""</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (new_info == <span class="string">""</span>); <span class="comment">// 时间到、空文本，继续AJAX</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">document</span>.getElementById(<span class="string">"name"</span>).value != name); <span class="comment">// 已修改名字，发送新的AJAX</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (info == new_info); <span class="comment">// 内容一样，自己保存</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">document</span>.getElementById(<span class="string">"info"</span>).value == new_info); <span class="comment">// 后来添加的信息一样</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (sync_last_text == new_info); <span class="comment">// 收到上次一样的数据</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ((<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime() &lt;= save_time + <span class="number">3000</span>); <span class="comment">// 3秒钟内保存的，可能是自己的</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (save_text == new_info); <span class="comment">// 收到自己的内容</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">var</span> myDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (sync_auto == <span class="literal">true</span>  <span class="comment">// 自动修改</span></span><br><span class="line">&amp;&amp; <span class="built_in">document</span>.getElementById(<span class="string">"info"</span>).value == save_text <span class="comment">// 文本和上次保存的内容相同，即没有自动修改</span></span><br><span class="line">)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"info"</span>).value = new_info;</span><br><span class="line">save_text = new_info;</span><br><span class="line"></span><br><span class="line">mdui.snackbar({</span><br><span class="line">message: <span class="string">'已更新 '</span>+myDate.getHours()+<span class="string">":"</span>+myDate.getMinutes()+<span class="string">":"</span>+myDate.getSeconds(),</span><br><span class="line">buttonText: <span class="string">'撤销并关闭自动修改'</span>,</span><br><span class="line">onButtonClick: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"info"</span>).value = info;</span><br><span class="line">save_text = info;</span><br><span class="line">sync_auto = <span class="literal">false</span>;</span><br><span class="line">},</span><br><span class="line">});</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line">mdui.snackbar({</span><br><span class="line">message: <span class="string">'收到更新'</span>+myDate.getHours()+<span class="string">":"</span>+myDate.getMinutes()+<span class="string">":"</span>+myDate.getSeconds(),</span><br><span class="line">buttonText: <span class="string">'修改'</span>,</span><br><span class="line">onButtonClick: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"info"</span>).value = new_info;</span><br><span class="line">save_text = new_info;</span><br><span class="line">},</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">sync_last_text = new_info;</span><br><span class="line"></span><br><span class="line">sendAjax(); <span class="comment">// 继续AJAX</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">XHR.open(<span class="string">'POST'</span>, <span class="string">'sync_ajax.php'</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">XHR.send(FD);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;需要 JS 和 后端结合在一起&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="JS" scheme="http://blog.iwxyi.com/tags/JS/"/>
    
      <category term="AJAX" scheme="http://blog.iwxyi.com/tags/AJAX/"/>
    
  </entry>
  
  <entry>
    <title>JSP页面重定向</title>
    <link href="http://blog.iwxyi.com/2018/06/13/JSP%E9%A1%B5%E9%9D%A2%E9%87%8D%E5%AE%9A%E5%90%91/"/>
    <id>http://blog.iwxyi.com/2018/06/13/JSP页面重定向/</id>
    <published>2018-06-13T07:23:00.000Z</published>
    <updated>2019-10-13T07:24:13.562Z</updated>
    
    <content type="html"><![CDATA[<p>Java(JSP)</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.setHeader(<span class="string">"Location"</span>, <span class="string">"welcome.jsp"</span>);</span><br></pre></td></tr></tbody></table></figure><p>JS</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">window.location.href=<span class="string">"url"</span>;</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Java(JSP)&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td clas
      
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="JS" scheme="http://blog.iwxyi.com/tags/JS/"/>
    
      <category term="JSP" scheme="http://blog.iwxyi.com/tags/JSP/"/>
    
  </entry>
  
  <entry>
    <title>JSP表单账号密码登录</title>
    <link href="http://blog.iwxyi.com/2018/06/13/JSP%E8%A1%A8%E5%8D%95%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/"/>
    <id>http://blog.iwxyi.com/2018/06/13/JSP表单账号密码登录/</id>
    <published>2018-06-13T07:12:00.000Z</published>
    <updated>2019-10-13T07:14:01.215Z</updated>
    
    <content type="html"><![CDATA[<p>解析表单输入的账号密码，从数据库中获取匹配项</p><a id="more"></a><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">password = request.getParameter(<span class="string">"password"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (sqlM.SafeCheck(username) == <span class="keyword">false</span> || sqlM.SafeCheck(password) == <span class="keyword">false</span>)</span><br><span class="line">{</span><br><span class="line">MSG = <span class="string">"alert('非法账号/密码输入');"</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line"><span class="comment">// 搜索数据库</span></span><br><span class="line">String sql = <span class="string">"SELECT username from users where username = '"</span> + username + <span class="string">"' and password = '"</span> + password + <span class="string">"'"</span>;</span><br><span class="line">ResultSet rs = sqlM.executeQuery(sql);</span><br><span class="line"><span class="keyword">if</span> (rs != <span class="keyword">null</span> &amp;&amp; rs.next() == <span class="keyword">true</span> &amp;&amp; username.equals(rs.getString(<span class="number">1</span>))) <span class="comment">// 好像数据库结果的下标是从 1 开始的</span></span><br><span class="line">{</span><br><span class="line">usero.setUsername(username);</span><br><span class="line">usero.setPassword(password);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置 cookies</span></span><br><span class="line">String username_code = java.net.URLEncoder.encode(username, <span class="string">"UTF-8"</span>);</span><br><span class="line">String password_code = java.net.URLEncoder.encode(password, <span class="string">"UTF-8"</span>);</span><br><span class="line">Cookie username_cookie = <span class="keyword">new</span> Cookie(<span class="string">"username"</span>, username_code);</span><br><span class="line">Cookie password_cookie = <span class="keyword">new</span> Cookie(<span class="string">"password"</span>, password_code);</span><br><span class="line">username_cookie.setMaxAge(<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>*<span class="number">3</span>);</span><br><span class="line">password_cookie.setMaxAge(<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>*<span class="number">3</span>);</span><br><span class="line">response.addCookie(username_cookie);</span><br><span class="line">response.addCookie(password_cookie);</span><br><span class="line"></span><br><span class="line">response.setStatus(response.SC_MOVED_TEMPORARILY);</span><br><span class="line">response.setHeader(<span class="string">"Location"</span>, <span class="string">"welcome.jsp"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line">MSG = <span class="string">"alert('账号或者密码出错');"</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;解析表单输入的账号密码，从数据库中获取匹配项&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="JSP" scheme="http://blog.iwxyi.com/tags/JSP/"/>
    
  </entry>
  
  <entry>
    <title>Win32 SDK绘图函数</title>
    <link href="http://blog.iwxyi.com/2018/06/09/Win32-SDK%E7%BB%98%E5%9B%BE%E5%87%BD%E6%95%B0/"/>
    <id>http://blog.iwxyi.com/2018/06/09/Win32-SDK绘图函数/</id>
    <published>2018-06-09T02:16:00.000Z</published>
    <updated>2019-10-13T02:21:48.265Z</updated>
    
    <content type="html"><![CDATA[<h2 id="获取HDC"><a href="#获取HDC" class="headerlink" title="获取HDC"></a>获取HDC</h2><a id="more"></a><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">switch</span>(message)</span><br><span class="line">    {</span><br><span class="line">    <span class="keyword">case</span> WM_PAINT :</span><br><span class="line">        PAINTSTRUCT ps;</span><br><span class="line">        HDC hdc;</span><br><span class="line">        hdc = BeginPaint(hWnd, &amp;ps);</span><br><span class="line"></span><br><span class="line">        RECT rect;</span><br><span class="line">        GetClientRect (hWnd, &amp;rect);</span><br><span class="line"></span><br><span class="line">        paintOperator(hdc, rect.left, rect.top, rect.right, rect.bottom);</span><br><span class="line"></span><br><span class="line">        EndPaint(hWnd, &amp;ps);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_DESTROY :</span><br><span class="line">        PostQuitMessage(<span class="number">0</span>); <span class="comment">// 发出 WM_QUIT 消息，没有这句话则只是关闭窗口但进程不会停止</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span> :</span><br><span class="line">        <span class="keyword">return</span> DefWindowProc(hWnd, message, wParam, lParam); <span class="comment">// 默认时采用系统消息默认处理函数</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="画笔"><a href="#画笔" class="headerlink" title="画笔"></a>画笔</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">HPEN hp;</span><br><span class="line">hp = (HPEN) GetStockObject(BLACK_PEN); <span class="comment">// 默认画笔</span></span><br><span class="line">SelectObject(hdc, hp);</span><br><span class="line"></span><br><span class="line">MoveToEx(hdc,x,y,<span class="literal">NULL</span>);</span><br><span class="line">LineTo(hdc,x,y); <span class="comment">// 画直线，需要先移动点的位置</span></span><br><span class="line"></span><br><span class="line">Ellipse(hdc, L, T, R, B); <span class="comment">// 画椭圆</span></span><br><span class="line"></span><br><span class="line">hp = (HPEN) CreatePen(PS_SOLID, <span class="number">3</span>, RGB(<span class="number">0xFF</span>, <span class="number">0</span>, <span class="number">0</span>)); <span class="comment">// 自定义画笔</span></span><br><span class="line">SelectObject(hdc, hp);</span><br><span class="line">POINT lpPoints[<span class="number">4</span>] = { {L, B}, {R, B}, {(L+R)/<span class="number">2</span>, T}, {L, B} }; <span class="comment">// 三角形的点</span></span><br><span class="line">Polyline(hdc, lpPoints, <span class="number">4</span>); <span class="comment">// 画点数组</span></span><br><span class="line"></span><br><span class="line">DeleteObject(hp); <span class="comment">// 别忘了CreatePen后要手动删除</span></span><br></pre></td></tr></tbody></table></figure><h2 id="画刷"><a href="#画刷" class="headerlink" title="画刷"></a>画刷</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HBRUSH hbr = (HBRUSH) CreateSolidBrush(RGB(color[pos][<span class="number">0</span>], color[pos][<span class="number">1</span>], color[pos][<span class="number">2</span>]));</span><br><span class="line">SelectObject(hdc, hbr);</span><br><span class="line">Rectangle(hdc, L, T, R, B);</span><br><span class="line">DeleteObject(hbr);</span><br></pre></td></tr></tbody></table></figure><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">HFONT hf;</span><br><span class="line">TEXTMETRIC tm;</span><br><span class="line"><span class="keyword">char</span> * str[<span class="number">5</span>] = {<span class="string">"HELLO WORLD!"</span>, <span class="string">""</span>, <span class="string">""</span>};</span><br><span class="line"></span><br><span class="line">hf = CreateFont(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY, DEFAULT_PITCH, <span class="string">"楷体"</span>); <span class="comment">// (HFONT) GetStockObject(0) // 创建字体</span></span><br><span class="line">SelectObject(hdc, hf);</span><br><span class="line">SetTextColor(hdc, <span class="number">0x0000FF</span><span class="comment">/*BGR*/</span>); <span class="comment">// 选择颜色</span></span><br><span class="line">GetTextMetrics(hdc, &amp;tm); <span class="comment">// 获取字体属性：宽高</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> len = <span class="built_in">strlen</span>(str[<span class="number">0</span>]) * tm.tmAveCharWidth; <span class="comment">// 字体长度</span></span><br><span class="line"><span class="keyword">int</span> left = (R-W/<span class="number">2</span>) - len/<span class="number">2</span>; <span class="comment">// 居中靠上显示，获取左边坐标</span></span><br><span class="line">TextOut(hdc, left, <span class="number">0</span>, str[<span class="number">0</span>], <span class="built_in">strlen</span>(str[<span class="number">0</span>])); <span class="comment">// 输出</span></span><br><span class="line"></span><br><span class="line">DeleteObject(hf);</span><br><span class="line"><span class="keyword">double</span> cheight += tm.tmHeight; <span class="comment">// 当前字体的高度，以便于下一行</span></span><br><span class="line"><span class="keyword">double</span> cwidth = tm.tmAveCharWidth;</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;获取HDC&quot;&gt;&lt;a href=&quot;#获取HDC&quot; class=&quot;headerlink&quot; title=&quot;获取HDC&quot;&gt;&lt;/a&gt;获取HDC&lt;/h2&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="Win32 SDK" scheme="http://blog.iwxyi.com/tags/Win32-SDK/"/>
    
  </entry>
  
  <entry>
    <title>C++不能重载的符号</title>
    <link href="http://blog.iwxyi.com/2018/06/08/C-%E4%B8%8D%E8%83%BD%E9%87%8D%E8%BD%BD%E7%9A%84%E7%AC%A6%E5%8F%B7/"/>
    <id>http://blog.iwxyi.com/2018/06/08/C-不能重载的符号/</id>
    <published>2018-06-07T23:30:00.000Z</published>
    <updated>2019-10-13T00:09:36.094Z</updated>
    
    <content type="html"><![CDATA[<p>半边括号<code>( ) [ ]</code>、<code>{}</code>、<code>&lt;&gt;</code>、<code>!</code>、<code>.</code>、<code>"</code>、<code>'</code>、<code>?</code>、<code>:</code>、<code>;</code>、<code>~</code>、<code>::</code>、<code>...</code>、<code>//</code>、<code>/* */</code></p><a id="more"></a><p>可以重载：<code>,</code></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;半边括号&lt;code&gt;( ) [ ]&lt;/code&gt;、&lt;code&gt;{}&lt;/code&gt;、&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;、&lt;code&gt;!&lt;/code&gt;、&lt;code&gt;.&lt;/code&gt;、&lt;code&gt;&quot;&lt;/code&gt;、&lt;code&gt;&#39;&lt;/code&gt;、&lt;code&gt;?&lt;/code&gt;、&lt;code&gt;:&lt;/code&gt;、&lt;code&gt;;&lt;/code&gt;、&lt;code&gt;~&lt;/code&gt;、&lt;code&gt;::&lt;/code&gt;、&lt;code&gt;...&lt;/code&gt;、&lt;code&gt;//&lt;/code&gt;、&lt;code&gt;/* */&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C++" scheme="http://blog.iwxyi.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Win32 SDK双缓冲模板</title>
    <link href="http://blog.iwxyi.com/2018/06/04/Win32-SDK%E5%8F%8C%E7%BC%93%E5%86%B2%E6%A8%A1%E6%9D%BF/"/>
    <id>http://blog.iwxyi.com/2018/06/04/Win32-SDK双缓冲模板/</id>
    <published>2018-06-04T02:19:00.000Z</published>
    <updated>2019-10-13T02:23:17.789Z</updated>
    
    <content type="html"><![CDATA[<p>游戏窗口双缓冲模板，可直接使用</p><a id="more"></a><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tchar.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"StdAfx.h"</span></span></span><br><span class="line"></span><br><span class="line">HINSTANCE hInst;</span><br><span class="line">HWND hWnd;</span><br><span class="line">DWORD tPre, tNow;</span><br><span class="line"><span class="keyword">int</span> TOP, RIGHT, WIDTH = <span class="number">1000</span>, HEIGHT = <span class="number">571</span>;</span><br><span class="line"><span class="keyword">int</span> MX, MY; <span class="comment">// 鼠标位置</span></span><br><span class="line"></span><br><span class="line">HDC hdc, mdc, bufdc;</span><br><span class="line">PAINTSTRUCT ps;</span><br><span class="line">RECT rect;</span><br><span class="line">HBITMAP fullmap, hBgBmp;</span><br><span class="line"></span><br><span class="line"><span class="function">ATOM                <span class="title">MyRegisterClass</span><span class="params">(HINSTANCE hInstance)</span></span>;</span><br><span class="line"><span class="function">BOOL                <span class="title">InitInstance</span><span class="params">(HINSTANCE, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function">LRESULT CALLBACK    <span class="title">WndProc</span><span class="params">(HWND, UINT, WPARAM, LPARAM)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span>                <span class="title">MyPaint</span><span class="params">(HDC hdc)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//***WinMain函数，程序入口点函数**************************************</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> APIENTRY <span class="title">WinMain</span><span class="params">(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, <span class="keyword">int</span> nCmdShow)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    MSG msg;</span><br><span class="line">    MyRegisterClass(hInstance);</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">if</span> (!InitInstance (hInstance, nCmdShow))</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//消息循环</span></span><br><span class="line">    GetMessage(&amp;msg, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>); <span class="comment">//初始化msg</span></span><br><span class="line">    <span class="keyword">while</span>( msg.message != WM_QUIT )</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span>( PeekMessage( &amp;msg, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="number">0</span> , PM_REMOVE) )</span><br><span class="line">        {</span><br><span class="line">            TranslateMessage( &amp;msg );</span><br><span class="line">            DispatchMessage( &amp;msg );</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        {</span><br><span class="line">            tNow = GetTickCount();</span><br><span class="line">            <span class="keyword">if</span>(tNow - tPre &gt;= <span class="number">40</span>)</span><br><span class="line">                MyPaint(hdc);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> msg.wParam;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//****设计一个窗口类，类似填空题，使用窗口结构体*************************</span></span><br><span class="line"><span class="function">ATOM <span class="title">MyRegisterClass</span><span class="params">(HINSTANCE hInstance)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    WNDCLASSEX wcex;</span><br><span class="line"></span><br><span class="line">    wcex.cbSize = <span class="keyword">sizeof</span>(WNDCLASSEX);</span><br><span class="line">    wcex.style          = CS_HREDRAW | CS_VREDRAW;</span><br><span class="line">    wcex.lpfnWndProc    = (WNDPROC)WndProc;</span><br><span class="line">    wcex.cbClsExtra     = <span class="number">0</span>;</span><br><span class="line">    wcex.cbWndExtra     = <span class="number">0</span>;</span><br><span class="line">    wcex.hInstance      = hInstance;</span><br><span class="line">    wcex.hIcon          = <span class="literal">NULL</span>;</span><br><span class="line">    wcex.hCursor        = <span class="literal">NULL</span>;</span><br><span class="line">    wcex.hCursor        = LoadCursor(<span class="literal">NULL</span>, IDC_ARROW);</span><br><span class="line">    wcex.hbrBackground  = (HBRUSH)(COLOR_WINDOW + <span class="number">1</span>);</span><br><span class="line">    wcex.lpszMenuName   = <span class="literal">NULL</span>;</span><br><span class="line">    wcex.lpszClassName  = <span class="string">"canvas"</span>;</span><br><span class="line">    wcex.hIconSm        = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> RegisterClassEx(&amp;wcex);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//****初始化函数*************************************</span></span><br><span class="line"><span class="comment">// 加载位图并设定各对象的初始值</span></span><br><span class="line"><span class="function">BOOL <span class="title">InitInstance</span><span class="params">(HINSTANCE hInstance, <span class="keyword">int</span> nCmdShow)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    hInst = hInstance;</span><br><span class="line">    hWnd = CreateWindow(<span class="string">"canvas"</span>, <span class="string">"演示"</span> , WS_OVERLAPPEDWINDOW, CW_USEDEFAULT, CW_USEDEFAULT, WIDTH, HEIGHT, <span class="literal">NULL</span>, <span class="literal">NULL</span>, hInstance, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!hWnd)</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// MoveWindow(hWnd, 10, 10, WIDTH, HEIGHT, true);</span></span><br><span class="line">    ShowWindow(hWnd, nCmdShow);</span><br><span class="line">    UpdateWindow(hWnd);</span><br><span class="line"></span><br><span class="line">    hdc = GetDC(hWnd);</span><br><span class="line">    mdc = CreateCompatibleDC(hdc);</span><br><span class="line">    bufdc = CreateCompatibleDC(hdc);</span><br><span class="line">    fullmap = CreateCompatibleBitmap(hdc, WIDTH, HEIGHT);</span><br><span class="line">    SelectObject(mdc, fullmap);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* ... 初始化各值 ... */</span></span><br><span class="line"></span><br><span class="line">    MyPaint(hdc);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MyPaint</span><span class="params">(HDC hdc)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="comment">/* ... 画图操作，可以生成动画 ... */</span></span><br><span class="line">    </span><br><span class="line">    tPre = GetTickCount();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//****消息处理函数***********************************</span></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">switch</span> (message)</span><br><span class="line">    {</span><br><span class="line">    <span class="keyword">case</span> WM_PAINT :</span><br><span class="line">        hdc = BeginPaint(hWnd, &amp;ps);</span><br><span class="line">        GetClientRect(hWnd, &amp;rect);</span><br><span class="line">        MyPaint(hdc);</span><br><span class="line">        EndPaint(hWnd, &amp;ps);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_MOUSEMOVE :</span><br><span class="line">        MX = LOWORD(lParam) - roleFlyBmp[action][actionFrame].bmWidth / <span class="number">2</span>;</span><br><span class="line">        MY = HIWORD(lParam) - roleFlyBmp[action][actionFrame].bmHeight / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_LBUTTONDOWN :</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_KEYDOWN :</span><br><span class="line">        <span class="keyword">switch</span> (wParam)</span><br><span class="line">        {</span><br><span class="line">        <span class="keyword">case</span> VK_UP :</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_CHAR :</span><br><span class="line">        <span class="keyword">switch</span> (wParam)</span><br><span class="line">        {</span><br><span class="line">        <span class="keyword">case</span> <span class="string">' '</span> :</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_DESTROY:                    <span class="comment">//窗口结束消息，撤销各种DC</span></span><br><span class="line">        DeleteDC(mdc);</span><br><span class="line">        DeleteDC(bufdc);</span><br><span class="line">        DeleteObject(fullmap);</span><br><span class="line">        ReleaseDC(hWnd, hdc);</span><br><span class="line">        PostQuitMessage(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:                            <span class="comment">//其他消息</span></span><br><span class="line">        <span class="keyword">return</span> DefWindowProc(hWnd, message, wParam, lParam);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="游戏模板"><a href="#游戏模板" class="headerlink" title="游戏模板"></a>游戏模板</h1><p>参照上面的双缓冲模板。</p><p>之前做的一个作业样例。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tchar.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"StdAfx.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"testOutput.h"</span></span></span><br><span class="line"><span class="comment">//using namespace std;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LIMIT_RECT 1      <span class="comment">// 矩形限制区域</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LIMIT_CIRC 2      <span class="comment">// 圆形限制区域</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ACTION_STARTFLY 0 <span class="comment">// 开始飞行</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ACTION_FLY 1      <span class="comment">// 向右飞</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ACTION_FLY2 2     <span class="comment">// 向左飞</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ACTION_ATTACK 3   <span class="comment">// 向右攻击</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ACTION_ATTACK2 4  <span class="comment">// 向左攻击</span></span></span><br><span class="line"></span><br><span class="line">HINSTANCE hInst;</span><br><span class="line">HWND hWnd;</span><br><span class="line">DWORD tPre, tNow;</span><br><span class="line"><span class="keyword">int</span> TOP, RIGHT, WIDTH = <span class="number">1000</span>, HEIGHT = <span class="number">571</span>;</span><br><span class="line"><span class="keyword">int</span> OX = <span class="number">370</span>, OY = <span class="number">180</span>, MX, MY; <span class="comment">// 实例位置</span></span><br><span class="line"><span class="keyword">int</span> SX = <span class="number">10</span>, SY = <span class="number">10</span>;           <span class="comment">// 每步移动的距离</span></span><br><span class="line"><span class="keyword">int</span> EX = <span class="number">0</span>, EY = <span class="number">0</span>;             <span class="comment">// 目标位置</span></span><br><span class="line"></span><br><span class="line">HDC hdc, mdc, bufdc;</span><br><span class="line">PAINTSTRUCT ps;</span><br><span class="line">RECT rect;</span><br><span class="line">HBITMAP fullmap, hBgBmp, hRoleBmp[<span class="number">10</span>][<span class="number">100</span>], _hRoleBmp[<span class="number">10</span>][<span class="number">100</span>];</span><br><span class="line">BITMAP bgBmp, roleFlyBmp[<span class="number">10</span>][<span class="number">100</span>], _roleFlyBmp[<span class="number">10</span>][<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> action = ACTION_STARTFLY <span class="comment">/*0 normal, 1 2 fly*/</span>, actionFrame = <span class="number">0</span>, actionFrameContrler = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> limitsMap[][<span class="number">5</span>] =</span><br><span class="line">{</span><br><span class="line">    { <span class="number">0</span>, <span class="number">0</span>, <span class="number">1000</span>, <span class="number">55</span>, LIMIT_RECT },</span><br><span class="line">    { <span class="number">258</span>, <span class="number">0</span>, <span class="number">850</span>, <span class="number">55</span>, LIMIT_RECT },</span><br><span class="line">    { <span class="number">342</span>, <span class="number">0</span>, <span class="number">500</span>, <span class="number">70</span>, LIMIT_RECT },</span><br><span class="line">    { <span class="number">0</span>, <span class="number">225</span>, <span class="number">170</span>, <span class="number">50</span>, LIMIT_RECT },</span><br><span class="line">    { <span class="number">0</span>, <span class="number">275</span>, <span class="number">54</span>, <span class="number">72</span>, LIMIT_RECT },</span><br><span class="line">    { <span class="number">0</span>, <span class="number">455</span>, <span class="number">72</span>, <span class="number">119</span>, LIMIT_RECT },</span><br><span class="line">    { <span class="number">310</span>, <span class="number">360</span>, <span class="number">324</span>, <span class="number">80</span>, LIMIT_RECT },</span><br><span class="line">    { <span class="number">404</span>, <span class="number">300</span>, <span class="number">200</span>, <span class="number">237</span>, LIMIT_RECT },</span><br><span class="line">    { <span class="number">504</span>, <span class="number">468</span>, <span class="number">522</span>, <span class="number">115</span>, LIMIT_RECT },</span><br><span class="line">    { <span class="number">0</span>, <span class="number">0</span>, <span class="number">43</span>, <span class="number">306</span>, LIMIT_RECT },</span><br><span class="line">    { <span class="number">940</span>, <span class="number">0</span>, <span class="number">42</span>, <span class="number">187</span>, LIMIT_RECT }</span><br><span class="line">}, limitsMapNum = <span class="number">11</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">ATOM                <span class="title">MyRegisterClass</span><span class="params">(HINSTANCE hInstance)</span></span>;</span><br><span class="line"><span class="function">BOOL                <span class="title">InitInstance</span><span class="params">(HINSTANCE, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function">LRESULT CALLBACK    <span class="title">WndProc</span><span class="params">(HWND, UINT, WPARAM, LPARAM)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span>                <span class="title">MyPaint</span><span class="params">(HDC hdc)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//***WinMain函数，程序入口点函数**************************************</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> APIENTRY <span class="title">WinMain</span><span class="params">(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, <span class="keyword">int</span> nCmdShow)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    MSG msg;</span><br><span class="line">    MyRegisterClass(hInstance);</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">if</span> (!InitInstance (hInstance, nCmdShow))</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//消息循环</span></span><br><span class="line">    GetMessage(&amp;msg, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>); <span class="comment">//初始化msg</span></span><br><span class="line">    <span class="keyword">while</span>( msg.message != WM_QUIT )</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span>( PeekMessage( &amp;msg, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="number">0</span> , PM_REMOVE) )</span><br><span class="line">        {</span><br><span class="line">            TranslateMessage( &amp;msg );</span><br><span class="line">            DispatchMessage( &amp;msg );</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        {</span><br><span class="line">            tNow = GetTickCount();</span><br><span class="line">            <span class="keyword">if</span>(tNow - tPre &gt;= <span class="number">40</span>)</span><br><span class="line">                MyPaint(hdc);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> msg.wParam;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//****设计一个窗口类，类似填空题，使用窗口结构体*************************</span></span><br><span class="line"><span class="function">ATOM <span class="title">MyRegisterClass</span><span class="params">(HINSTANCE hInstance)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    WNDCLASSEX wcex;</span><br><span class="line"></span><br><span class="line">    wcex.cbSize = <span class="keyword">sizeof</span>(WNDCLASSEX);</span><br><span class="line">    wcex.style          = CS_HREDRAW | CS_VREDRAW;</span><br><span class="line">    wcex.lpfnWndProc    = (WNDPROC)WndProc;</span><br><span class="line">    wcex.cbClsExtra     = <span class="number">0</span>;</span><br><span class="line">    wcex.cbWndExtra     = <span class="number">0</span>;</span><br><span class="line">    wcex.hInstance      = hInstance;</span><br><span class="line">    wcex.hIcon          = <span class="literal">NULL</span>;</span><br><span class="line">    wcex.hCursor        = <span class="literal">NULL</span>;</span><br><span class="line">    wcex.hCursor        = LoadCursor(<span class="literal">NULL</span>, IDC_ARROW);</span><br><span class="line">    wcex.hbrBackground  = (HBRUSH)(COLOR_WINDOW + <span class="number">1</span>);</span><br><span class="line">    wcex.lpszMenuName   = <span class="literal">NULL</span>;</span><br><span class="line">    wcex.lpszClassName  = <span class="string">"canvas"</span>;</span><br><span class="line">    wcex.hIconSm        = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> RegisterClassEx(&amp;wcex);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//****初始化函数*************************************</span></span><br><span class="line"><span class="comment">// 加载位图并设定各对象的初始值</span></span><br><span class="line"><span class="function">BOOL <span class="title">InitInstance</span><span class="params">(HINSTANCE hInstance, <span class="keyword">int</span> nCmdShow)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    hInst = hInstance;</span><br><span class="line">    hWnd = CreateWindow(<span class="string">"canvas"</span>, <span class="string">"动画演示"</span> , WS_OVERLAPPEDWINDOW, CW_USEDEFAULT, CW_USEDEFAULT, WIDTH, HEIGHT, <span class="literal">NULL</span>, <span class="literal">NULL</span>, hInstance, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!hWnd)</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// MoveWindow(hWnd, 10, 10, WIDTH, HEIGHT, true);</span></span><br><span class="line">    ShowWindow(hWnd, nCmdShow);</span><br><span class="line">    UpdateWindow(hWnd);</span><br><span class="line"></span><br><span class="line">    hdc = GetDC(hWnd);</span><br><span class="line">    mdc = CreateCompatibleDC(hdc);</span><br><span class="line">    bufdc = CreateCompatibleDC(hdc);</span><br><span class="line">    fullmap = CreateCompatibleBitmap(hdc, WIDTH, HEIGHT);</span><br><span class="line">    SelectObject(mdc, fullmap);</span><br><span class="line"></span><br><span class="line">    hBgBmp = (HBITMAP)LoadImage(<span class="literal">NULL</span>, <span class="string">"bg.bmp"</span>, IMAGE_BITMAP, <span class="number">0</span>, <span class="number">0</span>, LR_LOADFROMFILE);</span><br><span class="line">    GetObject(hBgBmp, <span class="keyword">sizeof</span>(BITMAP), &amp;bgBmp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">char</span> actionName[<span class="number">10</span>][<span class="number">20</span>] = { <span class="string">"startfly"</span>, <span class="string">"fly"</span>, <span class="string">"fly2"</span>, <span class="string">"attack"</span>, <span class="string">"attack2"</span> };</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">char</span> fullName[<span class="number">100</span>];</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)</span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">sprintf</span>(fullName, <span class="string">"%s%d.bmp"</span>, actionName[i], j);</span><br><span class="line">            hRoleBmp[i][j] = (HBITMAP)LoadImage(<span class="literal">NULL</span>, fullName, IMAGE_BITMAP, <span class="number">0</span>, <span class="number">0</span>, LR_LOADFROMFILE);</span><br><span class="line">            <span class="built_in">sprintf</span>(fullName, <span class="string">"_%s%d.bmp"</span>, actionName[i], j);</span><br><span class="line">            _hRoleBmp[i][j] = (HBITMAP)LoadImage(<span class="literal">NULL</span>, fullName, IMAGE_BITMAP, <span class="number">0</span>, <span class="number">0</span>, LR_LOADFROMFILE);</span><br><span class="line">            GetObject(hRoleBmp[i][j], <span class="keyword">sizeof</span>(BITMAP), &amp;roleFlyBmp[i][j]);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    MyPaint(hdc);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">limitXY</span><span class="params">(<span class="keyword">int</span> nOX, <span class="keyword">int</span> nOY)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> lix, liy, liw, lih;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; limitsMapNum; i++)</span><br><span class="line">    {</span><br><span class="line">        lix = limitsMap[i][<span class="number">0</span>];</span><br><span class="line">        liy = limitsMap[i][<span class="number">1</span>];</span><br><span class="line">        liw = limitsMap[i][<span class="number">2</span>];</span><br><span class="line">        lih = limitsMap[i][<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 画限制区域和人物的范围，调试用</span></span><br><span class="line">        <span class="comment">/*HBRUSH hb;</span></span><br><span class="line"><span class="comment">        hb = (HBRUSH) CreateSolidBrush(RGB(0xFF, 0xFF, 0xFF));</span></span><br><span class="line"><span class="comment">        SelectObject(hdc, hb);</span></span><br><span class="line"><span class="comment">        Rectangle(hdc, lix, liy, lix + liw, liy + lih);</span></span><br><span class="line"><span class="comment">        Ellipse(hdc, OX, OY, OX + roleFlyBmp[action][actionFrame].bmWidth, OY + roleFlyBmp[action][actionFrame].bmHeight);</span></span><br><span class="line"><span class="comment">        DeleteObject(hb);*/</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (OX &gt; lix + liw || OX + roleFlyBmp[action][actionFrame].bmWidth &lt; lix</span><br><span class="line">                || OY &gt; liy + lih || OY + roleFlyBmp[action][actionFrame].bmHeight &lt; liy</span><br><span class="line">                || (OX - lix - liw / <span class="number">2</span>) * (OX - lix - liw / <span class="number">2</span>) + (OY - liy - lih / <span class="number">2</span>) * (OY - liy - lih / <span class="number">2</span>) &gt; (max(liw , lih) * max(liw , lih)) &gt;&gt; <span class="number">1</span>) ; <span class="comment">// 边角处理</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">if</span> (OX &gt; lix + liw || OX + roleFlyBmp[action][actionFrame].bmWidth &lt; lix) ;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                OX = nOX;</span><br><span class="line">            <span class="keyword">if</span> (OY &gt; liy + lih || OY + roleFlyBmp[action][actionFrame].bmHeight &lt; liy) ;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                OY = nOY;</span><br><span class="line">            <span class="keyword">if</span> (OX == nOX &amp;&amp; OY == nOY)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MyPaint</span><span class="params">(HDC hdc)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="comment">// 运动</span></span><br><span class="line">    <span class="keyword">int</span> nOX = OX, nOY = OY;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (EX || EY)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> fflag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">abs</span>(EX - OX) &gt; SX)</span><br><span class="line">        {</span><br><span class="line">            fflag = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (EX &gt; OX) OX += SX;</span><br><span class="line">            <span class="keyword">else</span> OX -= SX;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">abs</span>(EY - OY) &gt; SY)</span><br><span class="line">        {</span><br><span class="line">            fflag = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (EY &gt; OY) OY += SY;</span><br><span class="line">            <span class="keyword">else</span> OY -= SY;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (!fflag)</span><br><span class="line">            EX = EY = <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    limitXY(nOX, nOY);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 画背景</span></span><br><span class="line"></span><br><span class="line">    SelectObject(bufdc, hBgBmp);</span><br><span class="line">    BitBlt(mdc, rect.left, rect.top, rect.right - rect.left, rect.bottom - rect.top, bufdc, <span class="number">0</span>, <span class="number">0</span>, SRCCOPY); <span class="comment">// 画背景</span></span><br><span class="line"></span><br><span class="line">    SelectObject(bufdc, _hRoleBmp[action][actionFrame]);</span><br><span class="line">    BitBlt(mdc, OX, OY, roleFlyBmp[action][actionFrame].bmWidth, roleFlyBmp[action][actionFrame].bmHeight, bufdc, <span class="number">0</span>, <span class="number">0</span>, SRCAND); <span class="comment">// 画人物</span></span><br><span class="line">    SelectObject(bufdc, hRoleBmp[action][actionFrame]);</span><br><span class="line">    BitBlt(mdc, OX, OY, roleFlyBmp[action][actionFrame].bmWidth, roleFlyBmp[action][actionFrame].bmHeight, bufdc, <span class="number">0</span>, <span class="number">0</span>, SRCPAINT); <span class="comment">// 画人物</span></span><br><span class="line"></span><br><span class="line">    BitBlt(hdc, <span class="number">0</span>, <span class="number">0</span>, WIDTH, HEIGHT, mdc, <span class="number">0</span>, <span class="number">0</span>, SRCCOPY);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 动画</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (action)</span><br><span class="line">    {</span><br><span class="line">    <span class="keyword">case</span> ACTION_STARTFLY:</span><br><span class="line">        <span class="keyword">if</span> (!EX &amp;&amp; !EY &amp;&amp; OX==<span class="number">370</span> &amp;&amp; OY==<span class="number">180</span>) <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">if</span> (actionFrameContrler &gt;= <span class="number">4</span>)</span><br><span class="line">        {</span><br><span class="line">            actionFrameContrler = <span class="number">0</span>;</span><br><span class="line">            action = <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        actionFrame = actionFrameContrler;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> ACTION_FLY:</span><br><span class="line">    <span class="keyword">case</span> ACTION_FLY2:</span><br><span class="line">        <span class="keyword">if</span> (actionFrameContrler &gt;= <span class="number">8</span>) actionFrameContrler = <span class="number">0</span>;</span><br><span class="line">        actionFrame = actionFrameContrler / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> ACTION_ATTACK:</span><br><span class="line">    <span class="keyword">case</span> ACTION_ATTACK2:</span><br><span class="line">        <span class="keyword">if</span> (actionFrameContrler &gt;= <span class="number">15</span>)</span><br><span class="line">        {</span><br><span class="line">            actionFrameContrler = <span class="number">0</span>;</span><br><span class="line">            action -= (ACTION_ATTACK - ACTION_FLY);</span><br><span class="line">        }</span><br><span class="line">        actionFrame = actionFrameContrler / <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line">    actionFrameContrler++;</span><br><span class="line"></span><br><span class="line">    tPre = GetTickCount();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//****消息处理函数***********************************</span></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">switch</span> (message)</span><br><span class="line">    {</span><br><span class="line">    <span class="keyword">case</span> WM_PAINT :</span><br><span class="line">        hdc = BeginPaint(hWnd, &amp;ps);</span><br><span class="line">        GetClientRect(hWnd, &amp;rect);</span><br><span class="line">        MyPaint(hdc);</span><br><span class="line">        EndPaint(hWnd, &amp;ps);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_MOUSEMOVE :</span><br><span class="line">        MX = LOWORD(lParam) - roleFlyBmp[action][actionFrame].bmWidth / <span class="number">2</span>;</span><br><span class="line">        MY = HIWORD(lParam) - roleFlyBmp[action][actionFrame].bmHeight / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_LBUTTONDOWN :</span><br><span class="line">        EX = MX;</span><br><span class="line">        EY = MY;</span><br><span class="line">        <span class="keyword">if</span> (EX &lt; OX) action = ACTION_FLY2;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (action != ACTION_STARTFLY) action = ACTION_FLY;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_KEYDOWN :</span><br><span class="line">        <span class="keyword">switch</span> (wParam)</span><br><span class="line">        {</span><br><span class="line">        <span class="keyword">case</span> VK_UP :</span><br><span class="line">            OY -= <span class="number">20</span>;</span><br><span class="line">            limitXY(OX, OY + <span class="number">20</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> VK_DOWN :</span><br><span class="line">            OY += <span class="number">20</span>;</span><br><span class="line">            limitXY(OX, OY - <span class="number">20</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> VK_LEFT :</span><br><span class="line">            OX -= <span class="number">20</span>;</span><br><span class="line">            limitXY(OX + <span class="number">20</span>, OY);</span><br><span class="line">            action = <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> VK_RIGHT :</span><br><span class="line">            OX += <span class="number">20</span>;</span><br><span class="line">            limitXY(OX - <span class="number">20</span>, OY);</span><br><span class="line">            action = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_CHAR :</span><br><span class="line">        <span class="keyword">switch</span> (wParam)</span><br><span class="line">        {</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'w'</span> :</span><br><span class="line">            OY -= <span class="number">20</span>;</span><br><span class="line">            limitXY(OX, OY + <span class="number">20</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'s'</span> :</span><br><span class="line">            OY += <span class="number">20</span>;</span><br><span class="line">            limitXY(OX, OY - <span class="number">20</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'a'</span> :</span><br><span class="line">            OX -= <span class="number">20</span>;</span><br><span class="line">            limitXY(OX + <span class="number">20</span>, OY);</span><br><span class="line">            action = <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'d'</span> :</span><br><span class="line">            OX += <span class="number">20</span>;</span><br><span class="line">            limitXY(OX - <span class="number">20</span>, OY);</span><br><span class="line">            action = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">' '</span> :</span><br><span class="line">            <span class="keyword">if</span> (action != <span class="number">3</span> &amp;&amp; action != <span class="number">4</span>)</span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">if</span> (action == <span class="number">1</span> || action == <span class="number">2</span>)</span><br><span class="line">                    action += <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">else</span> action = <span class="number">3</span>;</span><br><span class="line">                actionFrameContrler = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_DESTROY:                    <span class="comment">//窗口结束消息，撤销各种DC</span></span><br><span class="line">        DeleteDC(mdc);</span><br><span class="line">        DeleteDC(bufdc);</span><br><span class="line">        DeleteObject(fullmap);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)</span><br><span class="line">            {</span><br><span class="line">                DeleteObject(hRoleBmp[i][j]);</span><br><span class="line">                DeleteObject(_hRoleBmp[i][j]);</span><br><span class="line">            }</span><br><span class="line">        ReleaseDC(hWnd, hdc);</span><br><span class="line">        PostQuitMessage(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:                            <span class="comment">//其他消息</span></span><br><span class="line">        <span class="keyword">return</span> DefWindowProc(hWnd, message, wParam, lParam);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;游戏窗口双缓冲模板，可直接使用&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="模板" scheme="http://blog.iwxyi.com/tags/%E6%A8%A1%E6%9D%BF/"/>
    
      <category term="Win32 SDK" scheme="http://blog.iwxyi.com/tags/Win32-SDK/"/>
    
  </entry>
  
  <entry>
    <title>Win32 SDK双缓冲</title>
    <link href="http://blog.iwxyi.com/2018/06/04/Win32-SDK%E5%8F%8C%E7%BC%93%E5%86%B2/"/>
    <id>http://blog.iwxyi.com/2018/06/04/Win32-SDK双缓冲/</id>
    <published>2018-06-04T02:00:00.000Z</published>
    <updated>2019-10-13T02:01:08.728Z</updated>
    
    <content type="html"><![CDATA[<h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HDC hdc, mdc, bufdc;</span><br><span class="line">HBITMAP fullmap, hBgBmp, hRoleBmp[<span class="number">10</span>][<span class="number">100</span>], _hRoleBmp[<span class="number">10</span>][<span class="number">100</span>];</span><br><span class="line">BITMAP bgBmp, roleFlyBmp[<span class="number">10</span>][<span class="number">100</span>], _roleFlyBmp[<span class="number">10</span>][<span class="number">100</span>];</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">hdc = GetDC(hWnd);</span><br><span class="line">mdc = CreateCompatibleDC(hdc);</span><br><span class="line">bufdc = CreateCompatibleDC(hdc);</span><br><span class="line">fullmap = CreateCompatibleBitmap(hdc, WIDTH, HEIGHT);</span><br><span class="line">SelectObject(mdc, fullmap);</span><br><span class="line"></span><br><span class="line">hBgBmp = (HBITMAP)LoadImage(<span class="literal">NULL</span>, <span class="string">"bg.bmp"</span>, IMAGE_BITMAP, <span class="number">0</span>, <span class="number">0</span>, LR_LOADFROMFILE);</span><br><span class="line">GetObject(hBgBmp, <span class="keyword">sizeof</span>(BITMAP), &amp;bgBmp);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环加载所有图片</span></span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"><span class="keyword">char</span> actionName[<span class="number">10</span>][<span class="number">20</span>] = { <span class="string">"startfly"</span>, <span class="string">"fly"</span>, <span class="string">"fly2"</span>, <span class="string">"attack"</span>, <span class="string">"attack2"</span> };</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">{</span><br><span class="line">    <span class="keyword">char</span> fullName[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">sprintf</span>(fullName, <span class="string">"%s%d.bmp"</span>, actionName[i], j);</span><br><span class="line">        hRoleBmp[i][j] = (HBITMAP)LoadImage(<span class="literal">NULL</span>, fullName, IMAGE_BITMAP, <span class="number">0</span>, <span class="number">0</span>, LR_LOADFROMFILE); <span class="comment">// 原图</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">sprintf</span>(fullName, <span class="string">"_%s%d.bmp"</span>, actionName[i], j);</span><br><span class="line">        _hRoleBmp[i][j] = (HBITMAP)LoadImage(<span class="literal">NULL</span>, fullName, IMAGE_BITMAP, <span class="number">0</span>, <span class="number">0</span>, LR_LOADFROMFILE); <span class="comment">// 掩图</span></span><br><span class="line"></span><br><span class="line">        GetObject(hRoleBmp[i][j], <span class="keyword">sizeof</span>(BITMAP), &amp;roleFlyBmp[i][j]);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="绘图"><a href="#绘图" class="headerlink" title="绘图"></a>绘图</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SelectObject(bufdc, hBgBmp);</span><br><span class="line">BitBlt(mdc, rect.left, rect.top, rect.right - rect.left, rect.bottom - rect.top, bufdc, <span class="number">0</span>, <span class="number">0</span>, SRCCOPY); <span class="comment">// 画背景到mdc</span></span><br><span class="line"></span><br><span class="line">SelectObject(bufdc, _hRoleBmp[action][actionFrame]);</span><br><span class="line">BitBlt(mdc, OX, OY, roleFlyBmp[action][actionFrame].bmWidth, roleFlyBmp[action][actionFrame].bmHeight, bufdc, <span class="number">0</span>, <span class="number">0</span>, SRCAND); <span class="comment">// 画人物[掩图]到mdc</span></span><br><span class="line"></span><br><span class="line">SelectObject(bufdc, hRoleBmp[action][actionFrame]);</span><br><span class="line">BitBlt(mdc, OX, OY, roleFlyBmp[action][actionFrame].bmWidth, roleFlyBmp[action][actionFrame].bmHeight, bufdc, <span class="number">0</span>, <span class="number">0</span>, SRCPAINT);</span><br><span class="line"></span><br><span class="line">BitBlt(hdc, <span class="number">0</span>, <span class="number">0</span>, WIDTH, HEIGHT, mdc, <span class="number">0</span>, <span class="number">0</span>, SRCCOPY); <span class="comment">// 画mdc到hdc</span></span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;声明&quot;&gt;&lt;a href=&quot;#声明&quot; class=&quot;headerlink&quot; title=&quot;声明&quot;&gt;&lt;/a&gt;声明&lt;/h2&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;HDC hdc, mdc, bufdc;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;HBITMAP fullmap, hBgBmp, hRoleBmp[&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;], _hRoleBmp[&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BITMAP bgBmp, roleFlyBmp[&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;], _roleFlyBmp[&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="Win32 SDK" scheme="http://blog.iwxyi.com/tags/Win32-SDK/"/>
    
  </entry>
  
  <entry>
    <title>PHP XML解析器</title>
    <link href="http://blog.iwxyi.com/2018/06/03/PHP-XML%E8%A7%A3%E6%9E%90%E5%99%A8/"/>
    <id>http://blog.iwxyi.com/2018/06/03/PHP-XML解析器/</id>
    <published>2018-06-03T08:33:00.000Z</published>
    <updated>2019-10-13T08:35:32.546Z</updated>
    
    <content type="html"><![CDATA[<p>通过 xml_parser_create() 函数初始化 XML 解析器<br>创建配合不同事件处理程序的的函数</p><p>添加 xml_set_element_handler() 函数来定义，当解析器遇到开始和结束标签时执行哪个函数</p><p>添加 xml_set_character_data_handler() 函数来定义，当解析器遇到字符数据时执行哪个函数<br>通过 xml_parse() 函数来解析文件 “test.xml”</p><a id="more"></a><p>万一有错误的话，添加 xml_error_string() 函数把 XML 错误转换为文本说明</p><p>调用 xml_parser_free() 函数来释放分配给 xml_parser_create() 函数的内存</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Initialize the XML parser</span></span><br><span class="line">$parser=xml_parser_create();</span><br><span class="line"></span><br><span class="line"><span class="comment">//Function to use at the start of an element</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span><span class="params">($parser,$element_name,$element_attrs)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">switch</span>($element_name)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">case</span> <span class="string">"NOTE"</span>:</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"-- Note --&lt;br /&gt;"</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"TO"</span>:</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"To: "</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"FROM"</span>:</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"From: "</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"HEADING"</span>:</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Heading: "</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"BODY"</span>:</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Message: "</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//Function to use at the end of an element</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stop</span><span class="params">($parser,$element_name)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br /&gt;"</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//Function to use when finding character data</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">char</span><span class="params">($parser,$data)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">echo</span> $data;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//Specify element handler</span></span><br><span class="line">xml_set_element_handler($parser,<span class="string">"start"</span>,<span class="string">"stop"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Specify data handler</span></span><br><span class="line">xml_set_character_data_handler($parser,<span class="string">"char"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Open XML file</span></span><br><span class="line">$fp=fopen(<span class="string">"test.xml"</span>,<span class="string">"r"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Read data</span></span><br><span class="line"><span class="keyword">while</span> ($data=fread($fp,<span class="number">4096</span>))</span><br><span class="line">{</span><br><span class="line">xml_parse($parser,$data,feof($fp)) <span class="keyword">or</span></span><br><span class="line"><span class="keyword">die</span> (sprintf(<span class="string">"XML Error: %s at line %d"</span>,</span><br><span class="line">xml_error_string(xml_get_error_code($parser)),</span><br><span class="line">xml_get_current_line_number($parser)));</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//Free the XML parser</span></span><br><span class="line">xml_parser_free($parser);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>XML文件：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">to</span>&gt;</span>George<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">from</span>&gt;</span>John<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">heading</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>Don't forget the meeting!<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>以上XML的输出：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- Note --</span><br><span class="line">To: George</span><br><span class="line">From: John</span><br><span class="line">Heading: Reminder</span><br><span class="line">Message: Don't forget the meeting!</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="XML-Dom"><a href="#XML-Dom" class="headerlink" title="XML Dom"></a>XML Dom</h2><p>输出XML文件内容到浏览器（原封不动）<br>标签会当作HTML标签，隐藏</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$xmlDoc = <span class="keyword">new</span> DOMDocument();</span><br><span class="line">$xmlDoc-&gt;load(<span class="string">"note.xml"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> $xmlDoc-&gt;saveXML();</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">saveXML() 函数把内部 XML 文档放入一个字符串，这样我们就可以输出它。</span><br></pre></td></tr></tbody></table></figure><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$xmlDoc = <span class="keyword">new</span> DOMDocument();</span><br><span class="line">$xmlDoc-&gt;load(<span class="string">"note.xml"</span>);</span><br><span class="line"></span><br><span class="line">$x = $xmlDoc-&gt;documentElement;</span><br><span class="line"><span class="keyword">foreach</span> ($x-&gt;childNodes <span class="keyword">AS</span> $item)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">print</span> $item-&gt;nodeName . <span class="string">" = "</span> . $item-&gt;nodeValue . <span class="string">"&lt;br /&gt;"</span>;</span><br><span class="line">}</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>以上代码的输出：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#text =</span><br><span class="line">to = George</span><br><span class="line">#text =</span><br><span class="line">from = John</span><br><span class="line">#text =</span><br><span class="line">heading = Reminder</span><br><span class="line">#text =</span><br><span class="line">body = Don't forget the meeting!</span><br><span class="line">#text =</span><br></pre></td></tr></tbody></table></figure><p>当 XML 生成时，它通常会在节点之间包含空白。<br>XML DOM 解析器把它们当作普通的元素，如果您不注意它们，有时会产生问题。</p><hr><p>SimpleXML</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$xml = simplexml_load_file(<span class="string">"test.xml"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> $xml-&gt;getName() . <span class="string">"&lt;br /&gt;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>($xml-&gt;children() <span class="keyword">as</span> $child)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">echo</span> $child-&gt;getName() . <span class="string">": "</span> . $child . <span class="string">"&lt;br /&gt;"</span>;</span><br><span class="line">}</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>以上代码的输出：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">note</span><br><span class="line">to: George</span><br><span class="line">from: John</span><br><span class="line">heading: Reminder</span><br><span class="line">body: Don't forget the meeting!</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过 xml_parser_create() 函数初始化 XML 解析器&lt;br&gt;创建配合不同事件处理程序的的函数&lt;/p&gt;
&lt;p&gt;添加 xml_set_element_handler() 函数来定义，当解析器遇到开始和结束标签时执行哪个函数&lt;/p&gt;
&lt;p&gt;添加 xml_set_character_data_handler() 函数来定义，当解析器遇到字符数据时执行哪个函数&lt;br&gt;通过 xml_parse() 函数来解析文件 “test.xml”&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="PHP" scheme="http://blog.iwxyi.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>PHP判断PC端还是移动端</title>
    <link href="http://blog.iwxyi.com/2018/06/03/PHP%E5%88%A4%E6%96%ADPC%E7%AB%AF%E8%BF%98%E6%98%AF%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    <id>http://blog.iwxyi.com/2018/06/03/PHP判断PC端还是移动端/</id>
    <published>2018-06-03T08:23:00.000Z</published>
    <updated>2019-10-13T08:24:50.993Z</updated>
    
    <content type="html"><![CDATA[<p>多种方式判断平台</p><a id="more"></a><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isMobile</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="comment">// 如果有HTTP_X_WAP_PROFILE则一定是移动设备</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($_SERVER[<span class="string">'HTTP_X_WAP_PROFILE'</span>])) {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果via信息含有wap则一定是移动设备</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($_SERVER[<span class="string">'HTTP_VIA'</span>])) {</span><br><span class="line">        <span class="comment">// 找不到为flase,否则为true</span></span><br><span class="line">        <span class="keyword">return</span> stristr($_SERVER[<span class="string">'HTTP_VIA'</span>], <span class="string">"wap"</span>) ? <span class="keyword">true</span> : <span class="keyword">false</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 脑残法，判断手机发送的客户端标志,兼容性有待提高</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($_SERVER[<span class="string">'HTTP_USER_AGENT'</span>])) {</span><br><span class="line">        $clientkeywords = <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">'nokia'</span>,</span><br><span class="line">            <span class="string">'sony'</span>,</span><br><span class="line">            <span class="string">'ericsson'</span>,</span><br><span class="line">            <span class="string">'mot'</span>,</span><br><span class="line">            <span class="string">'samsung'</span>,</span><br><span class="line">            <span class="string">'htc'</span>,</span><br><span class="line">            <span class="string">'sgh'</span>,</span><br><span class="line">            <span class="string">'lg'</span>,</span><br><span class="line">            <span class="string">'sharp'</span>,</span><br><span class="line">            <span class="string">'sie-'</span>,</span><br><span class="line">            <span class="string">'philips'</span>,</span><br><span class="line">            <span class="string">'panasonic'</span>,</span><br><span class="line">            <span class="string">'alcatel'</span>,</span><br><span class="line">            <span class="string">'lenovo'</span>,</span><br><span class="line">            <span class="string">'iphone'</span>,</span><br><span class="line">            <span class="string">'ipod'</span>,</span><br><span class="line">            <span class="string">'blackberry'</span>,</span><br><span class="line">            <span class="string">'meizu'</span>,</span><br><span class="line">            <span class="string">'android'</span>,</span><br><span class="line">            <span class="string">'netfront'</span>,</span><br><span class="line">            <span class="string">'symbian'</span>,</span><br><span class="line">            <span class="string">'ucweb'</span>,</span><br><span class="line">            <span class="string">'windowsce'</span>,</span><br><span class="line">            <span class="string">'palm'</span>,</span><br><span class="line">            <span class="string">'operamini'</span>,</span><br><span class="line">            <span class="string">'operamobi'</span>,</span><br><span class="line">            <span class="string">'openwave'</span>,</span><br><span class="line">            <span class="string">'nexusone'</span>,</span><br><span class="line">            <span class="string">'cldc'</span>,</span><br><span class="line">            <span class="string">'midp'</span>,</span><br><span class="line">            <span class="string">'wap'</span>,</span><br><span class="line">            <span class="string">'mobile'</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从HTTP_USER_AGENT中查找手机浏览器的关键字</span></span><br><span class="line">        <span class="keyword">if</span> (preg_match(<span class="string">"/("</span> . implode(<span class="string">'|'</span>, $clientkeywords) . <span class="string">")/i"</span>, strtolower($_SERVER[<span class="string">'HTTP_USER_AGENT'</span>]))) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 协议法，因为有可能不准确，放到最后判断</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>($_SERVER[<span class="string">'HTTP_ACCEPT'</span>])) {</span><br><span class="line">        <span class="comment">// 如果只支持wml并且不支持html那一定是移动设备</span></span><br><span class="line">        <span class="comment">// 如果支持wml和html但是wml在html之前则是移动设备</span></span><br><span class="line">        <span class="keyword">if</span> ((strpos($_SERVER[<span class="string">'HTTP_ACCEPT'</span>], <span class="string">'vnd.wap.wml'</span>) !== <span class="keyword">false</span>) &amp;&amp; (strpos($_SERVER[<span class="string">'HTTP_ACCEPT'</span>], <span class="string">'text/html'</span>) === <span class="keyword">false</span> || (strpos($_SERVER[<span class="string">'HTTP_ACCEPT'</span>], <span class="string">'vnd.wap.wml'</span>) &lt; strpos($_SERVER[<span class="string">'HTTP_ACCEPT'</span>], <span class="string">'text/html'</span>)))) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;多种方式判断平台&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="PHP" scheme="http://blog.iwxyi.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>JS正则与子字符串切片</title>
    <link href="http://blog.iwxyi.com/2018/06/03/JS%E6%AD%A3%E5%88%99%E4%B8%8E%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%88%87%E7%89%87/"/>
    <id>http://blog.iwxyi.com/2018/06/03/JS正则与子字符串切片/</id>
    <published>2018-06-03T07:58:00.000Z</published>
    <updated>2019-10-13T08:00:13.636Z</updated>
    
    <content type="html"><![CDATA[<h2 id="云笺根据名字打开目录"><a href="#云笺根据名字打开目录" class="headerlink" title="云笺根据名字打开目录"></a>云笺根据名字打开目录</h2><p>例如：<code>test</code> <code>test_</code> <code>test_2</code> 打开的都是 test 的目录</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">openContent</span>(<span class="params"></span>) </span>{</span><br><span class="line"><span class="keyword">var</span> name = <span class="built_in">document</span>.getElementById(<span class="string">"name"</span>).value;</span><br><span class="line"><span class="keyword">if</span> (name == <span class="string">""</span>) <span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">var</span> url = <span class="string">""</span>, pat = <span class="regexp">/(.+_)\d{1,2}/</span>;</span><br><span class="line"><span class="keyword">if</span> (pat.test(name)) <span class="comment">// 符合正则</span></span><br><span class="line">url = name.slice(<span class="number">0</span>, name.lastIndexOf(<span class="string">'_'</span>)+<span class="number">1</span>); <span class="comment">// "_" 左边及其内容</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (name.lastIndexOf(<span class="string">'_'</span>) == name.length<span class="number">-1</span>) <span class="comment">// 以 "_" 结尾</span></span><br><span class="line">url = name;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">url = name + <span class="string">"_"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.open(<span class="string">"index.php?n="</span> + <span class="built_in">encodeURI</span>(url));</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><h2 id="打开下一页"><a href="#打开下一页" class="headerlink" title="打开下一页"></a>打开下一页</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">page_next</span>(<span class="params"></span>) </span>{</span><br><span class="line"><span class="keyword">var</span> name = <span class="built_in">document</span>.getElementById(<span class="string">"name"</span>).value;</span><br><span class="line"><span class="keyword">if</span> (name == <span class="string">""</span>) <span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">var</span> url = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">var</span> pat = <span class="regexp">/(.+_)\d{1,2}/</span>;</span><br><span class="line"><span class="keyword">if</span> (pat.test(name))</span><br><span class="line">{</span><br><span class="line">url = name.slice(<span class="number">0</span>, name.lastIndexOf(<span class="string">'_'</span>)+<span class="number">1</span>);</span><br><span class="line">pagenum = name.slice(name.lastIndexOf(<span class="string">"_"</span>)+<span class="number">1</span>, name.length); <span class="comment">// 获取页码</span></span><br><span class="line">pagenum = <span class="built_in">parseFloat</span>(pagenum) + <span class="number">1</span>;</span><br><span class="line">url = url + pagenum;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (name.lastIndexOf(<span class="string">'_'</span>) == name.length<span class="number">-1</span>)</span><br><span class="line">url = name + <span class="string">"1"</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">url = name + <span class="string">"_1"</span>;</span><br><span class="line"></span><br><span class="line">openYunj2(<span class="string">"index.php?n="</span> + <span class="built_in">encodeURI</span>(url));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;云笺根据名字打开目录&quot;&gt;&lt;a href=&quot;#云笺根据名字打开目录&quot; class=&quot;headerlink&quot; title=&quot;云笺根据名字打开目录&quot;&gt;&lt;/a&gt;云笺根据名字打开目录&lt;/h2&gt;&lt;p&gt;例如：&lt;code&gt;test&lt;/code&gt; &lt;code&gt;test_&lt;/code&gt; &lt;code&gt;test_2&lt;/code&gt; 打开的都是 test 的目录&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;openContent&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; name = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;).value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (name == &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; url = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;, pat = &lt;span class=&quot;regexp&quot;&gt;/(.+_)\d{1,2}/&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (pat.test(name)) &lt;span class=&quot;comment&quot;&gt;// 符合正则&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		url = name.slice(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, name.lastIndexOf(&lt;span class=&quot;string&quot;&gt;&#39;_&#39;&lt;/span&gt;)+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// &quot;_&quot; 左边及其内容&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (name.lastIndexOf(&lt;span class=&quot;string&quot;&gt;&#39;_&#39;&lt;/span&gt;) == name.length&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 以 &quot;_&quot; 结尾&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		url = name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		url = name + &lt;span class=&quot;string&quot;&gt;&quot;_&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.open(&lt;span class=&quot;string&quot;&gt;&quot;index.php?n=&quot;&lt;/span&gt; + &lt;span class=&quot;built_in&quot;&gt;encodeURI&lt;/span&gt;(url));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="JS" scheme="http://blog.iwxyi.com/tags/JS/"/>
    
      <category term="RegExp" scheme="http://blog.iwxyi.com/tags/RegExp/"/>
    
  </entry>
  
  <entry>
    <title>JS判断PC端还是移动端</title>
    <link href="http://blog.iwxyi.com/2018/06/03/JS%E5%88%A4%E6%96%ADPC%E7%AB%AF%E8%BF%98%E6%98%AF%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    <id>http://blog.iwxyi.com/2018/06/03/JS判断PC端还是移动端/</id>
    <published>2018-06-03T07:56:00.000Z</published>
    <updated>2019-10-13T07:58:10.454Z</updated>
    
    <content type="html"><![CDATA[<p>根据<code>UA</code>名字来判断设备类型：</p><a id="more"></a><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type = <span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">browserRedirect</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">var</span> sUserAgent = navigator.userAgent.toLowerCase();</span><br><span class="line">    <span class="keyword">var</span> bIsIpad = sUserAgent.match(<span class="regexp">/ipad/i</span>) == <span class="string">"ipad"</span>;</span><br><span class="line">    <span class="keyword">var</span> bIsIphoneOs = sUserAgent.match(<span class="regexp">/iphone os/i</span>) == <span class="string">"iphone os"</span>;</span><br><span class="line">    <span class="keyword">var</span> bIsMidp = sUserAgent.match(<span class="regexp">/midp/i</span>) == <span class="string">"midp"</span>;</span><br><span class="line">    <span class="keyword">var</span> bIsUc7 = sUserAgent.match(<span class="regexp">/rv:1.2.3.4/i</span>) == <span class="string">"rv:1.2.3.4"</span>;</span><br><span class="line">    <span class="keyword">var</span> bIsUc = sUserAgent.match(<span class="regexp">/ucweb/i</span>) == <span class="string">"ucweb"</span>;</span><br><span class="line">    <span class="keyword">var</span> bIsAndroid = sUserAgent.match(<span class="regexp">/android/i</span>) == <span class="string">"android"</span>;</span><br><span class="line">    <span class="keyword">var</span> bIsCE = sUserAgent.match(<span class="regexp">/windows ce/i</span>) == <span class="string">"windows ce"</span>;</span><br><span class="line">    <span class="keyword">var</span> bIsWM = sUserAgent.match(<span class="regexp">/windows mobile/i</span>) == <span class="string">"windows mobile"</span>;</span><br><span class="line">    <span class="keyword">if</span> (bIsIpad || bIsIphoneOs || bIsMidp || bIsUc7 || bIsUc || bIsAndroid || bIsCE || bIsWM)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">var</span> choice = confirm(<span class="string">"you appears to be in mobile mode, will rediect to baidu"</span>);</span><br><span class="line">        <span class="keyword">var</span> choice1;</span><br><span class="line">        <span class="built_in">window</span>.location = choice ? <span class="string">"https://www.baidu.com/"</span> : (choice1 = confirm(<span class="string">"force to redirect to zhihu could result in bad viewer experience"</span>) ? <span class="string">"https://www.zhihu.com"</span> : <span class="string">"https://www.baidu.com/"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">var</span> choice = confirm(<span class="string">"you appears to be in pc mode, will rediect to zhihu"</span>);</span><br><span class="line">        <span class="keyword">var</span> choice1;</span><br><span class="line">        <span class="built_in">window</span>.location = choice ? <span class="string">"https://www.zhihu.com/"</span> : (choice1 = confirm(<span class="string">"force to redirect to baidu could result in bad viewer experience"</span>) ? <span class="string">"https://www.baidu.com/"</span> : <span class="string">"https://www.zhihu.com"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">browserRedirect();</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;根据&lt;code&gt;UA&lt;/code&gt;名字来判断设备类型：&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="JS" scheme="http://blog.iwxyi.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JS关闭标签页前提示</title>
    <link href="http://blog.iwxyi.com/2018/06/03/JS%E5%85%B3%E9%97%AD%E6%A0%87%E7%AD%BE%E9%A1%B5%E5%89%8D%E6%8F%90%E7%A4%BA/"/>
    <id>http://blog.iwxyi.com/2018/06/03/JS关闭标签页前提示/</id>
    <published>2018-06-03T07:40:00.000Z</published>
    <updated>2019-10-13T07:40:40.084Z</updated>
    
    <content type="html"><![CDATA[<p>实测chrome无效……<br>七星浏览器（Chrome+IE双内核）一旦有这个函数，不论内容，任意改变表单就会提示未修改</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onbeforeunload = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>{</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">document</span>.getElementById(<span class="string">"info"</span>).value != save_text)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'您可能有数据没有保存'</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;实测chrome无效……&lt;br&gt;七星浏览器（Chrome+IE双内核）一旦有这个函数，不论内容，任意改变表单就会提示未修改&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;
      
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="JS" scheme="http://blog.iwxyi.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JS检查邮箱格式</title>
    <link href="http://blog.iwxyi.com/2018/06/03/JS%E6%A3%80%E6%9F%A5%E9%82%AE%E7%AE%B1%E6%A0%BC%E5%BC%8F/"/>
    <id>http://blog.iwxyi.com/2018/06/03/JS检查邮箱格式/</id>
    <published>2018-06-03T07:40:00.000Z</published>
    <updated>2019-10-13T07:41:22.743Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkEmail</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">var</span> email = <span class="built_in">document</span>.getElementById(<span class="string">"email"</span>).value;</span><br><span class="line"><span class="keyword">if</span>(email == <span class="string">""</span> || email == <span class="literal">null</span>) {</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"email_helper"</span>).innerHTML = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myreg = <span class="regexp">/^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+(.[a-zA-Z0-9_-])+/</span>;</span><br><span class="line"><span class="keyword">if</span>(!myreg.test(email)) {</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"email_helper"</span>).innerHTML = <span class="string">"请输入正确的邮箱"</span>;</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"email_helper"</span>).innerHTML = <span class="string">""</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span c
      
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="JS" scheme="http://blog.iwxyi.com/tags/JS/"/>
    
      <category term="RegExp" scheme="http://blog.iwxyi.com/tags/RegExp/"/>
    
  </entry>
  
  <entry>
    <title>JS捕捉按键按下</title>
    <link href="http://blog.iwxyi.com/2018/06/03/JS%E6%8D%95%E6%8D%89%E6%8C%89%E9%94%AE%E6%8C%89%E4%B8%8B/"/>
    <id>http://blog.iwxyi.com/2018/06/03/JS捕捉按键按下/</id>
    <published>2018-06-03T07:31:00.000Z</published>
    <updated>2019-10-13T07:32:53.717Z</updated>
    
    <content type="html"><![CDATA[<p>必须要在按下按键的事件里添加函数并且<code>return false</code>才能消除原有的按键操作。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"name"</span> <span class="attr">onkeydown</span>=<span class="string">"nameClick();"</span> <span class="attr">type</span>=<span class="string">"text"</span> /&gt;</span></span><br></pre></td></tr></tbody></table></figure><a id="more"></a><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">nameClick</span>(<span class="params"></span>) </span>{</span><br><span class="line"><span class="keyword">var</span> e = event || <span class="built_in">window</span>.event || <span class="built_in">arguments</span>.callee.caller.arguments[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">if</span> (!e) <span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">if</span> (e.keyCode == <span class="number">13</span>) <span class="comment">// 回车</span></span><br><span class="line">{</span><br><span class="line"><span class="comment">/* ... code ... */</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (e.keyCode == <span class="number">9</span> &amp;&amp; !(e.altKey || e.ctrlKey || e.shiftKey)) <span class="comment">// tab</span></span><br><span class="line">{</span><br><span class="line"><span class="comment">/* ... code ... */</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (e.keyCode == <span class="number">83</span> &amp;&amp; (e.altKey || e.ctrlKey) ) <span class="comment">// Ctrl+S</span></span><br><span class="line">{</span><br><span class="line"><span class="comment">/* ... code ... */</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;必须要在按下按键的事件里添加函数并且&lt;code&gt;return false&lt;/code&gt;才能消除原有的按键操作。&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;onkeydown&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;nameClick();&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="JS" scheme="http://blog.iwxyi.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JSP取网页源码</title>
    <link href="http://blog.iwxyi.com/2018/06/03/JSP%E5%8F%96%E7%BD%91%E9%A1%B5%E6%BA%90%E7%A0%81/"/>
    <id>http://blog.iwxyi.com/2018/06/03/JSP取网页源码/</id>
    <published>2018-06-03T07:17:00.000Z</published>
    <updated>2019-10-13T11:05:38.993Z</updated>
    
    <content type="html"><![CDATA[<h2 id="取网页源码"><a href="#取网页源码" class="headerlink" title="取网页源码"></a>取网页源码</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String line = <span class="string">""</span>, source = <span class="string">""</span>, url = <span class="string">"https://www.qidian.com/all"</span>;</span><br><span class="line">HttpURLConnection l_connection = (HttpURLConnection) (<span class="keyword">new</span> URL(url)).openConnection();</span><br><span class="line">l_connection.connect();</span><br><span class="line">InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(l_connection.getInputStream(), <span class="string">"UTF-8"</span>);</span><br><span class="line">BufferedReader l_reader = <span class="keyword">new</span> BufferedReader(isr);</span><br><span class="line"><span class="keyword">while</span> ((line = l_reader.readLine()) != <span class="keyword">null</span>) source+=line;</span><br></pre></td></tr></tbody></table></figure><p>取源码后截取中间文本</p><a id="more"></a><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> startPos = source.indexOf(<span class="string">"左边文本"</span>, endPos);</span><br><span class="line"><span class="keyword">int</span> endPos = source.indexOf(<span class="string">"右边文本"</span>, startPos+<span class="number">10</span>);</span><br><span class="line"><span class="keyword">if</span> (endPos == <span class="number">0</span> || endPos == -<span class="number">1</span>)</span><br><span class="line">endPos = source.length();</span><br><span class="line">String part = source.substring(startPos, endPos);</span><br><span class="line"></span><br><span class="line">String bookID, bookUrl, bookName;</span><br><span class="line">String regEx = <span class="string">"要匹配的正则表达式"</span>;</span><br><span class="line">Pattern p = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);</span><br><span class="line">Matcher m = p.matcher(part);</span><br><span class="line"><span class="keyword">while</span> (m.find()){</span><br><span class="line">String a = m.group(<span class="number">1</span>);</span><br><span class="line">String b = m.group(<span class="number">2</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;取网页源码&quot;&gt;&lt;a href=&quot;#取网页源码&quot; class=&quot;headerlink&quot; title=&quot;取网页源码&quot;&gt;&lt;/a&gt;取网页源码&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;String line = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;, source = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;, url = &lt;span class=&quot;string&quot;&gt;&quot;https://www.qidian.com/all&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;HttpURLConnection l_connection = (HttpURLConnection) (&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; URL(url)).openConnection();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;l_connection.connect();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;InputStreamReader isr = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; InputStreamReader(l_connection.getInputStream(), &lt;span class=&quot;string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BufferedReader l_reader = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; BufferedReader(isr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; ((line = l_reader.readLine()) != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) source+=line;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;取源码后截取中间文本&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="HTTP" scheme="http://blog.iwxyi.com/tags/HTTP/"/>
    
      <category term="JSP" scheme="http://blog.iwxyi.com/tags/JSP/"/>
    
  </entry>
  
  <entry>
    <title>JSP从cookie登录</title>
    <link href="http://blog.iwxyi.com/2018/06/03/JSP%E4%BB%8Ecookie%E7%99%BB%E5%BD%95/"/>
    <id>http://blog.iwxyi.com/2018/06/03/JSP从cookie登录/</id>
    <published>2018-06-03T07:14:00.000Z</published>
    <updated>2019-10-13T07:16:17.815Z</updated>
    
    <content type="html"><![CDATA[<p>读取本地 cookies 的 username 和 password 字段，和数据库中记录进行判断</p><a id="more"></a><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span> pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.io.*,java.util.*"</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"com.mysql.jdbc.Driver, java.sql.*"</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;jsp:useBean id=<span class="string">"usero"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"wxy.jsp.novel.UserO"</span> scope=<span class="string">"session"</span> /&gt;</span><br><span class="line">&lt;jsp:useBean id=<span class="string">"sqlM"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"wxy.jsp.mysql.sqlBean"</span> scope=<span class="string">"session"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">String username = request.getParameter(<span class="string">"username"</span>);</span><br><span class="line">String password = <span class="keyword">null</span>;</span><br><span class="line">Cookie cookie = <span class="keyword">null</span>;</span><br><span class="line">Cookie[] cookies = <span class="keyword">null</span>;</span><br><span class="line">String MSG = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取 cookie</span></span><br><span class="line">cookies = request.getCookies();</span><br><span class="line"><span class="keyword">if</span> (cookies != <span class="keyword">null</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cookies.length; i++)</span><br><span class="line">{</span><br><span class="line">cookie = cookies[i];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (cookie.getName().equals(<span class="string">"username"</span>))</span><br><span class="line">{</span><br><span class="line">username = java.net.URLDecoder.decode(cookie.getValue(), <span class="string">"utf-8"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (cookie.getName().equals(<span class="string">"password"</span>))</span><br><span class="line">{</span><br><span class="line">password = java.net.URLDecoder.decode(cookie.getValue(), <span class="string">"utf-8"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (username == <span class="keyword">null</span>) username = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">if</span> (password == <span class="keyword">null</span>) password = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (username != <span class="keyword">null</span> &amp;&amp; password != <span class="keyword">null</span> &amp;&amp; !username.equals(<span class="string">""</span>) &amp;&amp; !password.equals(<span class="string">""</span>)) <span class="comment">// 带参数</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (sqlM.SafeCheck(username) == <span class="keyword">false</span> || sqlM.SafeCheck(password) == <span class="keyword">false</span>)</span><br><span class="line">{</span><br><span class="line">MSG = <span class="string">"alert('非法账号/密码输入');"</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line"><span class="comment">// 搜索数据库</span></span><br><span class="line">String sql = <span class="string">"SELECT * from users where username = '"</span> + username + <span class="string">"' and password = '"</span> + password + <span class="string">"'"</span>;</span><br><span class="line">ResultSet rs = sqlM.executeQuery(sql);</span><br><span class="line"><span class="keyword">if</span> (rs != <span class="keyword">null</span> &amp;&amp; rs.next() == <span class="keyword">true</span>)</span><br><span class="line">{</span><br><span class="line">usero.setUsername(username);</span><br><span class="line">usero.setPassword(password);</span><br><span class="line"></span><br><span class="line">String username_code = java.net.URLEncoder.encode(username, <span class="string">"UTF-8"</span>);</span><br><span class="line">String password_code = java.net.URLEncoder.encode(password, <span class="string">"UTF-8"</span>);</span><br><span class="line">Cookie username_cookie = <span class="keyword">new</span> Cookie(<span class="string">"username"</span>, username_code);</span><br><span class="line">Cookie password_cookie = <span class="keyword">new</span> Cookie(<span class="string">"password"</span>, password_code);</span><br><span class="line">username_cookie.setMaxAge(<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>*<span class="number">3</span>);</span><br><span class="line">password_cookie.setMaxAge(<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>*<span class="number">3</span>);</span><br><span class="line">response.addCookie(username_cookie);</span><br><span class="line">response.addCookie(password_cookie);</span><br><span class="line"></span><br><span class="line">response.setStatus(response.SC_MOVED_TEMPORARILY);</span><br><span class="line">response.setHeader(<span class="string">"Location"</span>, <span class="string">"account.jsp"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">%&gt;</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;读取本地 cookies 的 username 和 password 字段，和数据库中记录进行判断&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="JSP" scheme="http://blog.iwxyi.com/tags/JSP/"/>
    
  </entry>
  
  <entry>
    <title>HTML改变Chrome标签页颜色</title>
    <link href="http://blog.iwxyi.com/2018/06/03/HTML%E6%94%B9%E5%8F%98Chrome%E6%A0%87%E7%AD%BE%E9%A1%B5%E9%A2%9C%E8%89%B2/"/>
    <id>http://blog.iwxyi.com/2018/06/03/HTML改变Chrome标签页颜色/</id>
    <published>2018-06-03T05:09:00.000Z</published>
    <updated>2019-10-13T05:09:40.952Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"theme-color"</span> <span class="attr">content</span>=<span class="string">"#db5945"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;sp
      
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="HTML" scheme="http://blog.iwxyi.com/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>CSS伪元素计数</title>
    <link href="http://blog.iwxyi.com/2018/06/03/CSS%E4%BC%AA%E5%85%83%E7%B4%A0%E8%AE%A1%E6%95%B0/"/>
    <id>http://blog.iwxyi.com/2018/06/03/CSS伪元素计数/</id>
    <published>2018-06-03T04:57:00.000Z</published>
    <updated>2019-10-13T04:58:20.662Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-tag">body</span> {<span class="attribute">counter-reset</span>:section;}</span></span><br><span class="line"><span class="css"><span class="selector-tag">h2</span><span class="selector-pseudo">:before</span> {</span></span><br><span class="line">counter-increment: section;</span><br><span class="line">content: "Chapter" counter(section) ".";</span><br><span class="line">}</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><a id="more"></a><p>结果如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Chapter1.</span><br><span class="line">Chapter2.</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;css&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;body&lt;/span&gt; {&lt;span class=&quot;attribute&quot;&gt;counter-reset&lt;/span&gt;:section;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;css&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;h2&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:before&lt;/span&gt; {&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;counter-increment: section;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;content: &quot;Chapter&quot; counter(section) &quot;.&quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="CSS" scheme="http://blog.iwxyi.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>C++取数组长度函数</title>
    <link href="http://blog.iwxyi.com/2018/06/03/C-%E5%8F%96%E6%95%B0%E7%BB%84%E9%95%BF%E5%BA%A6%E5%87%BD%E6%95%B0/"/>
    <id>http://blog.iwxyi.com/2018/06/03/C-取数组长度函数/</id>
    <published>2018-06-03T00:17:00.000Z</published>
    <updated>2019-10-13T00:18:02.795Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type, <span class="keyword">size_t</span> N&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> size_t <span class="title">GetArrayLength</span><span class="params">(<span class="keyword">const</span> Type(&amp;)[N])</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">return</span> N;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C++" scheme="http://blog.iwxyi.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++11 Lambda示例</title>
    <link href="http://blog.iwxyi.com/2018/06/03/C-11-Lambda%E7%A4%BA%E4%BE%8B/"/>
    <id>http://blog.iwxyi.com/2018/06/03/C-11-Lambda示例/</id>
    <published>2018-06-03T00:04:00.000Z</published>
    <updated>2019-10-13T00:07:38.836Z</updated>
    
    <content type="html"><![CDATA[<h2 id="声明-Lambda-表达式"><a href="#声明-Lambda-表达式" class="headerlink" title="声明 Lambda 表达式"></a>声明 Lambda 表达式</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> f1 = [](<span class="keyword">int</span> x, <span class="keyword">int</span> y) { <span class="keyword">return</span> x + y; };</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; f1(<span class="number">2</span>, <span class="number">3</span>) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 输出 5</span></span><br><span class="line"></span><br><span class="line">function&lt;<span class="keyword">int</span>(<span class="keyword">int</span>, <span class="keyword">int</span>)&gt; f2 = [](<span class="keyword">int</span> x, <span class="keyword">int</span> y) { <span class="keyword">return</span> x + y; };</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; f2(<span class="number">3</span>, <span class="number">4</span>) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 输出 7</span></span><br></pre></td></tr></tbody></table></figure><a id="more"></a><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">3</span>, j = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">function&lt;<span class="keyword">int</span> (<span class="keyword">void</span>)&gt; f = [i, &amp;j] { <span class="keyword">return</span> i + j; };</span><br><span class="line"></span><br><span class="line">i = <span class="number">22</span>;</span><br><span class="line">j = <span class="number">44</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; f() &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 3 + j = 47，输出 47</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="调用-Lambda-表达式"><a href="#调用-Lambda-表达式" class="headerlink" title="调用 Lambda 表达式"></a>调用 Lambda 表达式</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n = [] (<span class="keyword">int</span> x, <span class="keyword">int</span> y) { <span class="keyword">return</span> x + y; }(<span class="number">5</span>, <span class="number">4</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; n &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 输出 9</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// STL+Lambda 用法</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; numbers;</span><br><span class="line">numbers.push_back(<span class="number">13</span>);</span><br><span class="line">numbers.push_back(<span class="number">17</span>);</span><br><span class="line">numbers.push_back(<span class="number">42</span>);</span><br><span class="line">numbers.push_back(<span class="number">46</span>);</span><br><span class="line">numbers.push_back(<span class="number">99</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;::const_iterator result =</span><br><span class="line">find_if(numbers.begin(), numbers.end(),[](<span class="keyword">int</span> n) { <span class="keyword">return</span> (n % <span class="number">2</span>) == <span class="number">0</span>; });</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (result != numbers.end()) {</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"The first even number in the list is "</span> &lt;&lt; *result &lt;&lt; <span class="string">"."</span> &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 第一个偶数是 42</span></span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"The list contains no even numbers."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="嵌套-Lambda-表达式"><a href="#嵌套-Lambda-表达式" class="headerlink" title="嵌套 Lambda 表达式"></a>嵌套 Lambda 表达式</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The following lambda expression contains a nested lambda</span></span><br><span class="line"><span class="comment">// expression.</span></span><br><span class="line"><span class="keyword">int</span> timestwoplusthree = [](<span class="keyword">int</span> x) { <span class="keyword">return</span> [](<span class="keyword">int</span> y) { <span class="keyword">return</span> y * <span class="number">2</span>; }(x) + <span class="number">3</span>; }(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Print the result.</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; timestwoplusthree &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="高阶Lambda函数"><a href="#高阶Lambda函数" class="headerlink" title="高阶Lambda函数"></a>高阶Lambda函数</h2><p><a href="https://msdn.microsoft.com/zh-cn/library/dd293599.aspx" target="_blank" rel="noopener">https://msdn.microsoft.com/zh-cn/library/dd293599.aspx</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;声明-Lambda-表达式&quot;&gt;&lt;a href=&quot;#声明-Lambda-表达式&quot; class=&quot;headerlink&quot; title=&quot;声明 Lambda 表达式&quot;&gt;&lt;/a&gt;声明 Lambda 表达式&lt;/h2&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; f1 = [](&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; x, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; y) { &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x + y; };&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; f1(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// 输出 5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;function&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)&amp;gt; f2 = [](&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; x, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; y) { &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x + y; };&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; f2(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// 输出 7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C++11" scheme="http://blog.iwxyi.com/tags/C-11/"/>
    
      <category term="Lambda" scheme="http://blog.iwxyi.com/tags/Lambda/"/>
    
  </entry>
  
  <entry>
    <title>C++11 auto类型与引用</title>
    <link href="http://blog.iwxyi.com/2018/06/03/C-11-auto%E7%B1%BB%E5%9E%8B%E4%B8%8E%E5%BC%95%E7%94%A8/"/>
    <id>http://blog.iwxyi.com/2018/06/03/C-11-auto类型与引用/</id>
    <published>2018-06-02T23:50:00.000Z</published>
    <updated>2019-10-12T23:50:32.756Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> count = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span>&amp; countRef = count;</span><br><span class="line"><span class="keyword">auto</span> myAuto = countRef; <span class="comment">// 普通的int，非引用</span></span><br></pre></td></tr></tbody></table></figure><p>您可能会认为 myAuto 是一个 int 引用，但它不是。</p><a id="more"></a><p>验证：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">countRef = <span class="number">11</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; count &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"></span><br><span class="line">myAuto = <span class="number">12</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; count &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></tbody></table></figure><p>它<strong>只是一个 int</strong>。因为输出为 11 11，而不是 11 12；</p><p>如果 auto 尚未删除此引用，则会出现此情况。</p><hr><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="built_in">list</span>&lt;<span class="built_in">string</span>&gt;&gt;::iterator i = m.begin();</span><br><span class="line"><span class="keyword">auto</span> i = m.begin(); <span class="comment">// 就是如此简单……</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">double</span>&gt; dqDoubleData(<span class="number">10</span>, <span class="number">0.1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> iter = dqDoubleData.begin(); iter != dqDoubleData.end(); ++iter) <span class="comment">// 注意是 ++iter</span></span><br><span class="line">{ <span class="comment">/* ... */</span> }</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> elem : dqDoubleData)</span><br><span class="line">{ <span class="comment">/* ... */</span> }</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; elem : dqDoubleData)</span><br><span class="line">{ <span class="comment">/* ... */</span> }</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; elem : dqDoubleData)</span><br><span class="line">{ <span class="comment">/* ... */</span> }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> x = <span class="number">12.34</span>;</span><br><span class="line"><span class="keyword">auto</span> *y = <span class="keyword">new</span> <span class="keyword">auto</span>(x), **z = <span class="keyword">new</span> <span class="keyword">auto</span>(&amp;x);</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> x = <span class="number">1</span>, *y = &amp;x, **z = &amp;y; <span class="comment">// Resolves to int.</span></span><br><span class="line">auto a(2.01), *b (&amp;a); // Resolves to double.</span><br><span class="line"><span class="keyword">auto</span> c = <span class="string">'a'</span>, *d(&amp;c); <span class="comment">// Resolves to char.</span></span><br><span class="line"><span class="keyword">auto</span> m = <span class="number">1</span>, &amp;n = m; <span class="comment">// Resolves to int.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{ <span class="keyword">return</span> x; }</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">auto</span> x = f(<span class="number">0</span>); <span class="comment">// int x</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">auto</span> &amp; y = f(<span class="number">1</span>); <span class="comment">// const int &amp; y 引用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> (*p)(<span class="keyword">int</span> x);</span><br><span class="line">p = f;</span><br><span class="line"><span class="keyword">auto</span> fp = p; <span class="comment">// 返回值为 int 类型的函数的指针</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; count = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;amp; countRef = count;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; myAuto = countRef; &lt;span class=&quot;comment&quot;&gt;// 普通的int，非引用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;您可能会认为 myAuto 是一个 int 引用，但它不是。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C++11" scheme="http://blog.iwxyi.com/tags/C-11/"/>
    
  </entry>
  
  <entry>
    <title>C++重载()仿构造函数</title>
    <link href="http://blog.iwxyi.com/2018/06/03/C-%E9%87%8D%E8%BD%BD-%E4%BB%BF%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
    <id>http://blog.iwxyi.com/2018/06/03/C-重载-仿构造函数/</id>
    <published>2018-06-02T23:46:00.000Z</published>
    <updated>2019-10-12T23:46:32.992Z</updated>
    
    <content type="html"><![CDATA[<p>坑同事技巧+1</p><a id="more"></a><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Point() { _x = _y = <span class="number">0</span>; }</span><br><span class="line"></span><br><span class="line"><span class="function">Point &amp;<span class="title">operator</span><span class="params">()</span><span class="params">( <span class="keyword">int</span> dx, <span class="keyword">int</span> dy )</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">_x += dx; _y += dy;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> _x, _y;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">Point pt;   <span class="comment">// 初始化为 (0, 0)</span></span><br><span class="line">pt( <span class="number">3</span>, <span class="number">2</span> ); <span class="comment">// 这他妈不是函数……</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;坑同事技巧+1&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C++" scheme="http://blog.iwxyi.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++异常规范</title>
    <link href="http://blog.iwxyi.com/2018/06/03/C-%E5%BC%82%E5%B8%B8%E8%A7%84%E8%8C%83/"/>
    <id>http://blog.iwxyi.com/2018/06/03/C-异常规范/</id>
    <published>2018-06-02T23:43:00.000Z</published>
    <updated>2019-10-13T00:41:05.464Z</updated>
    
    <content type="html"><![CDATA[<p>throw、try、catch</p><a id="more"></a><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handler</span><span class="params">()</span> </span>{</span><br><span class="line">printf_s(<span class="string">"in handler\n"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f1</span><span class="params">(<span class="keyword">void</span>)</span> <span class="title">throw</span><span class="params">(<span class="keyword">int</span>)</span> </span>{</span><br><span class="line">printf_s(<span class="string">"About to throw 1\n"</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="number">1</span>)</span><br><span class="line"><span class="keyword">throw</span> <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f5</span><span class="params">(<span class="keyword">void</span>)</span> <span class="title">throw</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="keyword">try</span> {</span><br><span class="line">f1();</span><br><span class="line">}</span><br><span class="line"><span class="keyword">catch</span>(...) {</span><br><span class="line">handler();</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//invalid, doesn't handle the int exception thrown from f1()</span></span><br><span class="line"><span class="comment">/*void f3(void) throw() {</span></span><br><span class="line"><span class="comment">f1();</span></span><br><span class="line"><span class="comment">}*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> __declspec(nothrow) f2(<span class="keyword">void</span>) {</span><br><span class="line"><span class="keyword">try</span> {</span><br><span class="line">f1();</span><br><span class="line">}</span><br><span class="line"><span class="keyword">catch</span>(<span class="keyword">int</span>) {</span><br><span class="line">handler();</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="function"><span class="keyword">void</span> <span class="title">f4</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f4</span><span class="params">(<span class="keyword">void</span>)</span> </span>{</span><br><span class="line">f1();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">f2();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> {</span><br><span class="line">f4();</span><br><span class="line">}</span><br><span class="line"><span class="keyword">catch</span>(...) {</span><br><span class="line">printf_s(<span class="string">"Caught exception from f4\n"</span>);</span><br><span class="line">}</span><br><span class="line">f5();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;throw、try、catch&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C++" scheme="http://blog.iwxyi.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++线程函数</title>
    <link href="http://blog.iwxyi.com/2018/06/03/C-%E7%BA%BF%E7%A8%8B%E5%87%BD%E6%95%B0/"/>
    <id>http://blog.iwxyi.com/2018/06/03/C-线程函数/</id>
    <published>2018-06-02T23:42:00.000Z</published>
    <updated>2019-10-12T23:43:27.749Z</updated>
    
    <content type="html"><![CDATA[<p><strong>线程随着 std::thread 类型实例的创建而创建</strong></p><p>从 C++ 11 开始，推荐使用<strong>列表初始化</strong>的方式，构造类类型的变量。</p><p>当函数的名字被当做一个值来使用的时候，实际上使用的是<strong>函数的指针</strong>。</p><a id="more"></a><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt; // 1</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">greeting</span><span class="params">()</span> </span>{ <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello multithread!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="built_in">std</span>::thread t{greeting}; <span class="comment">// 3</span></span><br><span class="line">t.join(); <span class="comment">// 4</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>std::thread wk_thread(ThreadTask());</code> // 1</p><p><code>std::thread wk_thread{ThreadTask{}};</code> // 2</p><p>在 (1) 处，作者的本意，是想构造一个 <code>ThreadTask</code> 实例，作为可调用对象作为 <code>wk_thread</code> 线程的线程函数。但实际上，<code>ThreadTask()</code> 是一个函数指针的类型——这个函数没有参数 (void)，返回值的类型是 <code>ThreadTask</code>。因此，整个 (1) 会被 C++ <strong>理解为一个函数声明</strong>：参数是一个函数指针（前述），返回类型是 <code>std::thread</code>。</p><p>构造函数和普通的函数是有一些不同的。构造函数执行完毕之后，就产生了一个可用的实例。产生这样误解的本质原因，是 <code>std::thread</code> 的<strong>构造函数也是函数</strong>，因而采用 <code>()</code> 接受参数列表；这样一来，从形式上构造函数就没有任何特殊性了。C++ 11 引入了列表初始化的概念，允许程序员以花括号代替圆括号，将参数传递给构造函数。这样一来，(2) 就没有歧义了。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;线程随着 std::thread 类型实例的创建而创建&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;从 C++ 11 开始，推荐使用&lt;strong&gt;列表初始化&lt;/strong&gt;的方式，构造类类型的变量。&lt;/p&gt;
&lt;p&gt;当函数的名字被当做一个值来使用的时候，实际上使用的是&lt;strong&gt;函数的指针&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="多线程" scheme="http://blog.iwxyi.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="C++" scheme="http://blog.iwxyi.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++11 Lambda表达式</title>
    <link href="http://blog.iwxyi.com/2018/06/03/C-11-Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://blog.iwxyi.com/2018/06/03/C-11-Lambda表达式/</id>
    <published>2018-06-02T23:27:00.000Z</published>
    <updated>2019-10-12T23:33:26.965Z</updated>
    
    <content type="html"><![CDATA[<p>Lambda 可在其主体中引入新的变量（用 C++14），它还可以访问（或“捕获”）周边范围内的变量。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">abssort</span><span class="params">(<span class="keyword">float</span>* x, <span class="keyword">unsigned</span> n)</span> </span>{</span><br><span class="line"><span class="built_in">std</span>::sort(x, x + n,</span><br><span class="line">[](<span class="keyword">float</span> a, <span class="keyword">float</span> b) {</span><br><span class="line"><span class="keyword">return</span> (<span class="built_in">std</span>::<span class="built_in">abs</span>(a) &lt; <span class="built_in">std</span>::<span class="built_in">abs</span>(b));</span><br><span class="line">}</span><br><span class="line">);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><p>指定要捕获的变量以及是通过值还是引用进行捕获。 有<strong>与号 (&amp;)</strong> 前缀的变量通过<strong>引用</strong>访问，没有该前缀的变量通过<strong>值</strong>访问。</p><p>以使用默认捕获模式（标准语法中的 capture-default）来指示如何捕获 lambda 中引用的任何外部变量：<code>[&amp;]</code> 表示通过引用捕获引用的所有变量，而 <code>[=]</code> 表示通过值捕获它们。 可以使用默认捕获模式，然后为特定变量显式指定相反的模式。 （引用和值，效果同函数形参）</p><p>例如，如果 lambda 体通过引用访问外部变量 total 并通过值访问外部变量 factor，则以下 capture 子句等效：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[&amp;total, factor]</span><br><span class="line">[factor, &amp;total]</span><br><span class="line">[&amp;, factor]</span><br><span class="line">[factor, &amp;]</span><br><span class="line">[=, &amp;total]</span><br><span class="line">[&amp;total, =]</span><br></pre></td></tr></tbody></table></figure><p><code>identifier(&amp;/=)</code> 或 <code>this</code> 在 capture 子句中出现的次数不能超过一次。示例：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span> {</span> <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> i)</span></span>; };</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> S::f(<span class="keyword">int</span> i) {</span><br><span class="line">[&amp;, i]{}; <span class="comment">// OK</span></span><br><span class="line">[&amp;, &amp;i]{}; <span class="comment">// ERROR: i preceded by &amp; when &amp; is the default</span></span><br><span class="line">[=, <span class="keyword">this</span>]{}; <span class="comment">// ERROR: this when = is the default</span></span><br><span class="line">[i, i]{}; <span class="comment">// ERROR: i repeated</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>包扩展：capture 后跟省略号<br>可变参数模板</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span>... <span class="title">Args</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">f</span>(<span class="title">Args</span>... <span class="title">args</span>) {</span></span><br><span class="line"><span class="keyword">auto</span> x = [args...] { <span class="keyword">return</span> g(args...); };</span><br><span class="line">x();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>参数列表</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> y = [] (<span class="keyword">int</span> first, <span class="keyword">int</span> second)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">return</span> first + second;</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C++14，创建模板</span></span><br><span class="line"><span class="keyword">auto</span> y = [] (<span class="keyword">auto</span> first, <span class="keyword">auto</span> second)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">return</span> first + second;</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>在 C++14 中，如果参数类型是泛型，则可以使用 <code>auto</code> 关键字作为类型说明符。 这将告知编译器将函数调用运算符创建为模板。 参数列表中的每个 <code>auto</code> 实例等效于一个不同的类型参数。</p><p>异常规范</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> <span class="comment">// C4297 expected</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">[]() <span class="keyword">throw</span>() { <span class="keyword">throw</span> <span class="number">5</span>; }();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>返回类型</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> x1 = [](<span class="keyword">int</span> i){ <span class="keyword">return</span> i; }; <span class="comment">// OK: return type is int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> x2 = []{ <span class="keyword">return</span>{ <span class="number">1</span>, <span class="number">2</span> }; }; <span class="comment">// ERROR: return type is void, deducing</span></span><br><span class="line"><span class="comment">// return type from braced-init-list is not valid</span></span><br></pre></td></tr></tbody></table></figure><p>lambda 表达式可以生成另一个 lambda 表达式作为其返回值。</p><p>通过值显式捕获变量 n 并通过引用隐式捕获变量 m 的 lambda 表达式：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">[&amp;, n] (<span class="keyword">int</span> a) <span class="keyword">mutable</span> { m = ++n + a; }(<span class="number">4</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; m &lt;&lt; <span class="string">" "</span> &lt;&lt; n &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 输出：5 0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>mutable</code> 规范允许在 lambda 中修改 n。</p><p>示例：使用 <code>generate</code> 函数和 lambda 表达式为 <code>vector</code> 对象中的每个元素赋值。 lambda 表达式将修改静态变量以生成下一个元素的值。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fillVector</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; v)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> nextValue = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">generate(v.begin(), v.end(), [] { <span class="keyword">return</span> nextValue++; }); <span class="comment">// generate 函数见：生成 ‎</span></span><br><span class="line"><span class="comment">//WARNING: not thread-safe and …</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> C&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; s, <span class="keyword">const</span> C&amp; c)</span> </span>{</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; e : c) {</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; e &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> elementCount = <span class="number">9</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v(elementCount, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">1</span>, y = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//斐波那契：每个等于前两个的和</span></span><br><span class="line">generate_n(v.begin() + <span class="number">2</span>, elementCount - <span class="number">2</span>,</span><br><span class="line">[=]() <span class="keyword">mutable</span> <span class="keyword">throw</span>() -&gt; <span class="keyword">int</span> {</span><br><span class="line"><span class="keyword">int</span> n = x + y;</span><br><span class="line">x = y; y = n;</span><br><span class="line"><span class="keyword">return</span> n;</span><br><span class="line">});</span><br><span class="line">print(<span class="string">"vector v after call to generate_n() with lambda: "</span>, v);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"x: "</span> &lt;&lt; x &lt;&lt; <span class="string">" y: "</span> &lt;&lt; y &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// x y 仍为1</span></span><br><span class="line"></span><br><span class="line">fillVector(v);</span><br><span class="line">print(<span class="string">"vector v after 1st call to fillVector(): "</span>, v);</span><br><span class="line"></span><br><span class="line">fillVector(v);</span><br><span class="line">print(<span class="string">"vector v after 2nd call to fillVector(): "</span>, v);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>输出：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vector v after call to generate_n() with lambda: 1 1 2 3 5 8 13 21 34</span><br><span class="line">x: 1 y: 1</span><br><span class="line">vector v after 1st call to fillVector(): 1 2 3 4 5 6 7 8 9</span><br><span class="line">vector v after 2nd call to fillVector(): 10 11 12 13 14 15 16 17 18</span><br></pre></td></tr></tbody></table></figure><blockquote><p>参考：<a href="https://msdn.microsoft.com/zh-cn/library/dd293608.aspx" target="_blank" rel="noopener">https://msdn.microsoft.com/zh-cn/library/dd293608.aspx</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Lambda 可在其主体中引入新的变量（用 C++14），它还可以访问（或“捕获”）周边范围内的变量。&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;cmath&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;abssort&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt;* x, &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; n)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::sort(x, x + n,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		[](&lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; a, &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; b) {&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;abs&lt;/span&gt;(a) &amp;lt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;abs&lt;/span&gt;(b));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C++11" scheme="http://blog.iwxyi.com/tags/C-11/"/>
    
      <category term="Lambda" scheme="http://blog.iwxyi.com/tags/Lambda/"/>
    
  </entry>
  
  <entry>
    <title>VC++ ATL对象的COM组件</title>
    <link href="http://blog.iwxyi.com/2018/06/01/VC-ATL%E5%AF%B9%E8%B1%A1%E7%9A%84COM%E7%BB%84%E4%BB%B6/"/>
    <id>http://blog.iwxyi.com/2018/06/01/VC-ATL对象的COM组件/</id>
    <published>2018-06-01T02:05:00.000Z</published>
    <updated>2019-10-13T12:33:20.391Z</updated>
    
    <content type="html"><![CDATA[<p>使用 ATL 开发和调用 COM 组件</p><a id="more"></a><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdafx.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ATL1.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ATL1_i.c"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">ITest * pITest;</span><br><span class="line">HRESULT hResult;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (CoInitialize(<span class="literal">NULL</span>) != S_OK) </span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Initialize COM library failed!n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">GUID ATL1CLSID;</span><br><span class="line">hResult = ::CLSIDFromProgID(<span class="string">L"ATL1.Test"</span>, &amp;ATL1CLSID);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (hResult != S_OK) </span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Can't find the ATL1 CLSID!n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">hResult = CoCreateInstance(ATL1CLSID, <span class="literal">NULL</span>, CLSCTX_INPROC_SERVER, IID_ITest, (<span class="keyword">void</span> **)&amp;pITest);</span><br><span class="line"><span class="keyword">if</span> (hResult != S_OK) </span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Create object failed!n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Call ITest interface's functions...n"</span>);</span><br><span class="line"><span class="keyword">double</span> k;</span><br><span class="line"><span class="keyword">double</span> *ans = &amp;k;</span><br><span class="line">pITest-&gt;getArea(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, ans);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"3,4,5=%.2lfn"</span>,*ans);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Test over...n"</span>);</span><br><span class="line"></span><br><span class="line">pITest-&gt;Release();</span><br><span class="line">CoUninitialize();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用 ATL 开发和调用 COM 组件&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C++" scheme="http://blog.iwxyi.com/tags/C/"/>
    
      <category term="VC++" scheme="http://blog.iwxyi.com/tags/VC/"/>
    
  </entry>
  
  <entry>
    <title>JSP正则表达式提取文本</title>
    <link href="http://blog.iwxyi.com/2018/05/31/JSP%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%8F%90%E5%8F%96%E6%96%87%E6%9C%AC/"/>
    <id>http://blog.iwxyi.com/2018/05/31/JSP正则表达式提取文本/</id>
    <published>2018-05-31T07:24:00.000Z</published>
    <updated>2019-10-13T07:25:00.547Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String regEx =<span class="string">"href=\"//book.qidian.com/info/(\\d+)\""</span>;</span><br><span class="line">Pattern p = Pattern.compile(regEx, Pattern.CASE_INSENSITIVE);</span><br><span class="line">Matcher m = p.matcher(str);</span><br><span class="line"><span class="keyword">if</span>(m.find()) bookID = m.group(<span class="number">1</span>); <span class="comment">// 第一个括号</span></span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span
      
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="JSP" scheme="http://blog.iwxyi.com/tags/JSP/"/>
    
      <category term="RegExp" scheme="http://blog.iwxyi.com/tags/RegExp/"/>
    
  </entry>
  
  <entry>
    <title>JSP连接数据库</title>
    <link href="http://blog.iwxyi.com/2018/05/30/JSP%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://blog.iwxyi.com/2018/05/30/JSP连接数据库/</id>
    <published>2018-05-30T07:16:00.000Z</published>
    <updated>2019-10-13T07:17:18.357Z</updated>
    
    <content type="html"><![CDATA[<h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2><p>下载 Java 专用的连接 MySQL 的驱动包 JDBC (jar 包)，复制到 lib 里面</p><a id="more"></a><hr><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"com.mysql.jdbc.Driver"</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.sql.*"</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">String driverName = <span class="string">"com.mysql.jdbc.Driver"</span>; <span class="comment">//加载驱动程序</span></span><br><span class="line">String userName = <span class="string">"root"</span>; <span class="comment">//数据库信息</span></span><br><span class="line">String userPasswd = <span class="string">"root"</span>; <span class="comment">//密码</span></span><br><span class="line">String dbName = <span class="string">"test"</span>; <span class="comment">//数据库名</span></span><br><span class="line">String tableName = <span class="string">"users"</span>; <span class="comment">//表名</span></span><br><span class="line"><span class="comment">//将数据库信息字符串连接成为一个完整的url（也可以直接写成url，分开写是明了可维护性强）</span></span><br><span class="line">String url=<span class="string">"jdbc:mysql://localhost/"</span>+dbName+<span class="string">"?user="</span>+userName+<span class="string">"&amp;password="</span>+userPasswd;</span><br><span class="line"></span><br><span class="line">Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>).newInstance();</span><br><span class="line">Connection conn = DriverManager.getConnection(url);</span><br><span class="line">Statement stmt = conn.createStatement();</span><br><span class="line">String sql=<span class="string">"SELECT * FROM "</span>+tableName;</span><br><span class="line">ResultSet rs = stmt.executeQuery(sql);</span><br><span class="line"><span class="keyword">while</span>(rs.next()) {</span><br><span class="line">out.print(rs.getString(<span class="number">1</span>)+<span class="string">"&lt;br&gt;"</span>);</span><br><span class="line">}</span><br><span class="line">rs.close();</span><br><span class="line">stmt.close();</span><br><span class="line">conn.close();</span><br><span class="line">%&gt;</span><br></pre></td></tr></tbody></table></figure><hr><h3 id="查询操作"><a href="#查询操作" class="headerlink" title="查询操作"></a>查询操作</h3><p><code>statment.executeQuery();</code></p><p>用于产生单个结果集的语句，例如 SELECT 语句。最常用。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"com.mysql.jdbc.Driver, java.sql.*"</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">String url = <span class="string">"jdbc:mysql://localhost/test?user=root&amp;password=root"</span>;</span><br><span class="line">Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>).newInstance();</span><br><span class="line">Connection conn = DriverManager.getConnection(url);</span><br><span class="line">Statement stmt = conn.createStatement();</span><br><span class="line"></span><br><span class="line">String sql=<span class="string">"SELECT * FROM users"</span>;</span><br><span class="line">ResultSet rs = stmt.executeQuery(sql);</span><br><span class="line"><span class="keyword">while</span>(rs.next()) {</span><br><span class="line">out.print(rs.getString(<span class="number">1</span>)+<span class="string">"&lt;br&gt;"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">rs.close();</span><br><span class="line">stmt.close();</span><br><span class="line">conn.close();</span><br><span class="line">%&gt;</span><br></pre></td></tr></tbody></table></figure><hr><h3 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h3><p><code>statment.executeUpdate();</code></p><p> 用于执行 INSERT、UPDATE 或 DELETE 语句以及 SQL DDL（数据定义语言，例如 CREATE TABLE 和 DROP TABLE）语句。</p><ul><li>INSERT、UPDATE 或 DELETE 语句的效果是修改表中零行或多行中的一列或多列，executeUpdate 的返回值是一个整数，指示受影响的行数（即更新计数）。</li><li>对于 CREATE TABLE 或 DROP TABLE 等不操作行的语句，executeUpdate 的返回值总为零。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"com.mysql.jdbc.Driver, java.sql.*"</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">String url=<span class="string">"jdbc:mysql://localhost/test?user=root&amp;password=root"</span>;</span><br><span class="line">Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>).newInstance();</span><br><span class="line">Connection conn=DriverManager.getConnection(url);</span><br><span class="line">Statement stmt = conn.createStatement();</span><br><span class="line"></span><br><span class="line">String sql=<span class="string">"INSERT into users (username, id) values ('hhhhhhhh', '111')"</span>;</span><br><span class="line">stmt.executeUpdate(sql); <span class="comment">// execute 也行</span></span><br><span class="line"></span><br><span class="line">stmt.close();</span><br><span class="line">conn.close();</span><br><span class="line">%&gt;</span><br></pre></td></tr></tbody></table></figure><hr><h3 id="高级操作"><a href="#高级操作" class="headerlink" title="高级操作"></a>高级操作</h3><p><code>statment.execute();</code></p><p>用于执行返回多个结果集、多个更新计数或二者组合的语句。</p><p>execute方法应该仅在语句能返回多个ResultSet对象、多个更新计数或ResultSet对象与更新计数的组合时使用。当执行某个已存储过程或动态执行未知 SQL 字符串（即应用程序程序员在编译时未知）时，有可能出现多个结果的情况，尽管这种情况很少见。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"com.mysql.jdbc.Driver, java.sql.*"</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line"><span class="comment">/* ... code ... */</span></span><br><span class="line"></span><br><span class="line">stmt.execute(queryStringWithUnknownResults);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> rowCount = stmt.getUpdateCount();</span><br><span class="line"><span class="keyword">if</span> (rowCount &gt; <span class="number">0</span>) <span class="comment">// 它是更新计数</span></span><br><span class="line">{</span><br><span class="line">System.out.println(<span class="string">"Rows changed = "</span> + count);</span><br><span class="line">stmt.getMoreResults();</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (rowCount == <span class="number">0</span>) <span class="comment">// DDL 命令或 0 个更新</span></span><br><span class="line">{</span><br><span class="line">System.out.println(<span class="string">" No rows changed or statement was DDLcommand"</span>);</span><br><span class="line">stmt.getMoreResults();</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行到这里，证明有一个结果集或没有其它结果</span></span><br><span class="line"></span><br><span class="line">ResultSet rs = stmt.getResultSet;</span><br><span class="line"><span class="keyword">if</span> (rs != <span class="keyword">null</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">while</span> (rs.next()) <span class="comment">// 使用元数据获得关于结果集列的信息</span></span><br><span class="line">{</span><br><span class="line">stmt.getMoreResults(); <span class="comment">// 处理结果</span></span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">break</span>; <span class="comment">// 没有其它结果</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">%&gt;</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;连接数据库&quot;&gt;&lt;a href=&quot;#连接数据库&quot; class=&quot;headerlink&quot; title=&quot;连接数据库&quot;&gt;&lt;/a&gt;连接数据库&lt;/h2&gt;&lt;p&gt;下载 Java 专用的连接 MySQL 的驱动包 JDBC (jar 包)，复制到 lib 里面&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="JSP" scheme="http://blog.iwxyi.com/tags/JSP/"/>
    
  </entry>
  
  <entry>
    <title>PHP设置网站虚拟目录</title>
    <link href="http://blog.iwxyi.com/2018/05/29/PHP%E8%AE%BE%E7%BD%AE%E7%BD%91%E7%AB%99%E8%99%9A%E6%8B%9F%E7%9B%AE%E5%BD%95/"/>
    <id>http://blog.iwxyi.com/2018/05/29/PHP设置网站虚拟目录/</id>
    <published>2018-05-29T08:12:00.000Z</published>
    <updated>2019-10-13T08:13:39.340Z</updated>
    
    <content type="html"><![CDATA[<ol><li>首先在 Apache 目录下找到 httpd.conf 文件，编辑打开。</li><li>（可选）先把默认的路径注释，用 # 注释，默认路径为如下：DocumentRoot “E:/PHPSever/wamp/www/“   这是我的，因人而异，取决于你的安装目录，让它变成这样即可：#DocumentRoot “E:/PHPSever/wamp/www/“</li><li>添加虚拟目录：</li></ol><a id="more"></a><p>找到：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;IfModule dir_module&gt;</span><br><span class="line">    DirectoryIndex index.php index.php3 index.html index.htm</span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></tbody></table></figure><p>在这行代码的下面加上：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;IfModule dir_module&gt;</span><br><span class="line"> DirectoryIndex index.html index.htm index.php</span><br><span class="line"> Alias /phpworkspace "F:/phpworkspace"</span><br><span class="line"> &lt;Directory f:/phpworkspace&gt;</span><br><span class="line"> order allow,deny</span><br><span class="line"> Allow from all</span><br><span class="line"> &lt;/Directory&gt;</span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></tbody></table></figure><p>里面的 F:/phpworkspace 和 f:/phpworkspace 是你要用的虚拟路径 Alias 后面的 / phpworkspace 原则上是自己随便给定，但建议与你的目录下的文件夹名称一致。</p><p>这样就把虚拟路径配好了，假设在 phpworkspace 下有 HelloWorld.php 文件，在浏览器中输入：<code>http://localhost/phpworkspace/HelloWorld.php</code>了。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;首先在 Apache 目录下找到 httpd.conf 文件，编辑打开。&lt;/li&gt;
&lt;li&gt;（可选）先把默认的路径注释，用 # 注释，默认路径为如下：DocumentRoot “E:/PHPSever/wamp/www/“   这是我的，因人而异，取决于你的安装目录，让它变成这样即可：#DocumentRoot “E:/PHPSever/wamp/www/“&lt;/li&gt;
&lt;li&gt;添加虚拟目录：&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="PHP" scheme="http://blog.iwxyi.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>JSP数据库封装用法</title>
    <link href="http://blog.iwxyi.com/2018/05/28/JSP%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B0%81%E8%A3%85%E7%94%A8%E6%B3%95/"/>
    <id>http://blog.iwxyi.com/2018/05/28/JSP数据库封装用法/</id>
    <published>2018-05-28T07:22:00.000Z</published>
    <updated>2019-10-13T07:23:34.582Z</updated>
    
    <content type="html"><![CDATA[<h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>声明数据库的 Javabean</p><p><code>&lt;jsp:useBean id="sqlM" class="wxy.jsp.mysql.sqlBean" scope="session" /&gt;</code></p><h2 id="安全检查"><a href="#安全检查" class="headerlink" title="安全检查"></a>安全检查</h2><p>检查用户名密码，如果包含特殊字符则触发 if 里面的内容<br>MSG 为占位变量，放到 HTML 里，弹出警告信息</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (sqlM.SafeCheck(username) == <span class="keyword">false</span> || sqlM.SafeCheck(password) == <span class="keyword">false</span>)</span><br><span class="line">{</span><br><span class="line">MSG = <span class="string">"alert('非法账号/密码输入');"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>设置账号密码，连接数据库</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">init(); <span class="comment">// 使用默认的数据库、账号、密码来登录</span></span><br><span class="line"></span><br><span class="line">init(String dburl, String db_user, String db_passwd); <span class="comment">// 使用自己的信息</span></span><br></pre></td></tr></tbody></table></figure><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><p>使用函数 <code>ResultSet sqlM.executeQuery(String)</code> 获取查询的返回值</p><p>只要不出错，rs 就不为 null，rs.next() 判断有没有下一行，第一次用的话就是判断有没有数据</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String sql = <span class="string">"SELECT username from users where username = '"</span> + username + <span class="string">"' and password = '"</span> + password + <span class="string">"'"</span>;</span><br><span class="line">ResultSet rs = sqlM.executeQuery(sql);</span><br><span class="line"><span class="keyword">if</span> (rs != <span class="keyword">null</span> &amp;&amp; rs.next() == <span class="keyword">true</span> &amp;&amp; username.equals(rs.getString(<span class="number">1</span>))) { } <span class="comment">// 数据存在</span></span><br></pre></td></tr></tbody></table></figure><p>一次性查询：<code>ResultSet executeQ(String sql)</code> 自动连接数据库、自动关闭。不过由于 Java 的特性，无法保留返回值，等同于废了。</p><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p>使用函数 <code>int sqlM.executeUpdate(sql)</code> 来进行插入、更新、删除操作，返回修改的行数</p><p>使用函数 <code>int sqlM.executeU(sql)</code> 来进行插入、更新、删除的一次性操作。只需要声明一下 javabean，不需要初始化、用完也不需要关掉，直接使用这个函数，会自动做好一切。</p><p>示例：向数据库插入用户名、密码</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String sql=<span class="string">"INSERT into users (username, password) values ('"</span> + username + <span class="string">"', '"</span> + password+<span class="string">" + "</span><span class="string">')";</span></span><br><span class="line"><span class="string">sqlM.executeU(sql);</span></span><br></pre></td></tr></tbody></table></figure><h2 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h2><p>如果不是使用那个一次性的函数（<code>sqlM.executeU</code>），用完则需要关掉。</p><p>根据不同的生命周期，来决定到底要不要关。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlM.close();</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;声明&quot;&gt;&lt;a href=&quot;#声明&quot; class=&quot;headerlink&quot; title=&quot;声明&quot;&gt;&lt;/a&gt;声明&lt;/h2&gt;&lt;p&gt;声明数据库的 Javabean&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;jsp:useBean id=&quot;sqlM&quot; class=&quot;wxy.jsp.mysql.sqlBean&quot; scope=&quot;session&quot; /&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;安全检查&quot;&gt;&lt;a href=&quot;#安全检查&quot; class=&quot;headerlink&quot; title=&quot;安全检查&quot;&gt;&lt;/a&gt;安全检查&lt;/h2&gt;&lt;p&gt;检查用户名密码，如果包含特殊字符则触发 if 里面的内容&lt;br&gt;MSG 为占位变量，放到 HTML 里，弹出警告信息&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (sqlM.SafeCheck(username) == &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt; || sqlM.SafeCheck(password) == &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	MSG = &lt;span class=&quot;string&quot;&gt;&quot;alert(&#39;非法账号/密码输入&#39;);&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="JSP" scheme="http://blog.iwxyi.com/tags/JSP/"/>
    
  </entry>
  
  <entry>
    <title>JSP数据库封装</title>
    <link href="http://blog.iwxyi.com/2018/05/28/JSP%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B0%81%E8%A3%85/"/>
    <id>http://blog.iwxyi.com/2018/05/28/JSP数据库封装/</id>
    <published>2018-05-28T07:20:00.000Z</published>
    <updated>2019-10-13T07:21:23.322Z</updated>
    
    <content type="html"><![CDATA[<p>简单实用的数据库相关方法封装后的工具</p><a id="more"></a><p>编辑时间：2018.05.17</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> wxy.jsp.mysql;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.String;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">sqlBean</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line"></span><br><span class="line">    Connection conn;</span><br><span class="line">    Statement stmt;</span><br><span class="line">    ResultSet rs;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">sqlBean</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="comment">// init();</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(String dburl, String db_user, String db_passwd)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        {</span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>).newInstance();</span><br><span class="line">            conn = DriverManager.getConnection(dburl, db_user, db_passwd);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">catch</span>(IllegalAccessException iae)</span><br><span class="line">        {</span><br><span class="line">            System.err.println(<span class="string">"Load Driver Error: "</span> + iae.getMessage());</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">catch</span>(InstantiationException ie)</span><br><span class="line">        {</span><br><span class="line">            System.err.println(<span class="string">"Load Driver Error: "</span> + ie.getMessage());</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">catch</span>(java.lang.ClassNotFoundException e)</span><br><span class="line">        {</span><br><span class="line">            System.err.println(<span class="string">"Load Driver Error: "</span> + e.getMessage());</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">catch</span>(SQLException ex)</span><br><span class="line">        {</span><br><span class="line">            System.err.println(<span class="string">"Get Connection Error: "</span> + ex.getMessage());</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        {</span><br><span class="line">            String url = <span class="string">"jdbc:mysql://localhost/novel?user=root&amp;password=root"</span>;</span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>).newInstance();</span><br><span class="line">            conn = DriverManager.getConnection(url);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">catch</span>(IllegalAccessException iae)</span><br><span class="line">        {</span><br><span class="line">            System.err.println(<span class="string">"Load Driver Error: "</span> + iae.getMessage());</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">catch</span>(InstantiationException ie)</span><br><span class="line">        {</span><br><span class="line">            System.err.println(<span class="string">"Load Driver Error: "</span> + ie.getMessage());</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">catch</span>(java.lang.ClassNotFoundException e)</span><br><span class="line">        {</span><br><span class="line">            System.err.println(<span class="string">"Load Driver Error: "</span> + e.getMessage());</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">catch</span>(SQLException ex)</span><br><span class="line">        {</span><br><span class="line">            System.err.println(<span class="string">"Get Connection Error: "</span> + ex.getMessage());</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultSet <span class="title">executeQuery</span><span class="params">(String sql)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">if</span> (conn == <span class="keyword">null</span>)</span><br><span class="line">            init();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">if</span> (stmt == <span class="keyword">null</span>)</span><br><span class="line">                stmt = conn.createStatement();</span><br><span class="line">            rs = stmt.executeQuery(sql);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">catch</span>(SQLException ex)</span><br><span class="line">        {</span><br><span class="line">            System.err.println(<span class="string">"SQL Error: "</span> + ex.getMessage());</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> rs;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">executeUpdate</span><span class="params">(String sql)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">if</span> (conn == <span class="keyword">null</span>)</span><br><span class="line">            init();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">if</span> (stmt == <span class="keyword">null</span>)</span><br><span class="line">                stmt = conn.createStatement();</span><br><span class="line"></span><br><span class="line">            stmt.executeUpdate(sql);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">catch</span>(SQLException ex)</span><br><span class="line">        {</span><br><span class="line">            System.err.println(<span class="string">"SQL Error: "</span> + ex.getMessage());</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">executeU</span><span class="params">(String sql)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        {</span><br><span class="line">            String url = <span class="string">"jdbc:mysql://localhost/novel?user=root&amp;password=root"</span>;</span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>).newInstance();</span><br><span class="line">            Connection conn = DriverManager.getConnection(url);</span><br><span class="line">            Statement stmt = conn.createStatement();</span><br><span class="line"></span><br><span class="line">            stmt.executeUpdate(sql);</span><br><span class="line"></span><br><span class="line">            stmt.close();</span><br><span class="line">            conn.close();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">catch</span>(IllegalAccessException iae)</span><br><span class="line">        {</span><br><span class="line">            System.err.println(<span class="string">"Load Driver Error: "</span> + iae.getMessage());</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">catch</span>(InstantiationException ie)</span><br><span class="line">        {</span><br><span class="line">            System.err.println(<span class="string">"Load Driver Error: "</span> + ie.getMessage());</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">catch</span>(java.lang.ClassNotFoundException e)</span><br><span class="line">        {</span><br><span class="line">            System.err.println(<span class="string">"Load Driver Error: "</span> + e.getMessage());</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">catch</span> (SQLException ex)</span><br><span class="line">        {</span><br><span class="line">            System.err.println(<span class="string">"SQL Error: "</span> + ex.getMessage());</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultSet <span class="title">executeQ</span><span class="params">(String sql)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        {</span><br><span class="line">            String url = <span class="string">"jdbc:mysql://localhost/novel?user=root&amp;password=root"</span>;</span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>).newInstance();</span><br><span class="line">            Connection conn = DriverManager.getConnection(url);</span><br><span class="line">            Statement stmt = conn.createStatement();</span><br><span class="line"></span><br><span class="line">            ResultSet rs = stmt.executeQuery(sql);</span><br><span class="line"></span><br><span class="line">            stmt.close();</span><br><span class="line">            conn.close();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> rs;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">catch</span>(IllegalAccessException iae)</span><br><span class="line">        {</span><br><span class="line">            System.err.println(<span class="string">"Load Driver Error: "</span> + iae.getMessage());</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">catch</span>(InstantiationException ie)</span><br><span class="line">        {</span><br><span class="line">            System.err.println(<span class="string">"Load Driver Error: "</span> + ie.getMessage());</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">catch</span>(java.lang.ClassNotFoundException e)</span><br><span class="line">        {</span><br><span class="line">            System.err.println(<span class="string">"Load Driver Error: "</span> + e.getMessage());</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">catch</span> (SQLException ex)</span><br><span class="line">        {</span><br><span class="line">            System.err.println(<span class="string">"SQL Error: "</span> + ex.getMessage());</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> rs;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        stmt.close();</span><br><span class="line">        conn.close();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">SafeCheck</span><span class="params">(String str)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        str += <span class="string">" "</span>;</span><br><span class="line">        String inj_str = <span class="string">"'|and|exec|insert|select|delete|update|count|*|%|chr|mid|master|truncate|char|declare|;|or|-|+|,"</span>;</span><br><span class="line">        String inj_stra[] = inj_str.split(<span class="string">"|"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; inj_stra.length ; i++ )</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">if</span> (str.indexOf(inj_stra[i]) &gt; <span class="number">0</span>)</span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简单实用的数据库相关方法封装后的工具&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="模板" scheme="http://blog.iwxyi.com/tags/%E6%A8%A1%E6%9D%BF/"/>
    
      <category term="JSP" scheme="http://blog.iwxyi.com/tags/JSP/"/>
    
  </entry>
  
  <entry>
    <title>HTML解决英文段落不换行</title>
    <link href="http://blog.iwxyi.com/2018/05/28/HTML%E8%A7%A3%E5%86%B3%E8%8B%B1%E6%96%87%E6%AE%B5%E8%90%BD%E4%B8%8D%E6%8D%A2%E8%A1%8C/"/>
    <id>http://blog.iwxyi.com/2018/05/28/HTML解决英文段落不换行/</id>
    <published>2018-05-28T05:09:00.000Z</published>
    <updated>2019-10-13T05:10:14.656Z</updated>
    
    <content type="html"><![CDATA[<p>加上这2个属性其中之一，就可以实现换行了。</p><ol><li><code>word-break : break-all;</code> 只对英文起作用，以字母作为换行依据</li><li><code>word-wrap : break-word;</code> 只对英文起作用，以单词作为换行依据</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;加上这2个属性其中之一，就可以实现换行了。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;word-break : break-all;&lt;/code&gt; 只对英文起作用，以字母作为换行依据&lt;/li&gt;
&lt;li&gt;&lt;code&gt;word-wrap : break-word;&lt;/code&gt; 只
      
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="HTML" scheme="http://blog.iwxyi.com/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>Android延迟操作</title>
    <link href="http://blog.iwxyi.com/2018/05/20/Android%E5%BB%B6%E8%BF%9F%E6%93%8D%E4%BD%9C/"/>
    <id>http://blog.iwxyi.com/2018/05/20/Android延迟操作/</id>
    <published>2018-05-20T12:11:00.000Z</published>
    <updated>2019-10-13T12:13:38.657Z</updated>
    
    <content type="html"><![CDATA[<p>延迟3秒切换窗口（闪屏）</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Handler().postDelayed(<span class="keyword">new</span> Runnable() {</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        Intent mainIntent = <span class="keyword">new</span> Intent(LoadActivity.<span class="keyword">this</span>, MainActivity.class);</span><br><span class="line">        LoadActivity.<span class="keyword">this</span>.startActivity(mainIntent);</span><br><span class="line">        LoadActivity.<span class="keyword">this</span>.finish();</span><br><span class="line">    }</span><br><span class="line">}, <span class="number">3000</span>);   <span class="comment">// 3 秒</span></span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;延迟3秒切换窗口（闪屏）&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;lin
      
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="Android" scheme="http://blog.iwxyi.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>嵌套循环优化</title>
    <link href="http://blog.iwxyi.com/2018/05/20/%E5%B5%8C%E5%A5%97%E5%BE%AA%E7%8E%AF%E4%BC%98%E5%8C%96/"/>
    <id>http://blog.iwxyi.com/2018/05/20/嵌套循环优化/</id>
    <published>2018-05-20T11:50:00.000Z</published>
    <updated>2019-10-12T12:14:07.126Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>请对以下的代码进行优化：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++)  </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">100</span>; j++)  </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">10</span>; k++)  </span><br><span class="line">            testFunction (i, j, k);</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>从给出的代码可知，不论如何优化，testFunction执行的次数都是相同的，该部分不存在优化的可能。那么，代码的优化只能从循环变量i、j、k的实例化、初始化、比较、自增等方面的耗时上进行分析。</p><p>首先，我们先分析原题代码循环变量在实例化、初始化、比较、自增等方面的耗时情况： </p><table><thead><tr><th>变量</th><th>实例化(次数)</th><th>初始化(次数)</th><th>比较(次数)</th><th>自增(次数)</th></tr></thead><tbody><tr><td>i</td><td>1</td><td>1</td><td>1000</td><td>1000</td></tr><tr><td>j</td><td>1000</td><td>1000</td><td>1000 * 100</td><td>1000 * 100</td></tr><tr><td>k</td><td>1000 * 100</td><td>1000 * 100</td><td>1000 * 100 * 10</td><td>1000 * 100 * 10</td></tr></tbody></table><p>该代码的性能优化就是尽可能减少循环变量i、j、k的实例化、初始化、比较、自增的次数，同时，不能引进其它可能的运算耗时。 </p><h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)  </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">100</span>; j++)  </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">1000</span>; k++)  </span><br><span class="line">            testFunction (k, j, i);</span><br></pre></td></tr></tbody></table></figure><p>该方案主要是将循环次数最少的放到外面，循环次数最多的放里面，这样可以最大程度的（注：3个不同次数的循环变量共有6种排列组合情况，此种组合为最优）减少相关循环变量的实例化次数、初始化次数、比较次数、自增次数，方案耗时情况如下： </p><table><thead><tr><th>变量</th><th>实例化(次数)</th><th>初始化(次数)</th><th>比较(次数)</th><th>自增(次数)</th></tr></thead><tbody><tr><td>i</td><td>1</td><td>1</td><td>10</td><td>10</td></tr><tr><td>j</td><td>10</td><td>10</td><td>10 * 100</td><td>10 * 100</td></tr><tr><td>k</td><td>10 * 100</td><td>10 * 100</td><td>10 * 100 * 1000</td><td>10 * 100 * 1000</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;请对以下的代码进行优化：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;; i++)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j &amp;lt; &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;; j++)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; k = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; k &amp;lt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;; k++)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            testFunction (i, j, k);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C" scheme="http://blog.iwxyi.com/tags/C/"/>
    
      <category term="优化" scheme="http://blog.iwxyi.com/tags/%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>PHP双引号内字符串用法</title>
    <link href="http://blog.iwxyi.com/2018/05/19/PHP%E5%8F%8C%E5%BC%95%E5%8F%B7%E5%86%85%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%94%A8%E6%B3%95/"/>
    <id>http://blog.iwxyi.com/2018/05/19/PHP双引号内字符串用法/</id>
    <published>2018-05-19T08:16:00.000Z</published>
    <updated>2019-10-13T11:31:32.492Z</updated>
    
    <content type="html"><![CDATA[<h3 id="普通变量"><a href="#普通变量" class="headerlink" title="普通变量"></a>普通变量</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$b = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"fdsfdsf$b\n"</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fdsfdsf5</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><h3 id="数组用法"><a href="#数组用法" class="headerlink" title="数组用法"></a>数组用法</h3><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 数组用法</span></span><br><span class="line">$ary = <span class="keyword">array</span>(<span class="string">'a'</span>=&gt;<span class="number">1</span>, <span class="number">2</span>=&gt;<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接用</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"fdsfdsf$ary[a]\n"</span>; <span class="comment">// 字符串不用加引号</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"fdsfdsf$ary[1]\n"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 花括号包起来</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"fdsfdsf{$ary['a']}"</span>;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fdsfdsf1</span><br><span class="line">fdsfdsf3</span><br><span class="line">fdsfdsf1</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;普通变量&quot;&gt;&lt;a href=&quot;#普通变量&quot; class=&quot;headerlink&quot; title=&quot;普通变量&quot;&gt;&lt;/a&gt;普通变量&lt;/h3&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$b = &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;fdsfdsf$b\n&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;fdsfdsf5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="PHP" scheme="http://blog.iwxyi.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>PHP数据库事务</title>
    <link href="http://blog.iwxyi.com/2018/05/17/PHP%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1/"/>
    <id>http://blog.iwxyi.com/2018/05/17/PHP数据库事务/</id>
    <published>2018-05-17T08:25:00.000Z</published>
    <updated>2019-10-13T08:26:11.851Z</updated>
    
    <content type="html"><![CDATA[<p><strong>连接数据库</strong>：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$LinkID =mysql_connect(<span class="string">'localhost:3307'</span>,<span class="string">'root'</span>,*******);</span><br><span class="line">mysql_select_db(<span class="string">'web_his'</span>,$LinkID);</span><br><span class="line">mysql_query(<span class="string">"set names utf8"</span>);</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><p><strong>使用事务</strong>：</p><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 创建事务 */</span></span><br><span class="line">mysql_query(<span class="string">'START TRANSACTION'</span>) <span class="keyword">or</span> <span class="keyword">exit</span>(mysql_error());</span><br><span class="line">$ssql1=<span class="string">"insert into pf_item values('22','我们','30')"</span>;  <span class="comment">//执行sql 1</span></span><br><span class="line"><span class="keyword">if</span>(!mysql_query($ssql1))</span><br><span class="line">{</span><br><span class="line">    <span class="keyword">echo</span> $ssql1.mysql_errno().<span class="string">":"</span>.mysql_error().<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">    mysql_query(<span class="string">'ROLLBACK'</span>) <span class="keyword">or</span> <span class="keyword">exit</span>(mysql_error());<span class="comment">//判断当执行失败时回滚</span></span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">$ssql1=<span class="string">"insert into pf_item values('21','hell','10')"</span>;  <span class="comment">//执行sql 2</span></span><br><span class="line"><span class="keyword">if</span>(!mysql_query($ssql1))</span><br><span class="line">{</span><br><span class="line">    <span class="keyword">echo</span> $ssql1.mysql_errno().<span class="string">":"</span>.mysql_error().<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">    mysql_query(<span class="string">'ROLLBACK'</span>) <span class="keyword">or</span> <span class="keyword">exit</span>(mysql_error());<span class="comment">//判断当执行失败时回滚</span></span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">mysql_query(<span class="string">'COMMIT'</span>) <span class="keyword">or</span> <span class="keyword">exit</span>(mysql_error());<span class="comment">//执行事务</span></span><br><span class="line"></span><br><span class="line">mysql_close($LinkID);</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;连接数据库&lt;/strong&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$LinkID =mysql_connect(&lt;span class=&quot;string&quot;&gt;&#39;localhost:3307&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;root&#39;&lt;/span&gt;,*******);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mysql_select_db(&lt;span class=&quot;string&quot;&gt;&#39;web_his&#39;&lt;/span&gt;,$LinkID);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mysql_query(&lt;span class=&quot;string&quot;&gt;&quot;set names utf8&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="PHP" scheme="http://blog.iwxyi.com/tags/PHP/"/>
    
      <category term="MySQL" scheme="http://blog.iwxyi.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Android SharedPreferences 存取 JavaBean 或 List Bean</title>
    <link href="http://blog.iwxyi.com/2018/05/17/Android-SharedPreferences-%E5%AD%98%E5%8F%96-JavaBean-%E6%88%96-List-Bean/"/>
    <id>http://blog.iwxyi.com/2018/05/17/Android-SharedPreferences-存取-JavaBean-或-List-Bean/</id>
    <published>2018-05-17T02:55:00.000Z</published>
    <updated>2019-10-13T02:55:57.713Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-存储单个JavaBean"><a href="#1-存储单个JavaBean" class="headerlink" title="1. 存储单个JavaBean"></a><strong>1. 存储单个JavaBean</strong></h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SharedPreferences sp = getSharedPreferences("SP_PEOPLE",Activity.MODE_PRIVATE);//创建sp对象,如果有key为"SP_PEOPLE"的sp就取出，否则就创建一个此key的sp对象</span><br><span class="line">People people= new People() ;//创建javabean对象</span><br><span class="line">people.setId(1);  </span><br><span class="line">people.setName("小邵");</span><br><span class="line">Gson gson = new Gson();  </span><br><span class="line">String jsonStr=gson.toJson(people); //将对象转换成Json</span><br><span class="line">editor = sp.edit() ;</span><br><span class="line">editor.putString("KEY_PEOPLE_DATA", jsonStr) ; //存入json串</span><br><span class="line">editor.commit() ; //提交</span><br><span class="line">ShowDialog("您已经保存成功");</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><h4 id="2-存储JavBean的List集合"><a href="#2-存储JavBean的List集合" class="headerlink" title="2. 存储JavBean的List集合"></a><strong>2. 存储JavBean的List集合</strong></h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">SharedPreferences sp = getSharedPreferences("SP_PEOPLE_List",Activity.MODE_PRIVATE);//创建sp对象</span><br><span class="line">List&lt;People&gt; peopleList = new ArrayList&lt;People&gt;() ; //创建List集合对象</span><br><span class="line">People people1= new People() ;//创建javabean对象</span><br><span class="line">people1.setId(1);  </span><br><span class="line">people1.setName("小邵"); </span><br><span class="line">People people2= new People() ;//创建javabean对象</span><br><span class="line">people2.setId(2);  </span><br><span class="line">people2.setName("小林"); </span><br><span class="line">peopleList.add(people1);</span><br><span class="line">peopleList.add(people2);</span><br><span class="line"></span><br><span class="line">Gson gson = new Gson();  </span><br><span class="line">String jsonStr=gson.toJson(peopleList); //将List转换成Json</span><br><span class="line">SharedPreferences.Editor editor = sp.edit() ;</span><br><span class="line">editor.putString("KEY_PEOPLE_LIST_DATA", jsonStr) ; //存入json串</span><br><span class="line">editor.commit() ;  //提交</span><br><span class="line">ShowDialog("您已经保存成功");</span><br></pre></td></tr></tbody></table></figure><h4 id="3-从SP中查询一个JavaBean"><a href="#3-从SP中查询一个JavaBean" class="headerlink" title="3. 从SP中查询一个JavaBean"></a><strong>3. 从SP中查询一个JavaBean</strong></h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SharedPreferences sp = getSharedPreferences("SP_PEOPLE",Activity.MODE_PRIVATE);//创建sp对象,如果有key为"SP_PEOPLE"的sp就取出</span><br><span class="line">peopleJson = sp.getString("KEY_PEOPLE_DATA","");  //取出key为"KEY_PEOPLE_DATA"的值，如果值为空，则将第二个参数作为默认值赋值</span><br><span class="line">if(peopleJson!="")  //防空判断</span><br><span class="line">{</span><br><span class="line">Gson gson = new Gson();  </span><br><span class="line">People people = gson.fromJson(peopleJson, People.class); //将json字符串转换成 people对象</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="4-从SP中查询javaBean集合"><a href="#4-从SP中查询javaBean集合" class="headerlink" title="4. 从SP中查询javaBean集合"></a><strong>4. 从SP中查询javaBean集合</strong></h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SharedPreferences sp = getSharedPreferences("SP_PEOPLE_LIST",Activity.MODE_PRIVATE);//创建sp对象,如果有key为"SP_PEOPLE"的sp就取出</span><br><span class="line">peopleListJson = sp.getString("KEY_PEOPLE_LIST_DATA","");  //取出key为"KEY_PEOPLE_DATA"的值，如果值为空，则将第二个参数作为默认值赋值</span><br><span class="line">if(peopleJson!="")  //防空判断</span><br><span class="line">{</span><br><span class="line">Gson gson = new Gson();  </span><br><span class="line">List&lt;People&gt; peopleList = gson.fromJson(peopleListJson, new TypeToken&lt;List&lt;People&gt;&gt;() {}.getType()); //将json字符串转换成List集合</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="5-删除一个JavaBean"><a href="#5-删除一个JavaBean" class="headerlink" title="5. 删除一个JavaBean"></a><strong>5. 删除一个JavaBean</strong></h4><p>直接把sp干掉。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SharedPreferences sp = getSharedPreferences("SP_PEOPLE",Activity.MODE_PRIVATE);//创建sp对象,如果有key为"SP_PEOPLE"的sp就取出</span><br><span class="line">peopleJson = sp.getString("KEY_PEOPLE_DATA","");  </span><br><span class="line">SharedPreferences.Editor editor = sp.edit() ;</span><br><span class="line">editor.clear();</span><br><span class="line">editor.commit();</span><br></pre></td></tr></tbody></table></figure><h4 id="6-删除List中的某个javaBean"><a href="#6-删除List中的某个javaBean" class="headerlink" title="6. 删除List中的某个javaBean"></a><strong>6. 删除List中的某个javaBean</strong></h4><p>1.先取，<br>2.转换成List，<br>3.从List中删掉，<br>4.转换成新List,<br>5.存入新json串将原先的替换掉。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">SharedPreferences sp = getSharedPreferences("SP_PEOPLE_LIST",Activity.MODE_PRIVATE);</span><br><span class="line">peopleListJson = sp.getString("KEY_PEOPLE_LIST_DATA","");  </span><br><span class="line">if(peopleJson!="")  //防空判断</span><br><span class="line">{</span><br><span class="line">Gson gson = new Gson();  </span><br><span class="line"> List&lt;People&gt; peopleList = gson.fromJson(peopleListJson, new TypeToken&lt;List&lt;People&gt;&gt;() {</span><br><span class="line">}.getType()); //1.2\. 取出并转换成List</span><br><span class="line"></span><br><span class="line">peopleList.remove(position) ; //3.移除第position个的javabean</span><br><span class="line">String jsonStr=gson.toJson(peopleList); //4.将删除完的List转换成Json</span><br><span class="line">SharedPreferences.Editor editor = sp.edit() ;</span><br><span class="line">editor.putString("KEY_PEOPLE_LIST_DATA", jsonStr) ; //存入json串</span><br><span class="line">editor.commit() ;  //提交</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="7-更新"><a href="#7-更新" class="headerlink" title="7. 更新"></a><strong>7. 更新</strong></h4><p>先取，将要改变的bean更新了 ，转换成List，存入新json串将原先的替换掉。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">SharedPreferences sp = getSharedPreferences("SP_PEOPLE_LIST",Activity.MODE_PRIVATE);</span><br><span class="line">peopleListJson = sp.getString("KEY_PEOPLE_LIST_DATA","");  </span><br><span class="line">if(peopleJson!="")  //防空判断</span><br><span class="line">{</span><br><span class="line">Gson gson = new Gson();  </span><br><span class="line">     List&lt;People&gt; peopleList = gson.fromJson(peopleListJson, new TypeToken&lt;List&lt;People&gt;&gt;() {</span><br><span class="line">}.getType()); //取出</span><br><span class="line"></span><br><span class="line">**// 省略的操作：取出，更新bean的操作，添加到List,将新List转换成json**</span><br><span class="line"></span><br><span class="line">SharedPreferences.Editor editor = sp.edit() ;</span><br><span class="line">editor.putString("KEY_PEOPLE_LIST_DATA", jsonStr) ; //存入json串</span><br><span class="line">editor.commit() ;  //提交</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-存储单个JavaBean&quot;&gt;&lt;a href=&quot;#1-存储单个JavaBean&quot; class=&quot;headerlink&quot; title=&quot;1. 存储单个JavaBean&quot;&gt;&lt;/a&gt;&lt;strong&gt;1. 存储单个JavaBean&lt;/strong&gt;&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;SharedPreferences sp = getSharedPreferences(&quot;SP_PEOPLE&quot;,Activity.MODE_PRIVATE);//创建sp对象,如果有key为&quot;SP_PEOPLE&quot;的sp就取出，否则就创建一个此key的sp对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;People people= new People() ;//创建javabean对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;people.setId(1);  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;people.setName(&quot;小邵&quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Gson gson = new Gson();  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;String jsonStr=gson.toJson(people); //将对象转换成Json&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;editor = sp.edit() ;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;editor.putString(&quot;KEY_PEOPLE_DATA&quot;, jsonStr) ; //存入json串&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;editor.commit() ; //提交&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ShowDialog(&quot;您已经保存成功&quot;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="Android" scheme="http://blog.iwxyi.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>JSP使用JavaBean</title>
    <link href="http://blog.iwxyi.com/2018/05/16/JSP%E4%BD%BF%E7%94%A8JavaBean/"/>
    <id>http://blog.iwxyi.com/2018/05/16/JSP使用JavaBean/</id>
    <published>2018-05-16T07:18:00.000Z</published>
    <updated>2019-10-13T07:19:28.665Z</updated>
    
    <content type="html"><![CDATA[<h3 id="SimpleBean-java"><a href="#SimpleBean-java" class="headerlink" title="SimpleBean.java"></a>SimpleBean.java</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> wxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleBean</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimpleBean</span><span class="params">()</span> </span>{ ; }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage</span><span class="params">(String mess)</span> </span>{ message = mess; }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span></span>{ <span class="keyword">return</span> message; }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>用<strong>合适版本的javac</strong>（否则会报错）放到 <code>网站根目录/WEB-INF/class/包路径/</code> 下</p><a id="more"></a><hr><h3 id="JavaBean-jsp"><a href="#JavaBean-jsp" class="headerlink" title="JavaBean.jsp"></a>JavaBean.jsp</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"wxy.*"</span> %&gt;</span><br><span class="line">&lt;jsp:useBean id=<span class="string">"t1"</span> scope=<span class="string">"session"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"wxy.SimpleBean"</span> /&gt;</span><br><span class="line">&lt;jsp:setProperty name=<span class="string">"t1"</span> property=<span class="string">"message"</span> value=<span class="string">"hhh"</span> /&gt;</span><br><span class="line">&lt;jsp:getProperty name=<span class="string">"t1"</span> property=<span class="string">"message"</span> /&gt;</span><br></pre></td></tr></tbody></table></figure><hr><blockquote><p>修改 class 文件，需要重启Tomcat</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;SimpleBean-java&quot;&gt;&lt;a href=&quot;#SimpleBean-java&quot; class=&quot;headerlink&quot; title=&quot;SimpleBean.java&quot;&gt;&lt;/a&gt;SimpleBean.java&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; wxy;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SimpleBean&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; String message;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SimpleBean&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{ ; }&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setMessage&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String mess)&lt;/span&gt; &lt;/span&gt;{ message = mess; }&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;getMessage&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{ &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; message; }&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;用&lt;strong&gt;合适版本的javac&lt;/strong&gt;（否则会报错）放到 &lt;code&gt;网站根目录/WEB-INF/class/包路径/&lt;/code&gt; 下&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="JSP" scheme="http://blog.iwxyi.com/tags/JSP/"/>
    
  </entry>
  
  <entry>
    <title>Android users-permission与permission的区别</title>
    <link href="http://blog.iwxyi.com/2018/05/15/Android-users-permission%E4%B8%8Epermission%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://blog.iwxyi.com/2018/05/15/Android-users-permission与permission的区别/</id>
    <published>2018-05-15T03:26:00.000Z</published>
    <updated>2019-10-13T03:26:46.072Z</updated>
    
    <content type="html"><![CDATA[<p><code>&lt;uses-permission android:name="android.permission.CALL_PHONE" /&gt;</code><br>官方权限，会显示在应用权限那里<br>是调用别人的东西自己需要声明的权限<br>与 application 节点同级</p><p><code>&lt;permission android:name="android.permission.CALL_PHONE" /&gt;</code><br>可以供其他应用使用本应用的说明<br>在 application 节点里面</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;&amp;lt;uses-permission android:name=&quot;android.permission.CALL_PHONE&quot; /&amp;gt;&lt;/code&gt;&lt;br&gt;官方权限，会显示在应用权限那里&lt;br&gt;是调用别人的东西自己需要声明的权限&lt;br&gt;与 applicat
      
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="Android" scheme="http://blog.iwxyi.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android Intent拨号</title>
    <link href="http://blog.iwxyi.com/2018/05/15/Android-Intent%E6%8B%A8%E5%8F%B7/"/>
    <id>http://blog.iwxyi.com/2018/05/15/Android-Intent拨号/</id>
    <published>2018-05-15T02:45:00.000Z</published>
    <updated>2019-10-13T02:46:20.046Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Intent-拨号"><a href="#Intent-拨号" class="headerlink" title="Intent 拨号"></a>Intent 拨号</h1><p>权限：<code>&lt;uses-permission android:name="android.permission.CALL_PHONE"</code></p><a id="more"></a><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">gotoCall</span><span class="params">(View v)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    EditText et = findViewById(R.id.phone);</span><br><span class="line">    String num = et.getText().toString();</span><br><span class="line">    <span class="keyword">if</span> (num.equals(<span class="string">""</span>))</span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>, <span class="string">"no num"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        startCall(num);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startCall</span><span class="params">(String num)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">    intent.setAction(Intent.ACTION_CALL);</span><br><span class="line">    intent.setData(Uri.parse(<span class="string">"tel:"</span> + num));</span><br><span class="line">    startActivity(intent);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Intent-拨号&quot;&gt;&lt;a href=&quot;#Intent-拨号&quot; class=&quot;headerlink&quot; title=&quot;Intent 拨号&quot;&gt;&lt;/a&gt;Intent 拨号&lt;/h1&gt;&lt;p&gt;权限：&lt;code&gt;&amp;lt;uses-permission android:name=&quot;android.permission.CALL_PHONE&quot;&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="Android" scheme="http://blog.iwxyi.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>MFC常用控件</title>
    <link href="http://blog.iwxyi.com/2018/05/15/MFC%E5%B8%B8%E7%94%A8%E6%8E%A7%E4%BB%B6/"/>
    <id>http://blog.iwxyi.com/2018/05/15/MFC常用控件/</id>
    <published>2018-05-15T02:10:00.000Z</published>
    <updated>2019-10-13T12:32:56.220Z</updated>
    
    <content type="html"><![CDATA[<h2 id="静态文本框"><a href="#静态文本框" class="headerlink" title="静态文本框"></a>静态文本框</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m_stext.SetWindowTextW(TEXT(<span class="string">"Hello"</span>));</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><h2 id="编辑框"><a href="#编辑框" class="headerlink" title="编辑框"></a>编辑框</h2><h3 id="基本函数"><a href="#基本函数" class="headerlink" title="基本函数"></a>基本函数</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">m_Edit1.SetSel(<span class="number">0</span>,<span class="number">-1</span>);<span class="comment">//表示选中编辑框IDC_EDIT1中的全部内容。</span></span><br><span class="line">m_Edit1.ReplaceSel(<span class="string">""</span>);<span class="comment">//用空字符串代替所选中的文本，即把所选的文本删除掉</span></span><br><span class="line">m_Edit1.Copy();<span class="comment">//将m_Editl编辑框中所选的内容拷贝到剪贴板上</span></span><br><span class="line">m_Edit2.Paste();<span class="comment">//将剪贴板中的内容粘贴到m_Edit2编辑框中</span></span><br><span class="line">m_Edit1.Undo();<span class="comment">// Undo（）函数是CEdit类中的成员函数，表示取消编辑框中上一次操作</span></span><br><span class="line">m_Edit1.GetWindowText(str, <span class="number">10</span>); <span class="comment">// 将内容放到字符串上，参数2是长度（包括\0）</span></span><br></pre></td></tr></tbody></table></figure><h3 id="数值与控件转换"><a href="#数值与控件转换" class="headerlink" title="数值与控件转换"></a>数值与控件转换</h3><p>IDC_EDIT1 绑定 int 变量 m_A</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">UpdateData(TRUE); <span class="comment">// 刷新成数值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i=m_A*m_B;</span><br><span class="line">m_Result.Format(<span class="string">"%d"</span>, i);</span><br><span class="line"></span><br><span class="line">UpdateData(FALSE); <span class="comment">// 刷新回控件</span></span><br></pre></td></tr></tbody></table></figure><h2 id="图像框"><a href="#图像框" class="headerlink" title="图像框"></a>图像框</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="组框-Group-Box"><a href="#组框-Group-Box" class="headerlink" title="组框 Group Box"></a>组框 Group Box</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h2><p>按下按钮</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m_btn1.SetWindowText(<span class="string">"你已按下了按钮！"</span>);</span><br></pre></td></tr></tbody></table></figure><h2 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(m_chk1.GetCheck()&gt;<span class="number">0</span>)</span><br><span class="line">    m_chk1.SetCheck(<span class="number">0</span>);</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line">    m_chk1.SetCheck(<span class="number">1</span>);</span><br></pre></td></tr></tbody></table></figure><h2 id="单选框"><a href="#单选框" class="headerlink" title="单选框"></a>单选框</h2><h3 id="按下单选框"><a href="#按下单选框" class="headerlink" title="按下单选框"></a>按下单选框</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m_rad1.SetCheck(<span class="number">1</span>);</span><br></pre></td></tr></tbody></table></figure><h3 id="初始化选中"><a href="#初始化选中" class="headerlink" title="初始化选中"></a>初始化选中</h3><p>给一组单选按钮中的一个指定按钮加上选中标志，并且清除组中其他按钮的选中标志。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">CheckRadioButton</span><span class="params">([HWND hDlg,] <span class="keyword">int</span> nlDFirstButton, <span class="keyword">int</span> nlDLastBUtton, <span class="keyword">int</span> nlDCheckButton)</span></span></span><br></pre></td></tr></tbody></table></figure><h3 id="获取状态"><a href="#获取状态" class="headerlink" title="获取状态"></a>获取状态</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> iSexRADIO = GetCheckedRadioButton(IDC_BOY_RADIO, IDC_GIRL_RADIO); <span class="comment">// 参数是第一个和最后一个</span></span><br><span class="line"><span class="keyword">if</span> (iSexRADIO == IDC_BOY_RADIO)</span><br><span class="line">;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">;</span><br></pre></td></tr></tbody></table></figure><h2 id="组合框"><a href="#组合框" class="headerlink" title="组合框"></a>组合框</h2><h3 id="初始化时添加下拉列表框项目"><a href="#初始化时添加下拉列表框项目" class="headerlink" title="初始化时添加下拉列表框项目"></a>初始化时添加下拉列表框项目</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m_cb.AddString(<span class="string">"Monday"</span>); <span class="comment">// 添加项目</span></span><br></pre></td></tr></tbody></table></figure><h3 id="初始化时选中字符串"><a href="#初始化时选中字符串" class="headerlink" title="初始化时选中字符串"></a>初始化时选中字符串</h3><p><code>SelectString</code>：搜索在组合框的列表框中的字符串，如果找到该字符串，选择列表框和复制的字符串到编辑控件。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m_Combo.SelectString(<span class="number">-1</span>, <span class="string">"a"</span>); <span class="comment">// 参数1：从0开始的索引，-1为全部；参数2：搜索词，区分大小写</span></span><br></pre></td></tr></tbody></table></figure><h3 id="获取并弹出选中项目"><a href="#获取并弹出选中项目" class="headerlink" title="获取并弹出选中项目"></a>获取并弹出选中项目</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CString msg;</span><br><span class="line">m_cb.GetLBText(m_cb.GetCurSel(), msg);</span><br><span class="line">AfxMessageBox(msg);</span><br></pre></td></tr></tbody></table></figure><h2 id="列表框"><a href="#列表框" class="headerlink" title="列表框"></a>列表框</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="水平滚动条"><a href="#水平滚动条" class="headerlink" title="水平滚动条"></a>水平滚动条</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="垂直滚动条"><a href="#垂直滚动条" class="headerlink" title="垂直滚动条"></a>垂直滚动条</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="旋转-Spin"><a href="#旋转-Spin" class="headerlink" title="旋转 Spin"></a>旋转 Spin</h2><p>滑块的滚动事件在对话框的事件里，与其他控件不同。<br>为什么？它就是这样设计的。</p><p>初始化</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CSpinButtonCtrl* pSpin =(CSpinButtonCtrl*) GetDlgItem(IDC_SPIN1);</span><br><span class="line">pSpin-&gt;SetRange(<span class="number">0</span>, <span class="number">100</span>);</span><br></pre></td></tr></tbody></table></figure><p>滚动事件</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> CTestDlg::OnVScroll(UINT nSBCode, UINT nPos, CScrollBar* pScrollBar) </span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (pScrollBar-&gt;GetDlgCtrlID() == IDC_SPIN1)</span><br><span class="line">{</span><br><span class="line">CString strValue;</span><br><span class="line">strValue.Format(<span class="string">"%3.1f"</span>, (<span class="keyword">double</span>) nPos / <span class="number">10.0</span>); <span class="comment">// 共3位，小数点后1位</span></span><br><span class="line">( (CSpinButtonCtrl*) pScrollBar )-&gt;GetBuddy()-&gt;SetWindowText(strValue);</span><br><span class="line">}</span><br><span class="line">CDialog::OnVScroll(nSBCode, nPos, pScrollBar);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="进度条-Progress"><a href="#进度条-Progress" class="headerlink" title="进度条 Progress"></a>进度条 Progress</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CProgressCtrl* pProg = (CProgressCtrl*) GetDlgItem(IDC_PROGRESS1);</span><br><span class="line">pSlide1-&gt;SetRange(<span class="number">0</span>, <span class="number">100</span>); <span class="comment">// 范围</span></span><br><span class="line">pProg-&gt;SetPos(<span class="number">0</span>); <span class="comment">// 进度=0</span></span><br><span class="line">pProg-&gt;SetPos( pProg-&gt;GetPos()+<span class="number">1</span> ); <span class="comment">// 获取进度并+1</span></span><br></pre></td></tr></tbody></table></figure><h2 id="滑块"><a href="#滑块" class="headerlink" title="滑块"></a>滑块</h2><p>滑块事件也是在对话框滚动事件里面。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> CTestDlg::OnHScroll(UINT nSBCode, UINT nPos, CScrollBar* pScrollBar) </span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(pScrollBar-&gt;GetDlgCtrlID() == IDC_SLIDER1) </span><br><span class="line">{</span><br><span class="line">CSliderCtrl* pSlide = (CSliderCtrl*) pScrollBar;</span><br><span class="line">CString strText;</span><br><span class="line">strText.Format(<span class="string">"%d"</span>, pSlide-&gt;GetPos());</span><br><span class="line">SetDlgItemText(IDC_STATIC_SLIDER, strText);<span class="comment">// 滑块位置显示到编辑框里</span></span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="热键"><a href="#热键" class="headerlink" title="热键"></a>热键</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="列表控件"><a href="#列表控件" class="headerlink" title="列表控件"></a>列表控件</h2><p>初始化</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> * color[] = {<span class="string">"white"</span>,<span class="string">"black"</span>,<span class="string">"red"</span>,<span class="string">"blue"</span>,<span class="string">"yellow"</span>,<span class="string">"cyan"</span>,<span class="string">"purple"</span>,<span class="string">"green"</span>};</span><br><span class="line">HICON hIcon[<span class="number">8</span>];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">m_imageList.Create(<span class="number">16</span>,<span class="number">16</span>,<span class="number">0</span>,<span class="number">8</span>,<span class="number">8</span>); </span><br><span class="line">hIcon[<span class="number">0</span>] = AfxGetApp()-&gt;LoadIcon(IDI_ICON_WHITE);</span><br><span class="line">hIcon[<span class="number">1</span>] = ...略...</span><br><span class="line"><span class="keyword">for</span> (n=<span class="number">0</span>;n&lt;<span class="number">8</span>;n++)</span><br><span class="line">m_imageList.Add(hIcon[n]);</span><br><span class="line"></span><br><span class="line">CListCtrl* pList = (CListCtrl*) GetDlgItem(IDC_LIST1);    <span class="comment">// 获得控件对象</span></span><br><span class="line">pList-&gt;SetImageList(&amp;m_imageList, LVSIL_SMALL);    <span class="comment">// 设置小图标图片列表</span></span><br><span class="line"><span class="keyword">for</span> (n = <span class="number">0</span>; n &lt; <span class="number">8</span>; n++) </span><br><span class="line">pList-&gt;InsertItem(n, color[n], n);<span class="comment">// 第一个参数为项id，第二个为标签文字，第三个为对应图片列表id</span></span><br><span class="line">pList-&gt;SetBkColor(RGB(<span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>));<span class="comment">// 设置背景色</span></span><br><span class="line">pList-&gt;SetTextBkColor(RGB(<span class="number">255</span>, <span class="number">0</span>, <span class="number">255</span>));    <span class="comment">//设置文字的背景色</span></span><br></pre></td></tr></tbody></table></figure><p>事件</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> CTestDlg::OnItemchangedList1(NMHDR* pNMHDR, LRESULT* pResult) <span class="comment">// 选中，修改用来显示的标签</span></span><br><span class="line">{</span><br><span class="line">NM_LISTVIEW* pNMListView = (NM_LISTVIEW*)pNMHDR;</span><br><span class="line">CListCtrl* pList = (CListCtrl*) GetDlgItem(IDC_LIST1);</span><br><span class="line"><span class="keyword">int</span> nSelected = pNMListView-&gt;iItem;</span><br><span class="line"><span class="keyword">if</span> (nSelected &gt;= <span class="number">0</span>) </span><br><span class="line">{</span><br><span class="line">CString strItem = pList-&gt;GetItemText(nSelected, <span class="number">0</span>);</span><br><span class="line">SetDlgItemText(IDC_STATIC_LIST, strItem);</span><br><span class="line">}</span><br><span class="line">*pResult = <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CTestDlg::OnRclickList1(NMHDR* pNMHDR, LRESULT* pResult) <span class="comment">// 右键修改成输入文本</span></span><br><span class="line">{</span><br><span class="line">NM_LISTVIEW* pNMListView = (NM_LISTVIEW*)pNMHDR;</span><br><span class="line">CListCtrl* pList = (CListCtrl*) GetDlgItem(IDC_LIST1);</span><br><span class="line"><span class="keyword">int</span> nSelected = pNMListView-&gt;iItem;</span><br><span class="line"><span class="keyword">if</span> (nSelected &gt;= <span class="number">0</span>) </span><br><span class="line">pList-&gt;EditLabel(nSelected);</span><br><span class="line">*pResult = <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CTestDlg::OnEndlabeleditList1(NMHDR* pNMHDR, LRESULT* pResult) <span class="comment">// 选中后并单击编辑</span></span><br><span class="line">{</span><br><span class="line">LV_DISPINFO* pDispInfo = (LV_DISPINFO*)pNMHDR;</span><br><span class="line">LVITEMA item = pDispInfo-&gt;item;</span><br><span class="line">CString str =item.pszText;</span><br><span class="line">str.TrimLeft();</span><br><span class="line">str.TrimRight();</span><br><span class="line"><span class="keyword">if</span>(str.GetLength() &gt; <span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line">CListCtrl* pList = (CListCtrl*) GetDlgItem(IDC_LIST1);</span><br><span class="line">pList-&gt;SetItemText(item.iItem, item.iSubItem, item.pszText);</span><br><span class="line">}</span><br><span class="line">*pResult = <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="树状控件"><a href="#树状控件" class="headerlink" title="树状控件"></a>树状控件</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">CTreeCtrl* pTree =(CTreeCtrl*) GetDlgItem(IDC_TREE1);</span><br><span class="line">pTree-&gt;SetImageList(&amp;m_imageList, TVSIL_NORMAL); <span class="comment">// 设置图片列表</span></span><br><span class="line"></span><br><span class="line">TV_INSERTSTRUCT tvinsert;           <span class="comment">// 创建待插入的TV_INSERTSTRUCT结构</span></span><br><span class="line">tvinsert.hParent = <span class="literal">NULL</span>;<span class="comment">// 无父结点</span></span><br><span class="line">tvinsert.hInsertAfter = TVI_LAST;<span class="comment">// 插入到本层最后</span></span><br><span class="line">tvinsert.item.mask = TVIF_IMAGE | TVIF_SELECTEDIMAGE| TVIF_TEXT;</span><br><span class="line"><span class="comment">// 掩码包括   图标         选中图标            文字</span></span><br><span class="line">tvinsert.item.hItem = <span class="literal">NULL</span>;<span class="comment">// 句柄为空</span></span><br><span class="line">tvinsert.item.state = <span class="number">0</span>;<span class="comment">// 状态</span></span><br><span class="line">tvinsert.item.stateMask = <span class="number">0</span>;<span class="comment">// 状态掩码，不使用这两项</span></span><br><span class="line">tvinsert.item.cchTextMax = <span class="number">6</span>;<span class="comment">// 最大文字长度，忽略</span></span><br><span class="line">tvinsert.item.iSelectedImage = <span class="number">1</span>;<span class="comment">// 选中图标索引</span></span><br><span class="line">tvinsert.item.cChildren = <span class="number">0</span>;<span class="comment">// 没有子节点</span></span><br><span class="line">tvinsert.item.lParam = <span class="number">0</span>;<span class="comment">// 自定义数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一层</span></span><br><span class="line">tvinsert.item.iImage = <span class="number">2</span>;<span class="comment">// 一般图标</span></span><br><span class="line"></span><br><span class="line">tvinsert.item.pszText = <span class="string">"father"</span>;   <span class="comment">// 插入第一层第一个节点"father"</span></span><br><span class="line">HTREEITEM hDad = pTree -&gt;InsertItem(&amp;tvinsert);</span><br><span class="line"></span><br><span class="line">tvinsert.item.pszText = <span class="string">"mother"</span>;   <span class="comment">// 插入第一层第二个节点"mother"</span></span><br><span class="line">HTREEITEM hMom = pTree-&gt;InsertItem(&amp;tvinsert);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建第二层</span></span><br><span class="line">tvinsert.hParent = hDad;<span class="comment">// 父节点为"father"</span></span><br><span class="line">tvinsert.item.iImage = <span class="number">3</span>;<span class="comment">// 一般图标</span></span><br><span class="line"></span><br><span class="line">tvinsert.item.pszText = <span class="string">"son"</span>;      <span class="comment">// 插入第二层"father"的第一个节点"son"</span></span><br><span class="line">pTree-&gt;InsertItem(&amp;tvinsert);</span><br><span class="line"></span><br><span class="line">tvinsert.item.pszText = <span class="string">"daughter"</span>;  <span class="comment">// 插入第二层"father"的第二个节点"daughter"</span></span><br><span class="line">pTree-&gt;InsertItem(&amp;tvinsert);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 还是创建第二层，但是父节点变成 Mom</span></span><br><span class="line">tvinsert.hParent = hMom;<span class="comment">// 父结点为"mother"</span></span><br><span class="line">tvinsert.item.iImage = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">tvinsert.item.pszText = <span class="string">"cartoon"</span>;  <span class="comment">// 插入第二层"mother"的节点"cartoon"</span></span><br><span class="line">HTREEITEM hOther = pTree-&gt;InsertItem(&amp;tvinsert);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建第三层</span></span><br><span class="line">tvinsert.hParent = hOther; <span class="comment">// 连续不断地创建</span></span><br></pre></td></tr></tbody></table></figure><p>事件</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> CTestDlg::OnSelchangedTree1(NMHDR* pNMHDR, LRESULT* pResult) <span class="comment">// 被选中，修改选中项的图标</span></span><br><span class="line">{</span><br><span class="line">NM_TREEVIEW* pNMTreeView = (NM_TREEVIEW*)pNMHDR;</span><br><span class="line">CTreeCtrl* pTree =(CTreeCtrl*) GetDlgItem(IDC_TREE1);</span><br><span class="line">HTREEITEM hSelected = pNMTreeView-&gt;itemNew.hItem;</span><br><span class="line"><span class="keyword">if</span> (hSelected != <span class="literal">NULL</span>) {</span><br><span class="line"><span class="keyword">char</span> text[<span class="number">31</span>];</span><br><span class="line">TV_ITEM item;</span><br><span class="line">item.mask = TVIF_HANDLE | TVIF_TEXT;</span><br><span class="line">item.hItem = hSelected;</span><br><span class="line">item.pszText = text;</span><br><span class="line">item.cchTextMax = <span class="number">30</span>;</span><br><span class="line">VERIFY(pTree-&gt;GetItem(&amp;item));</span><br><span class="line">SetDlgItemText(IDC_STATIC_TREE, text);</span><br><span class="line">}</span><br><span class="line">*pResult = <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CTestDlg::OnEndlabeleditTree1(NMHDR* pNMHDR, LRESULT* pResult) <span class="comment">// 选中后并单击编辑</span></span><br><span class="line">{</span><br><span class="line">TV_DISPINFO* pTVDispInfo = (TV_DISPINFO*)pNMHDR;</span><br><span class="line">TVITEMA item = pTVDispInfo-&gt;item;</span><br><span class="line">CString str =item.pszText;</span><br><span class="line">str.TrimLeft();</span><br><span class="line">str.TrimRight();</span><br><span class="line"><span class="keyword">if</span>(str.GetLength() &gt; <span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line">CTreeCtrl* pTree =(CTreeCtrl*) GetDlgItem(IDC_TREE1);</span><br><span class="line">pTree-&gt;SetItemText(item.hItem,item.pszText);</span><br><span class="line">}</span><br><span class="line">*pResult = <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="Tab控件"><a href="#Tab控件" class="headerlink" title="Tab控件"></a>Tab控件</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="富文本-Rich-Edit"><a href="#富文本-Rich-Edit" class="headerlink" title="富文本 Rich Edit"></a>富文本 Rich Edit</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="月历"><a href="#月历" class="headerlink" title="月历"></a>月历</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="日期时间选择器"><a href="#日期时间选择器" class="headerlink" title="日期时间选择器"></a>日期时间选择器</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CDateTimeCtrl* pDT =(CDateTimeCtrl*) GetDlgItem(IDC_DATETIMEPICKER1);</span><br><span class="line">CString formatStr= _T(<span class="string">"'今天是: 'yy'/'MM'/'dd"</span>);</span><br><span class="line">pDT-&gt;SetFormat(formatStr); <span class="comment">// 设置控件内容的格式</span></span><br><span class="line"></span><br><span class="line">CTime t;</span><br><span class="line">pDT-&gt;GetTime(t);</span><br><span class="line">CString s = t.Format( <span class="string">"%A, %B %d, %Y %H:%M:%S"</span> );</span><br><span class="line">AfxMessageBox(s);</span><br></pre></td></tr></tbody></table></figure><h2 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="自定义控件"><a href="#自定义控件" class="headerlink" title="自定义控件"></a>自定义控件</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="扩展组合框"><a href="#扩展组合框" class="headerlink" title="扩展组合框"></a>扩展组合框</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;静态文本框&quot;&gt;&lt;a href=&quot;#静态文本框&quot; class=&quot;headerlink&quot; title=&quot;静态文本框&quot;&gt;&lt;/a&gt;静态文本框&lt;/h2&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;m_stext.SetWindowTextW(TEXT(&lt;span class=&quot;string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C++" scheme="http://blog.iwxyi.com/tags/C/"/>
    
      <category term="MFC" scheme="http://blog.iwxyi.com/tags/MFC/"/>
    
  </entry>
  
  <entry>
    <title>VC++复制控件</title>
    <link href="http://blog.iwxyi.com/2018/05/15/VC-%E5%A4%8D%E5%88%B6%E6%8E%A7%E4%BB%B6/"/>
    <id>http://blog.iwxyi.com/2018/05/15/VC-复制控件/</id>
    <published>2018-05-15T01:35:00.000Z</published>
    <updated>2019-10-13T12:33:38.530Z</updated>
    
    <content type="html"><![CDATA[<p>vc中如何拷贝一个工程的对话框资源到另一个工程中?</p><p>方法一：在你的工程中添加另一个工程的rc文件，这时资源视图中就会出现两个rc,从后加的rc中拷贝资源到你自己工程的rc中就可以了。</p><a id="more"></a><hr><p>在VC6环境下，选择Class视图，选中想要克隆的对话框所对应的类，例如CAboutDlg，点击鼠标右键，选择Add to gallery。在新工程中选择Project菜单，选择Add Component and ActivX，你会看到多了一个文件夹（与上一个工程同名），进入该文件夹，选择*.ogx。选择Insert，你会发现原来的对话框被加入到新的工程中了！</p><p>补充：</p><p>.net下更简单，将原来的工程加到新的工程中，直接将对话框拷贝过去就行了！</p><hr><p>VC++中如何复制对话框资源</p><p>第一步：用记事本打开原工程的.rc文件，找到想复制的对话框的信息，如下所示</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">IDD_UGMS_DIALOGDIALOGEX 0, 0, 320, 230</span><br><span class="line">STYLE WS_CHILD | WS_VISIBLE</span><br><span class="line">EXSTYLE WS_EX_APPWINDOW</span><br><span class="line">FONT 9, "宋体"</span><br><span class="line">BEGIN</span><br><span class="line">  GROUPBOX      "学生信息",IDC_STATIC,10,8,290,200</span><br><span class="line">  GROUPBOX      "",IDC_STATIC,25,55,205,120</span><br><span class="line">  PUSHBUTTON    "最前(&amp;F)",IDC_BUTTON_FIRST,30,30,35,15</span><br><span class="line">  PUSHBUTTON    "向前(&amp;B)",IDC_BUTTON_PRE,82,30,35,15</span><br><span class="line">  PUSHBUTTON    "向后(&amp;N)",IDC_BUTTON_NEXT,134,30,35,15</span><br><span class="line">  PUSHBUTTON    "最后(&amp;L)",IDC_BUTTON_LAST,186,30,35,15</span><br><span class="line">  PUSHBUTTON    "查询(&amp;Q)",IDC_BUTTON_QUERY,246,70,40,15</span><br><span class="line">  PUSHBUTTON    "增加(&amp;A)",IDC_BUTTON_ADD,246,96,40,15</span><br><span class="line">  PUSHBUTTON    "修改(&amp;M)",IDC_BUTTON_MODIFY,246,122,40,15</span><br><span class="line">  PUSHBUTTON    "删除(&amp;D)",IDC_BUTTON_DELETE,246,148,40,15</span><br><span class="line">  PUSHBUTTON    "确定(&amp;O)",IDC_BUTTON_OK,58,183,40,15</span><br><span class="line">  PUSHBUTTON    "取消(&amp;C)",IDC_BUTTON_CANCEL,150,183,40,15</span><br><span class="line">  LTEXT          "学号：",IDC_STATIC,52,75,25,8</span><br><span class="line">  LTEXT          "姓名：",IDC_STATIC,52,100,25,8</span><br><span class="line">  LTEXT          "性别：",IDC_STATIC,52,125,25,8</span><br><span class="line">  LTEXT          "入学时间：",IDC_STATIC,44,151,41,8</span><br><span class="line">  EDITTEXT      IDC_EDIT_SID,91,72,95,15,ES_AUTOHSCROLL</span><br><span class="line">  EDITTEXT      IDC_EDIT_SNAME,91,96,95,15,ES_AUTOHSCROLL</span><br><span class="line">  EDITTEXT      IDC_EDIT_SSEX,91,120,95,15,ES_AUTOHSCROLL</span><br><span class="line">  CONTROL        "DateTimePicker1",IDC_DATETIMEPICKER_SCOMEDATE, "SysDateTimePick32",DTS_RIGHTALIGN | WS_TABSTOP,91,144, 95,15</span><br><span class="line">  GROUPBOX      "",IDC_STATIC,25,19,205,35</span><br><span class="line">END</span><br></pre></td></tr></tbody></table></figure><p>上面代码中绿色背景代表的是要复制的对话框资源的ID，此段代码也就是.rc文件中记录的此对话框的信息，黄色背景中间的代码就是</p><p>相应对话框中添加的控件信息，只需将相应代码拷到新工程的相应.rc文件相应的ID对话框资源的BEGIN 和END之间即可；</p><p>第二步：打开原工程的FileView视图下的Header Files 下的resource.h文件，将其中相应ID的信息复制到新工程的resource.h中即可；</p><p>例如：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//复制的资源ID</span><br><span class="line">#define IDC_BUTTON_FIRST              1000</span><br><span class="line">#define IDC_BUTTON_PRE                1001</span><br><span class="line">#define IDC_BUTTON_NEXT              1002</span><br><span class="line">#define IDC_BUTTON_LAST              1003</span><br><span class="line">#define IDC_BUTTON_QUERY              1004</span><br><span class="line">#define IDC_BUTTON_ADD                1005</span><br><span class="line">#define IDC_BUTTON_MODIFY              1006</span><br><span class="line">#define IDC_BUTTON_DELETE              1007</span><br><span class="line">#define IDC_BUTTON_OK                1008</span><br><span class="line">#define IDC_BUTTON_CANCEL              1009</span><br><span class="line">#define IDC_EDIT_SID                  1010</span><br><span class="line">#define IDC_EDIT_SNAME                1011</span><br><span class="line">#define IDC_EDIT_SSEX                1012</span><br><span class="line">#define IDC_DATETIMEPICKER_SCOMEDATE    1013</span><br></pre></td></tr></tbody></table></figure><p>第三步：记得不要遗漏啊，如有ID重复，可以更改一下即可！</p><p>法4：</p><p>今天碰到模块移植问题了,自己做的对话框类(继承于CDialog)要移植到目标工程中.在网上搜了几个帖子发现都说的很生涩.问了我们的技术总监之后总算解决这个问题了.</p><p>   问题:把一个MFC SDI工程中的一个对话框资源和类拷贝到另一个MFC SDI中.</p><p>   1.在VC6中打开老的工程,在工作区Resource标签页中选中Dialog文件夹下的资源文件(就是双击后会出现编辑窗口界面的那个东西),按Ctrl+C(Edit-&gt;Copy也一样).</p><p>   2.关闭当前工程,注意不要关闭VC6,打开目标工程(File-&gt;OpenWorkspace),然后选中工作区的Resource标签页中的Dialog文件夹,然后按Ctrl+V(Edit-&gt;Paste也一样).好了,对话框拷贝过来了.</p><p>   3.将对话框类的cpp h文件拷贝到目标工程中(不详细说了,往当前工程添加文件)</p><p>   4.打开复制过来的类cpp和h文件,删除没用的头文件(老工程相关的),并且在.h文件中添加文件包含</p><p>#include “Resource.h”</p><p>第四步很关键,老工程中根本就没有这个文件包含,可是移植之后必须手动添加头文件包含.因为这个问题卡了10几分钟…</p><p>当你用资源ID时（通常资源编辑器编辑的资源ID都在resource.h中），如果没有包含CWinApp的派生类所在的头文件就会出错，你看一下它的头文件里，包含了这个文件， 而向导生成的类，它的实现文件都有包含CWinApp派生类所在的头文件的</p><p>然后在新工程中就可以使用这个类了,主要就是这个类的对话框中的资源复制头一次遇到.不敢独享,拿出来跟新手们一起学习.</p><p>于是，当有已经创建好的对话框资源要添加到新工程中时：</p><p>（1）右键单击新工程所在的解决方案添加“现有项目”把旧工程添加进来；</p><p>（2）切换到“资源视图”并在旧工程对话框资源上右键“复制”；</p><p>（3）在新工程对话框资源上右键“粘贴”；</p><p>（4）现在就可以为新对话框添加类了，顺便把旧工程的响应函数拷贝过来；</p><p>（5）切换回“解决方案资源管理器”，右键旧工程“移除”。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;vc中如何拷贝一个工程的对话框资源到另一个工程中?&lt;/p&gt;
&lt;p&gt;方法一：在你的工程中添加另一个工程的rc文件，这时资源视图中就会出现两个rc,从后加的rc中拷贝资源到你自己工程的rc中就可以了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="VC++" scheme="http://blog.iwxyi.com/tags/VC/"/>
    
  </entry>
  
  <entry>
    <title>VC++动态链接库DLL</title>
    <link href="http://blog.iwxyi.com/2018/05/15/VC-%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93DLL/"/>
    <id>http://blog.iwxyi.com/2018/05/15/VC-动态链接库DLL/</id>
    <published>2018-05-15T01:32:00.000Z</published>
    <updated>2019-10-13T12:33:31.744Z</updated>
    
    <content type="html"><![CDATA[<h2 id="隐式链接"><a href="#隐式链接" class="headerlink" title="隐式链接"></a>隐式链接</h2><ol><li>用特殊声明 <code>_declspec(dllexport)</code> 定义一个导出函数</li></ol><a id="more"></a><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdafx.h"</span></span></span><br><span class="line"></span><br><span class="line">_declspec(dllexport) <span class="function"><span class="keyword">long</span> <span class="title">square</span> <span class="params">(<span class="keyword">long</span> x)</span> <span class="comment">// 导出标记</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">return</span> x * x;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL APIENTRY <span class="title">DllMain</span><span class="params">(HANDLE hModule, DWORD  ul_reason_for_call, LPVOID lpReserved)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li><p>编译、链接, 生成.Dll文件和.Lib文件，并拷贝到客户端目录</p></li><li><p>工程设置里，exe 关联 .Lib 文件</p><blockquote><p>注：是源文件所在目录，而不是Debug文件夹</p></blockquote></li><li><p>使用特殊声明 <code>_declspec(dllimport)</code> 声明导出函数并调用</p></li></ol><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdafx.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line">_declspec(dllimport) <span class="function"><span class="keyword">long</span> <span class="title">square</span><span class="params">(<span class="keyword">long</span> x)</span></span>; <span class="comment">// 导入标记</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; square(x) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="显示链接"><a href="#显示链接" class="headerlink" title="显示链接"></a>显示链接</h2><ol><li>定义一个函数：<code>bool __stdcall square(long x);</code></li></ol><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdafx.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> _<span class="function">stdcall <span class="title">square</span> <span class="params">(<span class="keyword">long</span> x)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">return</span> x * x;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL APIENTRY <span class="title">DllMain</span><span class="params">(HANDLE hModule, DWORD  ul_reason_for_call, LPVOID lpReserved)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>通过 <code>.def</code> 文件导出函数并防止函数名被修饰。</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">LIBRARY"dll1"</span><br><span class="line"></span><br><span class="line">EXPORTS</span><br><span class="line">square @1</span><br><span class="line">;函数  [@序号]</span><br></pre></td></tr></tbody></table></figure><blockquote><p>dll 文件放在 exe 运行目录下（例如：Debug）</p></blockquote><ol start="3"><li>通过3个API函数直接调用.DLL中的导出函数。<ul><li>HMODULE LoadLibrary(LPCTSTR lpFileName); // 获取 dll 句柄</li><li>FARPROC GetProcAddress(HMODULE hModule, LPSCTR lpProcName); // 加载 dll 函数</li><li>BOOL FreeLibrary(HMODULE hModule); // 释放 dll 空间</li></ul></li></ol><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdafx.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">long</span> <span class="params">(_stdcall * LF)</span> <span class="params">(<span class="keyword">long</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"></span><br><span class="line">HMODULE hModule = LoadLibrary(<span class="string">"dll1"</span>);</span><br><span class="line"><span class="keyword">if</span> (!hModule)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"NONE HMODULE"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">LF lf = (LF) GetProcAddress(hModule, <span class="string">"square"</span>);</span><br><span class="line"><span class="keyword">if</span> (!lf)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"NONE FUNCTION"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; lf(x) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">FreeLibrary(hModule);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;隐式链接&quot;&gt;&lt;a href=&quot;#隐式链接&quot; class=&quot;headerlink&quot; title=&quot;隐式链接&quot;&gt;&lt;/a&gt;隐式链接&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;用特殊声明 &lt;code&gt;_declspec(dllexport)&lt;/code&gt; 定义一个导出函数&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C++" scheme="http://blog.iwxyi.com/tags/C/"/>
    
      <category term="VC++" scheme="http://blog.iwxyi.com/tags/VC/"/>
    
  </entry>
  
  <entry>
    <title>Android动态获取权限</title>
    <link href="http://blog.iwxyi.com/2018/05/14/Android%E5%8A%A8%E6%80%81%E8%8E%B7%E5%8F%96%E6%9D%83%E9%99%90/"/>
    <id>http://blog.iwxyi.com/2018/05/14/Android动态获取权限/</id>
    <published>2018-05-14T03:11:00.000Z</published>
    <updated>2019-10-13T03:12:18.981Z</updated>
    
    <content type="html"><![CDATA[<p>在6.0 系统中请求某些权限需要检查权限</p><p>下面以拨打电话为例</p><a id="more"></a><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!TextUtils.isEmpty(phone)) {</span><br><span class="line">    <span class="keyword">if</span> (!hasPermission()) {</span><br><span class="line">        <span class="comment">// 在6.0 系统中请求某些权限需要检查权限</span></span><br><span class="line">        <span class="keyword">int</span> curApiVersion = Build.VERSION.SDK_INT;</span><br><span class="line">        <span class="keyword">if</span> (curApiVersion &gt;= Build.VERSION_CODES.M) {</span><br><span class="line">            <span class="comment">// 动态请求拨打电话权限</span></span><br><span class="line">            requestPermissions(</span><br><span class="line">                    <span class="keyword">new</span> String[] { Manifest.permission.CALL_PHONE }, <span class="number">0x11</span>);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            intentToCall(phone);</span><br><span class="line">        }</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        intentToCall(phone);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">hasPermission</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (checkSelfPermission(Manifest.permission.CALL_PHONE) != PackageManager.PERMISSION_GRANTED) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">intentToCall</span><span class="params">(String phoneNumber)</span> </span>{</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_CALL);</span><br><span class="line">        Uri data = Uri.parse(<span class="string">"tel:"</span> + phoneNumber);</span><br><span class="line">        intent.setData(data);</span><br><span class="line">        startActivity(intent);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 动态请求拨打电话权限后，监听用户的点击事件 </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> requestCode,</span></span></span><br><span class="line"><span class="function"><span class="params">            String[] permissions, <span class="keyword">int</span>[] grantResults)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>.onRequestPermissionsResult(requestCode, permissions, grantResults);</span><br><span class="line">        <span class="keyword">if</span> (requestCode == <span class="number">0x11</span>) {</span><br><span class="line">            <span class="comment">// If request is cancelled, the result arrays are empty.</span></span><br><span class="line">            <span class="keyword">if</span> (grantResults.length &gt; <span class="number">0</span></span><br><span class="line">                    &amp;&amp; grantResults[<span class="number">0</span>] == PackageManager.PERMISSION_GRANTED) {</span><br><span class="line">                CldLog.i(<span class="string">"CMCC"</span>, <span class="string">"权限被允许"</span>);</span><br><span class="line">                String phone = mContactsInfo.getPhone();</span><br><span class="line">                intentToCall(phone);</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                CldLog.i(<span class="string">"CMCC"</span>, <span class="string">"权限被拒绝"</span>);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在6.0 系统中请求某些权限需要检查权限&lt;/p&gt;
&lt;p&gt;下面以拨打电话为例&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="Android" scheme="http://blog.iwxyi.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Servlet找不到包</title>
    <link href="http://blog.iwxyi.com/2018/05/13/Servlet%E6%89%BE%E4%B8%8D%E5%88%B0%E5%8C%85/"/>
    <id>http://blog.iwxyi.com/2018/05/13/Servlet找不到包/</id>
    <published>2018-05-13T07:26:00.000Z</published>
    <updated>2019-10-13T07:26:57.957Z</updated>
    
    <content type="html"><![CDATA[<p>servlet-api.jar 复制到 JDK/jre/lib/ext 里面</p><p>如果还不行，在把这个包放到JDK的bin里，再在命令行强行导入：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac  -classpath servlet-api.jar sortCount.java</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;servlet-api.jar 复制到 JDK/jre/lib/ext 里面&lt;/p&gt;
&lt;p&gt;如果还不行，在把这个包放到JDK的bin里，再在命令行强行导入：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td 
      
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="JSP" scheme="http://blog.iwxyi.com/tags/JSP/"/>
    
      <category term="Servlet" scheme="http://blog.iwxyi.com/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>Android获取IMEI码</title>
    <link href="http://blog.iwxyi.com/2018/05/10/Android%E8%8E%B7%E5%8F%96IMEI%E7%A0%81/"/>
    <id>http://blog.iwxyi.com/2018/05/10/Android获取IMEI码/</id>
    <published>2018-05-10T03:15:00.000Z</published>
    <updated>2019-10-13T03:16:51.477Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.telephony.TelephonyManager;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getIMEI</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> ((TelephonyManager) mainActivity.getContext().getSystemService(<span class="string">"phone"</span>)).getDeviceId();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p> 需要权限 <code>&lt;uses-permission android:name="android.permission.READ_PHONE_STATE" /&gt;</code></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span
      
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="Android" scheme="http://blog.iwxyi.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>JSP-学习笔记</title>
    <link href="http://blog.iwxyi.com/2018/05/09/JSP-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://blog.iwxyi.com/2018/05/09/JSP-学习笔记/</id>
    <published>2018-05-09T07:25:00.000Z</published>
    <updated>2019-10-13T07:25:52.901Z</updated>
    
    <content type="html"><![CDATA[<h1 id="了解"><a href="#了解" class="headerlink" title="了解"></a>了解</h1><h2 id="第一个-JSP-程序"><a href="#第一个-JSP-程序" class="headerlink" title="第一个 JSP 程序"></a>第一个 JSP 程序</h2><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">           &lt;title&gt;第一个 JSP 程序&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">           &lt;%</span><br><span class="line">                  out.println(<span class="string">"Hello World！"</span>);</span><br><span class="line">           %&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><h2 id="JSP-生命周期"><a href="#JSP-生命周期" class="headerlink" title="JSP 生命周期"></a>JSP 生命周期</h2><h3 id="JSP编译"><a href="#JSP编译" class="headerlink" title="JSP编译"></a>JSP编译</h3><p>当浏览器请求JSP页面时，JSP引擎会首先去检查是否需要编译这个文件。如果这个文件没有被编译过，或者在上次编译后被更改过，则编译这个JSP文件。</p><p>编译的过程包括三个步骤：</p><ul><li>解析JSP文件。</li><li>将JSP文件转为servlet。</li><li>编译servlet。</li></ul><hr><h3 id="JSP初始化"><a href="#JSP初始化" class="headerlink" title="JSP初始化"></a>JSP初始化</h3><p>容器载入JSP文件后，它会在为请求提供任何服务前调用jspInit()方法。如果您需要执行自定义的JSP初始化任务，复写jspInit()方法就行了，就像下面这样：</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jspInit</span><span class="params">()</span></span>{</span><br><span class="line">  <span class="comment">// 初始化代码</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>一般来讲程序只初始化一次，servlet也是如此。通常情况下您可以在jspInit()方法中初始化数据库连接、打开文件和创建查询表。</p><hr><h3 id="JSP执行"><a href="#JSP执行" class="headerlink" title="JSP执行"></a>JSP执行</h3><p>这一阶段描述了JSP生命周期中一切与请求相关的交互行为，直到被销毁。</p><p>当JSP网页完成初始化后，JSP引擎将会调用_jspService()方法。</p><p>_jspService()方法需要一个HttpServletRequest对象和一个HttpServletResponse对象作为它的参数，就像下面这样：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">void _jspService(HttpServletRequest request,</span><br><span class="line">                 HttpServletResponse response)</span><br><span class="line">{</span><br><span class="line">   // 服务端处理代码</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>_jspService()方法在每个request中被调用一次并且负责产生与之相对应的response，并且它还负责产生所有7个HTTP方法的回应，比如GET、POST、DELETE等等。</p><hr><h3 id="JSP清理"><a href="#JSP清理" class="headerlink" title="JSP清理"></a>JSP清理</h3><p>JSP生命周期的销毁阶段描述了当一个JSP网页从容器中被移除时所发生的一切。</p><p>jspDestroy()方法在JSP中等价于servlet中的销毁方法。当您需要执行任何清理工作时复写jspDestroy()方法，比如释放数据库连接或者关闭文件夹等等。</p><p>jspDestroy()方法的格式如下：</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jspDestroy</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">   <span class="comment">// 清理代码</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="JSP-语法"><a href="#JSP-语法" class="headerlink" title="JSP 语法"></a>JSP 语法</h1><p>##基础语法</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;% 代码片段 %&gt;</span><br></pre></td></tr></tbody></table></figure><p>效果等同于</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:scriptlet&gt;</span><br><span class="line">   代码片段</span><br><span class="line">&lt;/jsp:scriptlet&gt;</span><br></pre></td></tr></tbody></table></figure><hr><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">out.println(<span class="string">"Your IP address is "</span> + request.getRemoteAddr());</span><br><span class="line">%&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="中文编码"><a href="#中文编码" class="headerlink" title="中文编码"></a>中文编码</h3><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h3><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;%! <span class="keyword">int</span> i = <span class="number">0</span>; %&gt; </span><br><span class="line">&lt;%! <span class="keyword">int</span> a, b, c; %&gt; </span><br><span class="line">&lt;%! Circle a = <span class="keyword">new</span> Circle(<span class="number">2.0</span>); %&gt;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:declaration&gt;</span><br><span class="line">   代码片段</span><br><span class="line">&lt;/jsp:declaration&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="JSP-表达式"><a href="#JSP-表达式" class="headerlink" title="JSP 表达式"></a>JSP 表达式</h3><p>先被转化成String，然后插入到表达式出现的地方。</p><p>表达式元素中可以包含任何符合Java语言规范的表达式，但是不能使用分号来结束表达式。</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%= 表达式 %&gt;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:expression&gt;</span><br><span class="line">   表达式</span><br><span class="line">&lt;/jsp:expression&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="JSP-注释"><a href="#JSP-注释" class="headerlink" title="JSP 注释"></a>JSP 注释</h3><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%-- 该部分注释在网页中不会被显示--%&gt;</span><br></pre></td></tr></tbody></table></figure><blockquote><p>HTML 注释</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment">&lt;!-- 注释 --&gt;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></tbody></table></figure></blockquote><h3 id="JSP-指令"><a href="#JSP-指令" class="headerlink" title="JSP 指令"></a>JSP 指令</h3><p>JSP指令用来设置与整个JSP页面相关的属性。</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ directive attribute=<span class="string">"value"</span> %&gt;</span><br></pre></td></tr></tbody></table></figure><p>这里有三种指令标签：</p><table><thead><tr><th><strong>指令</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>&lt;%@ page … %&gt;</td><td>定义页面的依赖属性，比如脚本语言、error页面、缓存需求等等</td></tr><tr><td>&lt;%@ include … %&gt;</td><td>包含其他文件</td></tr><tr><td>&lt;%@ taglib … %&gt;</td><td>引入标签库的定义，可以是自定义标签</td></tr></tbody></table><h3 id="JSP-行为"><a href="#JSP-行为" class="headerlink" title="JSP 行为"></a>JSP 行为</h3><p>JSP行为标签使用XML语法结构来控制servlet引擎。它能够动态插入一个文件，重用JavaBean组件，引导用户去另一个页面，为Java插件产生相关的HTML等等。</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:action_name attribute=<span class="string">"value"</span> /&gt;</span><br></pre></td></tr></tbody></table></figure><table><thead><tr><th><strong>语法</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>jsp:include</td><td>用于在当前页面中包含静态或动态资源</td></tr><tr><td>jsp:useBean</td><td>寻找和初始化一个JavaBean组件</td></tr><tr><td>jsp:setProperty</td><td>设置 JavaBean组件的值</td></tr><tr><td>jsp:getProperty</td><td>将 JavaBean组件的值插入到 output中</td></tr><tr><td>jsp:forward</td><td>从一个JSP文件向另一个文件传递一个包含用户请求的request对象</td></tr><tr><td>jsp:plugin</td><td>用于在生成的HTML页面中包含Applet和JavaBean对象</td></tr><tr><td>jsp:element</td><td>动态创建一个XML元素</td></tr><tr><td>jsp:attribute</td><td>定义动态创建的XML元素的属性</td></tr><tr><td>jsp:body</td><td>定义动态创建的XML元素的主体</td></tr><tr><td>jsp:text</td><td>用于封装模板数据</td></tr></tbody></table><h3 id="JSP-对象"><a href="#JSP-对象" class="headerlink" title="JSP 对象"></a>JSP 对象</h3><table><thead><tr><th><strong>对象</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>request</td><td><strong>HttpServletRequest</strong>类的实例</td></tr><tr><td>response</td><td><strong>HttpServletResponse</strong>类的实例</td></tr><tr><td>out</td><td><strong>PrintWriter</strong>类的实例，用于把结果输出至网页上</td></tr><tr><td>session</td><td><strong>HttpSession</strong>类的实例</td></tr><tr><td>application</td><td><strong>ServletContext</strong>类的实例，与应用上下文有关</td></tr><tr><td>config</td><td><strong>ServletConfig</strong>类的实例</td></tr><tr><td>pageContext</td><td><strong>PageContext</strong>类的实例，提供对JSP页面所有对象以及命名空间的访问</td></tr><tr><td>page</td><td>类似于Java类中的this关键字</td></tr><tr><td>Exception</td><td><strong>Exception</strong>类的对象，代表发生错误的JSP页面中对应的异常对象</td></tr></tbody></table><h3 id="控制流语句"><a href="#控制流语句" class="headerlink" title="控制流语句"></a>控制流语句</h3><p>同 Java</p><h3 id="判断语句"><a href="#判断语句" class="headerlink" title="判断语句"></a>判断语句</h3><h4 id="if…else…"><a href="#if…else…" class="headerlink" title="if…else…"></a>if…else…</h4><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;%! <span class="keyword">int</span> day = <span class="number">3</span>; %&gt; </span><br><span class="line">&lt;h3&gt;IF...ELSE 实例&lt;/h3&gt;</span><br><span class="line">&lt;% <span class="keyword">if</span> (day == <span class="number">1</span> | day == <span class="number">7</span>) { %&gt;</span><br><span class="line">      &lt;p&gt;今天是周末&lt;/p&gt;</span><br><span class="line">&lt;% } <span class="keyword">else</span> { %&gt;</span><br><span class="line">      &lt;p&gt;今天不是周末&lt;/p&gt;</span><br><span class="line">&lt;% } %&gt;</span><br></pre></td></tr></tbody></table></figure><h4 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h4><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;%! <span class="keyword">int</span> day = <span class="number">3</span>; %&gt; </span><br><span class="line">&lt;% </span><br><span class="line"><span class="keyword">switch</span>(day) {</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">   out.println(<span class="string">"星期天"</span>);</span><br><span class="line">   <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">   ...</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">   out.println(<span class="string">"星期六"</span>);</span><br><span class="line">}</span><br><span class="line">%&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><p>可以使用Java的三个基本循环类型：for，while，和 do…while</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;%! <span class="keyword">int</span> fontSize; %&gt; </span><br><span class="line">&lt;h3&gt;For 循环实例&lt;/h3&gt;</span><br><span class="line">&lt;% <span class="keyword">for</span> ( fontSize = <span class="number">1</span>; fontSize &lt;= <span class="number">3</span>; fontSize++){ %&gt;</span><br><span class="line">   &lt;font color="green" size="&lt;%= fontSize %&gt;"&gt;菜鸟教程&lt;/font&gt;&lt;br /&gt;</span><br><span class="line">&lt;% } %&gt;</span><br></pre></td></tr></tbody></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://www.runoob.com/wp-content/uploads/2014/01/7B4B85CF-FE4B-43CB-AAFF-F8594AD4342C.jpg" alt="运行结果" title="">                </div>                <div class="image-caption">运行结果</div>            </figure><h3 id="JSP-运算符"><a href="#JSP-运算符" class="headerlink" title="JSP 运算符"></a>JSP 运算符</h3><p>JSP支持所有Java逻辑和算术运算符。</p><h3 id="JSP-字面量"><a href="#JSP-字面量" class="headerlink" title="JSP 字面量"></a>JSP 字面量</h3><ul><li>布尔值(boolean)：true 和 false;</li><li>整型(int)：与 Java 中的一样;</li><li>浮点型(float)：与 Java 中的一样;</li><li>字符串(string)：以单引号或双引号开始和结束;</li><li>Null：null。</li></ul><h2 id="JSP-指令-1"><a href="#JSP-指令-1" class="headerlink" title="JSP 指令"></a>JSP 指令</h2><p>JSP指令用来设置整个JSP页面相关的属性，如网页的编码方式和脚本语言。</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ directive attribute=<span class="string">"value"</span> %&gt;</span><br></pre></td></tr></tbody></table></figure><h4 id="Page-指令"><a href="#Page-指令" class="headerlink" title="Page 指令"></a>Page 指令</h4><p>Page指令为容器提供当前页面的使用说明。一个JSP页面可以包含多个page指令。</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page attribute=<span class="string">"value"</span> %&gt;</span><br></pre></td></tr></tbody></table></figure><p>等价的XML格式：</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:directive.page attribute=<span class="string">"value"</span> /&gt;</span><br></pre></td></tr></tbody></table></figure><p>下表列出与Page指令相关的属性：</p><table><thead><tr><th><strong>属性</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>buffer</td><td>指定out对象使用缓冲区的大小</td></tr><tr><td>autoFlush</td><td>控制out对象的 缓存区</td></tr><tr><td>contentType</td><td>指定当前JSP页面的MIME类型和字符编码</td></tr><tr><td>errorPage</td><td>指定当JSP页面发生异常时需要转向的错误处理页面</td></tr><tr><td>isErrorPage</td><td>指定当前页面是否可以作为另一个JSP页面的错误处理页面</td></tr><tr><td>extends</td><td>指定servlet从哪一个类继承</td></tr><tr><td>import</td><td>导入要使用的Java类</td></tr><tr><td>info</td><td>定义JSP页面的描述信息</td></tr><tr><td>isThreadSafe</td><td>指定对JSP页面的访问是否为线程安全</td></tr><tr><td>language</td><td>定义JSP页面所用的脚本语言，默认是Java</td></tr><tr><td>session</td><td>指定JSP页面是否使用session</td></tr><tr><td>isELIgnored</td><td>指定是否执行EL表达式</td></tr><tr><td>isScriptingEnabled</td><td>确定脚本元素能否被使用</td></tr></tbody></table><h4 id="Include指令"><a href="#Include指令" class="headerlink" title="Include指令"></a>Include指令</h4><p>JSP可以通过include指令来包含其他文件。被包含的文件可以是JSP文件、HTML文件或文本文件。</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ include file=<span class="string">"文件相对 url 地址"</span> %&gt;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:directive.include file=<span class="string">"文件相对 url 地址"</span> /&gt;</span><br></pre></td></tr></tbody></table></figure><h4 id="Taglib指令"><a href="#Taglib指令" class="headerlink" title="Taglib指令"></a>Taglib指令</h4><p>JSP API允许用户自定义标签，一个自定义标签库就是自定义标签的集合。</p><p>Taglib指令引入一个自定义标签集合的定义，包括库路径、自定义标签。</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib uri=<span class="string">"uri"</span> prefix=<span class="string">"prefixOfTag"</span> %&gt;</span><br></pre></td></tr></tbody></table></figure><p>uri属性确定标签库的位置，prefix属性指定标签库的前缀。</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:directive.taglib uri=<span class="string">"uri"</span> prefix=<span class="string">"prefixOfTag"</span> /&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="JSP-动作元素"><a href="#JSP-动作元素" class="headerlink" title="JSP 动作元素"></a>JSP 动作元素</h2><p>与JSP指令元素不同的是，JSP动作元素在请求处理阶段起作用。JSP动作元素是用XML语法写成的。</p><p>利用JSP动作可以动态地插入文件、重用JavaBean组件、把用户重定向到另外的页面、为Java插件生成HTML代码。</p><p>动作元素只有一种语法，它符合XML标准：</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:action_name attribute=<span class="string">"value"</span> /&gt;</span><br></pre></td></tr></tbody></table></figure><h4 id="lt-jsp-include-gt-动作元素"><a href="#lt-jsp-include-gt-动作元素" class="headerlink" title="<jsp:include>动作元素"></a><code>&lt;jsp:include&gt;</code>动作元素</h4><p><code>&lt;jsp:include&gt;</code>动作元素用来包含静态和动态的文件。该动作把指定文件插入正在生成的页面。语法格式如下：</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:include page=<span class="string">"相对 URL 地址"</span> flush=<span class="string">"true"</span> /&gt;</span><br></pre></td></tr></tbody></table></figure><p>flush：布尔属性，定义在包含资源前是否刷新缓存区。</p><p>前面已经介绍过include指令，它是在JSP文件被转换成Servlet的时候引入文件，而这里的jsp:include动作不同，插入文件的时间是在页面被请求的时候。</p><h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><p>date.jsp文件代码：</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">   今天的日期是: &lt;%= (<span class="keyword">new</span> java.util.Date()).toLocaleString()%&gt;</span><br><span class="line">&lt;/p&gt;</span><br></pre></td></tr></tbody></table></figure><p>main.jsp文件代码：</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;h2&gt;include 动作实例&lt;/h2&gt;</span><br><span class="line">&lt;jsp:include page=<span class="string">"date.jsp"</span> flush=<span class="string">"true"</span> /&gt;</span><br></pre></td></tr></tbody></table></figure><p>运行结果</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">今天的日期是: 2016-6-25 14:08:17</span><br></pre></td></tr></tbody></table></figure><h4 id="lt-jsp-useBean-gt-动作元素"><a href="#lt-jsp-useBean-gt-动作元素" class="headerlink" title="<jsp:useBean>动作元素"></a><code>&lt;jsp:useBean&gt;</code>动作元素</h4><p><strong>jsp:useBean</strong> 动作用来加载一个将在JSP页面中使用的JavaBean，使得我们可以发挥 Java 组件复用的优势。</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:useBean id=<span class="string">"name"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"package.class"</span> /&gt;</span><br></pre></td></tr></tbody></table></figure><p>在类载入后，我们既可以通过 jsp:setProperty 和 jsp:getProperty 动作来修改和检索bean的属性。</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>class</td><td>指定Bean的完整包名。</td></tr><tr><td>type</td><td>指定将引用该对象变量的类型。</td></tr><tr><td>beanName</td><td>通过 java.beans.Beans 的 instantiate() 方法指定Bean的名字。</td></tr></tbody></table><h4 id="lt-jsp-setProperty-gt-动作元素"><a href="#lt-jsp-setProperty-gt-动作元素" class="headerlink" title="<jsp:setProperty>动作元素"></a><code>&lt;jsp:setProperty&gt;</code>动作元素</h4><p>jsp:setProperty用来设置已经实例化的Bean对象的属性，有两种用法。</p><p>首先，你可以在jsp:useBean元素的外面（后面）使用jsp:setProperty，如下所示：</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:useBean id=<span class="string">"myName"</span> ... /&gt;</span><br><span class="line">...</span><br><span class="line">&lt;jsp:setProperty name=<span class="string">"myName"</span> property=<span class="string">"someProperty"</span> .../&gt;</span><br></pre></td></tr></tbody></table></figure><p>此时，不管jsp:useBean是找到了一个现有的Bean，还是新创建了一个Bean实例，jsp:setProperty都会执行。</p><hr><p>第二种用法是把jsp:setProperty放入jsp:useBean元素的内部，如下所示：</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:useBean id=<span class="string">"myName"</span> ... &gt;</span><br><span class="line">...</span><br><span class="line">   &lt;jsp:setProperty name=<span class="string">"myName"</span> property=<span class="string">"someProperty"</span> .../&gt;</span><br><span class="line">&lt;/jsp:useBean&gt;</span><br></pre></td></tr></tbody></table></figure><p>此时，jsp:setProperty只有在新建Bean实例时才会执行，如果是使用现有实例则不执行jsp:setProperty。</p><p>jsp:setProperty动作有下面四个属性,如下表：</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>name</td><td>必需。它表示要设置属性的是哪个Bean。</td></tr><tr><td>property</td><td>必需。它表示要设置哪个属性。有一个特殊用法：如果property的值是”*”，表示所有名字和Bean属性名字匹配的请求参数都将被传递给相应的属性set方法。</td></tr><tr><td>value</td><td>可选。该属性用来指定Bean属性的值。value和param不能同时使用，但可以使用其中任意一个。</td></tr><tr><td>param</td><td>可选。它指定用哪个请求参数作为Bean属性的值。如果当前请求没有参数，则什么事情也不做，系统不会把null传递给Bean属性的set方法。因此，你可以让Bean自己提供默认属性值，只有当请求参数明确指定了新值时才修改默认属性值。</td></tr></tbody></table><h4 id="lt-jsp-getProperty-gt-动作元素"><a href="#lt-jsp-getProperty-gt-动作元素" class="headerlink" title="<jsp:getProperty>动作元素"></a><code>&lt;jsp:getProperty&gt;</code>动作元素</h4><p>jsp:getProperty动作提取指定Bean属性的值，转换成字符串，然后输出。语法格式如下：</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:useBean id=<span class="string">"myName"</span> ... /&gt;</span><br><span class="line">...</span><br><span class="line">&lt;jsp:getProperty name=<span class="string">"myName"</span> property=<span class="string">"someProperty"</span> .../&gt;</span><br></pre></td></tr></tbody></table></figure><h5 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h5><p>使用 Bean</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.runoob.main;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBean</span> </span>{</span><br><span class="line">   <span class="keyword">private</span> String message = <span class="string">"菜鸟教程"</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>{</span><br><span class="line">      <span class="keyword">return</span>(message);</span><br><span class="line">   }</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage</span><span class="params">(String message)</span> </span>{</span><br><span class="line">      <span class="keyword">this</span>.message = message;</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>编译以上实例文件 TestBean.java ：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ javac TestBean.java</span><br></pre></td></tr></tbody></table></figure><p>在main.jsp文件中调用该Bean:</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;h2&gt;Jsp 使用 JavaBean 实例&lt;/h2&gt;</span><br><span class="line">&lt;jsp:useBean id=<span class="string">"test"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.runoob.main.TestBean"</span> /&gt;</span><br><span class="line"> </span><br><span class="line">&lt;jsp:setProperty name=<span class="string">"test"</span> property=<span class="string">"message"</span> value=<span class="string">"菜鸟教程..."</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;输出信息....&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;jsp:getProperty name=<span class="string">"test"</span> property=<span class="string">"message"</span> /&gt;</span><br></pre></td></tr></tbody></table></figure><p>运行结果</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输出信息...</span><br><span class="line">菜鸟教程...</span><br></pre></td></tr></tbody></table></figure><h4 id="lt-jsp-forward-gt-动作元素"><a href="#lt-jsp-forward-gt-动作元素" class="headerlink" title="<jsp:forward> 动作元素"></a><code>&lt;jsp:forward&gt;</code> 动作元素</h4><p>jsp:forward动作把请求转到另外的页面。</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:forward page=<span class="string">"相对 URL 地址"</span> /&gt;</span><br></pre></td></tr></tbody></table></figure><p>page属性包含的是一个相对URL。page的值既可以直接给出，也可以在请求的时候动态计算，可以是一个JSP页面或者一个 Java Servlet.</p><h4 id="lt-jsp-plugin-gt-动作元素"><a href="#lt-jsp-plugin-gt-动作元素" class="headerlink" title="<jsp:plugin>动作元素"></a><code>&lt;jsp:plugin&gt;</code>动作元素</h4><p><code>jsp:plugin</code>动作用来根据浏览器的类型，插入通过Java插件 运行Java Applet所必需的OBJECT或EMBED元素。</p><p>如果需要的插件不存在，它会下载插件，然后执行Java组件。 Java组件可以是一个applet或一个JavaBean。</p><p>plugin动作有多个对应HTML元素的属性用于格式化Java 组件。param元素可用于向Applet 或 Bean 传递参数。</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:plugin type=<span class="string">"applet"</span> codebase=<span class="string">"dirname"</span> code=<span class="string">"MyApplet.class"</span></span><br><span class="line">                           width=<span class="string">"60"</span> height=<span class="string">"80"</span>&gt;</span><br><span class="line">   &lt;jsp:param name=<span class="string">"fontcolor"</span> value=<span class="string">"red"</span> /&gt;</span><br><span class="line">   &lt;jsp:param name=<span class="string">"background"</span> value=<span class="string">"black"</span> /&gt;</span><br><span class="line"> </span><br><span class="line">   &lt;jsp:fallback&gt;</span><br><span class="line">      Unable to initialize Java Plugin</span><br><span class="line">   &lt;/jsp:fallback&gt;</span><br><span class="line"> </span><br><span class="line">&lt;/jsp:plugin&gt;</span><br></pre></td></tr></tbody></table></figure><p>如果你有兴趣可以尝试使用applet来测试jsp:plugin动作元素，<code>&lt;fallback&gt;</code>元素是一个新元素，在组件出现故障的错误时发送给用户错误信息。</p><h4 id="lt-jsp-element-gt-、-lt-jsp-attribute-gt-、-lt-jsp-body-gt-动作元素"><a href="#lt-jsp-element-gt-、-lt-jsp-attribute-gt-、-lt-jsp-body-gt-动作元素" class="headerlink" title="<jsp:element> 、 <jsp:attribute>、 <jsp:body>动作元素"></a><code>&lt;jsp:element&gt;</code> 、 <code>&lt;jsp:attribute&gt;</code>、 <code>&lt;jsp:body&gt;</code>动作元素</h4><p><code>&lt;jsp:element&gt;</code> 、 <code>&lt;jsp:attribute&gt;</code>、 <code>&lt;jsp:body&gt;</code>动作元素动态定义XML元素。动态是非常重要的，这就意味着XML元素在编译时是动态生成的而非静态。</p><h5 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h5><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">&lt;title&gt;菜鸟教程(runoob.com)&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;jsp:element name=<span class="string">"xmlElement"</span>&gt;</span><br><span class="line">&lt;jsp:attribute name=<span class="string">"xmlElementAttr"</span>&gt;</span><br><span class="line">   属性值</span><br><span class="line">&lt;/jsp:attribute&gt;</span><br><span class="line">&lt;jsp:body&gt;</span><br><span class="line">   XML 元素的主体</span><br><span class="line">&lt;/jsp:body&gt;</span><br><span class="line">&lt;/jsp:element&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p>运行结果</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://www.runoob.com/wp-content/uploads/2014/01/7D8C47F0-0DDE-4F1D-8BE1-B2C9C955683E.jpg" alt="运行结果" title="">                </div>                <div class="image-caption">运行结果</div>            </figure><h2 id="lt-jsp-text-gt-动作元素"><a href="#lt-jsp-text-gt-动作元素" class="headerlink" title="<jsp:text>动作元素"></a><code>&lt;jsp:text&gt;</code>动作元素</h2><p><code>&lt;jsp:text&gt;</code>动作元素允许在JSP页面和文档中使用写入文本的模板，语法格式如下：</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:text&gt;模板数据&lt;/jsp:text&gt;</span><br></pre></td></tr></tbody></table></figure><p>以上文本模板不能包含其他元素，只能只能包含文本和EL表达式（注：EL表达式将在后续章节中介绍）。请注意，在XML文件中，您不能使用表达式如 ${whatever &gt; 0}，因为&gt;符号是非法的。 你可以使用 ${whatever gt 0}表达式或者嵌入在一个CDATA部分的值。</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:text&gt;&lt;![CDATA[&lt;br&gt;]]&gt;&lt;/jsp:text&gt;</span><br></pre></td></tr></tbody></table></figure><p>如果你需要在 XHTML 中声明 DOCTYPE,必须使用到<code>&lt;jsp:text&gt;</code>动作元素，实例如下：</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:text&gt;&lt;![CDATA[&lt;!DOCTYPE html</span><br><span class="line">PUBLIC <span class="string">"-//W3C//DTD XHTML 1.0 Strict//EN"</span></span><br><span class="line"><span class="string">"DTD/xhtml1-strict.dtd"</span>&gt;]]&gt;</span><br><span class="line">&lt;/jsp:text&gt;</span><br><span class="line">&lt;head&gt;&lt;title&gt;jsp:text action&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;books&gt;&lt;book&gt;&lt;jsp:text&gt;  </span><br><span class="line">    Welcome to JSP Programming</span><br><span class="line">&lt;/jsp:text&gt;&lt;/book&gt;&lt;/books&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p>你可以对以上实例尝试使用<code>&lt;jsp:text&gt;</code>及不使用该动作元素执行结果的区别。</p><h2 id="JSP-隐式对象"><a href="#JSP-隐式对象" class="headerlink" title="JSP 隐式对象"></a>JSP 隐式对象</h2><p>JSP隐式对象是JSP容器为每个页面提供的Java对象，开发者可以直接使用它们而不用显式声明。JSP隐式对象也被称为预定义变量。</p><h4 id="request对象"><a href="#request对象" class="headerlink" title="request对象"></a>request对象</h4><p>request对象是javax.servlet.http.HttpServletRequest 类的实例。每当客户端请求一个JSP页面时，JSP引擎就会制造一个新的request对象来代表这个请求。</p><p>request对象提供了一系列方法来获取HTTP头信息，cookies，HTTP方法等等。</p><h4 id="response对象"><a href="#response对象" class="headerlink" title="response对象"></a>response对象</h4><p>response对象是javax.servlet.http.HttpServletResponse类的实例。当服务器创建request对象时会同时创建用于响应这个客户端的response对象。</p><p>response对象也定义了处理HTTP头模块的接口。通过这个对象，开发者们可以添加新的cookies，时间戳，HTTP状态码等等。</p><h4 id="out对象"><a href="#out对象" class="headerlink" title="out对象"></a>out对象</h4><p>out对象是 javax.servlet.jsp.JspWriter 类的实例，用来在response对象中写入内容。</p><p>最初的JspWriter类对象根据页面是否有缓存来进行不同的实例化操作。可以在page指令中使用buffered=’false’属性来轻松关闭缓存。</p><p>JspWriter类包含了大部分java.io.PrintWriter类中的方法。不过，JspWriter新增了一些专为处理缓存而设计的方法。还有就是，JspWriter类会抛出IOExceptions异常，而PrintWriter不会。</p><p>下表列出了我们将会用来输出boolean，char，int，double，String，object等类型数据的重要方法：</p><table><thead><tr><th><strong>方法</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><strong>out.print(dataType dt)</strong></td><td>输出Type类型的值</td></tr><tr><td><strong>out.println(dataType dt)</strong></td><td>输出Type类型的值然后换行</td></tr><tr><td><strong>out.flush()</strong></td><td>刷新输出流</td></tr></tbody></table><h4 id="session对象"><a href="#session对象" class="headerlink" title="session对象"></a>session对象</h4><p>session对象是 javax.servlet.http.HttpSession 类的实例。和Java Servlets中的session对象有一样的行为。</p><p>session对象用来跟踪在各个客户端请求间的会话。</p><h4 id="application对象"><a href="#application对象" class="headerlink" title="application对象"></a>application对象</h4><p>application对象直接包装了servlet的ServletContext类的对象，是javax.servlet.ServletContext 类的实例。</p><p>这个对象在JSP页面的整个生命周期中都代表着这个JSP页面。这个对象在JSP页面初始化时被创建，随着jspDestroy()方法的调用而被移除。</p><p>通过向application中添加属性，则所有组成您web应用的JSP文件都能访问到这些属性。</p><h4 id="config对象"><a href="#config对象" class="headerlink" title="config对象"></a>config对象</h4><p>config对象是 javax.servlet.ServletConfig 类的实例，直接包装了servlet的ServletConfig类的对象。</p><p>这个对象允许开发者访问Servlet或者JSP引擎的初始化参数，比如文件路径等。</p><p>以下是config对象的使用方法，不是很重要，所以不常用：</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config.getServletName();</span><br></pre></td></tr></tbody></table></figure><p>它返回包含在<code>&lt;servlet-name&gt;</code>元素中的servlet名字，注意，<code>&lt;servlet-name&gt;</code>元素在 WEB-INF\web.xml 文件中定义。</p><h4 id="pageContext-对象"><a href="#pageContext-对象" class="headerlink" title="pageContext 对象"></a>pageContext 对象</h4><p>pageContext对象是javax.servlet.jsp.PageContext 类的实例，用来代表整个JSP页面。</p><p>这个对象主要用来访问页面信息，同时过滤掉大部分实现细节。</p><p>这个对象存储了request对象和response对象的引用。application对象，config对象，session对象，out对象可以通过访问这个对象的属性来导出。</p><p>pageContext对象也包含了传给JSP页面的指令信息，包括缓存信息，ErrorPage URL,页面scope等。</p><p>PageContext类定义了一些字段，包括PAGE_SCOPE，REQUEST_SCOPE，SESSION_SCOPE， APPLICATION_SCOPE。它也提供了40余种方法，有一半继承自javax.servlet.jsp.JspContext 类。</p><p>其中一个重要的方法就是removeArribute()，它可接受一个或两个参数。比如，pageContext.removeArribute(“attrName”)移除四个scope中相关属性，但是下面这种方法只移除特定scope中的相关属性：</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pageContext.removeAttribute(<span class="string">"attrName"</span>, PAGE_SCOPE);</span><br></pre></td></tr></tbody></table></figure><h4 id="page-对象"><a href="#page-对象" class="headerlink" title="page 对象"></a>page 对象</h4><p>这个对象就是页面实例的引用。它可以被看做是整个JSP页面的代表。</p><p>page 对象就是this对象的同义词。</p><h4 id="exception-对象"><a href="#exception-对象" class="headerlink" title="exception 对象"></a>exception 对象</h4><p>exception 对象包装了从先前页面中抛出的异常信息。它通常被用来产生对出错条件的适当响应。</p><h1 id="JSP-响应"><a href="#JSP-响应" class="headerlink" title="JSP 响应"></a>JSP 响应</h1><h2 id="JSP-客户端请求"><a href="#JSP-客户端请求" class="headerlink" title="JSP 客户端请求"></a>JSP 客户端请求</h2><p>下表列出了浏览器端信息头的一些重要内容：</p><table><thead><tr><th><strong>信息</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>Accept</td><td>指定浏览器或其他客户端可以处理的MIME类型。它的值通常为 <strong>image/png</strong> 或 <strong>image/jpeg</strong></td></tr><tr><td>Accept-Charset</td><td>指定浏览器要使用的字符集。比如 ISO-8859-1</td></tr><tr><td>Accept-Encoding</td><td>指定编码类型。它的值通常为 <strong>gzip</strong> 或<strong>compress</strong></td></tr><tr><td>Accept-Language</td><td>指定客户端首选语言，servlet会优先返回以当前语言构成的结果集，如果servlet支持这种语言的话。比如 en，en-us，ru等等</td></tr><tr><td>Authorization</td><td>在访问受密码保护的网页时识别不同的用户</td></tr><tr><td>Connection</td><td>表明客户端是否可以处理HTTP持久连接。持久连接允许客户端或浏览器在一个请求中获取多个文件。<strong>Keep-Alive</strong> 表示启用持久连接</td></tr><tr><td>Content-Length</td><td>仅适用于POST请求，表示 POST 数据的字节数</td></tr><tr><td>Cookie</td><td>返回先前发送给浏览器的cookies至服务器</td></tr><tr><td>Host</td><td>指出原始URL中的主机名和端口号</td></tr><tr><td>If-Modified-Since</td><td>表明只有当网页在指定的日期被修改后客户端才需要这个网页。 服务器发送304码给客户端，表示没有更新的资源</td></tr><tr><td>If-Unmodified-Since</td><td>与If-Modified-Since相反， 只有文档在指定日期后仍未被修改过，操作才会成功</td></tr><tr><td>Referer</td><td>标志着所引用页面的URL。比如，如果你在页面1，然后点了个链接至页面2，那么页面1的URL就会包含在浏览器请求页面2的信息头中</td></tr><tr><td>User-Agent</td><td>用来区分不同浏览器或客户端发送的请求，并对不同类型的浏览器返回不同的内容</td></tr></tbody></table><h3 id="HttpServletRequest类"><a href="#HttpServletRequest类" class="headerlink" title="HttpServletRequest类"></a>HttpServletRequest类</h3><p>request对象是javax.servlet.http.HttpServletRequest类的实例。每当客户端请求一个页面时，JSP引擎就会产生一个新的对象来代表这个请求。</p><p>request对象提供了一系列方法来获取HTTP信息头，包括表单数据，cookies，HTTP方法等等。</p><p>一些在JSP编程中常用的获取HTTP信息头的方法：</p><table><thead><tr><th><strong>序号</strong></th><th><strong>方法</strong> <strong>&amp;</strong> <strong>描述</strong></th></tr></thead><tbody><tr><td>1</td><td><strong>Cookie[] getCookies()</strong><br>返回客户端所有的Cookie的数组</td></tr><tr><td>2</td><td><strong>Enumeration getAttributeNames()</strong><br>返回request对象的所有属性名称的集合</td></tr><tr><td>3</td><td><strong>Enumeration getHeaderNames()</strong><br>返回所有HTTP头的名称集合</td></tr><tr><td>4</td><td><strong>Enumeration getParameterNames()</strong><br>返回请求中所有参数的集合</td></tr><tr><td>5</td><td><strong>HttpSession getSession()</strong><br>返回request对应的session对象，如果没有，则创建一个</td></tr><tr><td>6</td><td><strong>HttpSession getSession(boolean create)</strong><br>返回request对应的session对象，如果没有并且参数create为true，则返回一个新的session对象</td></tr><tr><td>7</td><td><strong>Locale getLocale()</strong><br>返回当前页的Locale对象，可以在response中设置</td></tr><tr><td>8</td><td><strong>Object getAttribute(String name)</strong><br>返回名称为name的属性值，如果不存在则返回null。</td></tr><tr><td>9</td><td><strong>ServletInputStream getInputStream()</strong><br>返回请求的输入流</td></tr><tr><td>10</td><td><strong>String getAuthType()</strong><br>返回认证方案的名称，用来保护servlet，比如 “BASIC” 或者 “SSL” 或 null 如果 JSP没设置保护措施</td></tr><tr><td>11</td><td><strong>String getCharacterEncoding()</strong><br>返回request的字符编码集名称</td></tr><tr><td>12</td><td><strong>String getContentType()</strong><br>返回request主体的MIME类型，若未知则返回null</td></tr><tr><td>13</td><td><strong>String getContextPath()</strong><br>返回request URI中指明的上下文路径</td></tr><tr><td>14</td><td><strong>String getHeader(String name)</strong><br>返回name指定的信息头</td></tr><tr><td>15</td><td><strong>String getMethod()</strong><br>返回此request中的HTTP方法，比如 GET,，POST，或PUT</td></tr><tr><td>16</td><td><strong>String getParameter(String name)</strong><br>返回此request中name指定的参数，若不存在则返回null</td></tr><tr><td>17</td><td><strong>String getPathInfo()</strong><br>返回任何额外的与此request URL相关的路径</td></tr><tr><td>18</td><td><strong>String getProtocol()</strong><br>返回此request所使用的协议名和版本</td></tr><tr><td>19</td><td><strong>String getQueryString()</strong><br>返回此 request URL包含的查询字符串</td></tr><tr><td>20</td><td><strong>String getRemoteAddr()</strong><br>返回客户端的IP地址</td></tr><tr><td>21</td><td><strong>String getRemoteHost()</strong><br>返回客户端的完整名称</td></tr><tr><td>22</td><td><strong>String getRemoteUser()</strong><br>返回客户端通过登录认证的用户，若用户未认证则返回null</td></tr><tr><td>23</td><td><strong>String getRequestURI()</strong><br>返回request的URI</td></tr><tr><td>24</td><td><strong>String getRequestedSessionId()</strong><br>返回request指定的session ID</td></tr><tr><td>25</td><td><strong>String getServletPath()</strong><br>返回所请求的servlet路径</td></tr><tr><td>26</td><td><strong>String[] getParameterValues(String name)</strong><br>返回指定名称的参数的所有值，若不存在则返回null</td></tr><tr><td>27</td><td><strong>boolean isSecure()</strong><br>返回request是否使用了加密通道，比如HTTPS</td></tr><tr><td>28</td><td><strong>int getContentLength()</strong><br>返回request主体所包含的字节数，若未知的返回-1</td></tr><tr><td>29</td><td><strong>int getIntHeader(String name)</strong><br>返回指定名称的request信息头的值</td></tr><tr><td>30</td><td><strong>int getServerPort()</strong><br>返回服务器端口号</td></tr></tbody></table><h3 id="HTTP信息头示例"><a href="#HTTP信息头示例" class="headerlink" title="HTTP信息头示例"></a>HTTP信息头示例</h3><p>在这个例子中，我们会使用<code>HttpServletRequest类的getHeaderNames()方法</code>来读取HTTP信息头。这个方法以枚举的形式返回当前HTTP请求的头信息。</p><p>获取Enumeration对象后，用标准的方式来遍历Enumeration对象，用hasMoreElements()方法来确定什么时候停止，用nextElement()方法来获得每个参数的名字。</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.io.*,java.util.*"</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;h2&gt;HTTP 头部请求实例&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">&lt;table width=<span class="string">"100%"</span> border=<span class="string">"1"</span> align=<span class="string">"center"</span>&gt;</span><br><span class="line">    &lt;tr bgcolor=<span class="string">"#949494"</span>&gt;</span><br><span class="line">    &lt;th&gt;Header Name&lt;/th&gt;&lt;th&gt;Header Value(s)&lt;/th&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">       Enumeration headerNames = request.getHeaderNames();</span><br><span class="line">       <span class="keyword">while</span>(headerNames.hasMoreElements()) {</span><br><span class="line">          String paramName = (String)headerNames.nextElement();</span><br><span class="line">          out.print(<span class="string">"&lt;tr&gt;&lt;td&gt;"</span> + paramName + <span class="string">"&lt;/td&gt;\n"</span>);</span><br><span class="line">          String paramValue = request.getHeader(paramName);</span><br><span class="line">          out.println(<span class="string">"&lt;td&gt; "</span> + paramValue + <span class="string">"&lt;/td&gt;&lt;/tr&gt;\n"</span>);</span><br><span class="line">       }</span><br><span class="line">    %&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></tbody></table></figure><p>访问main.jsp，将会得到以下结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://www.runoob.com/wp-content/uploads/2014/01/jspheadmsg.jpg" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><h2 id="JSP-服务器响应"><a href="#JSP-服务器响应" class="headerlink" title="JSP 服务器响应"></a>JSP 服务器响应</h2><p>Response响应对象主要将JSP容器处理后的结果传回到客户端。可以通过response变量设置HTTP的状态和向客户端发送数据，如Cookie、HTTP文件头信息等。</p><p>一个典型的响应看起来就像下面这样：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Header2: ...</span><br><span class="line">...</span><br><span class="line">HeaderN: ...</span><br><span class="line">  (空行)</span><br><span class="line"><span class="meta">&lt;!doctype ...&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>...<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>状态行包含HTTP版本信息，比如HTTP/1.1，一个状态码，比如200，还有一个非常短的信息对应着状态码，比如OK。</p><p>下表摘要出了HTTP1.1响应头中最有用的部分：</p><table><thead><tr><th><strong>响应头</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>Allow</td><td>指定服务器支持的request方法（GET，POST等等）</td></tr><tr><td>Cache-Control</td><td>指定响应文档能够被安全缓存的情况。通常取值为 <strong>public**</strong>，<strong>**private</strong> 或<strong>no-cache</strong> 等等。 Public意味着文档可缓存，Private意味着文档只为单用户服务并且只能使用私有缓存。No-cache 意味着文档不被缓存。</td></tr><tr><td>Connection</td><td>命令浏览器是否要使用持久的HTTP连接。<strong>close**</strong>值** 命令浏览器不使用持久HTTP连接，而keep-alive 意味着使用持久化连接。</td></tr><tr><td>Content-Disposition</td><td>让浏览器要求用户将响应以给定的名称存储在磁盘中</td></tr><tr><td>Content-Encoding</td><td>指定传输时页面的编码规则</td></tr><tr><td>Content-Language</td><td>表述文档所使用的语言，比如en， en-us,，ru等等</td></tr><tr><td>Content-Length</td><td>表明响应的字节数。只有在浏览器使用持久化 (keep-alive) HTTP 连接时才有用</td></tr><tr><td>Content-Type</td><td>表明文档使用的MIME类型</td></tr><tr><td>Expires</td><td>指明啥时候过期并从缓存中移除</td></tr><tr><td>Last-Modified</td><td>指明文档最后修改时间。客户端可以 缓存文档并且在后续的请求中提供一个 <strong>If-Modified-Since</strong>请求头</td></tr><tr><td>Location</td><td>在300秒内，包含所有的有一个状态码的响应地址，浏览器会自动重连然后检索新文档</td></tr><tr><td>Refresh</td><td>指明浏览器每隔多久请求更新一次页面。</td></tr><tr><td>Retry-After</td><td>与503 (Service Unavailable)一起使用来告诉用户多久后请求将会得到响应</td></tr><tr><td>Set-Cookie</td><td>指明当前页面对应的cookie</td></tr></tbody></table><h3 id="HttpServletResponse类"><a href="#HttpServletResponse类" class="headerlink" title="HttpServletResponse类"></a>HttpServletResponse类</h3><p>response 对象是 javax.servlet.http.HttpServletResponse 类的一个实例。就像服务器会创建request对象一样，它也会创建一个客户端响应。</p><p>response对象定义了处理创建HTTP信息头的接口。通过使用这个对象，开发者们可以添加新的cookie或时间戳，还有HTTP状态码等等。</p><p>下表列出了用来设置HTTP响应头的方法，这些方法由HttpServletResponse 类提供：</p><table><thead><tr><th><strong>S.N.</strong></th><th><strong>方法</strong> <strong>&amp;</strong> <strong>描述</strong></th></tr></thead><tbody><tr><td>1</td><td><strong>String encodeRedirectURL(String url)</strong><br>对sendRedirect()方法使用的URL进行编码</td></tr><tr><td>2</td><td><strong>String encodeURL(String url)</strong><br>将URL编码，回传包含Session ID的URL</td></tr><tr><td>3</td><td><strong>boolean containsHeader(String name)</strong><br>返回指定的响应头是否存在</td></tr><tr><td>4</td><td><strong>boolean isCommitted()</strong><br>返回响应是否已经提交到客户端</td></tr><tr><td>5</td><td><strong>void addCookie(Cookie cookie)</strong><br>添加指定的cookie至响应中</td></tr><tr><td>6</td><td><strong>void addDateHeader(String name, long date)</strong><br>添加指定名称的响应头和日期值</td></tr><tr><td>7</td><td><strong>void addHeader(String name, String value)</strong><br>添加指定名称的响应头和值</td></tr><tr><td>8</td><td><strong>void addIntHeader(String name, int value)</strong><br>添加指定名称的响应头和int值</td></tr><tr><td>9</td><td><strong>void flushBuffer()</strong><br>将任何缓存中的内容写入客户端</td></tr><tr><td>10</td><td><strong>void reset()</strong><br>清除任何缓存中的任何数据，包括状态码和各种响应头</td></tr><tr><td>11</td><td><strong>void resetBuffer()</strong><br>清除基本的缓存数据，不包括响应头和状态码</td></tr><tr><td>12</td><td><strong>void sendError(int sc)</strong><br>使用指定的状态码向客户端发送一个出错响应，然后清除缓存</td></tr><tr><td>13</td><td><strong>void sendError(int sc, String msg)</strong><br>使用指定的状态码和消息向客户端发送一个出错响应</td></tr><tr><td>14</td><td><strong>void sendRedirect(String location)</strong><br>使用指定的URL向客户端发送一个临时的间接响应</td></tr><tr><td>15</td><td><strong>void setBufferSize(int size)</strong><br>设置响应体的缓存区大小</td></tr><tr><td>16</td><td><strong>void setCharacterEncoding(String charset)</strong><br>指定响应的编码集（MIME字符集），例如UTF-8</td></tr><tr><td>17</td><td><strong>void setContentLength(int len)</strong><br>指定HTTP servlets中响应的内容的长度，此方法用来设置 HTTP Content-Length 信息头</td></tr><tr><td>18</td><td><strong>void setContentType(String type)</strong><br>设置响应的内容的类型，如果响应还未被提交的话</td></tr><tr><td>19</td><td><strong>void setDateHeader(String name, long date)</strong><br>使用指定名称和值设置响应头的名称和内容</td></tr><tr><td>20</td><td><strong>void setHeader(String name, String value)</strong><br>使用指定名称和值设置响应头的名称和内容</td></tr><tr><td>21</td><td><strong>void setIntHeader(String name, int value)</strong><br>使用指定名称和值设置响应头的名称和内容</td></tr><tr><td>22</td><td><strong>void setLocale(Locale loc)</strong><br>设置响应的语言环境，如果响应尚未被提交的话</td></tr><tr><td>23</td><td><strong>void setStatus(int sc)</strong><br>设置响应的状态码</td></tr></tbody></table><h3 id="HTTP响应头程序示例"><a href="#HTTP响应头程序示例" class="headerlink" title="HTTP响应头程序示例"></a>HTTP响应头程序示例</h3><h4 id="自动刷新实例"><a href="#自动刷新实例" class="headerlink" title="自动刷新实例"></a>自动刷新实例</h4><p>接下来的例子使用setIntHeader()方法和setRefreshHeader()方法来模拟一个数字时钟：</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.io.*,java.util.*"</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;自动刷新实例&lt;/h2&gt;</span><br><span class="line">&lt;%</span><br><span class="line">   <span class="comment">// 设置每隔5秒自动刷新</span></span><br><span class="line">   response.setIntHeader(<span class="string">"Refresh"</span>, <span class="number">5</span>);</span><br><span class="line">   <span class="comment">// 获取当前时间</span></span><br><span class="line">   Calendar calendar = <span class="keyword">new</span> GregorianCalendar();</span><br><span class="line">   String am_pm;</span><br><span class="line">   <span class="keyword">int</span> hour = calendar.get(Calendar.HOUR);</span><br><span class="line">   <span class="keyword">int</span> minute = calendar.get(Calendar.MINUTE);</span><br><span class="line">   <span class="keyword">int</span> second = calendar.get(Calendar.SECOND);</span><br><span class="line">   <span class="keyword">if</span>(calendar.get(Calendar.AM_PM) == <span class="number">0</span>)</span><br><span class="line">      am_pm = <span class="string">"AM"</span>;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">      am_pm = <span class="string">"PM"</span>;</span><br><span class="line">   String CT = hour+<span class="string">":"</span>+ minute +<span class="string">":"</span>+ second +<span class="string">" "</span>+ am_pm;</span><br><span class="line">   out.println(<span class="string">"当前时间: "</span> + CT + <span class="string">"\n"</span>);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p>它将会每隔5秒显示一下系统当前时间。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://www.runoob.com/wp-content/uploads/2014/01/jsp1.gif" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><h2 id="JSP-HTTP-状态码"><a href="#JSP-HTTP-状态码" class="headerlink" title="JSP HTTP 状态码"></a>JSP HTTP 状态码</h2><p>HTTP请求与HTTP响应的格式相近，都有着如下结构：</p><ul><li>以状态行+CRLF（回车换行）开始</li><li>零行或多行头模块+CRLF</li><li>一个空行，比如CRLF</li><li>可选的消息体比如文件，查询数据，查询输出</li></ul><p>一个服务器响应头看起来就像下面这样：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">......</span><br><span class="line">......</span><br></pre></td></tr></tbody></table></figure><p>状态行包含HTTP版本，一个状态码，和状态码相对应的短消息。</p><table><thead><tr><th><strong>状态码</strong></th><th><strong>消息</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>100</td><td>Continue</td><td>只有一部分请求被服务器接收，但只要没被服务器拒绝，客户端就会延续这个请求</td></tr><tr><td>101</td><td>Switching Protocols</td><td>服务器交换机协议</td></tr><tr><td>200</td><td>OK</td><td>请求被确认</td></tr><tr><td>201</td><td>Created</td><td>请求时完整的，新的资源被创建</td></tr><tr><td>202</td><td>Accepted</td><td>请求被接受，但未处理完</td></tr><tr><td>203</td><td>Non-authoritative Information</td><td></td></tr><tr><td>204</td><td>No Content</td><td></td></tr><tr><td>205</td><td>Reset Content</td><td></td></tr><tr><td>206</td><td>Partial Content</td><td></td></tr><tr><td>300</td><td>Multiple Choices</td><td>一个超链接表，用户可以选择一个超链接并访问，最大支持5个超链接</td></tr><tr><td>301</td><td>Moved Permanently</td><td>被请求的页面已经移动到了新的URL下</td></tr><tr><td>302</td><td>Found</td><td>被请求的页面暂时性地移动到了新的URL下</td></tr><tr><td>303</td><td>See Other</td><td>被请求的页面可以在一个不同的URL下找到</td></tr><tr><td>304</td><td>Not Modified</td><td></td></tr><tr><td>305</td><td>Use Proxy</td><td></td></tr><tr><td>306</td><td><em>Unused</em></td><td>已经不再使用此状态码，但状态码被保留</td></tr><tr><td>307</td><td>Temporary Redirect</td><td>被请求的页面暂时性地移动到了新的URL下</td></tr><tr><td>400</td><td>Bad Request</td><td>服务器无法识别请求</td></tr><tr><td>401</td><td>Unauthorized</td><td>被请求的页面需要用户名和密码</td></tr><tr><td>402</td><td>Payment Required</td><td><em>目前还不能使用此状态码</em></td></tr><tr><td>403</td><td>Forbidden</td><td>禁止访问所请求的页面</td></tr><tr><td>404</td><td>Not Found</td><td>服务器无法找到所请求的页面</td></tr><tr><td>405</td><td>Method Not Allowed</td><td>请求中所指定的方法不被允许</td></tr><tr><td>406</td><td>Not Acceptable</td><td>服务器只能创建一个客户端无法接受的响应</td></tr><tr><td>407</td><td>Proxy Authentication Required</td><td>在请求被服务前必须认证一个代理服务器</td></tr><tr><td>408</td><td>Request Timeout</td><td>请求时间超过了服务器所能等待的时间，连接被断开</td></tr><tr><td>409</td><td>Conflict</td><td>请求有矛盾的地方</td></tr><tr><td>410</td><td>Gone</td><td>被请求的页面不再可用</td></tr><tr><td>411</td><td>Length Required</td><td>“Content-Length”没有被定义，服务器拒绝接受请求</td></tr><tr><td>412</td><td>Precondition Failed</td><td>请求的前提条件被服务器评估为false</td></tr><tr><td>413</td><td>Request Entity Too Large</td><td>因为请求的实体太大，服务器拒绝接受请求</td></tr><tr><td>414</td><td>Request-url Too Long</td><td>服务器拒绝接受请求，因为URL太长。多出现在把”POST”请求转换为”GET”请求时所附带的大量查询信息</td></tr><tr><td>415</td><td>Unsupported Media Type</td><td>服务器拒绝接受请求，因为媒体类型不被支持</td></tr><tr><td>417</td><td>Expectation Failed</td><td></td></tr><tr><td>500</td><td>Internal Server Error</td><td>请求不完整，服务器遇见了出乎意料的状况</td></tr><tr><td>501</td><td>Not Implemented</td><td>请求不完整，服务器不提供所需要的功能</td></tr><tr><td>502</td><td>Bad Gateway</td><td>请求不完整，服务器从上游服务器接受了一个无效的响应</td></tr><tr><td>503</td><td>Service Unavailable</td><td>请求不完整，服务器暂时重启或关闭</td></tr><tr><td>504</td><td>Gateway Timeout</td><td>网关超时</td></tr><tr><td>505</td><td>HTTP Version Not Supported</td><td>服务器不支持所指定的HTTP版本</td></tr></tbody></table><h3 id="设置HTTP状态码的方法"><a href="#设置HTTP状态码的方法" class="headerlink" title="设置HTTP状态码的方法"></a>设置HTTP状态码的方法</h3><p>下表列出了HttpServletResponse 类中用来设置状态码的方法：</p><table><thead><tr><th><strong>S.N.</strong></th><th><strong>方法</strong> <strong>&amp;</strong> <strong>描述</strong></th></tr></thead><tbody><tr><td>1</td><td><strong>public void setStatus ( int statusCode )</strong><br>此方法可以设置任意的状态码。如果您的响应包含一个特殊的状态码和一个文档，请确保在用PrintWriter返回任何内容前调用setStatus方法</td></tr><tr><td>2</td><td><strong>public void sendRedirect(String url)</strong><br>此方法产生302响应，同时产生一个 <em>Location</em> 头告诉URL 一个新的文档</td></tr><tr><td>3</td><td><strong>public void sendError(int code, String message)</strong><br>此方法将一个状态码(通常为 404)和一个短消息，自动插入HTML文档中并发回给客户端</td></tr></tbody></table><h3 id="HTTP状态码程序示例"><a href="#HTTP状态码程序示例" class="headerlink" title="HTTP状态码程序示例"></a>HTTP状态码程序示例</h3><p>本例将会发送407错误码给浏览器，然后浏览器将会告诉您”Need authentication!!!”。</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Setting HTTP Status Code&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line">   <span class="comment">// 设置错误代码，并说明原因</span></span><br><span class="line">   response.sendError(<span class="number">407</span>, <span class="string">"Need authentication!!!"</span> );</span><br><span class="line">%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p>访问以上JSP页面，将会得到以下结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://www.runoob.com/wp-content/uploads/2014/01/js_http_status_codes.jpg" alt="js_http_status_codes" title="">                </div>                <div class="image-caption">js_http_status_codes</div>            </figure><h1 id="JSP-表单"><a href="#JSP-表单" class="headerlink" title="JSP 表单"></a>JSP 表单</h1><h2 id="JSP-表单处理"><a href="#JSP-表单处理" class="headerlink" title="JSP 表单处理"></a>JSP 表单处理</h2><p>浏览器中使用 GET 和 POST 方法向服务器提交数据。</p><h3 id="GET-方法"><a href="#GET-方法" class="headerlink" title="GET 方法"></a>GET 方法</h3><p>GET方法将请求的编码信息添加在网址后面，网址与编码信息通过”?”号分隔。如下所示：</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//www.runoob.com/hello?key1=value1&amp;key2=value2</span></span><br></pre></td></tr></tbody></table></figure><p>GET方法是浏览器默认传递参数的方法，一些敏感信息，如密码等建议不使用GET方法。</p><p>用get时，传输数据的大小有限制 （注意不是参数的个数有限制），最大为1024字节。</p><h3 id="POST-方法"><a href="#POST-方法" class="headerlink" title="POST 方法"></a>POST 方法</h3><p>一些敏感信息，如密码等我们可以通过POST方法传递，POST提交数据是隐式的。</p><p>POST提交数据是不可见的，GET是通过在url里面传递的（可以看一下你浏览器的地址栏）。</p><p>JSP使用getParameter()来获得传递的参数，getInputStream()方法用来处理客户端的二进制数据流的请求。</p><hr><h3 id="JSP-读取表单数据"><a href="#JSP-读取表单数据" class="headerlink" title="JSP 读取表单数据"></a>JSP 读取表单数据</h3><ul><li><strong>getParameter():</strong> 使用 request.getParameter() 方法来获取表单参数的值。</li><li><strong>getParameterValues():</strong> 获得如checkbox类（名字相同，但值有多个）的数据。 接收数组变量 ，如checkbox类型</li><li><strong>getParameterNames():</strong>该方法可以取得所有变量的名称，该方法返回一个Emumeration。</li><li><strong>getInputStream():</strong>调用此方法来读取来自客户端的二进制数据流。</li></ul><h4 id="GET-实例"><a href="#GET-实例" class="headerlink" title="GET 实例"></a>GET 实例</h4><p>URL：<code>http://localhost:8080/testjsp/main.jsp?name=小白&amp;url=http://www.baidu.com</code></p><p>读取 name 表单：</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">名字：&lt;%= request.getParameter(<span class="string">"name"</span>)%&gt; &lt;br /&gt;</span><br><span class="line">网址：&lt;%= request.getParameter(<span class="string">"url"</span>)%&gt;</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">名字：小白</span><br><span class="line">网址：http://www.baidu.com</span><br></pre></td></tr></tbody></table></figure><h4 id="POST-实例"><a href="#POST-实例" class="headerlink" title="POST 实例"></a>POST 实例</h4><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;%  <span class="comment">// 解决中文乱码的问题</span></span><br><span class="line">    String name = <span class="keyword">new</span> String((request.getParameter(<span class="string">"name"</span>)).getBytes(<span class="string">"ISO-8859-1"</span>),<span class="string">"UTF-8"</span>);</span><br><span class="line">%&gt;</span><br><span class="line">名字：&lt;%=name%&gt;</span><br><span class="line"></span><br><span class="line">网址：&lt;%= request.getParameter(<span class="string">"url"</span>)%&gt;</span><br></pre></td></tr></tbody></table></figure><p>使用 <strong>new String((request.getParameter(“name”)).getBytes(“ISO-8859-1”),”UTF-8”)</strong>来转换编码，防止中文乱码的发生。</p><h4 id="传递-CHeckbox-实例"><a href="#传递-CHeckbox-实例" class="headerlink" title="传递 CHeckbox 实例"></a>传递 CHeckbox 实例</h4><p>HTML 代码：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"cb"</span> <span class="attr">checked</span>=<span class="string">"checked"</span> /&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>JSP代码：</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;b&gt;是否选中:&lt;/b&gt;</span><br><span class="line">&lt;%= request.getParameter(<span class="string">"cb"</span>)%&gt;</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">on</span><br></pre></td></tr></tbody></table></figure><h4 id="读取所有表单参数"><a href="#读取所有表单参数" class="headerlink" title="读取所有表单参数"></a>读取所有表单参数</h4><p>使用 <strong>HttpServletRequest</strong> 的 <strong>getParameterNames()</strong> 来读取所有表单参数,该方法可以取得所有变量的名称，该方法返回一个枚举。</p><p>有了一个 Enumeration（枚举），就可以调用 hasMoreElements() 方法来确定是否还有元素，以及使用nextElement（）方法来获得每个参数的名称。</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.io.*,java.util.*"</span> %&gt;</span><br><span class="line">&lt;table width=<span class="string">"100%"</span> border=<span class="string">"1"</span> align=<span class="string">"center"</span>&gt;</span><br><span class="line">&lt;tr bgcolor=<span class="string">"#949494"</span>&gt;</span><br><span class="line">&lt;th&gt;参数名&lt;/th&gt;&lt;th&gt;参数值&lt;/th&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;%</span><br><span class="line">   Enumeration paramNames = request.getParameterNames();</span><br><span class="line"></span><br><span class="line">   <span class="keyword">while</span>(paramNames.hasMoreElements()) {</span><br><span class="line">      String paramName = (String)paramNames.nextElement();</span><br><span class="line">      out.print(<span class="string">"&lt;tr&gt;&lt;td&gt;"</span> + paramName + <span class="string">"&lt;/td&gt;\n"</span>);</span><br><span class="line">      String paramValue = request.getParameter(paramName);</span><br><span class="line">      out.println(<span class="string">"&lt;td&gt; "</span> + paramValue + <span class="string">"&lt;/td&gt;&lt;/tr&gt;\n"</span>);</span><br><span class="line">   }</span><br><span class="line">%&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></tbody></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://www.runoob.com/wp-content/uploads/2014/01/jsp5.gif" alt="运行结果" title="">                </div>                <div class="image-caption">运行结果</div>            </figure><h2 id="JSP-过滤器"><a href="#JSP-过滤器" class="headerlink" title="JSP 过滤器"></a>JSP 过滤器</h2><p>过滤器可以动态地拦截请求和响应，以变换或使用包含在请求或响应中的信息。</p><h3 id="Servlet-过滤器方法"><a href="#Servlet-过滤器方法" class="headerlink" title="Servlet 过滤器方法"></a>Servlet 过滤器方法</h3><p>过滤器是一个实现了 javax.servlet.Filter 接口的 Java 类。javax.servlet.Filter 接口定义了三个方法：</p><table><thead><tr><th>序号</th><th>方法 &amp; 描述</th></tr></thead><tbody><tr><td>1</td><td><strong>public void doFilter (ServletRequest, ServletResponse, FilterChain)</strong><br>该方法完成实际的过滤操作，当客户端请求方法与过滤器设置匹配的URL时，Servlet容器将先调用过滤器的doFilter方法。FilterChain用户访问后续过滤器。</td></tr><tr><td>2</td><td><strong>public void init(FilterConfig filterConfig)</strong><br>web 应用程序启动时，web 服务器将创建Filter 的实例对象，并调用其init方法，读取web.xml配置，完成对象的初始化功能，从而为后续的用户请求作好拦截的准备工作（filter对象只会创建一次，init方法也只会执行一次）。开发人员通过init方法的参数，可获得代表当前filter配置信息的FilterConfig对象。</td></tr><tr><td>3</td><td><strong>public void destroy()</strong><br>Servlet容器在销毁过滤器实例前调用该方法，在该方法中释放Servlet过滤器占用的资源。</td></tr></tbody></table><h4 id="FilterConfig-使用"><a href="#FilterConfig-使用" class="headerlink" title="FilterConfig 使用"></a>FilterConfig 使用</h4><p>Filter 的 init 方法中提供了一个 FilterConfig 对象。</p><p>如 web.xml 文件配置如下：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>LoginFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.runoob.test.LogFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>Site<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>菜鸟教程<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>在 init 方法使用 FilterConfig 对象获取参数：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">init</span><span class="params">(FilterConfig config)</span> <span class="keyword">throws</span> ServletException </span>{</span><br><span class="line">    <span class="comment">// 获取初始化参数</span></span><br><span class="line">    String site = config.getInitParameter(<span class="string">"Site"</span>); </span><br><span class="line">    <span class="comment">// 输出初始化参数</span></span><br><span class="line">    System.out.println(<span class="string">"网站名称: "</span> + site); </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="JSP-过滤器实例"><a href="#JSP-过滤器实例" class="headerlink" title="JSP 过滤器实例"></a>JSP 过滤器实例</h4><p><a href="https://www.runoob.com/jsp/jsp-writing-filters.html" target="_blank" rel="noopener">https://www.runoob.com/jsp/jsp-writing-filters.html</a></p><h3 id="使用多个过滤器"><a href="#使用多个过滤器" class="headerlink" title="使用多个过滤器"></a>使用多个过滤器</h3><p>网址同上</p><h2 id="Cookie-处理"><a href="#Cookie-处理" class="headerlink" title="Cookie 处理"></a>Cookie 处理</h2><p>JSP Cookie 处理需要对中文进行编码与解码，方法如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String str = java.net.URLEncoder.encode(<span class="string">"中文"</span>，<span class="string">"UTF-8"</span>); <span class="comment">//编码</span></span><br><span class="line">String str = java.net.URLDecoder.decode(<span class="string">"编码后的字符串"</span>,<span class="string">"UTF-8"</span>); <span class="comment">// 解码</span></span><br></pre></td></tr></tbody></table></figure><h3 id="Cookie-剖析"><a href="#Cookie-剖析" class="headerlink" title="Cookie 剖析"></a>Cookie 剖析</h3><p>HTTP 信息头</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">Date: Fri, <span class="number">04</span> Feb <span class="number">2015</span> <span class="number">21</span>:<span class="number">03</span>:<span class="number">38</span> GMT</span><br><span class="line">Server: Apache/<span class="number">1.3</span>.9 (UNIX) PHP/<span class="number">4.0</span>b3</span><br><span class="line">Set-Cookie: name=runoob; expires=Friday, <span class="number">04</span>-Feb-<span class="number">07</span> <span class="number">22</span>:<span class="number">03</span>:<span class="number">38</span> GMT; </span><br><span class="line">                 path=/; domain=runoob.com</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: text/html</span><br></pre></td></tr></tbody></table></figure><h3 id="Servlet-Cookie-方法"><a href="#Servlet-Cookie-方法" class="headerlink" title="Servlet Cookie 方法"></a>Servlet Cookie 方法</h3><table><thead><tr><th><strong>序号</strong></th><th><strong>方法</strong> <strong>&amp;</strong> <strong>描述</strong></th></tr></thead><tbody><tr><td>1</td><td><strong>public void setDomain(String pattern)</strong><br>设置cookie的域名，比如 runoob.com</td></tr><tr><td>2</td><td><strong>public String getDomain()<br></strong>获取cookie的域名，比如 runoob.com</td></tr><tr><td>3</td><td><strong>public void setMaxAge(int expiry)</strong><br>设置cookie有效期，以秒为单位，默认有效期为当前session的存活时间</td></tr><tr><td>4</td><td><strong>public int getMaxAge()<br></strong>获取cookie有效期，以秒为单位，默认为-1 ，表明cookie会活到浏览器关闭为止</td></tr><tr><td>5</td><td><strong>public String getName()<br></strong>返回 cookie的名称，名称创建后将不能被修改</td></tr><tr><td>6</td><td><strong>public void setValue(String newValue)<br></strong>设置 cookie的值</td></tr><tr><td>7</td><td><strong>public String getValue()<br></strong>获取cookie的值</td></tr><tr><td>8</td><td><strong>public void setPath(String uri)<br></strong>设置cookie 的路径，默认为当前页面目录下的所有URL，还有此目录下的所有子目录</td></tr><tr><td>9</td><td><strong>public String getPath()<br></strong>获取cookie 的路径</td></tr><tr><td>10</td><td><strong>public void setSecure(boolean flag)<br></strong>指明cookie是否要加密传输</td></tr><tr><td>11</td><td><strong>public void setComment(String purpose)<br></strong>设置注释描述 cookie的目的。当浏览器将cookie展现给用户时，注释将会变得非常有用</td></tr><tr><td>12</td><td><strong>public String getComment()</strong><br>返回描述cookie目的的注释，若没有则返回null</td></tr></tbody></table><h3 id="设置-Cookie"><a href="#设置-Cookie" class="headerlink" title="设置 Cookie"></a>设置 Cookie</h3><p>使用JSP设置cookie包含三个步骤：</p><p>*<em>(1)创建一个Cookie对象： *</em>调用Cookie的构造函数，使用一个cookie名称和值做参数，它们都是字符串。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"key"</span>,<span class="string">"value"</span>);</span><br></pre></td></tr></tbody></table></figure><p>请务必牢记，名称和值中都不能包含空格或者如下的字符：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ ] ( ) = , " / ? @ : ;</span><br></pre></td></tr></tbody></table></figure><p><strong>(2) 设置有效期：</strong>调用setMaxAge()函数表明cookie在多长时间（以秒为单位）内有效。下面的操作将有效期设为了24小时。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cookie.setMaxAge(<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>);</span><br></pre></td></tr></tbody></table></figure><p><strong>(3) 将cookie发送至HTTP响应头中：</strong>调用response.addCookie()函数来向HTTP响应头中添加cookie。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.addCookie(cookie);</span><br></pre></td></tr></tbody></table></figure><p><strong>Cookie 实例</strong></p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.net.*"</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">   <span class="comment">// 读取表单提交的 name 内容，并解决中文乱码</span></span><br><span class="line">   String str = URLEncoder.encode(request.getParameter(<span class="string">"name"</span>),<span class="string">"utf-8"</span>);  </span><br><span class="line">   <span class="comment">// 设置 name cookie </span></span><br><span class="line">   Cookie name = <span class="keyword">new</span> Cookie(<span class="string">"name"</span>, str);、</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 设置cookie过期时间为24小时。</span></span><br><span class="line">   name.setMaxAge(<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 在响应头部添加cookie</span></span><br><span class="line">   response.addCookie( name );</span><br><span class="line">%&gt;</span><br><span class="line">&lt;p&gt;名字: &lt;%= request.getParameter("name")%&gt;&lt;/p&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="读取-Cookie"><a href="#读取-Cookie" class="headerlink" title="读取 Cookie"></a>读取 Cookie</h3><p>调用<strong>request.getCookies()</strong>方法来获得一个javax.servlet.http.Cookie对象的数组，然后遍历这个数组，使用<strong>getName()</strong>方法和<strong>getValue()</strong>方法来获取每一个cookie的名称和值。</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.net.*"</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">     Cookie cookie = <span class="keyword">null</span>;</span><br><span class="line">     Cookie[] cookies = <span class="keyword">null</span>;</span><br><span class="line">     <span class="comment">// 获取cookies的数据,是一个数组</span></span><br><span class="line">     cookies = request.getCookies();</span><br><span class="line">     <span class="keyword">if</span>( cookies != <span class="keyword">null</span> ){</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cookies.length; i++)</span><br><span class="line">          {</span><br><span class="line">               cookie = cookies[i];</span><br><span class="line"></span><br><span class="line">               out.print(<span class="string">"参数名 : "</span> + cookie.getName() + <span class="string">"&lt;br&gt;"</span>);</span><br><span class="line">               out.print(<span class="string">"参数值: "</span> + URLDecoder.decode(cookie.getValue(), <span class="string">"utf-8"</span>) +<span class="string">" &lt;br&gt;"</span>);</span><br><span class="line">          }</span><br><span class="line">      }</span><br><span class="line">%&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="删除-Cookie"><a href="#删除-Cookie" class="headerlink" title="删除 Cookie"></a>删除 Cookie</h3><p>将cookie的有效期设置为0</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">     Cookie cookie = <span class="keyword">null</span>;</span><br><span class="line">     Cookie[] cookies = <span class="keyword">null</span>;</span><br><span class="line">     <span class="comment">// 获取当前域名下的cookies，是一个数组</span></span><br><span class="line">     cookies = request.getCookies();</span><br><span class="line">     <span class="keyword">if</span>( cookies != <span class="keyword">null</span> )</span><br><span class="line">     {</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cookies.length; i++)</span><br><span class="line">          {</span><br><span class="line">               cookie = cookies[i];</span><br><span class="line">               <span class="comment">// 确保存在 Cookie</span></span><br><span class="line">               <span class="keyword">if</span>((cookie.getName()).compareTo(<span class="string">"name"</span>) == <span class="number">0</span> )</span><br><span class="line">               {</span><br><span class="line">                    cookie.setMaxAge(<span class="number">0</span>);</span><br><span class="line">                    response.addCookie(cookie);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">               }</span><br><span class="line">          }</span><br><span class="line">    }</span><br><span class="line">%&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="JSP-Session"><a href="#JSP-Session" class="headerlink" title="JSP Session"></a>JSP Session</h2><p>有三种方法来维持客户端与服务器的会话：</p><p><strong>Cookies</strong></p><p>网络服务器可以指定一个唯一的session ID作为cookie来代表每个客户端，用来识别这个客户端接下来的请求。(很多时候浏览器并不一定支持cookie，所以不建议)</p><p><strong>隐藏表单域</strong></p><p>一个网络服务器可以发送一个隐藏的HTML表单域和一个唯一的session ID</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"sessionid"</span> <span class="attr">value</span>=<span class="string">"12345"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>当表单被提交时，指定的名称和值将会自动包含在GET或POST数据中。每当浏览器发送一个请求，session_id的值就可以用来保存不同浏览器的轨迹。</p><p>可能比较有效，但是点击<code>&lt;A HREF&gt;</code>标签中的超链接时不会产生表单提交事件，因此隐藏表单域也不支持通用会话跟踪。</p><p><strong>重写URL</strong></p><p>在每个URL后面添加一些额外的数据来区分会话，服务器能够根据这些数据来关联session标识符。</p><p>举例来说，<a href="http://w3cschool.cc/file.htm;sessionid=12345，" target="_blank" rel="noopener">http://w3cschool.cc/file.htm;sessionid=12345，</a> session标识符为sessionid=12345，服务器可以用这个数据来识别客户端。</p><p>相比而言，重写URL是更好的方式，就算浏览器不支持cookies也能工作，但缺点是您必须为每个URL动态指定session ID，就算这是个简单的HTML页面。</p><h3 id="session对象-1"><a href="#session对象-1" class="headerlink" title="session对象"></a>session对象</h3><p>默认情况下，JSP允许会话跟踪，一个新的HttpSession对象将会自动地为新的客户端实例化。禁止会话跟踪需要显式地关掉它，通过将page指令中session属性值设为false来实现，就像下面这样：</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page session=<span class="string">"false"</span> %&gt;</span><br></pre></td></tr></tbody></table></figure><p>JSP引擎将隐含的session对象暴露给开发者。由于提供了session对象，开发者就可以方便地存储或检索数据。</p><p>ession对象的一些重要方法：</p><table><thead><tr><th><strong>S.N.</strong></th><th><strong>方法</strong> <strong>&amp;</strong> <strong>描述</strong></th></tr></thead><tbody><tr><td>1</td><td><strong>public Object getAttribute(String name)</strong><br>返回session对象中与指定名称绑定的对象，如果不存在则返回null</td></tr><tr><td>2</td><td><strong>public Enumeration getAttributeNames()<br></strong>返回session对象中所有的对象名称</td></tr><tr><td>3</td><td><strong>public long getCreationTime()<br></strong>返回session对象被创建的时间， 以毫秒为单位，从1970年1月1号凌晨开始算起</td></tr><tr><td>4</td><td><strong>public String getId()<br></strong>返回session对象的ID</td></tr><tr><td>5</td><td><strong>public long getLastAccessedTime()<br></strong>返回客户端最后访问的时间，以毫秒为单位，从1970年1月1号凌晨开始算起</td></tr><tr><td>6</td><td><strong>public int getMaxInactiveInterval()<br></strong>返回最大时间间隔，以秒为单位，servlet 容器将会在这段时间内保持会话打开</td></tr><tr><td>7</td><td><strong>public void invalidate()<br></strong>将session无效化，解绑任何与该session绑定的对象</td></tr><tr><td>8</td><td><strong>public boolean isNew()<br></strong>返回是否为一个新的客户端，或者客户端是否拒绝加入session</td></tr><tr><td>9</td><td><strong>public void removeAttribute(String name)</strong><br>移除session中指定名称的对象</td></tr><tr><td>10</td><td><strong>public void setAttribute(String name, Object value) <br></strong>使用指定的名称和值来产生一个对象并绑定到session中</td></tr><tr><td>11</td><td><strong>public void setMaxInactiveInterval(int interval)</strong><br>用来指定时间，以秒为单位，servlet容器将会在这段时间内保持会话有效</td></tr></tbody></table><h4 id="Session-实例"><a href="#Session-实例" class="headerlink" title="Session 实例"></a>Session 实例</h4><p>如何使用HttpSession对象来获取创建时间和最后一次访问时间：</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.io.*,java.util.*"</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">   <span class="comment">// 获取session创建时间</span></span><br><span class="line">   Date createTime = <span class="keyword">new</span> Date(session.getCreationTime());</span><br><span class="line">   <span class="comment">// 获取最后访问页面的时间</span></span><br><span class="line">   Date lastAccessTime = <span class="keyword">new</span> Date(session.getLastAccessedTime());</span><br><span class="line"></span><br><span class="line">   String title = <span class="string">"再次访问"</span>;</span><br><span class="line">   Integer visitCount = <span class="keyword">new</span> Integer(<span class="number">0</span>);</span><br><span class="line">   String visitCountKey = <span class="keyword">new</span> String(<span class="string">"visitCount"</span>);</span><br><span class="line">   String userIDKey = <span class="keyword">new</span> String(<span class="string">"userID"</span>);</span><br><span class="line">   String userID = <span class="keyword">new</span> String(<span class="string">"ABCD"</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 检测网页是否由新的访问用户</span></span><br><span class="line">   <span class="keyword">if</span> (session.isNew()){</span><br><span class="line">      title = <span class="string">"访问"</span>;</span><br><span class="line">      session.setAttribute(userIDKey, userID);</span><br><span class="line">      session.setAttribute(visitCountKey,  visitCount);</span><br><span class="line">   } <span class="keyword">else</span> {</span><br><span class="line">       visitCount = (Integer)session.getAttribute(visitCountKey);</span><br><span class="line">   <span class="keyword">if</span> (visitCount == <span class="keyword">null</span>) visitCount = <span class="number">0</span>; <span class="comment">// 实测可能会是 null</span></span><br><span class="line">       visitCount++;</span><br><span class="line">       userID = (String)session.getAttribute(userIDKey);</span><br><span class="line">       session.setAttribute(visitCountKey,  visitCount);</span><br><span class="line">   }</span><br><span class="line">%&gt;</span><br><span class="line">　　id　　　：&lt;% out.print( session.getId()); %&gt;   &lt;br /&gt;</span><br><span class="line">　创建时间　：&lt;% out.print(createTime); %&gt;         &lt;br /&gt;</span><br><span class="line">最后访问时间：&lt;% out.print(lastAccessTime); %&gt;     &lt;br /&gt;</span><br><span class="line">　用户 ID 　：&lt;% out.print(userID); %&gt;             &lt;br /&gt;</span><br><span class="line">　访问次数　：&lt;% out.print(visitCount); %&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="删除-Session-数据"><a href="#删除-Session-数据" class="headerlink" title="删除 Session 数据"></a>删除 Session 数据</h3><p>当处理完一个用户的会话数据后，您可以有如下选择：</p><ul><li><p>移除一个特定的属性：</p><p>调用public void removeAttribute(String name)  方法来移除指定的属性。</p></li><li><p>删除整个会话：</p><p>调用public void invalidate() 方法来使整个session无效。</p></li><li><p>设置会话有效期：</p><p>调用 public void setMaxInactiveInterval(int interval)  方法来设置session超时。</p></li><li><p>登出用户：</p><p>支持servlet2.4版本的服务器，可以调用 logout()方法来登出用户，并且使所有相关的session无效。</p></li><li><p>配置web.xml文件：</p><p>如果使用的是Tomcat，可以向下面这样配置web.xml文件：</p></li></ul><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>15<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>超时以分钟为单位，Tomcat中的默认的超时时间是30分钟。</p><p>Servlet中的getMaxInactiveInterval( ) 方法以秒为单位返回超时时间。如果在web.xml中配置的是15分钟，则getMaxInactiveInterval( ) 方法将会返回900。</p><h2 id="JSP-文件上传"><a href="#JSP-文件上传" class="headerlink" title="JSP 文件上传"></a>JSP 文件上传</h2><p><a href="https://www.runoob.com/jsp/jsp-file-uploading.html" target="_blank" rel="noopener">https://www.runoob.com/jsp/jsp-file-uploading.html</a></p><p>HTML 代码创建一个文件上传表单。以下几点需要注意：</p><ul><li>表单 <strong>method</strong> 属性应该设置为 <strong>POST</strong> 方法，不能使用 GET 方法。</li><li>表单 <strong>enctype</strong> 属性应该设置为 <strong>multipart/form-data</strong>.</li><li>表单 <strong>action</strong> 属性应该设置为在后端服务器上处理文件上传的 Servlet 文件。下面的实例使用了 <strong>UploadServlet</strong> Servlet 来上传文件。</li><li>上传单个文件，您应该使用单个带有属性 type=”file” 的 &lt;input …/&gt; 标签。为了允许多个文件上传，请包含多个 name 属性值不同的 input 标签。输入标签具有不同的名称属性的值。浏览器会为每个 input 标签关联一个浏览按钮。</li></ul><p>upload.jsp 文件代码如下：</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span></span><br><span class="line">    <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;form method=<span class="string">"post"</span> action=<span class="string">"/TomcatTest/UploadServlet"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span><br><span class="line">选择一个文件:&lt;input type=<span class="string">"file"</span> name=<span class="string">"uploadFile"</span> /&gt;</span><br><span class="line">    &lt;br/&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"上传"</span> /&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="编写后台-Servlet"><a href="#编写后台-Servlet" class="headerlink" title="编写后台 Servlet"></a>编写后台 Servlet</h3><p>见上方网址</p><p>message.jsp 文件代码如下：</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span></span><br><span class="line">    <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;文件上传结果&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;center&gt;</span><br><span class="line">        &lt;h2&gt;${message}&lt;/h2&gt;</span><br><span class="line">    &lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="编译和运行-Servlet"><a href="#编译和运行-Servlet" class="headerlink" title="编译和运行 Servlet"></a>编译和运行 Servlet</h3><p>编译上面的 Servlet UploadServlet，并在 web.xml 文件中创建所需的条目，如下所示：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:web</span>=<span class="string">"http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"2.5"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>UploadServlet<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>UploadServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.runoob.test.UploadServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>UploadServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/TomcatTest/UploadServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h1 id="JSP-功能"><a href="#JSP-功能" class="headerlink" title="JSP 功能"></a>JSP 功能</h1><h2 id="JSP-日期"><a href="#JSP-日期" class="headerlink" title="JSP 日期"></a>JSP 日期</h2><p>第一个构造函数使用当前日期和时间来初始化对象。</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Date()</span><br></pre></td></tr></tbody></table></figure><p>第二个构造函数接受一个参数，这个参数表示从1970年1月1日凌晨至所要表示时间的毫秒数。</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Date(<span class="keyword">long</span> millisec)</span><br></pre></td></tr></tbody></table></figure><p>获取Date对象后，您就能够使用下表列出的所有方法：</p><table><thead><tr><th><strong>序号</strong></th><th><strong>方法</strong> <strong>&amp;</strong> <strong>描述</strong></th></tr></thead><tbody><tr><td>1</td><td><strong>boolean after(Date date)</strong><br>如果比给定的日期晚，则返回true，否则返回false</td></tr><tr><td>2</td><td><strong>boolean before(Date date)<br></strong>如果比给定的日期早，则返回true，否则返回false</td></tr><tr><td>3</td><td><strong>Object clone( )<br></strong>获取当前对象的一个副本</td></tr><tr><td>4</td><td><strong>int compareTo(Date date)<br></strong>如果与给定日期相等，则返回0，如果比给定日期早，则返回一个负数，如果比给定日期晚，则返回一个正数</td></tr><tr><td>5</td><td><strong>int compareTo(Object obj)<br></strong>与 compareTo(Date) 方法相同，如果 obj 不是Date类或其子类的对象，抛出ClassCastException异常</td></tr><tr><td>6</td><td><strong>boolean equals(Object date)</strong><br>如果与给定日期相同，则返回true，否则返回false</td></tr><tr><td>7</td><td><strong>long getTime( )<br></strong>返回从1970年1月1日凌晨至此对象所表示时间的毫秒数</td></tr><tr><td>8</td><td><strong>int hashCode( )<br></strong>返回此对象的哈希码</td></tr><tr><td>9</td><td><strong>void setTime(long time)<br></strong>使用给定参数设置时间和日期，参数time表示从1970年1月1日凌晨至time所经过的毫秒数</td></tr><tr><td>10</td><td><strong>String toString( )<br></strong>将此对象转换为字符串并返回这个字符串</td></tr></tbody></table><h2 id="获取当前日期和时间"><a href="#获取当前日期和时间" class="headerlink" title="获取当前日期和时间"></a>获取当前日期和时间</h2><p>使用JSP编程可以很容易的获取当前日期和时间，使用Date对象的toString()方法</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.util.*"</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">   Date date = <span class="keyword">new</span> Date();</span><br><span class="line">   out.print( <span class="string">"&lt;h2 align=\"center\"&gt;"</span> +date.toString()+<span class="string">"&lt;/h2&gt;"</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sat Jun 25 17:54:34 CST 2016</span><br></pre></td></tr></tbody></table></figure><h3 id="日期比较"><a href="#日期比较" class="headerlink" title="日期比较"></a>日期比较</h3><p>比较两个日期</p><ul><li>使用getTime()方法得到毫秒数，然后比较毫秒数就行了。</li><li>使用before()，after()，equals()方法。比如，new Date(99,2,12).before(new Date(99,2,18))返回true。</li><li>使用compareTo()方法，这个方法在Comparable接口中定义，在Date中实现。</li></ul><h3 id="使用SimpleDateFormat格式化日期"><a href="#使用SimpleDateFormat格式化日期" class="headerlink" title="使用SimpleDateFormat格式化日期"></a>使用SimpleDateFormat格式化日期</h3><p>SimpleDateFormat使用一种地区敏感的方式来格式化和解析日期，它允许您使用自定义的模式来格式化日期和时间。</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.io.*,java.util.*,javax.servlet.*,java.text.*"</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">   Date dNow = <span class="keyword">new</span> Date( );</span><br><span class="line">   SimpleDateFormat ft = </span><br><span class="line">   <span class="keyword">new</span> SimpleDateFormat (<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">   out.print( <span class="string">"&lt;h2 align=\"center\"&gt;"</span> + ft.format(dNow) + <span class="string">"&lt;/h2&gt;"</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2016-06-25 17:57:53</span><br></pre></td></tr></tbody></table></figure><h3 id="SimpleDateFormat格式码"><a href="#SimpleDateFormat格式码" class="headerlink" title="SimpleDateFormat格式码"></a>SimpleDateFormat格式码</h3><p>要指定模式字符串，需要使用下表列出的格式码：</p><table><thead><tr><th><strong>字符</strong></th><th><strong>描述</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td>G</td><td>时代标识符</td><td>AD</td></tr><tr><td>y</td><td>4位数年份</td><td>2001</td></tr><tr><td>M</td><td>月</td><td>July or 07</td></tr><tr><td>d</td><td>日</td><td>10</td></tr><tr><td>h</td><td>12小时制， A.M./P.M. (1~12)</td><td>12</td></tr><tr><td>H</td><td>24小时制</td><td>22</td></tr><tr><td>m</td><td>分钟</td><td>30</td></tr><tr><td>s</td><td>秒</td><td>55</td></tr><tr><td>S</td><td>毫秒</td><td>234</td></tr><tr><td>E</td><td>星期</td><td>Tuesday</td></tr><tr><td>D</td><td>一年中的某天</td><td>360</td></tr><tr><td>F</td><td>一个月中某星期的某天</td><td>2 (second Wed. in July)</td></tr><tr><td>w</td><td>一年中的某星期</td><td>40</td></tr><tr><td>W</td><td>一个月中的某星期</td><td>1</td></tr><tr><td>a</td><td>A.M./P.M. 标记</td><td>PM</td></tr><tr><td>k</td><td>一天中的某个小时 (1~24)</td><td>24</td></tr><tr><td>K</td><td>一天中的某个小时，A.M./P.M. (0~11)</td><td>10</td></tr><tr><td>z</td><td>时区</td><td>Eastern Standard Time</td></tr><tr><td>‘</td><td>文本分隔</td><td>Delimiter</td></tr><tr><td>“</td><td>单引号</td><td>`</td></tr></tbody></table><h2 id="JSP-页面重定向"><a href="#JSP-页面重定向" class="headerlink" title="JSP 页面重定向"></a>JSP 页面重定向</h2><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.io.*,java.util.*"</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">   String site = <span class="keyword">new</span> String(<span class="string">"http://www.runoob.com"</span>);</span><br><span class="line">   response.setStatus(response.SC_MOVED_TEMPORARILY);</span><br><span class="line">   response.setHeader(<span class="string">"Location"</span>, site); </span><br><span class="line">%&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="JSP-点击量统计"><a href="#JSP-点击量统计" class="headerlink" title="JSP 点击量统计"></a>JSP 点击量统计</h2><p>利用应用程序隐式对象和相关方法getAttribute()和setAttribute()来实现</p><p>在应用中创建变量的语法：</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">application.setAttribute(String Key, Object Value);</span><br></pre></td></tr></tbody></table></figure><p>读取变量的方法如下：</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">application.getAttribute(String Key);</span><br></pre></td></tr></tbody></table></figure><p><strong>点击量统计实例</strong>：</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.io.*,java.util.*"</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    Integer hitsCount = (Integer)application.getAttribute(<span class="string">"hitCounter"</span>);</span><br><span class="line">    <span class="keyword">if</span>( hitsCount ==<span class="keyword">null</span> || hitsCount == <span class="number">0</span> )</span><br><span class="line">    {</span><br><span class="line">        <span class="comment">/* 第一次访问 */</span></span><br><span class="line">        out.println(<span class="string">"欢迎访问!"</span>);</span><br><span class="line">        hitsCount = <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">        <span class="comment">/* 返回访问值 */</span></span><br><span class="line">        out.println(<span class="string">"欢迎再次访问!"</span>);</span><br><span class="line">        hitsCount += <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    application.setAttribute(<span class="string">"hitCounter"</span>, hitsCount);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;页面访问量为: &lt;%= hitsCount%&gt;&lt;/p&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="复位计数器"><a href="#复位计数器" class="headerlink" title="复位计数器"></a>复位计数器</h3><p>使用以上方法，在 web 服务器重启后，计数器会被复位为 0，即前面保留的数据都会消失。可以使用数据库或者文件来保存。</p><h2 id="JSP-自动刷新"><a href="#JSP-自动刷新" class="headerlink" title="JSP 自动刷新"></a>JSP 自动刷新</h2><p>方法的签名如下：</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIntHeader</span><span class="params">(String header, <span class="keyword">int</span> headerValue)</span></span></span><br></pre></td></tr></tbody></table></figure><p><strong>自动刷新实例</strong>：</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.io.*,java.util.*"</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">   <span class="comment">// 设置每隔5秒刷新一次</span></span><br><span class="line">   response.setIntHeader(<span class="string">"Refresh"</span>, <span class="number">5</span>);</span><br><span class="line">   <span class="comment">// 获取当前时间</span></span><br><span class="line">   Calendar calendar = <span class="keyword">new</span> GregorianCalendar();</span><br><span class="line">   String am_pm;</span><br><span class="line">   <span class="keyword">int</span> hour = calendar.get(Calendar.HOUR);</span><br><span class="line">   <span class="keyword">int</span> minute = calendar.get(Calendar.MINUTE);</span><br><span class="line">   <span class="keyword">int</span> second = calendar.get(Calendar.SECOND);</span><br><span class="line">   <span class="keyword">if</span>(calendar.get(Calendar.AM_PM) == <span class="number">0</span>)</span><br><span class="line">      am_pm = <span class="string">"AM"</span>;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">      am_pm = <span class="string">"PM"</span>;</span><br><span class="line">   String CT = hour+<span class="string">":"</span>+ minute +<span class="string">":"</span>+ second +<span class="string">" "</span>+ am_pm;</span><br><span class="line">   out.println(<span class="string">"当前时间为: "</span> + CT + <span class="string">"\n"</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当前时间为: 6:5:36 PM</span><br></pre></td></tr></tbody></table></figure><h2 id="JSP-发送邮件"><a href="#JSP-发送邮件" class="headerlink" title="JSP 发送邮件"></a>JSP 发送邮件</h2><p><a href="https://www.runoob.com/jsp/jsp-sending-email.html" target="_blank" rel="noopener">https://www.runoob.com/jsp/jsp-sending-email.html</a></p><h3 id="发送简单的邮件"><a href="#发送简单的邮件" class="headerlink" title="发送简单的邮件"></a>发送简单的邮件</h3><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.io.*,java.util.*,javax.mail.*"</span>%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"javax.mail.internet.*,javax.activation.*"</span>%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"javax.servlet.http.*,javax.servlet.*"</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">   String result;</span><br><span class="line">   <span class="comment">// 收件人的电子邮件</span></span><br><span class="line">   String to = <span class="string">"abcd@gmail.com"</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 发件人的电子邮件</span></span><br><span class="line">   String from = <span class="string">"mcmohd@gmail.com"</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 假设你是从本地主机发送电子邮件</span></span><br><span class="line">   String host = <span class="string">"localhost"</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 获取系统属性对象</span></span><br><span class="line">   Properties properties = System.getProperties();</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 设置邮件服务器</span></span><br><span class="line">   properties.setProperty(<span class="string">"mail.smtp.host"</span>, host);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 获取默认的Session对象。</span></span><br><span class="line">   Session mailSession = Session.getDefaultInstance(properties);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">try</span>{</span><br><span class="line">      <span class="comment">// 创建一个默认的MimeMessage对象。</span></span><br><span class="line">      MimeMessage message = <span class="keyword">new</span> MimeMessage(mailSession);</span><br><span class="line">      <span class="comment">// 设置 From: 头部的header字段</span></span><br><span class="line">      message.setFrom(<span class="keyword">new</span> InternetAddress(from));</span><br><span class="line">      <span class="comment">// 设置 To: 头部的header字段</span></span><br><span class="line">      message.addRecipient(Message.RecipientType.TO,</span><br><span class="line">                               <span class="keyword">new</span> InternetAddress(to));</span><br><span class="line">      <span class="comment">// 设置 Subject: header字段</span></span><br><span class="line">      message.setSubject(<span class="string">"This is the Subject Line!"</span>);</span><br><span class="line">      <span class="comment">// 现在设置的实际消息</span></span><br><span class="line">      message.setText(<span class="string">"This is actual message"</span>);</span><br><span class="line">      <span class="comment">// 发送消息</span></span><br><span class="line">      Transport.send(message);</span><br><span class="line">      result = <span class="string">"Sent message successfully...."</span>;</span><br><span class="line">   }<span class="keyword">catch</span> (MessagingException mex) {</span><br><span class="line">      mex.printStackTrace();</span><br><span class="line">      result = <span class="string">"Error: unable to send message...."</span>;</span><br><span class="line">   }</span><br><span class="line">%&gt;</span><br><span class="line">&lt;% </span><br><span class="line">   out.println(<span class="string">"Result: "</span> + result + <span class="string">"\n"</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></tbody></table></figure><p>发送给多人：</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addRecipients</span><span class="params">(Message.RecipientType type, </span></span></span><br><span class="line"><span class="function"><span class="params">                   Address[] addresses)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> MessagingException</span></span><br></pre></td></tr></tbody></table></figure><h3 id="HTML-邮件、附件"><a href="#HTML-邮件、附件" class="headerlink" title="HTML 邮件、附件"></a>HTML 邮件、附件</h3><p>见上方网址</p><h1 id="JSP-高级教程"><a href="#JSP-高级教程" class="headerlink" title="JSP 高级教程"></a>JSP 高级教程</h1><h2 id="JSP-标准标签库（JSTL）"><a href="#JSP-标准标签库（JSTL）" class="headerlink" title="JSP 标准标签库（JSTL）"></a>JSP 标准标签库（JSTL）</h2><p>JSP标准标签库（JSTL）是一个JSP标签集合，它封装了JSP应用的通用核心功能。</p><p>JSTL支持通用的、结构化的任务，比如迭代，条件判断，XML文档操作，国际化标签，SQL标签。 除了这些，它还提供了一个框架来使用集成JSTL的自定义标签。</p><p>根据JSTL标签所提供的功能，可以将其分为5个类别。</p><ul><li><strong>核心标签</strong></li><li><strong>格式化标签</strong></li><li><strong>SQL 标签</strong></li><li><strong>XML 标签</strong></li><li><strong>JSTL 函数</strong></li></ul><h3 id="JSTL-库安装"><a href="#JSTL-库安装" class="headerlink" title="JSTL 库安装"></a>JSTL 库安装</h3><p>官方下载地址：<a href="http://archive.apache.org/dist/jakarta/taglibs/standard/binaries/" target="_blank" rel="noopener">http://archive.apache.org/dist/jakarta/taglibs/standard/binaries/</a></p><p>标签库安装方法：<a href="https://www.runoob.com/jsp/jsp-jstl.html" target="_blank" rel="noopener">https://www.runoob.com/jsp/jsp-jstl.html</a></p><h3 id="核心标签"><a href="#核心标签" class="headerlink" title="核心标签"></a>核心标签</h3><p>核心标签是最常用的JSTL标签。</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> </span><br><span class="line">           uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span><br></pre></td></tr></tbody></table></figure><p>所有标签库请访问上方的标签库网址。</p><h3 id="格式化标签"><a href="#格式化标签" class="headerlink" title="格式化标签"></a>格式化标签</h3><p>用来格式化并输出文本、日期、时间、数字。</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">"fmt"</span> </span><br><span class="line">           uri=<span class="string">"http://java.sun.com/jsp/jstl/fmt"</span> %&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="格式化标签-1"><a href="#格式化标签-1" class="headerlink" title="格式化标签"></a>格式化标签</h3><p>用来格式化并输出文本、日期、时间、数字。</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">"fmt"</span> </span><br><span class="line">           uri=<span class="string">"http://java.sun.com/jsp/jstl/fmt"</span> %&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="SQL标签"><a href="#SQL标签" class="headerlink" title="SQL标签"></a>SQL标签</h3><p>提供了与关系型数据库（Oracle，MySQL，SQL Server等等）进行交互的标签。</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">"sql"</span> </span><br><span class="line">           uri=<span class="string">"http://java.sun.com/jsp/jstl/sql"</span> %&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="XML-标签"><a href="#XML-标签" class="headerlink" title="XML 标签"></a>XML 标签</h2><p>提供了创建和操作XML文档的标签。</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">"x"</span> </span><br><span class="line">           uri=<span class="string">"http://java.sun.com/jsp/jstl/xml"</span> %&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="JSTL函数"><a href="#JSTL函数" class="headerlink" title="JSTL函数"></a>JSTL函数</h2><p>JSTL包含一系列标准函数，大部分是通用的<strong>字符串处理函数</strong>。</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">"fn"</span> </span><br><span class="line">           uri=<span class="string">"http://java.sun.com/jsp/jstl/functions"</span> %&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="JSP-数据库"><a href="#JSP-数据库" class="headerlink" title="JSP 数据库"></a>JSP 数据库</h2><p>jar 包下载地址：<a href="http://static.runoob.com/download/mysql-connector-java-5.1.39-bin.jar" target="_blank" rel="noopener">http://static.runoob.com/download/mysql-connector-java-5.1.39-bin.jar</a></p><p>下载后把 mysql-connector-java-5.1.39-bin.jar 拷贝到 tomcat 下 lib 目录。</p><h3 id="创建测试数据"><a href="#创建测试数据" class="headerlink" title="创建测试数据"></a>创建测试数据</h3><p>在 MySQL 中创建 RUNOOB 数据库，并创建 websites 数据表，表结构如下：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`websites`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">char</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'站点名称'</span>,</span><br><span class="line">  <span class="string">`url`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span>,</span><br><span class="line">  <span class="string">`alexa`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'Alexa 排名'</span>,</span><br><span class="line">  <span class="string">`country`</span> <span class="built_in">char</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'国家'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">10</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></tbody></table></figure><p>插入一些数据：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`websites`</span> <span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="string">'Google'</span>, <span class="string">'https://www.google.cm/'</span>, <span class="string">'1'</span>, <span class="string">'USA'</span>), (<span class="string">'2'</span>, <span class="string">'淘宝'</span>, <span class="string">'https://www.taobao.com/'</span>, <span class="string">'13'</span>, <span class="string">'CN'</span>), (<span class="string">'3'</span>, <span class="string">'菜鸟教程'</span>, <span class="string">'http://www.runoob.com'</span>, <span class="string">'5892'</span>, <span class="string">''</span>), (<span class="string">'4'</span>, <span class="string">'微博'</span>, <span class="string">'http://weibo.com/'</span>, <span class="string">'20'</span>, <span class="string">'CN'</span>), (<span class="string">'5'</span>, <span class="string">'Facebook'</span>, <span class="string">'https://www.facebook.com/'</span>, <span class="string">'3'</span>, <span class="string">'USA'</span>);</span><br></pre></td></tr></tbody></table></figure><h3 id="SELECT-操作"><a href="#SELECT-操作" class="headerlink" title="SELECT 操作"></a>SELECT 操作</h3><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.io.*,java.util.*,java.sql.*"</span>%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"javax.servlet.http.*,javax.servlet.*"</span> %&gt;</span><br><span class="line">&lt;%@ taglib uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> prefix=<span class="string">"c"</span>%&gt;</span><br><span class="line">&lt;%@ taglib uri=<span class="string">"http://java.sun.com/jsp/jstl/sql"</span> prefix=<span class="string">"sql"</span>%&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--</span><br><span class="line">    JDBC 驱动名及数据库 URL </span><br><span class="line">    数据库的用户名与密码，需要根据自己的设置</span><br><span class="line">    useUnicode=<span class="keyword">true</span>&amp;characterEncoding=utf-<span class="number">8</span> 防止中文乱码</span><br><span class="line"> --&gt;</span><br><span class="line">&lt;sql:setDataSource <span class="keyword">var</span>=<span class="string">"snapshot"</span> driver=<span class="string">"com.mysql.jdbc.Driver"</span></span><br><span class="line">     url=<span class="string">"jdbc:mysql://localhost:3306/RUNOOB?useUnicode=true&amp;characterEncoding=utf-8"</span></span><br><span class="line">     user=<span class="string">"root"</span>  password=<span class="string">"123456"</span>/&gt;</span><br><span class="line"> </span><br><span class="line">&lt;!-- 查询操作到 result --&gt;</span><br><span class="line">&lt;sql:query dataSource=<span class="string">"${snapshot}"</span> <span class="keyword">var</span>=<span class="string">"result"</span>&gt;</span><br><span class="line">SELECT * from websites;</span><br><span class="line">&lt;/sql:query&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 展示查询结果 --&gt;</span><br><span class="line">&lt;c:forEach <span class="keyword">var</span>=<span class="string">"row"</span> items=<span class="string">"${result.rows}"</span>&gt;</span><br><span class="line">    ID:&lt;c:out value=<span class="string">"${row.id}"</span>/&gt;&lt;br /&gt;</span><br><span class="line">    站点名:&lt;c:out value=<span class="string">"${row.name}"</span>/&gt;&lt;br /&gt;</span><br><span class="line">    站点地址:&lt;c:out value=<span class="string">"${row.url}"</span>/&gt;&lt;br /&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="INSERT-操作"><a href="#INSERT-操作" class="headerlink" title="INSERT 操作"></a>INSERT 操作</h3><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 插入数据 --&gt;</span><br><span class="line">&lt;sql:update dataSource=<span class="string">"${snapshot}"</span> <span class="keyword">var</span>=<span class="string">"result"</span>&gt;</span><br><span class="line">    <span class="function">INSERT INTO <span class="title">websites</span> <span class="params">(name,url,alexa,country)</span> <span class="title">VALUES</span> <span class="params">(<span class="string">'昂昂'</span>, <span class="string">'http://m.baidu.com'</span>, <span class="number">5093</span>, <span class="string">'CN'</span>)</span></span>;</span><br><span class="line">&lt;/sql:update&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="DELETE-操作"><a href="#DELETE-操作" class="headerlink" title="DELETE 操作"></a>DELETE 操作</h3><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 删除 ID 为 <span class="number">11</span> 的数据 --&gt;</span><br><span class="line">&lt;sql:update dataSource=<span class="string">"${snapshot}"</span> <span class="keyword">var</span>=<span class="string">"count"</span>&gt;</span><br><span class="line">    DELETE FROM websites WHERE Id = ?</span><br><span class="line">    &lt;sql:param value=<span class="string">"${11}"</span> /&gt;</span><br><span class="line">&lt;/sql:update&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="UPDATE-操作"><a href="#UPDATE-操作" class="headerlink" title="UPDATE 操作"></a>UPDATE 操作</h3><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 修改 ID 为 <span class="number">3</span> 的名字为 RUNOOB --&gt;</span><br><span class="line">&lt;c:set <span class="keyword">var</span>=<span class="string">"SiteId"</span> value=<span class="string">"3"</span>/&gt;</span><br><span class="line"> </span><br><span class="line">&lt;sql:update dataSource=<span class="string">"${snapshot}"</span> <span class="keyword">var</span>=<span class="string">"count"</span>&gt;</span><br><span class="line">    UPDATE websites SET name = <span class="string">'RUNOOB'</span> WHERE Id = ?</span><br><span class="line">    &lt;sql:param value=<span class="string">"${SiteId}"</span> /&gt;</span><br><span class="line">&lt;/sql:update&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="JSP-XML-数据处理"><a href="#JSP-XML-数据处理" class="headerlink" title="JSP XML 数据处理"></a>JSP XML 数据处理</h2><h3 id="发送-XML"><a href="#发送-XML" class="headerlink" title="发送 XML"></a>发送 XML</h3><p>和发送 HTML 一样，但是需要把页面的context属性设置为text/xml</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/xml"</span> %&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="处理-XML"><a href="#处理-XML" class="headerlink" title="处理 XML"></a>处理 XML</h3><p>需要将与XML 和XPath相关的两个库文件放在<code>&lt;Tomcat Installation Directory&gt;\lib</code>目录下：</p><ul><li>XercesImpl.jar：在这下载<a href="http://www.apache.org/dist/xerces/j/" target="_blank" rel="noopener">http://www.apache.org/dist/xerces/j/</a></li><li>xalan.jar：在这下载<a href="http://xml.apache.org/xalan-j/index.html" target="_blank" rel="noopener">http://xml.apache.org/xalan-j/index.html</a></li></ul><p>books.xml文件:</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">books</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">book</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Padam History<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">author</span>&gt;</span>ZARA<span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">price</span>&gt;</span>100<span class="tag">&lt;/<span class="name">price</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">book</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">book</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Great Mistry<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">author</span>&gt;</span>NUHA<span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">price</span>&gt;</span>2000<span class="tag">&lt;/<span class="name">price</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">book</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">books</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>main.jsp文件：</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"x"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/xml"</span> %&gt;</span><br><span class="line"> </span><br><span class="line">&lt;c:<span class="keyword">import</span> <span class="keyword">var</span>=<span class="string">"bookInfo"</span> url=<span class="string">"http://localhost:8080/books.xml"</span>/&gt;</span><br><span class="line">&lt;x:parse xml=<span class="string">"${bookInfo}"</span> <span class="keyword">var</span>=<span class="string">"output"</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;b&gt;The title of the first book is&lt;/b&gt;: </span><br><span class="line">&lt;x:out select=<span class="string">"$output/books/book[1]/name"</span> /&gt; &lt;br&gt;</span><br><span class="line">&lt;b&gt;The price of the second book&lt;/b&gt;: </span><br><span class="line">&lt;x:out select=<span class="string">"$output/books/book[2]/price"</span> /&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="格式化-XML"><a href="#格式化-XML" class="headerlink" title="格式化 XML"></a>格式化 XML</h3><p>这个是XSLT样式表style.xsl文件：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xsl:stylesheet</span> <span class="attr">xmlns:xsl</span>= <span class="string">"http://www.w3.org/1999/XSL/Transform"</span> <span class="attr">version</span>=<span class="string">"1.0"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsl:output</span> <span class="attr">method</span>=<span class="string">"html"</span> <span class="attr">indent</span>=<span class="string">"yes"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsl:template</span> <span class="attr">match</span>=<span class="string">"/"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">xsl:apply-templates</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsl:template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsl:template</span> <span class="attr">match</span>=<span class="string">"books"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">width</span>=<span class="string">"100%"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsl:for-each</span> <span class="attr">select</span>=<span class="string">"book"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">i</span>&gt;</span><span class="tag">&lt;<span class="name">xsl:value-of</span> <span class="attr">select</span>=<span class="string">"name"</span>/&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">xsl:value-of</span> <span class="attr">select</span>=<span class="string">"author"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">xsl:value-of</span> <span class="attr">select</span>=<span class="string">"price"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsl:for-each</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsl:template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsl:stylesheet</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>这个是main.jsp文件：</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"x"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/xml"</span> %&gt;</span><br><span class="line"> </span><br><span class="line">&lt;h3&gt;Books Info:&lt;/h3&gt;</span><br><span class="line">&lt;c:set <span class="keyword">var</span>=<span class="string">"xmltext"</span>&gt;</span><br><span class="line">    &lt;books&gt;</span><br><span class="line">        &lt;book&gt;</span><br><span class="line">            &lt;name&gt;Padam History&lt;/name&gt;</span><br><span class="line">            &lt;author&gt;ZARA&lt;/author&gt;</span><br><span class="line">            &lt;price&gt;100&lt;/price&gt;</span><br><span class="line">        &lt;/book&gt;</span><br><span class="line">        &lt;book&gt;</span><br><span class="line">            &lt;name&gt;Great Mistry&lt;/name&gt;</span><br><span class="line">            &lt;author&gt;NUHA&lt;/author&gt;</span><br><span class="line">            &lt;price&gt;2000&lt;/price&gt;</span><br><span class="line">        &lt;/book&gt;</span><br><span class="line">    &lt;/books&gt;</span><br><span class="line">&lt;/c:set&gt;</span><br><span class="line"> </span><br><span class="line">&lt;c:<span class="keyword">import</span> url=<span class="string">"http://localhost:8080/style.xsl"</span> <span class="keyword">var</span>=<span class="string">"xslt"</span>/&gt;</span><br><span class="line">&lt;x:transform xml=<span class="string">"${xmltext}"</span> xslt=<span class="string">"${xslt}"</span>/&gt;</span><br></pre></td></tr></tbody></table></figure><p>运行结果如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://www.runoob.com/wp-content/uploads/2014/01/xml-1.jpg" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><h2 id="JavaBean"><a href="#JavaBean" class="headerlink" title="JavaBean"></a>JavaBean</h2><p>JavaBean是特殊的Java类，使用J ava语言书写，并且遵守JavaBean API规范。</p><p>JavaBean与其它Java类相比而言独一无二的特征：</p><ul><li>提供一个默认的无参构造函数。</li><li>需要被序列化并且实现了Serializable接口。</li><li>可能有一系列可读写属性。</li><li>可能有一系列的”getter”或”setter”方法。</li></ul><p>一个只读的属性只提供getPropertyName()方法，一个只写的属性只提供setPropertyName()方法。</p><h3 id="访问-JavaBean"><a href="#访问-JavaBean" class="headerlink" title="访问 JavaBean"></a>访问 JavaBean</h3><p><code>&lt;jsp:useBean&gt;</code> 标签可以在JSP中声明一个JavaBean，然后使用。声明后，JavaBean对象就成了脚本变量，可以通过脚本元素或其他自定义标签来访问。</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:useBean id=<span class="string">"bean 的名字"</span> scope=<span class="string">"bean 的作用域"</span> typeSpec/&gt;</span><br></pre></td></tr></tbody></table></figure><p>其中，根据具体情况，scope的值可以是page，request，session或application。id值可任意只要不和同一JSP文件中其它<code>&lt;jsp:useBean&gt;</code>中id值一样就行了。</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;jsp:useBean id=<span class="string">"date"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"java.util.Date"</span> /&gt; </span><br><span class="line">&lt;p&gt;日期为：&lt;%= date %&gt;</span><br></pre></td></tr></tbody></table></figure><p>它将会产生如下结果：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">日期为：Tue Jun 28 15:22:24 CST 2016</span><br></pre></td></tr></tbody></table></figure><h3 id="访问-JavaBean-对象的属性"><a href="#访问-JavaBean-对象的属性" class="headerlink" title="访问 JavaBean 对象的属性"></a>访问 JavaBean 对象的属性</h3><p>在 <strong><code>&lt;jsp:useBean&gt;</code></strong> 标签主体中使用 <strong><code>&lt;jsp:getProperty /&gt;</code></strong> 标签来调用 <strong>getter</strong> 方法，使用 <strong><code>&lt;jsp:setProperty /&gt;</code></strong> 标签来调用 <strong>setter</strong> 方法，语法格式如下：</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:useBean id=<span class="string">"id"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"bean 编译的类"</span> scope=<span class="string">"bean 作用域"</span>&gt;</span><br><span class="line">   &lt;jsp:setProperty name=<span class="string">"bean 的 id"</span> property=<span class="string">"属性名"</span>  </span><br><span class="line">                    value=<span class="string">"value"</span>/&gt;</span><br><span class="line">   &lt;jsp:getProperty name=<span class="string">"bean 的 id"</span> property=<span class="string">"属性名"</span>/&gt;</span><br><span class="line">   ...........</span><br><span class="line">&lt;/jsp:useBean&gt;</span><br></pre></td></tr></tbody></table></figure><p>name属性指的是Bean的id属性。property属性指的是想要调用的getter或setter方法。</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line"></span><br><span class="line">&lt;jsp:useBean id=<span class="string">"students"</span> </span><br><span class="line">                    <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.runoob.StudentsBean"</span>&gt; </span><br><span class="line">   &lt;jsp:setProperty name=<span class="string">"students"</span> property=<span class="string">"firstName"</span></span><br><span class="line">                    value=<span class="string">"小强"</span>/&gt;</span><br><span class="line">   &lt;jsp:setProperty name=<span class="string">"students"</span> property=<span class="string">"lastName"</span> </span><br><span class="line">                    value=<span class="string">"王"</span>/&gt;</span><br><span class="line">   &lt;jsp:setProperty name=<span class="string">"students"</span> property=<span class="string">"age"</span></span><br><span class="line">                    value=<span class="string">"10"</span>/&gt;</span><br><span class="line">&lt;/jsp:useBean&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;名字:&lt;jsp:getProperty name="students" property="firstName"/&gt; &lt;/p&gt;</span><br><span class="line">&lt;p&gt;姓氏: &lt;jsp:getProperty name="students" property="lastName"/&gt;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;年龄: &lt;jsp:getProperty name="students" property="age"/&gt;&lt;/p&gt;</span><br></pre></td></tr></tbody></table></figure><p>访问以上 JSP，运行结果如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">名字: 小强</span><br><span class="line">姓氏: 王</span><br><span class="line">年龄: 10</span><br></pre></td></tr></tbody></table></figure><h2 id="自定义标签"><a href="#自定义标签" class="headerlink" title="自定义标签"></a>自定义标签</h2><h3 id="创建-HELLO-标签"><a href="#创建-HELLO-标签" class="headerlink" title="创建 HELLO 标签"></a>创建 HELLO 标签</h3><p>创建一个自定义标签叫作<a href="ex:Hello" target="_blank" rel="noopener">ex:Hello</a>，标签格式为：</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;ex:Hello /&gt;</span><br></pre></td></tr></tbody></table></figure><p>要创建自定义的JSP标签，你首先必须创建处理标签的Java类。所以，让我们创建一个HelloTag类，如下所示：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.runoob;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.jsp.tagext.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.jsp.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloTag</span> <span class="keyword">extends</span> <span class="title">SimpleTagSupport</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doTag</span><span class="params">()</span> <span class="keyword">throws</span> JspException, IOException </span>{</span><br><span class="line">        JspWriter out = getJspContext().getOut();</span><br><span class="line">        out.println(<span class="string">"Hello Custom Tag!"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>以下代码重写了doTag()方法，方法中使用了getJspContext()方法来获取当前的JspContext对象，并将”Hello Custom Tag!”传递给JspWriter对象。</p><p>编译以上类，并将其复制到环境变量CLASSPATH目录中。最后创建如下标签库：<code>&lt;Tomcat安装目录&gt;webapps\ROOT\WEB-INF\custom.tld</code>。</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">taglib</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tlib-version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">tlib-version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jsp-version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">jsp-version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">short-name</span>&gt;</span>Example TLD<span class="tag">&lt;/<span class="name">short-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tag</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tag-class</span>&gt;</span>com.runoob.HelloTag<span class="tag">&lt;/<span class="name">tag-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">body-content</span>&gt;</span>empty<span class="tag">&lt;/<span class="name">body-content</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tag</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">taglib</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>接下来，可以在JSP文件中使用Hello标签：</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">"ex"</span> uri=<span class="string">"WEB-INF/custom.tld"</span>%&gt;</span><br><span class="line">&lt;ex:Hello/&gt;</span><br></pre></td></tr></tbody></table></figure><p>以上程序输出结果为：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello Custom Tag!</span><br></pre></td></tr></tbody></table></figure><h3 id="访问标签体"><a href="#访问标签体" class="headerlink" title="访问标签体"></a>访问标签体</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ex:Hello</span>&gt;</span></span><br><span class="line">   This is message body</span><br><span class="line"><span class="tag">&lt;/<span class="name">ex:Hello</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>修改标签处理类文件，代码如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.runoob;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.jsp.tagext.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.jsp.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloTag</span> <span class="keyword">extends</span> <span class="title">SimpleTagSupport</span> </span>{</span><br><span class="line"></span><br><span class="line">    StringWriter sw = <span class="keyword">new</span> StringWriter();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doTag</span><span class="params">()</span> <span class="keyword">throws</span> JspException, IOException </span>{</span><br><span class="line">        getJspBody().invoke(sw);</span><br><span class="line">        getJspContext().getOut().println(sw.toString());</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>接下来我们需要修改TLD文件，如下所示：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">taglib</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tlib-version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">tlib-version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jsp-version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">jsp-version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">short-name</span>&gt;</span>Example TLD with Body<span class="tag">&lt;/<span class="name">short-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tag</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tag-class</span>&gt;</span>com.runoob.HelloTag<span class="tag">&lt;/<span class="name">tag-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">body-content</span>&gt;</span>scriptless<span class="tag">&lt;/<span class="name">body-content</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tag</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">taglib</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>现在我们可以在JSP使用修改后的标签，如下所示:</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">"ex"</span> uri=<span class="string">"WEB-INF/custom.tld"</span>%&gt;</span><br><span class="line">&lt;ex:Hello&gt;</span><br><span class="line">    This is message body</span><br><span class="line">&lt;/ex:Hello&gt;</span><br></pre></td></tr></tbody></table></figure><p>以上程序输出结果如下所示：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This is message body</span><br></pre></td></tr></tbody></table></figure><h3 id="自定义标签属性"><a href="#自定义标签属性" class="headerlink" title="自定义标签属性"></a>自定义标签属性</h3><p>自定义标签类必须实现setter方法， JavaBean 中的setter方法如下所示：</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.runoob;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.jsp.tagext.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.jsp.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloTag</span> <span class="keyword">extends</span> <span class="title">SimpleTagSupport</span> </span>{</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage</span><span class="params">(String msg)</span> </span>{</span><br><span class="line">      <span class="keyword">this</span>.message = msg;</span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line">   StringWriter sw = <span class="keyword">new</span> StringWriter();</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doTag</span><span class="params">()</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> JspException, IOException</span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">       <span class="keyword">if</span> (message != <span class="keyword">null</span>) {</span><br><span class="line">          <span class="comment">/* 从属性中使用消息 */</span></span><br><span class="line">          JspWriter out = getJspContext().getOut();</span><br><span class="line">          out.println( message );</span><br><span class="line">       }</span><br><span class="line">       <span class="keyword">else</span> {</span><br><span class="line">          <span class="comment">/* 从内容体中使用消息 */</span></span><br><span class="line">          getJspBody().invoke(sw);</span><br><span class="line">          getJspContext().getOut().println(sw.toString());</span><br><span class="line">       }</span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>属性的名称是”message”，所以setter方法是的setMessage()。现在让我们在TLD文件中使用的<code>&lt;attribute&gt;</code>元素添加此属性：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">taglib</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tlib-version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">tlib-version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jsp-version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">jsp-version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">short-name</span>&gt;</span>Example TLD with Body<span class="tag">&lt;/<span class="name">short-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tag</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tag-class</span>&gt;</span>com.runoob.HelloTag<span class="tag">&lt;/<span class="name">tag-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">body-content</span>&gt;</span>scriptless<span class="tag">&lt;/<span class="name">body-content</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attribute</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">name</span>&gt;</span>message<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">attribute</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tag</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">taglib</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>现在我们就可以在JSP文件中使用message属性了，如下所示：</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">"ex"</span> uri=<span class="string">"WEB-INF/custom.tld"</span>%&gt;</span><br><span class="line">&lt;ex:Hello message=<span class="string">"This is custom tag"</span> /&gt;</span><br></pre></td></tr></tbody></table></figure><p>以上实例数据输出结果为：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This is custom tag</span><br></pre></td></tr></tbody></table></figure><p>还可以包含以下属性：</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>name</td><td>定义属性的名称。每个标签的是属性名称必须是唯一的。</td></tr><tr><td>required</td><td>指定属性是否是必须的或者可选的,如果设置为false为可选。</td></tr><tr><td>rtexprvalue</td><td>声明在运行表达式时，标签属性是否有效。</td></tr><tr><td>type</td><td>定义该属性的Java类类型 。默认指定为 <strong>String</strong></td></tr><tr><td>description</td><td>描述信息</td></tr><tr><td>fragment</td><td>如果声明了该属性,属性值将被视为一个 <strong>JspFragment</strong>。</td></tr></tbody></table><p>以下是指定相关的属性实例：</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.....</span><br><span class="line">    &lt;attribute&gt;</span><br><span class="line">        &lt;name&gt;attribute_name&lt;/name&gt;</span><br><span class="line">        &lt;required&gt;false&lt;/required&gt;</span><br><span class="line">        &lt;type&gt;java.util.Date&lt;/type&gt;</span><br><span class="line">        &lt;fragment&gt;false&lt;/fragment&gt;</span><br><span class="line">    &lt;/attribute&gt;</span><br><span class="line">.....</span><br></pre></td></tr></tbody></table></figure><p>如果你使用了两个属性，修改TLD文件，如下所示：</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.....</span><br><span class="line">    &lt;attribute&gt;</span><br><span class="line">        &lt;name&gt;attribute_name1&lt;/name&gt;</span><br><span class="line">        &lt;required&gt;false&lt;/required&gt;</span><br><span class="line">        &lt;type&gt;java.util.Boolean&lt;/type&gt;</span><br><span class="line">        &lt;fragment&gt;false&lt;/fragment&gt;</span><br><span class="line">    &lt;/attribute&gt;</span><br><span class="line">    &lt;attribute&gt;</span><br><span class="line">        &lt;name&gt;attribute_name2&lt;/name&gt;</span><br><span class="line">        &lt;required&gt;true&lt;/required&gt;</span><br><span class="line">        &lt;type&gt;java.util.Date&lt;/type&gt;</span><br><span class="line">    &lt;/attribute&gt;</span><br><span class="line">.....</span><br></pre></td></tr></tbody></table></figure><h2 id="JSP-表达式语言"><a href="#JSP-表达式语言" class="headerlink" title="JSP 表达式语言"></a>JSP 表达式语言</h2><p>JSP表达式语言（EL）使得访问存储在JavaBean中的数据变得非常简单。JSP EL既可以用来创建算术表达式也可以用来创建逻辑表达式。在JSP EL表达式内可以使用整型数，浮点数，字符串，常量true、false，还有null。</p><h3 id="一个简单的语法"><a href="#一个简单的语法" class="headerlink" title="一个简单的语法"></a>一个简单的语法</h3><p>典型的，在JSP标签中指定一个属性值，只需要简单地使用字符串即可：</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:setProperty name=<span class="string">"box"</span> property=<span class="string">"perimeter"</span> value=<span class="string">"${2*box.width+2*box.height}"</span>/&gt;</span><br></pre></td></tr></tbody></table></figure><p>JSP EL允许指定一个表达式来表示属性值：</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">${expr}</span><br></pre></td></tr></tbody></table></figure><p>其中，expr指的是表达式。在JSP EL中通用的操作符是 . 和 {} 。</p><p>当JSP编译器在属性中见到”${}”格式后，它会产生代码来<strong>计算这个表达式</strong>，并且产生一个替代品来代替表达式的值。</p><p>也可以在标签的模板文本中使用表达式语言。比如<code>&lt;jsp:text&gt;</code>标签简单地将其主体中的文本插入到JSP输出中：</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:text&gt;</span><br><span class="line">Box Perimeter is: ${<span class="number">2</span>*box.width + （<span class="number">1</span>+<span class="number">2</span>）*box.height}</span><br><span class="line">&lt;/jsp:text&gt;</span><br></pre></td></tr></tbody></table></figure><p>想要停用对EL表达式的评估的话，需要使用page指令将isELIgnored属性值设为true：</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page isELIgnored =<span class="string">"true|false"</span> %&gt;</span><br></pre></td></tr></tbody></table></figure><p>这样，EL表达式就会被忽略。若设为false，则容器将会计算EL表达式。</p><h3 id="EL中的基础操作符"><a href="#EL中的基础操作符" class="headerlink" title="EL中的基础操作符"></a>EL中的基础操作符</h3><p>EL表达式支持大部分Java所提供的算术和逻辑操作符：</p><table><thead><tr><th><strong>操作符</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>.</td><td>访问一个Bean属性或者一个映射条目</td></tr><tr><td>[]</td><td>访问一个数组或者链表的元素</td></tr><tr><td>( )</td><td>组织一个子表达式以改变优先级</td></tr><tr><td>+</td><td>加</td></tr><tr><td>-</td><td>减或负</td></tr><tr><td>*</td><td>乘</td></tr><tr><td>/ or div</td><td>除</td></tr><tr><td>% or mod</td><td>取模</td></tr><tr><td>== or eq</td><td>测试是否相等</td></tr><tr><td>!= or ne</td><td>测试是否不等</td></tr><tr><td>&lt; or lt</td><td>测试是否小于</td></tr><tr><td>&gt; or gt</td><td>测试是否大于</td></tr><tr><td>&lt;= or le</td><td>测试是否小于等于</td></tr><tr><td>&gt;= or ge</td><td>测试是否大于等于</td></tr><tr><td>&amp;&amp; or and</td><td>测试逻辑与</td></tr><tr><td>|| or or</td><td>测试逻辑或</td></tr><tr><td>! or not</td><td>测试取反</td></tr><tr><td>empty</td><td>测试是否空值</td></tr></tbody></table><h3 id="JSP-EL中的函数"><a href="#JSP-EL中的函数" class="headerlink" title="JSP EL中的函数"></a>JSP EL中的函数</h3><p>JSP EL允许您在表达式中使用函数。这些函数必须被定义在自定义标签库中。函数的使用语法如下：</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">${ns:func(param1, param2, ...)}</span><br></pre></td></tr></tbody></table></figure><p>ns指的是命名空间（namespace），func指的是函数的名称，param1指的是第一个参数，param2指的是第二个参数，以此类推。比如，有函数fn:length，在JSTL库中定义，可以像下面这样来获取一个字符串的长度：</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">${fn:length(<span class="string">"Get my length"</span>)}</span><br></pre></td></tr></tbody></table></figure><p>要使用任何标签库中的函数，您需要将这些库安装在服务器中，然后使用<code>&lt;taglib&gt;</code>标签在JSP文件中包含这些库。</p><h3 id="JSP-EL隐含对象"><a href="#JSP-EL隐含对象" class="headerlink" title="JSP EL隐含对象"></a>JSP EL隐含对象</h3><p>JSP EL支持下表列出的隐含对象：</p><table><thead><tr><th><strong>隐含对象</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>pageScope</td><td>page 作用域</td></tr><tr><td>requestScope</td><td>request 作用域</td></tr><tr><td>sessionScope</td><td>session 作用域</td></tr><tr><td>applicationScope</td><td>application 作用域</td></tr><tr><td>param</td><td>Request 对象的参数，字符串</td></tr><tr><td>paramValues</td><td>Request对象的参数，字符串集合</td></tr><tr><td>header</td><td>HTTP 信息头，字符串</td></tr><tr><td>headerValues</td><td>HTTP 信息头，字符串集合</td></tr><tr><td>initParam</td><td>上下文初始化参数</td></tr><tr><td>cookie</td><td>Cookie值</td></tr><tr><td>pageContext</td><td>当前页面的pageContext</td></tr></tbody></table><p>可以在表达式中使用这些对象，就像使用变量一样。</p><h3 id="pageContext对象"><a href="#pageContext对象" class="headerlink" title="pageContext对象"></a>pageContext对象</h3><p>pageContext对象是JSP中pageContext对象的引用。通过pageContext对象，可以访问request对象。比如，访问request对象传入的查询字符串，就像这样：</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">${pageContext.request.queryString}</span><br></pre></td></tr></tbody></table></figure><h3 id="Scope对象"><a href="#Scope对象" class="headerlink" title="Scope对象"></a>Scope对象</h3><p>pageScope，requestScope，sessionScope，applicationScope变量用来访问存储在各个作用域层次的变量。</p><p>举例来说，如果需要显式访问在applicationScope层的box变量，可以这样来访问：applicationScope.box。</p><h3 id="param和paramValues对象"><a href="#param和paramValues对象" class="headerlink" title="param和paramValues对象"></a>param和paramValues对象</h3><p>param和paramValues 对象用来访问参数值，通过使用 request.getParameter 方法和 request.getParameterValues 方法。</p><p>举例来说，访问一个名为 order 的参数，可以这样使用表达式：${param.order}，或者${param[“order”]}。</p><p>如何访问 request 中的 username 参数：</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.io.*,java.util.*"</span> %&gt;</span><br><span class="line">${param[<span class="string">"username"</span>]}</span><br></pre></td></tr></tbody></table></figure><p>param 对象返回单一的字符串，而 paramValues 对象则返回一个字符串数组。</p><h3 id="header和headerValues对象"><a href="#header和headerValues对象" class="headerlink" title="header和headerValues对象"></a>header和headerValues对象</h3><p>header和headerValues对象用来访问信息头，通过使用 request.getHeader方法和request.getHeaders方法。</p><p>举例来说，要访问一个名为 user-agent 的信息头，可以这样使用表达式：${header.user-agent}，或者 ${header[“user-agent”]}。</p><p>如何访问 user-agent 信息头：</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.io.*,java.util.*"</span> %&gt;</span><br><span class="line">${header[<span class="string">"user-agent"</span>]}</span><br></pre></td></tr></tbody></table></figure><p>header对象返回单一值，而headerValues则返回一个字符串数组。</p><h2 id="JSP-异常处理"><a href="#JSP-异常处理" class="headerlink" title="JSP 异常处理"></a>JSP 异常处理</h2><p>JSP代码中通常有以下几类异常:</p><ul><li>检查型异常:检查型异常就是一个典型的用户错误或者一个程序员无法预见的错误。举例来说，如果一个文件将要被打开，但是无法找到这个文件，则一个异常被抛出。这些异常不能再编译期被简单地忽略。</li><li>运行时异常:一个运行时异常可能已经被程序员避免，这种异常在编译期将会被忽略。</li><li>错误:错误不是异常，但问题是它超出了用户或者程序员的控制范围。错误通常会在代码中被忽略，您几乎不能拿它怎么样。举例来说，栈溢出错误。这些错误都会在编译期被忽略。</li></ul><h3 id="使用-Exception-对象"><a href="#使用-Exception-对象" class="headerlink" title="使用 Exception 对象"></a>使用 Exception 对象</h3><p>exception对象是Throwable子类的一个实例，只在错误页面中可用。下表列出了Throwable类中一些重要的方法:</p><table><thead><tr><th><strong>序号</strong></th><th><strong>方法</strong> <strong>&amp;</strong> <strong>描述</strong></th></tr></thead><tbody><tr><td>1</td><td><strong>public String getMessage()</strong><br>返回异常的信息。这个信息在Throwable构造函数中被初始化</td></tr><tr><td>2</td><td><strong>public ThrowablegetCause()</strong><br>返回引起异常的原因，类型为Throwable对象</td></tr><tr><td>3</td><td><strong>public String toString()<br></strong>返回类名</td></tr><tr><td>4</td><td><strong>public void printStackTrace()<br></strong>将异常栈轨迹输出至System.err</td></tr><tr><td>5</td><td><strong>public StackTraceElement [] getStackTrace()<br></strong>以栈轨迹元素数组的形式返回异常栈轨迹</td></tr><tr><td>6</td><td><strong>public ThrowablefillInStackTrace()</strong><br>使用当前栈轨迹填充Throwable对象</td></tr></tbody></table><p>JSP提供了可选项来为每个JSP页面指定错误页面。无论何时页面抛出了异常，JSP容器都会自动地调用错误页面。</p><p>接下来的例子为main.jsp指定了一个错误页面。使用&lt;%@page errorPage=”XXXXX”%&gt;指令指定一个错误页面。</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page errorPage=<span class="string">"ShowError.jsp"</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">     <span class="comment">// Throw an exception to invoke the error page</span></span><br><span class="line">     <span class="keyword">if</span> (<span class="number">1</span> == <span class="number">1</span>)</span><br><span class="line">     {</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Error condition!!!"</span>);</span><br><span class="line">     }</span><br><span class="line">%&gt;</span><br></pre></td></tr></tbody></table></figure><p>现在，编写ShowError.jsp文件如下:</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page isErrorPage=<span class="string">"true"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Show Error Page&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Opps...&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;Sorry, an error occurred.&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;Here is the exception stack trace: &lt;/p&gt;</span><br><span class="line">    &lt;pre&gt;</span><br><span class="line">    &lt;% exception.printStackTrace(response.getWriter()); %&gt;</span><br></pre></td></tr></tbody></table></figure><p>注意到，ShowError.jsp文件使用了&lt;%@page isErrorPage=”true”%&gt;指令，这个指令告诉JSP编译器需要产生一个异常实例变量。</p><p>现在试着访问main.jsp页面，它将会产生如下结果:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">java.lang.RuntimeException: Error condition!!!</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">Opps...</span><br><span class="line">Sorry, an error occurred.</span><br><span class="line"></span><br><span class="line">Here is the exception stack trace:</span><br></pre></td></tr></tbody></table></figure><h3 id="在错误页面使用-JSTL-标签"><a href="#在错误页面使用-JSTL-标签" class="headerlink" title="在错误页面使用 JSTL 标签"></a>在错误页面使用 JSTL 标签</h3><p>可以利用JSTL标签来编写错误页面ShowError.jsp。这个例子中的代码与上例代码的逻辑几乎一样，但是本例的代码有更好的结构，并且能够提供更多信息:</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span><br><span class="line">&lt;%<span class="meta">@page</span> isErrorPage=<span class="string">"true"</span> %&gt;</span><br><span class="line">Error: ${pageContext.exception} &lt;br /&gt;</span><br><span class="line">URI: ${pageContext.errorData.requestURI} &lt;br /&gt;</span><br><span class="line">Status code: ${pageContext.errorData.statusCode} &lt;br /&gt;</span><br><span class="line">&lt;c:forEach <span class="keyword">var</span>=<span class="string">"trace"</span> items=<span class="string">"${pageContext.exception.stackTrace}"</span>&gt;</span><br><span class="line">  ${trace} &lt;br /&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></tbody></table></figure><p>运行结果如下:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://www.runoob.com/wp-content/uploads/2014/01/jsp-exeception-1.jpg" alt="jsp-exeception-1" title="">                </div>                <div class="image-caption">jsp-exeception-1</div>            </figure><h3 id="使用-try-…-catch-块"><a href="#使用-try-…-catch-块" class="headerlink" title="使用 try … catch 块"></a>使用 try … catch 块</h3><p>如果您想要将异常处理放在一个页面中，并且对不同的异常进行不同的处理，那么您就需要使用try…catch块了。</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">   <span class="keyword">try</span>{</span><br><span class="line">      <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">      i = i / <span class="number">0</span>;</span><br><span class="line">      out.println(<span class="string">"The answer is "</span> + i);</span><br><span class="line">   }</span><br><span class="line">   <span class="keyword">catch</span> (Exception e){</span><br><span class="line">      out.println(<span class="string">"An exception occurred: "</span> + e.getMessage());</span><br><span class="line">   }</span><br><span class="line">%&gt;</span><br></pre></td></tr></tbody></table></figure><p>运行结果:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">An exception occurred: / by zero</span><br></pre></td></tr></tbody></table></figure><h2 id="JSP-调试"><a href="#JSP-调试" class="headerlink" title="JSP 调试"></a>JSP 调试</h2><p><strong>System.out.println()</strong></p><p><strong>JDB Logger</strong></p><p>J2SE日志框架可为任何运行在JVM中的类提供日志记录服务。因此我们可以利用这个框架来记录任何信息。</p><p>使用JDK中的 logger API：</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;%<span class="meta">@taglib</span> prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span><br><span class="line">&lt;%<span class="meta">@page</span> <span class="keyword">import</span>=<span class="string">"java.util.logging.Logger"</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;% Logger logger=Logger.getLogger(<span class="keyword">this</span>.getClass().getName());%&gt;</span><br><span class="line"></span><br><span class="line">&lt;c:forEach <span class="keyword">var</span>=<span class="string">"counter"</span> begin=<span class="string">"1"</span> end=<span class="string">"10"</span> step=<span class="string">"1"</span> &gt;</span><br><span class="line">   &lt;c:set <span class="keyword">var</span>=<span class="string">"myCount"</span> value=<span class="string">"${counter-5}"</span> /&gt;</span><br><span class="line">   &lt;c:out value="${myCount}"/&gt;&lt;/br&gt;</span><br><span class="line">   &lt;% String message = <span class="string">"counter="</span></span><br><span class="line">                  + pageContext.findAttribute(<span class="string">"counter"</span>)</span><br><span class="line">                  + <span class="string">" myCount="</span></span><br><span class="line">                  + pageContext.findAttribute(<span class="string">"myCount"</span>);</span><br><span class="line">                  logger.info( message );</span><br><span class="line">   %&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></tbody></table></figure><p>给出stdout.log文件中的一个快照：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">24-Sep-2013 23:31:31 org.apache.jsp.main_jsp _jspService</span><br><span class="line">INFO: counter=1 myCount=-4</span><br><span class="line">24-Sep-2013 23:31:31 org.apache.jsp.main_jsp _jspService</span><br><span class="line">INFO: counter=2 myCount=-3</span><br><span class="line">24-Sep-2013 23:31:31 org.apache.jsp.main_jsp _jspService</span><br><span class="line">INFO: counter=3 myCount=-2</span><br><span class="line">24-Sep-2013 23:31:31 org.apache.jsp.main_jsp _jspService</span><br><span class="line">INFO: counter=4 myCount=-1</span><br><span class="line">24-Sep-2013 23:31:31 org.apache.jsp.main_jsp _jspService</span><br><span class="line">INFO: counter=5 myCount=0</span><br><span class="line">24-Sep-2013 23:31:31 org.apache.jsp.main_jsp _jspService</span><br><span class="line">INFO: counter=6 myCount=1</span><br><span class="line">24-Sep-2013 23:31:31 org.apache.jsp.main_jsp _jspService</span><br><span class="line">INFO: counter=7 myCount=2</span><br><span class="line">24-Sep-2013 23:31:31 org.apache.jsp.main_jsp _jspService</span><br><span class="line">INFO: counter=8 myCount=3</span><br><span class="line">24-Sep-2013 23:31:31 org.apache.jsp.main_jsp _jspService</span><br><span class="line">INFO: counter=9 myCount=4</span><br><span class="line">24-Sep-2013 23:31:31 org.apache.jsp.main_jsp _jspService</span><br><span class="line">INFO: counter=10 myCount=5</span><br></pre></td></tr></tbody></table></figure><p>消息可以使用各种优先级发送，通过使用sever()，warning()，info()，config()，fine()，finer()，finest()方法。finest()方法用来记录最好的信息，而sever()方法用来记录最严重的信息。</p><p>使用Log4J 框架来将消息记录在不同的文件中，这些消息基于严重程度和重要性来进行分类。</p><p><strong>调试工具</strong></p><p>NetBeans是树形结构，是开源的Java综合开发环境，支持开发独立的Java应用程序和网络应用程序，同时也支持JSP调试。</p><p>NetBeans支持如下几个基本的调试功能：</p><ul><li>断点</li><li>单步跟踪</li><li>观察点</li></ul><p>详细的信息可以查看NetBeans使用手册。</p><p><strong>使用JDB Debugger</strong></p><p><strong>使用注释</strong></p><p><strong>浏览器开发者模式</strong></p><h2 id="JSP-国际化"><a href="#JSP-国际化" class="headerlink" title="JSP 国际化"></a>JSP 国际化</h2><p><a href="https://www.runoob.com/jsp/jsp-internationalization.html" target="_blank" rel="noopener">https://www.runoob.com/jsp/jsp-internationalization.html</a></p><p>解释几个重要的概念：</p><ul><li>国际化（i18n）：表明一个页面根据访问者的语言或国家来呈现不同的翻译版本。</li><li>本地化（l10n）：向网站添加资源，以使它适应不同的地区和文化。比如网站的印度语版本。</li><li>区域：这是一个特定的区域或文化，通常认为是一个语言标志和国家标志通过下划线连接起来。比如”en_US”代表美国英语地区。</li></ul><p>JSP容器能够根据request的locale属性来提供正确地页面版本。接下来给出了如何通过request对象来获得Locale对象的语法：</p><figure class="highlight jsp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.util.Locale request.getLocale()</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;了解&quot;&gt;&lt;a href=&quot;#了解&quot; class=&quot;headerlink&quot; title=&quot;了解&quot;&gt;&lt;/a&gt;了解&lt;/h1&gt;&lt;h2 id=&quot;第一个-JSP-程序&quot;&gt;&lt;a href=&quot;#第一个-JSP-程序&quot; class=&quot;headerlink&quot; title=&quot;第一个 JSP 程序&quot;&gt;&lt;/a&gt;第一个 JSP 程序&lt;/h2&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;head&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &amp;lt;title&amp;gt;第一个 JSP 程序&amp;lt;/title&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/head&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &amp;lt;%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  out.println(&lt;span class=&quot;string&quot;&gt;&quot;Hello World！&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           %&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="学习笔记" scheme="http://blog.iwxyi.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JSP" scheme="http://blog.iwxyi.com/tags/JSP/"/>
    
  </entry>
  
  <entry>
    <title>MFC画图</title>
    <link href="http://blog.iwxyi.com/2018/05/08/MFC%E7%94%BB%E5%9B%BE/"/>
    <id>http://blog.iwxyi.com/2018/05/08/MFC画图/</id>
    <published>2018-05-08T02:14:00.000Z</published>
    <updated>2019-10-13T12:33:05.989Z</updated>
    
    <content type="html"><![CDATA[<p>MFC在控件上画图</p><a id="more"></a><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">CStatic* p;</span><br><span class="line">p = (CStatic*)GetDlgItem(IDC_STATIC);</span><br><span class="line">CRect rcStatic;</span><br><span class="line">p-&gt;GetClientRect(&amp;rcStatic);</span><br><span class="line">HDC hdc = ::GetDC(*p);</span><br><span class="line"></span><br><span class="line">HPEN hPen;</span><br><span class="line">OLE_COLOR m_colOLE;</span><br><span class="line">COLORREF m_colRREF;</span><br><span class="line">m_colOLE = RGB(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">OleTranslateColor(m_colOLE, <span class="literal">NULL</span>, &amp;m_colRREF);</span><br><span class="line">hPen = CreatePen(PS_SOLID, <span class="number">3</span>, m_colRREF);</span><br><span class="line">SelectObject(hdc, hPen);</span><br><span class="line">Rectangle(hdc, rcStatic.left, rcStatic.top, rcStatic.right, rcStatic.bottom);</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MFC在控件上画图&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C++" scheme="http://blog.iwxyi.com/tags/C/"/>
    
      <category term="MFC" scheme="http://blog.iwxyi.com/tags/MFC/"/>
    
  </entry>
  
  <entry>
    <title>MFC常用函数</title>
    <link href="http://blog.iwxyi.com/2018/05/08/MFC%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/"/>
    <id>http://blog.iwxyi.com/2018/05/08/MFC常用函数/</id>
    <published>2018-05-08T02:09:00.000Z</published>
    <updated>2019-10-13T12:32:45.546Z</updated>
    
    <content type="html"><![CDATA[<h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">OnOK(); <span class="comment">// 确定</span></span><br><span class="line">onCancel(); <span class="comment">// 取消</span></span><br></pre></td></tr></tbody></table></figure><a id="more"></a><h2 id="通过ID获取控件对象"><a href="#通过ID获取控件对象" class="headerlink" title="通过ID获取控件对象"></a>通过ID获取控件对象</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GetDlgItem(IDC_DATE)-&gt;EnableWindow(FALSE);</span><br><span class="line">m_Date.EnableWindow(TRUE);</span><br></pre></td></tr></tbody></table></figure><h2 id="可视与可用"><a href="#可视与可用" class="headerlink" title="可视与可用"></a>可视与可用</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">EnableWindow(TRUE); <span class="comment">// TRUE可用 / FALSE不可用</span></span><br><span class="line">EnableWindow(FALSW); <span class="comment">// 变灰，不可操作</span></span><br><span class="line"></span><br><span class="line">ShowWindow(SW_HIDE); <span class="comment">// 不可视，SW_HIDE=0</span></span><br><span class="line">ShowWindow(SW_SHOW); <span class="comment">// 可视，SW_SHOW=5</span></span><br></pre></td></tr></tbody></table></figure><h2 id="弹出信息框"><a href="#弹出信息框" class="headerlink" title="弹出信息框"></a>弹出信息框</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">AfxMessageBox(<span class="string">"Hello World!"</span>);</span><br><span class="line"></span><br><span class="line">CString msg;</span><br><span class="line">m_cb.GetLBText(m_cb.GetCurSel(), msg);</span><br><span class="line">AfxMessageBox(msg);</span><br></pre></td></tr></tbody></table></figure><h2 id="获取现行日期时间"><a href="#获取现行日期时间" class="headerlink" title="获取现行日期时间"></a>获取现行日期时间</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CTime tNow = CTime::GetCurrentTime();</span><br><span class="line">CString date = tNow.Format(<span class="string">"%y.%m.%d"</span>); <span class="comment">// 日期</span></span><br><span class="line">CString time = tNow.Format(<span class="string">"%I:%M:%S"</span>); <span class="comment">// 时间（小时是I而不是H）</span></span><br></pre></td></tr></tbody></table></figure><h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SetTimer(<span class="number">1</span>,<span class="number">100</span>,<span class="literal">NULL</span>); <span class="comment">// 参数1：定时器ID，参数2：间隔</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> CEx9_9Dlg::OnTimer(UINT nIDEvent) </span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(nIDEvent == <span class="number">1</span>){ <span class="comment">// 定时器的ID</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span>(...) KillTimer(nIDEvent); <span class="comment">// 结束进程</span></span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;流程控制&quot;&gt;&lt;a href=&quot;#流程控制&quot; class=&quot;headerlink&quot; title=&quot;流程控制&quot;&gt;&lt;/a&gt;流程控制&lt;/h2&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;OnOK(); &lt;span class=&quot;comment&quot;&gt;// 确定&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;onCancel(); &lt;span class=&quot;comment&quot;&gt;// 取消&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C++" scheme="http://blog.iwxyi.com/tags/C/"/>
    
      <category term="MFC" scheme="http://blog.iwxyi.com/tags/MFC/"/>
    
  </entry>
  
  <entry>
    <title>Win32 SDK游戏循环</title>
    <link href="http://blog.iwxyi.com/2018/05/08/Win32-SDK%E6%B8%B8%E6%88%8F%E5%BE%AA%E7%8E%AF/"/>
    <id>http://blog.iwxyi.com/2018/05/08/Win32-SDK游戏循环/</id>
    <published>2018-05-08T02:02:00.000Z</published>
    <updated>2019-10-13T03:43:36.506Z</updated>
    
    <content type="html"><![CDATA[<p>其实就是 Windows 消息循环</p><a id="more"></a><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//消息循环</span></span><br><span class="line">GetMessage(&amp;msg, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>); <span class="comment">//初始化msg</span></span><br><span class="line"><span class="keyword">while</span>( msg.message != WM_QUIT )</span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span>( PeekMessage( &amp;msg, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="number">0</span> , PM_REMOVE) )</span><br><span class="line">    {</span><br><span class="line">        TranslateMessage( &amp;msg );</span><br><span class="line">        DispatchMessage( &amp;msg );</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">        tNow = GetTickCount();</span><br><span class="line">        <span class="keyword">if</span>(tNow - tPre &gt;= <span class="number">40</span>)</span><br><span class="line">            MyPaint(hdc);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tPre = GetTickCount();</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;其实就是 Windows 消息循环&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="Win32 SDK" scheme="http://blog.iwxyi.com/tags/Win32-SDK/"/>
    
      <category term="游戏开发" scheme="http://blog.iwxyi.com/tags/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Win32 SDK加载位图</title>
    <link href="http://blog.iwxyi.com/2018/05/08/Win32-SDK%E5%8A%A0%E8%BD%BD%E4%BD%8D%E5%9B%BE/"/>
    <id>http://blog.iwxyi.com/2018/05/08/Win32-SDK加载位图/</id>
    <published>2018-05-08T01:52:00.000Z</published>
    <updated>2019-10-13T01:54:43.485Z</updated>
    
    <content type="html"><![CDATA[<p>初始化位图</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hMemDC = CreateCompatibleDC(hdc);</span><br><span class="line">hBitmap = LoadBitmap(hInst, <span class="string">"mybmp"</span>);</span><br><span class="line">SelectObject(hMemDC, hBitmap);</span><br><span class="line">GetObject(hBitmap, <span class="keyword">sizeof</span>(BITMAP), &amp;bitmap);</span><br></pre></td></tr></tbody></table></figure><p>绘制位图</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BitBlt(hdc, bmx, bmy, bitmap.bmWidth, bitmap.bmHeight, hMemDC, <span class="number">0</span>, <span class="number">0</span>, SRCCOPY);</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><hr><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    HDC hdc;</span><br><span class="line">    PAINTSTRUCT ps;</span><br><span class="line">    RECT rect;</span><br><span class="line">    <span class="keyword">static</span> HDC hMemDC;</span><br><span class="line">    <span class="keyword">static</span> HBITMAP hBitmap;</span><br><span class="line">    <span class="keyword">static</span> BITMAP bitmap;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span>(message)</span><br><span class="line">    {</span><br><span class="line">    <span class="keyword">case</span> WM_CREATE : <span class="comment">// 初始化</span></span><br><span class="line">        hdc = GetDC(hWnd);</span><br><span class="line">        hMemDC = CreateCompatibleDC(hdc);</span><br><span class="line">        hBitmap = LoadBitmap(hInst, <span class="string">"mybmp"</span>);</span><br><span class="line">        SelectObject(hMemDC, hBitmap);</span><br><span class="line">        GetObject(hBitmap, <span class="keyword">sizeof</span>(BITMAP), &amp;bitmap);</span><br><span class="line">        ReleaseDC(hWnd, hdc);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_PAINT : <span class="comment">// 重绘</span></span><br><span class="line">        hdc = BeginPaint(hWnd, &amp;ps);</span><br><span class="line">        GetClientRect(hWnd, &amp;rect);</span><br><span class="line">        BitBlt(hdc, bmx, bmy, bitmap.bmWidth, bitmap.bmHeight, hMemDC, <span class="number">0</span>, <span class="number">0</span>, SRCCOPY);</span><br><span class="line">        EndPaint(hWnd, &amp;ps);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_DESTROY : <span class="comment">// 析构</span></span><br><span class="line">        DeleteObject(hBitmap);</span><br><span class="line">        ReleaseDC(hWnd, hMemDC);</span><br><span class="line">        PostQuitMessage(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>两张/多张位图</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hBitmap = (HBITMAP)LoadImage(<span class="literal">NULL</span>,<span class="string">"mybmp.bmp"</span>,IMAGE_BITMAP,<span class="number">800</span>,<span class="number">800</span>,LR_LOADFROMFILE);</span><br><span class="line">hBitmap2 = (HBITMAP)LoadImage(<span class="literal">NULL</span>,<span class="string">"mybmp2.bmp"</span>,IMAGE_BITMAP,<span class="number">50</span>,<span class="number">50</span>,LR_LOADFROMFILE);</span><br><span class="line">SelectObject(hMemDC, hBitmap);</span><br><span class="line">GetObject(hBitmap, <span class="keyword">sizeof</span>(BITMAP), &amp;bitmap);</span><br><span class="line">GetObject(hBitmap2, <span class="keyword">sizeof</span>(BITMAP), &amp;bitmap2);</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;初始化位图&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hMemDC = CreateCompatibleDC(hdc);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hBitmap = LoadBitmap(hInst, &lt;span class=&quot;string&quot;&gt;&quot;mybmp&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SelectObject(hMemDC, hBitmap);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;GetObject(hBitmap, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(BITMAP), &amp;amp;bitmap);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;绘制位图&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;BitBlt(hdc, bmx, bmy, bitmap.bmWidth, bitmap.bmHeight, hMemDC, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, SRCCOPY);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="Win32 SDK" scheme="http://blog.iwxyi.com/tags/Win32-SDK/"/>
    
  </entry>
  
  <entry>
    <title>VC++工具使用</title>
    <link href="http://blog.iwxyi.com/2018/05/08/VC-%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    <id>http://blog.iwxyi.com/2018/05/08/VC-工具使用/</id>
    <published>2018-05-08T01:37:00.000Z</published>
    <updated>2019-10-13T01:38:05.758Z</updated>
    
    <content type="html"><![CDATA[<ul><li>快捷键：在Button标题处使用&amp;，例如：<code>&amp;Enable</code>快捷键为<code>alt+E</code>，<code>Enable &amp;Again</code>快捷键为<code>alt+A</code></li><li>单选框：按照创建顺序会有一个默认的编号，然后每组第一个radio属性的<code>组</code>设为<code>True</code>，其余radio不做变动。<br>有组的radio显示在类向导里面，并且可以关联int变量，直接初始化成其他值</li></ul><a id="more"></a><ul><li>复制控件：看另外一篇</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;快捷键：在Button标题处使用&amp;amp;，例如：&lt;code&gt;&amp;amp;Enable&lt;/code&gt;快捷键为&lt;code&gt;alt+E&lt;/code&gt;，&lt;code&gt;Enable &amp;amp;Again&lt;/code&gt;快捷键为&lt;code&gt;alt+A&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;单选框：按照创建顺序会有一个默认的编号，然后每组第一个radio属性的&lt;code&gt;组&lt;/code&gt;设为&lt;code&gt;True&lt;/code&gt;，其余radio不做变动。&lt;br&gt;有组的radio显示在类向导里面，并且可以关联int变量，直接初始化成其他值&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="VC++" scheme="http://blog.iwxyi.com/tags/VC/"/>
    
  </entry>
  
  <entry>
    <title>VC++菜单操作</title>
    <link href="http://blog.iwxyi.com/2018/05/08/VC-%E8%8F%9C%E5%8D%95%E6%93%8D%E4%BD%9C/"/>
    <id>http://blog.iwxyi.com/2018/05/08/VC-菜单操作/</id>
    <published>2018-05-08T01:16:00.000Z</published>
    <updated>2019-10-13T12:33:29.196Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hmenu = GetMenu(hWnd);</span><br><span class="line">haddmenu = CreateMenu();</span><br><span class="line">AppendMenu(haddmenu, MF_ENABLED, 4, "求和");</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    HMENU hmenu, haddmenu<span class="comment">/*添加的菜单句柄*/</span>;</span><br><span class="line">    <span class="keyword">switch</span>(message)</span><br><span class="line">    {</span><br><span class="line">    <span class="keyword">case</span> WM_COMMAND :</span><br><span class="line">        <span class="keyword">switch</span> (LOWORD(wParam))</span><br><span class="line">        {</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span> : <span class="comment">// 添加菜单项</span></span><br><span class="line">            hmenu = GetMenu(hWnd);</span><br><span class="line">            haddmenu = CreateMenu();</span><br><span class="line">            AppendMenu(haddmenu, MF_ENABLED, <span class="number">4</span>, <span class="string">"求和"</span>);</span><br><span class="line">            AppendMenu(haddmenu, MF_ENABLED, <span class="number">5</span>, <span class="string">"求差"</span>);</span><br><span class="line">            InsertMenu(hmenu, <span class="number">2</span>, MF_POPUP | MF_BYPOSITION, (UINT)haddmenu, <span class="string">"统计计算"</span>);</span><br><span class="line">            EnableMenuItem(hmenu, <span class="number">1</span>, MF_GRAYED);</span><br><span class="line">            EnableMenuItem(hmenu, <span class="number">2</span>, MF_ENABLED);</span><br><span class="line">            DrawMenuBar(hWnd);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span> : <span class="comment">// 删除菜单项</span></span><br><span class="line">            hmenu = GetMenu(hWnd);</span><br><span class="line">            DeleteMenu(hmenu, <span class="number">2</span>, MF_BYPOSITION);</span><br><span class="line">            EnableMenuItem(hmenu, <span class="number">1</span>, MF_ENABLED);</span><br><span class="line">            EnableMenuItem(hmenu, <span class="number">2</span>, MF_GRAYED);</span><br><span class="line">            DrawMenuBar(hWnd);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hmenu = GetMenu(hWnd);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;haddmenu = CreateMenu();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;AppendMenu(haddmenu, MF_ENABLED, 4, &quot;求和&quot;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C++" scheme="http://blog.iwxyi.com/tags/C/"/>
    
      <category term="VC++" scheme="http://blog.iwxyi.com/tags/VC/"/>
    
  </entry>
  
  <entry>
    <title>VC++使用RC文件</title>
    <link href="http://blog.iwxyi.com/2018/05/07/VC-%E4%BD%BF%E7%94%A8RC%E6%96%87%E4%BB%B6/"/>
    <id>http://blog.iwxyi.com/2018/05/07/VC-使用RC文件/</id>
    <published>2018-05-07T12:39:00.000Z</published>
    <updated>2019-10-13T12:39:58.416Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文件导入的资源（BITMAP，-ICON，-HTML，-FONT，-CURSOR）"><a href="#文件导入的资源（BITMAP，-ICON，-HTML，-FONT，-CURSOR）" class="headerlink" title="文件导入的资源（BITMAP， ICON， HTML， FONT， CURSOR）"></a>文件导入的资源（BITMAP， ICON， HTML， FONT， CURSOR）</h2><p>举例：</p><h3 id="rc文件"><a href="#rc文件" class="headerlink" title=".rc文件 :"></a>.rc文件 :</h3><p>#include&lt;windows.h&gt;</p><p><strong>#include”resource.h”</strong></p><p><strong>IDI_ICON1 ICON “dlgapp.ico”</strong> //ICON RESOURCE</p><a id="more"></a><hr><h3 id="Resource-h文件"><a href="#Resource-h文件" class="headerlink" title="Resource.h文件:"></a>Resource.h文件:</h3><p><strong>#define IDI_ICON1 1001</strong></p><hr><h3 id="注册窗口类"><a href="#注册窗口类" class="headerlink" title="注册窗口类:"></a>注册窗口类:</h3><p>wcs.hIcon = LoadIcon(g_hInstance, MAKEINTRESOURCE(<strong>IDI_ICON1</strong>));</p><h2 id="对话框资源"><a href="#对话框资源" class="headerlink" title="对话框资源"></a>对话框资源</h2><p>见图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdn.net/20150811234230887?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="对应的-rc文件："><a href="#对应的-rc文件：" class="headerlink" title="对应的.rc文件："></a>对应的.rc文件：</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">IDD_DIALOG1 DIALOG DISCARDABLE  0, 0, 187, 94</span><br><span class="line"></span><br><span class="line">STYLE DS_MODALFRAME | WS_POPUP | WS_CAPTION | WS_SYSMENU</span><br><span class="line"></span><br><span class="line">CAPTION "对话"</span><br><span class="line"></span><br><span class="line">FONT 10, "System"</span><br><span class="line"></span><br><span class="line">_BEGIN_</span><br><span class="line">DEFPUSHBUTTON   "确定",IDOK,130,7,50,14</span><br><span class="line">   PUSHBUTTON      "取消",IDCANCEL,130,24,50,14</span><br><span class="line">_END_</span><br></pre></td></tr></tbody></table></figure><hr><h3 id="对应resource-h"><a href="#对应resource-h" class="headerlink" title="对应resource.h:"></a>对应resource.h:</h3><p>#define IDD_DIALOG1 102</p><hr><h3 id="对应的-cpp文件："><a href="#对应的-cpp文件：" class="headerlink" title="对应的.cpp文件："></a>对应的.cpp文件：</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">voidOnNoModel(HWND hWnd)</span><br><span class="line">{</span><br><span class="line">    HWND hDlg = CreateDialog(g_hInstance,<span class="comment">//根据资源创建对话框</span></span><br><span class="line">       MAKEINTRESOURCE(IDD_DIALOG1),hWnd, MyDialogProc);</span><br><span class="line">    ShowWindow(hDlg,<span class="number">1</span>);<span class="comment">//需要显示对话框</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="菜单资源："><a href="#菜单资源：" class="headerlink" title="菜单资源："></a>菜单资源：</h2><p>(当然，菜单不使用资源也可以创建的～用命令创建的感觉和QT用命令创建很相似，本文不涉及)</p><h3 id="对应的-rc文件：-1"><a href="#对应的-rc文件：-1" class="headerlink" title="对应的.rc文件："></a>对应的.rc文件：</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#include"resource.h"</span><br><span class="line">#include&lt;windows.h&gt;</span><br><span class="line"></span><br><span class="line">IDR_MENU1 _MENU_       //MENU RESOURCE</span><br><span class="line">_BEGIN_                                                                       </span><br><span class="line">    POPUP "File"        // POPUP RESOURCE</span><br><span class="line">    _BEGIN_ </span><br><span class="line">        MENUITEM "&amp;Open",        ID_FILE_OPEN    // MENUITEM  STATEMENT</span><br><span class="line">        MENUITEM "&amp;Save",        ID_FILE_SAVE    // MENUITEM  STATEMENT    </span><br><span class="line">        MENUITEM SEPARATOR           // MENUITEM  STATEMENT                </span><br><span class="line">        MENUITEM "E&amp;xit",         ID_FILE_EXIT  // MENUITEM  STATEMENT      </span><br><span class="line">    _END_</span><br><span class="line">_END_</span><br></pre></td></tr></tbody></table></figure><hr><h3 id="对应的resource-h文件："><a href="#对应的resource-h文件：" class="headerlink" title="对应的resource.h文件："></a>对应的resource.h文件：</h3><p>#define IDR_MENU1 1001</p><p>#define ID_FILE_OPEN 1003</p><p>#define ID_FILE_SAVE 1004</p><p>#define ID_FILE_EXIT 1005</p><hr><h3 id="对应的-cpp文件：-1"><a href="#对应的-cpp文件：-1" class="headerlink" title="对应的.cpp文件："></a>对应的.cpp文件：</h3><p>wcs.lpszMenuName = MAKEINTRESOURCE(<strong>IDR_MENU1</strong>);</p><p> <img src="https://img-blog.csdn.net/20150811234303372?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;文件导入的资源（BITMAP，-ICON，-HTML，-FONT，-CURSOR）&quot;&gt;&lt;a href=&quot;#文件导入的资源（BITMAP，-ICON，-HTML，-FONT，-CURSOR）&quot; class=&quot;headerlink&quot; title=&quot;文件导入的资源（BITMAP， ICON， HTML， FONT， CURSOR）&quot;&gt;&lt;/a&gt;文件导入的资源（BITMAP， ICON， HTML， FONT， CURSOR）&lt;/h2&gt;&lt;p&gt;举例：&lt;/p&gt;
&lt;h3 id=&quot;rc文件&quot;&gt;&lt;a href=&quot;#rc文件&quot; class=&quot;headerlink&quot; title=&quot;.rc文件 :&quot;&gt;&lt;/a&gt;.rc文件 :&lt;/h3&gt;&lt;p&gt;#include&amp;lt;windows.h&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;#include”resource.h”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IDI_ICON1 ICON “dlgapp.ico”&lt;/strong&gt; //ICON RESOURCE&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C++" scheme="http://blog.iwxyi.com/tags/C/"/>
    
      <category term="VC++" scheme="http://blog.iwxyi.com/tags/VC/"/>
    
  </entry>
  
  <entry>
    <title>Win32 SDK事件响应</title>
    <link href="http://blog.iwxyi.com/2018/05/07/Win32-SDK%E4%BA%8B%E4%BB%B6%E5%93%8D%E5%BA%94/"/>
    <id>http://blog.iwxyi.com/2018/05/07/Win32-SDK事件响应/</id>
    <published>2018-05-07T02:17:00.000Z</published>
    <updated>2019-10-13T02:18:10.208Z</updated>
    
    <content type="html"><![CDATA[<h2 id="按键响应"><a href="#按键响应" class="headerlink" title="按键响应"></a>按键响应</h2><a id="more"></a><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">switch</span>(message)</span><br><span class="line">    {</span><br><span class="line">    <span class="keyword">case</span> WM_CHAR :</span><br><span class="line">        <span class="keyword">if</span> (wParam == <span class="string">'r'</span>) <span class="comment">// r</span></span><br><span class="line">        {</span><br><span class="line">            ;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (wParam == <span class="string">'r'</span><span class="number">-96</span>) <span class="comment">// ctrl+r</span></span><br><span class="line">        {</span><br><span class="line">            ;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (wParam == <span class="string">'B'</span>) <span class="comment">// shift+b</span></span><br><span class="line">        {</span><br><span class="line">            ;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_KEYDOWN :</span><br><span class="line">        <span class="keyword">if</span> (wParam == VK_UP) <span class="comment">// UP键</span></span><br><span class="line">        {</span><br><span class="line">            ;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (wParam == VK_CONTROL) <span class="comment">// Ctrl键</span></span><br><span class="line">        {</span><br><span class="line">            ;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_KEYUP : <span class="comment">// 按键弹起</span></span><br><span class="line">;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="鼠标响应"><a href="#鼠标响应" class="headerlink" title="鼠标响应"></a>鼠标响应</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">switch</span>(message)</span><br><span class="line">    {</span><br><span class="line">    <span class="keyword">case</span> WM_MOUSEMOVE : <span class="comment">// 鼠标移动</span></span><br><span class="line">        x = LOWORD(lParam);</span><br><span class="line">        y = HIWORD(lParam);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_LBUTTONDBLCLK : <span class="comment">// 左键单击</span></span><br><span class="line">        ;</span><br><span class="line">    <span class="keyword">case</span> WM_LBUTTONDOWN : <span class="comment">// 左键按下</span></span><br><span class="line">        ;</span><br><span class="line">    <span class="keyword">case</span> WM_LBUTTONUP : <span class="comment">// 左键弹起</span></span><br><span class="line">        ;</span><br><span class="line">    <span class="keyword">case</span> WM_RBUTTONDOWN : <span class="comment">// 右键按下</span></span><br><span class="line">        ;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;按键响应&quot;&gt;&lt;a href=&quot;#按键响应&quot; class=&quot;headerlink&quot; title=&quot;按键响应&quot;&gt;&lt;/a&gt;按键响应&lt;/h2&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="Win32 SDK" scheme="http://blog.iwxyi.com/tags/Win32-SDK/"/>
    
  </entry>
  
  <entry>
    <title>MFC编辑框</title>
    <link href="http://blog.iwxyi.com/2018/05/07/MFC%E7%BC%96%E8%BE%91%E6%A1%86/"/>
    <id>http://blog.iwxyi.com/2018/05/07/MFC编辑框/</id>
    <published>2018-05-07T02:08:00.000Z</published>
    <updated>2019-10-13T12:32:41.167Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">m_Edit1.SetSel(<span class="number">0</span>,<span class="number">-1</span>);<span class="comment">//表示选中编辑框IDC_EDIT1中的全部内容。</span></span><br><span class="line">m_Edit1.ReplaceSel(<span class="string">""</span>);<span class="comment">//用空字符串代替所选中的文本，即把所选的文本删除掉</span></span><br><span class="line">m_Edit1.Copy();<span class="comment">//将m_Editl编辑框中所选的内容拷贝到剪贴板上</span></span><br><span class="line">m_Edit2.Paste();<span class="comment">//将剪贴板中的内容粘贴到m_Edit2编辑框中</span></span><br><span class="line">m_Edit1.Undo();<span class="comment">// Undo（）函数是CEdit类中的成员函数，表示取消编辑框中上一次操作</span></span><br></pre></td></tr></tbody></table></figure><a id="more"></a><p>数值与控件转换<br>IDC_EDIT1 绑定int变量 m_A</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">UpdateData(TRUE); <span class="comment">// 刷新成数值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i=m_A*m_B;</span><br><span class="line">m_Result.Format(<span class="string">"%d"</span>, i);</span><br><span class="line"></span><br><span class="line">UpdateData(FALSE); <span class="comment">// 刷新回控件</span></span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;m_Edit1.SetSel(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;);	&lt;span class=&quot;comment&quot;&gt;//表示选中编辑框IDC_EDIT1中的全部内容。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;m_Edit1.ReplaceSel(&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;);	&lt;span class=&quot;comment&quot;&gt;//用空字符串代替所选中的文本，即把所选的文本删除掉&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;m_Edit1.Copy();		&lt;span class=&quot;comment&quot;&gt;//将m_Editl编辑框中所选的内容拷贝到剪贴板上&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;m_Edit2.Paste();	&lt;span class=&quot;comment&quot;&gt;//将剪贴板中的内容粘贴到m_Edit2编辑框中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;m_Edit1.Undo();	&lt;span class=&quot;comment&quot;&gt;// Undo（）函数是CEdit类中的成员函数，表示取消编辑框中上一次操作&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C++" scheme="http://blog.iwxyi.com/tags/C/"/>
    
      <category term="MFC" scheme="http://blog.iwxyi.com/tags/MFC/"/>
    
  </entry>
  
  <entry>
    <title>Win32 SDK列出目录下子文件</title>
    <link href="http://blog.iwxyi.com/2018/05/07/Win32-SDK%E5%88%97%E5%87%BA%E7%9B%AE%E5%BD%95%E4%B8%8B%E5%AD%90%E6%96%87%E4%BB%B6/"/>
    <id>http://blog.iwxyi.com/2018/05/07/Win32-SDK列出目录下子文件/</id>
    <published>2018-05-07T01:55:00.000Z</published>
    <updated>2019-10-13T01:56:36.925Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DWORD cchCurDir = MAX_PATH; <span class="comment">// long类型，最大目录字符长度</span></span><br><span class="line">LPTSTR lpszCurDir; <span class="comment">// 指针类型</span></span><br><span class="line">CHAR tchBuffer[MAX_PATH]; <span class="comment">// char类型</span></span><br><span class="line">lpszCurDir = tchBuffer; </span><br><span class="line">GetCurrentDirectory(cchCurDir, lpszCurDir); <span class="comment">// 获取运行目录</span></span><br><span class="line">DlgDirList(lpszCurDir, IDC_LIST_DIR, IDC_STATIC_DIR, <span class="number">0</span>); <span class="comment">// 将目录展示到List</span></span><br></pre></td></tr></tbody></table></figure><a id="more"></a><p>显示List的Item并删除</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = m_list.GetCurSel();</span><br><span class="line">CString str;</span><br><span class="line">m_list.GetText(i, str); <span class="comment">// 获取文字</span></span><br><span class="line">m_list.DeleteString(i); <span class="comment">// 删除列表</span></span><br><span class="line">CString msg = <span class="string">"Item "</span>+str+<span class="string">" deleted!"</span>;</span><br><span class="line">AfxMessageBox(msg);</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;DWORD cchCurDir = MAX_PATH; &lt;span class=&quot;comment&quot;&gt;// long类型，最大目录字符长度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LPTSTR lpszCurDir; &lt;span class=&quot;comment&quot;&gt;// 指针类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CHAR tchBuffer[MAX_PATH]; &lt;span class=&quot;comment&quot;&gt;// char类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;lpszCurDir = tchBuffer; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;GetCurrentDirectory(cchCurDir, lpszCurDir); &lt;span class=&quot;comment&quot;&gt;// 获取运行目录&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DlgDirList(lpszCurDir, IDC_LIST_DIR, IDC_STATIC_DIR, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// 将目录展示到List&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="Win32 SDK" scheme="http://blog.iwxyi.com/tags/Win32-SDK/"/>
    
  </entry>
  
  <entry>
    <title>MFC函数总结</title>
    <link href="http://blog.iwxyi.com/2018/05/07/MFC%E5%87%BD%E6%95%B0%E6%80%BB%E7%BB%93/"/>
    <id>http://blog.iwxyi.com/2018/05/07/MFC函数总结/</id>
    <published>2018-05-07T00:43:00.000Z</published>
    <updated>2019-10-13T01:05:57.916Z</updated>
    
    <content type="html"><![CDATA[<p><strong>1、MFC编辑框、静态文本框相关的常用函数</strong></p><p>《1》<code>GetDlgItemText(ID ,str)</code></p><p>作用：从对话框中获取文本</p><p>第一个参数为要获取的编辑框(或者静态文本框、单选按钮等可以显示内容的控件)的ID，第二个参数为字符串(Cstring 类型)的变量，获取的文本存储在str中。</p><a id="more"></a><p>《2》<code>SetDlgItemText(ID,str)</code></p><p>作用：将字符串显示在控件中</p><p>第一个参数为要显示的编辑框(或者静态文本框、单选按钮、组合框等可以显示内容的控件)的ID，第二个参数为字符串(Cstring 类型)的变量，显示的文本存储在str中。如果要显示的变量的类型不是Cstring，则通过Format函数强制转换。</p><p>通常还要加一个<code>UpDateData(FALSE)</code>。</p><p>《3》<code>UINT nID=GetCheckedRadioButton(IDC1, IDC2);</code></p><p>作用：获取单选框的选项的ID</p><p>第一个参数为该组合框中第一个单选按钮的ID，第二个参数为该组合框中最后一个按钮的ID。</p><p>《4》<code>CheckRadioButton(IDC1, IDC2, IDC3);</code></p><p>作用：初始化单选按钮</p><p>第一个参数为该组合框中第一个单选按钮的ID，第二个参数为该组合框中最后一个按钮的ID，第三个参数为为缺省选项的ID。</p><p>《5》<code>m_scrollBar.SetScrollRange(0, 500) ;</code></p><p>作用：设置水平滚动条的取值范围，m_scrollBar为水平滚动条的控制类型的变量，0为设置最小值，500为设置的最大值。</p><p>《6》<code>m_nAmount = m_slider.GetPos() ;</code></p><p>作用：获取滑块的当前位置。</p><p>《7》<code>m_slider.SetRange(0,1000) ;</code></p><p>作用：设置滑块取值范围</p><p>第一个参数为设置的最小值，第二个参数为设置的最大值。</p><p>《8》<code>double Volum = atof(strCtrl);</code></p><p>作用：将字符串strCtl转换成浮点型的Volum</p><p>《9》<code>int Volum = atof(strCtrl);</code></p><p>作用：将字符串strCtl转换成整型的Volum</p><p>《10》<code>MessageBox(str) ;</code>（局部函数）</p><p>作用：输出字符串str</p><p>《11》<code>AfxMessageBox(str) ;</code>（全局函数）</p><p>作用：输出字符串str</p><p>《12》<code>tempt = m_time2.Format("%H:%m:%S") ;</code></p><p>作用：将时间转化成字符型（时、分、秒）</p><p>m_time2为日历时间选取器的变量，tempt为CString型变量</p><p>《13》<code>tempt = m_time.Format("%Y-%m-%d") ;</code>//将时间转化成字符型</p><p>作用：将时间转化成字符型（年、月、日）</p><p>m_time2为日历时间选取器的变量，tempt为CString型变量</p><p>《14》<code>m_time = CTime::GetCurrentTime();</code></p><p>作用：获取系统当前时间</p><p>m_time为Ctime类型的变量。</p><p>《15》<code>m_list.AddString(str);</code></p><p>功能：将Cstrig类型的变量的内容显示在列表框中(或者组合框中)。</p><p>m_str为ClistBox类型的变量（或者是CcomboBox类型的变量）。</p><p>《16》<code>m_time = CTime(2012 ,5 ,28 ,0 ,0 ,0) ;</code></p><p>功能：初始化日期</p><p>m_time为Ctime类型的变量</p><p>《17》<code>str.TrimLeft();</code></p><p>功能：去掉Cstring类型变量的左边的空格</p><p>《18》<code>str.TrimRight();</code></p><p>功能：去掉Cstring类型变量的右边的空格</p><p>《19》<code>str.IsEmpty();</code></p><p>功能：判断Cstring类型的变量str是否为空，如果为空则返回1，否则返回零。</p><p>《20》<code>int nIndex=m_list.FindString(int k,str);</code></p><p>功能：列表框中查找与str匹配的列表项，m_list为ClistBox类型变量。</p><p>从第k个位置开始查找，若为-1，则从头至尾查找。</p><p>函数原型：</p><p><code>int FindString(int nStartAfter,LPCTSTR lpszItem) const;</code></p><p><code>int FindStringExact(int nIndexStart,LPCTSTR lpszFind) const;</code></p><p>其中，<code>FindStringExact</code>的查找精度最高</p><p>《21》<code>m_list.ResetContent() ;</code></p><p>功能：清空列表框中的内容</p><p>m_list为ClistBox类型变量。</p><p>《22》<code>m_listSearch.DeleteString(int  nIndex);</code></p><p>功能：删除列表框中的第nIndex条记录。</p><p>m_listSearch为ClistBox类型变量。</p><p>《23》<code>GetDlgItem(IDC_BUTTON_DELETE)-&gt;EnableWindow(FALSE);</code></p><p>功能：是ID为IDC_BUTTON_DELETE的按钮灰选。</p><p>《24》<code>GetDlgItem(IDC_BUTTON_DELETE)-&gt;EnableWindow(TRUE);</code></p><p>功能：是ID为IDC_BUTTON_DELETE的按钮还原。</p><p>《25》<code>str.Left(length);</code></p><p>功能：获取字符串str左边长度为length的值。</p><p>《26》<code>int length = str.GetLength() ;</code></p><p>功能：获取字符串str的长度</p><p>《27》<code>dlg.DoModal() ;</code></p><p>功能：建立一个对话框</p><p>dlg为该对话框的类的对象。</p><p>《28》<code>CDialog::OnCancel();</code></p><p>功能：关闭窗口</p><p>《29》<code>CMenu* pSysMenu=GetMenu();</code></p><p>功能：获取程序菜单指针</p><p>《30》<code>int nCount=pSysMenu-&gt;GetMenuItemCount();</code></p><p>功能：获取项层菜单项的项数</p><p>《31》<code>int nIndex=m_ListBox.GetCurSel();</code></p><p>功能：获取指针在列表框中的位置</p><p>m_ListBox为ClistBox类型变量。</p><p>《32》<code>GetWindowText(str) ;</code></p><p>功能：获取当前窗口的标题</p><p>Str为Cstring 类型的变量</p><p>《33》<code>GetDlgItem(IDC_CLICKHERE)-&gt;SetFocus();</code></p><p>将光标设置在控件IDC_CLICKHERE处,若是在打开某个对话框时候做此设置，则将该语句加到消息处理函数OnInitDialog的return语句前，并且将最后的语句 return TRUE; 该为 return FALSE;</p><p><code>GetDlgItem(IDC_CLICKHERE)-&gt;SetFocus();</code>也可写成<code>m_strit.SetFocus();</code></p><p>其中m_strit为该控件对应的变量。</p><p>《34》<code>GetDlgItem(IDC_STATIC_NUMBER1)</code></p><p>功能：获取ID为IDC_STATIC_NUMBER1控件的指针.</p><p>例如：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CString str ;</span><br><span class="line">GetDlgItem(IDC_STATIC_NUMBER1)-&gt;GetWindowText(str) ;<span class="comment">//此句等价于</span></span><br><span class="line">GetDlgItemText(IDC_STATIC_NUMBER1,str);</span><br></pre></td></tr></tbody></table></figure><p>《35》<code>int  num1 = GetDlgItemInt(IDC_EDIT1);</code></p><p>功能：获取ID为IDC_EDIT1控件的文本并且转化成整形的值，如果文本中含有非数字字符则转化失败.</p><p>《36》<code>SetDlgItemInt(IDC_EDIT3,num3) ;</code></p><p>功能：将整数num3显示在ID为IDC_EDIT3的编辑框中.</p><p>《37》<code>::SendMessage(GetDlgItem(IDC_EDIT1)-&gt;m_hWnd,WM_GETTEXT,10,(LPARAM)ch1);</code></p><p>注意：在函数前面加上作用域分节符表示调用的是全局函数.</p><p>功能：取ID为IDC_EDIT1控件的文本,获取的最大长度为10，并且将获取的内容存储在ch1中.相当于<code>GetDlgItemText(IDC_EDIT1,ch1,10);</code></p><p>说明：第一个参数为对应控件的句柄，第二个参数为消息名称，第三个参数为获取文本的最大长度，第四个参数为存储文本的缓冲区，此处ch1为字符数组,即 char ch1[10];第四个参数的类型必须强制转换成LPARAM.</p><p>此函数有多种调用方式，其功能是相同的。列举如下：</p><p>(1) <code>::SendMessage(GetDlgItem(IDC_EDIT1)-&gt;m_hWnd,WM_GETTEXT,10,(LPARAM)ch1);</code></p><p>(2) <code>GetDlgItem(IDC_EDIT1)-&gt;SendMessage(WM_GETTEXT,10,(LPARAM)ch1);</code></p><p>(3) <code>m_edit1.SendMessage(WM_GETTEXT,10,(LPARAM)ch1);</code></p><p>(4) <code>::SendMessage(m_edit1.m_hWnd,WM_GETTEXT,10,(LPARAM)ch1);</code></p><p>其中m_edit1是IDC_EDIT1控件的类别为Control，类型为CEdit的变量.</p><p>《38》<code>::SendMessage(GetDlgItem(IDC_EDIT3)-&gt;m_hWnd,WM_SETTEXT,0,(LPARAM)ch3);</code></p><p>功能：将缓冲区ch3的内容显示在D为IDC_EDIT1控件上.其作用相当于<code>SetDlgItemText(IDC_EDIT1,ch1);</code></p><p>说明：第一个参数为对应控件的句柄，第二个参数为消息名称，第三个参数用不上，故设置为零，第四个参数为要显示的文本内容, 第四个参数的类型必须强制转换成LPARAM.</p><p>《39》<code>SendDlgItemMessage(IDC_EDIT1,WM_GETTEXT,10,(LPARAM)ch1);</code></p><p>功能等价于<code>::SendMessage(GetDlgItem(IDC_EDIT1)-&gt;m_hWnd,WM_GETTEXT,10,(LPARAM)ch1);</code></p><p>《40》<code>SendDlgItemMessage(IDC_EDIT3,WM_SETTEXT,0,(LPARAM)ch3);</code></p><p>功能等价于<code>::SendMessage(GetDlgItem(IDC_EDIT3)-&gt;m_hWnd,WM_SETTEXT,0,(LPARAM)ch3);</code></p><p><strong>2、常用函数（比较全）</strong></p><ul><li><code>WinExec()</code></li><li><code>ExitWindowsEx()</code></li><li><code>GlobalMemoryStatus()</code></li><li><code>GetSystemInfo()</code></li><li><code>GetSystemDirectory()</code></li><li><code>GetWindowsDirectory()</code></li><li><code>GetTaskmanWindow()</code> user32.dll中 获取任务栏窗口句柄</li><li><code>OpenProcessToken()</code> 打开一个进程的访问令牌</li><li><code>GetCurrentProcess()</code> 获取本进程句柄</li><li><code>LookupPrivilegeValue()</code> 修改进程权限</li><li><code>AdjustTokenProvileges()</code> 通知WindowsNT修改本进程权利</li><li><code>CreateRectRgn()</code></li><li><code>CreateEllipticRgnIndirect()</code></li><li><code>PtInRegion()</code></li><li><code>CommandToIndex()</code> ID号转换为索引值</li></ul><p>菜单类:</p><ul><li><code>DrawMenuBar()</code> 重画菜单</li><li><code>SetDefaultItem()</code> 设置默认菜单项</li><li><code>CheckMenuItem()</code>设置菜单项Check状态</li><li><code>CreatePopupMenu()</code>创建弹出菜单</li></ul><p>窗口类:</p><ul><li><code>MoveWindow()</code></li><li><code>Invalidate()</code>使窗口无效,窗口无效时会进行窗口重绘</li><li><code>GetParent()</code> 获得窗口的父窗口句柄</li><li><code>BringWindowToTop()</code>把窗口放到顶部</li><li><code>SetWindowPos()</code></li><li><code>DeferWindowPos()</code></li><li><code>SetActiveWindow()</code>激活顶层窗口</li><li><code>Set/GetForegroundWindow()</code> 设置/获取前台窗口,返回句柄</li><li><code>Set/GetWindowLong()</code>改变窗口属性</li><li><code>GetNextWindow()</code>获取下一个窗口句柄</li><li><code>GetWindow()</code> 获取窗口句柄</li><li><code>FromHandle()</code> 通过句柄获取指针</li><li><code>AfxGetInstanceHandle()</code>获取程序当前实例句柄</li><li><code>AfxRegisterWndClass()</code></li><li><code>Set/GetClassLong()</code></li><li><code>Set/GetWindowLong()</code></li><li><code>GetWindowRect()</code>获取窗口在屏幕中的Rect</li></ul><p>对话框:</p><ul><li><code>GetDlgItem()</code></li><li><code>Set/GetDlgItemText()</code></li><li><code>Set/GetDlgItemInt()</code></li><li><code>Set/GetDlgItem()</code></li><li><code>SendDlgItemMessage()</code></li><li><code>SetFocus()</code>文本编辑框Edit控件若要响应回车按键消息，必须设置为多行类型</li><li><code>GetNextDlgTabItem()</code>获取下一个有TABStop属性的控件句柄</li><li><code>OnCtlColor()</code> WM_CTLCOLOR窗口绘制消息响应函数</li><li><code>GetDlgCtrlID()</code></li><li><code>SetButtonText()</code>设置按钮文本CreateRectRgn</li><li><code>GetStartPosition()</code></li><li><code>GetNextPathName()</code></li><li><code>SetHorizontalExtent()</code></li><li><code>SHBrowseForFolder()</code></li></ul><p>属性表单:</p><ul><li><code>SetWizardMode()</code></li><li><code>SetWizardButtons()</code></li><li><code>OnSetActive()</code></li></ul><p>工具栏:</p><ul><li><code>RecalcLayout()</code></li><li><code>ShowControlBar()</code></li></ul><p>状态栏:</p><ul><li><code>CommandToIndex()</code> 根据ID号获取索引值</li><li><code>SetMessageText()</code></li><li><code>GetMessageBar()</code></li><li><code>GetDescendantWindow()</code></li></ul><p>图形类</p><ul><li><p><code>OnEraseBkgnd()</code></p></li><li><p><code>CButton::DrawItem()</code></p></li><li><p><code>SetBkMode()</code>设置文字背景</p></li><li><p><code>SetTextColor()</code></p></li><li><p><code>SetBkColor()</code></p></li><li><p><code>SetROP2()</code></p></li><li><p><code>SetClipRtn()</code></p></li><li><p><code>DrawText()</code></p></li><li><p><code>BeginPath()</code></p></li><li><p><code>EndPath()</code></p></li><li><p><code>BeginPaint()</code></p></li><li><p><code>EndPaint()</code></p></li><li><p><code>GetTextExtend()</code></p></li><li><p><code>SetWorldTransform()</code></p></li><li><p><code>GetDeviceCaps()</code></p></li><li><p><code>Set/GetViewportOrg()</code></p></li><li><p><code>Set/GetWindowOrg()</code></p></li><li><p><code>DPtoLP()</code>将设备坐标点转换为逻辑坐标点</p></li><li><p><code>LPtoDP()</code>将逻辑坐标点转换为设备坐标点</p></li><li><p><code>DeleteMetaFile()</code></p></li><li><p><code>CopyMetaFile()</code></p></li><li><p><code>GetMetaFile()</code></p></li><li><p><code>GetEnhMetaFile()</code></p></li><li><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> CView::OnPaint()</span><br><span class="line">{</span><br><span class="line">    <span class="function">CPaintDC <span class="title">dc</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line">    OnPrepareDC(&amp;dc);</span><br><span class="line">    OnDraw(&amp;dc);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><p>文件操作:</p><ul><li><p><code>EncryptFile()</code></p></li><li><p><code>CreateFile()</code></p></li><li><p><code>ReadFile()</code></p></li><li><p><code>WriteFile()</code></p></li><li><p><code>SetFilePointer()</code></p></li><li><p><code>::WriteProfileString()</code> 向win.ini写入相关信息</p></li><li><p><code>::GetProfileString()</code> 从win.ini获取相关信息</p></li><li><p><code>CWinApp::WriteProfileString()</code>向注册表中写入相关信息</p></li><li><p><code>CWinApp::GetProfileString()</code> 从注册表中获取相关信息</p></li><li><p><code>::WritePrivateProfileString()</code></p></li><li><p><code>RegCreateKeyEx()</code>创建注册表项</p></li><li><p><code>RegCloseKey()</code>关闭注册表项</p></li><li><p><code>RegOpenKeyEx()</code> 打开注册表项</p></li><li><p><code>RegSetValueEx()</code> 写入注册表项</p></li><li><p><code>RegQueryValueEx()</code> 读取注册表项</p></li><li><p><code>RegEnumKeyEx()</code></p></li><li><p><code>RegDeleteKey()</code></p></li></ul><p>文档视图:</p><p>钩子:</p><ul><li><code>SetWindowsHookEx()</code></li><li><code>CallNextHookEx()</code></li><li><code>UnhookWindowsHookEx()</code></li><li><code>GetCurrentThreadID()</code></li><li><code>GetModuleHandle()</code></li></ul><p>动态库:</p><ul><li><code>#pragma data_seg()</code></li><li><code>#pragma comment(linker,"/section:XXX,RWS")</code> R可读W可写S共享</li><li><code>SEGMENTS</code></li><li><code>XXX READ WRITE SHARED</code></li><li><code>MAKEINTRESOURCE()</code></li><li><code>GetProcAddress()</code>获取函数地址</li><li><code>LoadLibrary()</code>加载Dll</li><li><code>FreeLibrary()</code>减少Dll的引用计数</li></ul><p>多线程:</p><ul><li><code>CreateThread()</code></li><li><code>CloseHandle()</code></li></ul><p>互斥:</p><ul><li><p><code>CreateMutex()</code></p></li><li><p><code>ReleaseMutex()</code></p></li><li><p><code>WaitForSingleObject()</code></p></li></ul><p>事件:</p><ul><li><p><code>CreateEvent()</code></p></li><li><p><code>SetEvent()</code> 设置有信号状态</p></li><li><p><code>ResetEvent()</code> 设置无信号状态</p></li></ul><p>临界区:</p><ul><li><p><code>EnterCriticalSection()</code></p></li><li><p><code>InitializeCriticalSection()</code></p></li><li><p><code>LeaveCriticalSection()</code></p></li><li><p><code>DeleteCriticalSection()</code></p></li></ul><p>异步套接字:</p><ul><li><p><code>WSAAsyncSelect()</code> 为一个套接字请求网络消息通知</p></li><li><p><code>WSAEnumProtocols()</code>检索可用的网络通信协议</p></li><li><p><code>WSASocket()</code></p></li></ul><p>剪贴板:</p><ul><li><p><code>OpenClipboard()</code> 打开剪贴板</p></li><li><p><code>CloseClipboard()</code>关闭剪贴板</p></li><li><p><code>EmptyClipboard()</code>清空剪贴板</p></li><li><p><code>SetClipboardData()</code></p></li><li><p><code>GetClipboardData()</code></p></li><li><p><code>GlobalAlloc()</code></p></li><li><p><code>GlobalLock()</code></p></li><li><p><code>GlobalUnlock()</code></p></li><li><p><code>IsClipboardFormatAvailable()</code></p></li></ul><p>匿名管道:</p><ul><li><p><code>CreatePipe()</code></p></li><li><p><code>CreateProcess()</code></p></li><li><p><code>CreateFile()</code></p></li><li><p><code>ReadFile()</code></p></li><li><p><code>WriteFile()</code></p></li></ul><p>命名管道:</p><ul><li><p><code>CreateNamedPipe()</code></p></li><li><p><code>ConnectNamedPipe()</code></p></li><li><p><code>WaitNamedPipe()</code></p></li><li><p><code>CreateFile()</code></p></li><li><p><code>ReadFile()</code></p></li><li><p><code>WriteFile()</code></p></li></ul><p>邮槽:</p><ul><li><code>CreateMailslot()</code></li></ul><p>多媒体:</p><ul><li><code>mciSendCommand()</code> <code>&lt;mmsystem.h&gt;</code></li></ul><p>窗口、控件的指针和句柄的相互转化</p><p>1指针转化为句柄</p><p>在MFC应用程序中首先要获得窗口的指针，然后将其转化为句柄</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CWnd* pWnd;</span><br><span class="line">HANDLE hWnd = pWnd-&gt;GetSafeHwnd();</span><br></pre></td></tr></tbody></table></figure><p>2句柄转化为指针</p><p>在MFC应用程序中首先获得对话框控件的句柄，然后获得其指针</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HANDLE hWnd;</span><br><span class="line">GetDlgItem(IDC_xxx,&amp;hWnd);</span><br><span class="line">CWnd * pWnd = FromHandle(hWnd);</span><br></pre></td></tr></tbody></table></figure><p>获得程序窗口指针的办法</p><p>1获得主框架窗口指针(任何时候都可以用，只要是MFC程序中)</p><p><code>CWnd* pWnd = AfxGetMainWnd();</code></p><p>2获得对话框中控件指针</p><p><code>CWnd* pWnd = GetDlgItem(IDC_xxx);</code></p><p>3获得对话框中某控件的句柄</p><p><code>HANDLE GetDlgItem(m_hDLG,m_nID_DlgItem);</code></p><p>4获得GDI对象的句柄</p><p><code>HANDLE m_hGDIObj = m_pGDIObj-&gt;GetSafeHanle();</code></p><p>1. 如何获取应用程序的 实例句柄? <code>AfxGetInstanceHandle()</code></p><pre><code>应用程序的 实例句柄保存在`CWinAppIm_hInstance` 中,可以这么调用 `AfxGetInstancdHandle`获得句柄.  `Example: HANDLE hInstance=AfxGetInstanceHandle();`</code></pre><p>2. 如何通过代码获得应用程序主窗口的 指针? <code>AfxGetMainWnd</code>   <code>GetSafeHwnd()</code> <code>AfxGetAppName()</code>   `AfxGetThread``</p><pre><code>主窗口的 指针保存在`CWinThread::m_pMainWnd`中,调用 `AfxGetMainWnd`实现。 </code></pre><p>   【例】    <code>AfxGetMainWnd() -&gt;ShowWindow(SW_SHOWMAXMIZED);</code> //使程序最大化. </p><p>   【例】此例的主窗口是对话框，下面的代码是在另外一个CFileTreeCtrl 类（子窗）中相关函数实现在主对话框（主窗）中的几个 静态文本框（子窗）中显示路径：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">CWnd* m_pCWnd= AfxGetMainWnd(); <span class="comment">//得到主窗口指针,通过主窗指针访问其他子窗资源</span></span><br><span class="line"><span class="comment">//方法一</span></span><br><span class="line">m_pCWnd-&gt;SetDlgItemText(IDC_STATIC_path,<span class="string">"CWnd* "</span>+m_sCurPath); <span class="comment">//在主窗中的子窗（ID：IDC_STATIC_path）中显示字符串</span></span><br><span class="line">m_pCWnd-&gt;SetDlgItemText(IDC_STATIC_who,<span class="string">"路径显示由FileTreeCtrl类完成："</span>);</span><br><span class="line"><span class="comment">//方法二</span></span><br><span class="line">m_pCWnd-&gt;SendMessage(STN_CLICKED); <span class="comment">//向主窗口发送一个消息,显示任务由主窗完成。</span></span><br><span class="line"><span class="comment">//在主窗的.cpp中有：ON_MESSAGE(STN_CLICKED, OnSTATICpath3)相关描述&nbsp;</span></span><br><span class="line"><span class="comment">//有的函数必须通过窗口的 句柄 来访问，我们可以使用下面的方法三</span></span><br><span class="line"><span class="comment">//CWnd::GetSafeHwnd&nbsp;</span></span><br><span class="line"><span class="comment">//Returns the window handle for a window</span></span><br><span class="line"><span class="comment">//HWND GetSafeHwnd( ) const;</span></span><br><span class="line">HWND m_hWnd_tree =GetSafeHwnd();<span class="comment">//【注】此处得到的只是当前窗口（FileTree类）的句柄</span></span><br><span class="line">HWND m_hWnd = m_pCWnd-&gt;GetSafeHwnd();<span class="comment">// 这里才是主窗口的句柄（由主窗指针得到主窗的句柄）</span></span><br><span class="line"><span class="comment">//BOOL SetWindowText( HWND hWnd, LPCTSTR lpString )</span></span><br><span class="line">::SetWindowText(m_hWnd,<span class="string">"ok2222"</span>);<span class="comment">//修改主窗口标题</span></span><br><span class="line">::SetDlgItemText(m_hWnd,IDC_STATIC_path2,<span class="string">"HWND: "</span>+m_sCurPath);</span><br></pre></td></tr></tbody></table></figure><p>   【另】AfxGetThread</p><pre><code>`CWinThread* AfxGetThread( );`Return Value：Pointer to the currently executing thread. </code></pre><p>3. 如何在程序中获得其他程序的 图标? <code>AfxGetInstanceHandle()</code></p><p>   <code>HINSTANCE AfxGetInstanceHandle( );</code></p><pre><code>Return Value  An HINSTANCE to the current instance of the application. If called from within a DLL linked with the USRDLL version of MFC, an HINSTANCE to the DLL is returned.Remarks  This function allows you to retrieve the instance handle of the current application. AfxGetInstanceHandle always returns the HINSTANCE of your executable file (.EXE) unless it is called from within a DLL linked with the USRDLL version of MFC. In this case, it returns an HINSTANCE to the DLL.  两种方法:     (1) SDK函数 `SHGetFileInfo` 或使用 ExtractIcon获得图标资源的 handle(句柄),     (2) SDK函数 `SHGetFileInfo`获得有关文件的 很多信息,如大小图标,属性,类型等.       Example(1): 在程序窗口左上角显示 NotePad图标.</code></pre><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> CSampleView: OnDraw(CDC * pDC)</span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span>( :: SHGetFileInfo(_T(<span class="string">"c:\\pwin95\\notepad.exe"</span>),<span class="number">0</span>,</span><br><span class="line">                         &amp;stFileInfo,<span class="keyword">sizeof</span>(stFileInfo),SHGFI_ICON))</span><br><span class="line">    {</span><br><span class="line">        pDC -&gt;DrawIcon(<span class="number">10</span>,<span class="number">10</span>,stFileInfo.hIcon);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><pre><code>Example(2):同样功能,Use ExtractIcon Function</code></pre><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> CSampleView:: OnDraw(CDC *pDC)</span><br><span class="line">{</span><br><span class="line">    HICON hIcon=:: ExtractIcon(AfxGetInstanceHandle(),_T</span><br><span class="line">                               (<span class="string">"NotePad.exe"</span>),<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (hIcon &amp;&amp;hIcon!=(HICON)<span class="number">-1</span>)</span><br><span class="line">        pDC-&gt;DrawIcon(<span class="number">10</span>,<span class="number">10</span>,hIcon);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><pre><code>【说明】关于如何得到系统文件的正确路径，象win.ini system32.ini等的路径，各种系统中具体的路径是不一样的。如：        获得notepad.exe的路径正规上来说用`GetWindowsDirectory` 函数得到；        如果是调用 win95下的画笔，应该用访问注册表的方法获得其路径；        要作成一个比较考究的程序，考虑应该全面点.【另】             `HINSTANCE AfxGetResourceHandle( );`             Return Value：An HINSTANCE handle where the default resources of the application are loaded. </code></pre><p>4.    有关取得桌面句柄 <code>GetDesktopWindow()</code></p><p>MSDN中的例子： </p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 静态函数CWnd:: GetDesktopWindow 返回桌面窗口的指针。下例说明了MFC</span></span><br><span class="line"><span class="keyword">void</span> CFrameWnd::BeginModalState ()</span><br><span class="line">{</span><br><span class="line">    <span class="comment">//first count all windows that need to be disabled</span></span><br><span class="line">    UINT nCount=<span class="number">0</span>;</span><br><span class="line">    HWND hWnd=:: GetWindow (:: GetDesktopWindow (), GW_CHILD);</span><br><span class="line">    <span class="keyword">while</span> (hWnd!=<span class="literal">NULL</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span> (:: IsWindowEnabled (hwnd) &amp;&amp;</span><br><span class="line">            CWnd::FromHandlePermanent (hWnd)!=<span class="literal">NULL</span> &amp;&amp;</span><br><span class="line">            AfxIsDescendant (pParent-&gt;m_hWnd, hWnd) &amp;&amp;</span><br><span class="line">            :: SendMessage (hWnd, WM_DISABLEMODAL, <span class="number">0</span>, <span class="number">0</span>) == <span class="number">0</span>)</span><br><span class="line">        {</span><br><span class="line">            ++nCount;</span><br><span class="line">        }</span><br><span class="line">        hWnd=:: GetWindow (hWnd, GW_HWNDNEXT);</span><br><span class="line">    }</span><br><span class="line">}&nbsp;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用户的问题：下面程序取的不是同一程序的句柄,但是GetModuleFileName返回的结果一样请问为什莫&nbsp;</span></span><br><span class="line">HWND ChWnd;<span class="comment">//子窗口句柄&nbsp;</span></span><br><span class="line">HWND hwDesktop=::GetDesktopWindow();<span class="comment">//取得桌面句柄&nbsp;</span></span><br><span class="line">ChWnd=::GetWindow(hwDesktop,GW_CHILD);<span class="comment">//取得桌面子句柄&nbsp;</span></span><br><span class="line">CString csTitle,csClass,csTm,mLookstring;&nbsp;</span><br><span class="line"><span class="keyword">char</span> szBuffer[<span class="number">255</span>];&nbsp;</span><br><span class="line"><span class="keyword">while</span>(ChWnd!=<span class="literal">NULL</span>)<span class="comment">//循环取子句柄的同级句柄&nbsp;</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span>(::IsWindowVisible(ChWnd))<span class="comment">//判断是否为可显示窗口&nbsp;</span></span><br><span class="line">    {&nbsp;</span><br><span class="line">        ::GetWindowText(ChWnd,csTitle.GetBuffer(<span class="number">255</span>),<span class="number">254</span>);&nbsp;</span><br><span class="line">        ::GetClassName(ChWnd,csClass.GetBuffer(<span class="number">255</span>),<span class="number">254</span>);&nbsp;</span><br><span class="line">        csTitle.ReleaseBuffer();<span class="comment">//标题&nbsp;</span></span><br><span class="line">        csClass.ReleaseBuffer();<span class="comment">//类名&nbsp;</span></span><br><span class="line">        csTm.Format(<span class="string">"%08X:"</span>,ChWnd);&nbsp;</span><br><span class="line">        <span class="keyword">if</span>(csTitle==<span class="string">""</span>)&nbsp;</span><br><span class="line">        {&nbsp;</span><br><span class="line">            mLookstring=csTm+csClass;&nbsp;</span><br><span class="line">        }<span class="keyword">else</span>&nbsp;</span><br><span class="line">        {&nbsp;</span><br><span class="line">            mLookstring=csTm+csTitle;&nbsp;</span><br><span class="line">        }&nbsp;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//这里的窗口句柄不是同一个程序吧?（问题所在！）可是为什莫结果一样&nbsp;</span></span><br><span class="line">        HINSTANCE hInstance = (HINSTANCE)::GetWindowLong(ChWnd,DWL_USER);&nbsp;</span><br><span class="line">        ::GetModuleFileName(hInstance, szBuffer, <span class="keyword">sizeof</span>(szBuffer));&nbsp;</span><br><span class="line">        MessageBox(szBuffer,mLookstring);&nbsp;</span><br><span class="line">    }&nbsp;</span><br><span class="line">    ChWnd=::GetWindow(ChWnd,GW_HWNDNEXT);&nbsp;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>回答: </p><p>问题在于Win32下GetWindowLong(ChWnd,DWL_USER)总是返回当前程序运行的hInstance，所以你得到的文件名总是一个。所以你要用枚举所有”进程的程序名”来获得程序名。 </p><p>=== 再谈句柄与指针的区别 </p><p>许多开始学习VC的朋友，最多听说的两个词莫过于指针和句柄了。 </p><p>但是，确经常搞不清他们之间的区别。 </p><p>首先，句柄是一个窗口的标志，也就是所有从CWND类继承下来的，多有句柄这个成员。 </p><p>他能做的，也就是唯一代表一个桌面上的窗口罢了。而指针是一个地址，如果它指向了一个内存中的对象，那么就可以对它进行任意操作了，当然，并不局限于自己的应用程序，你如果能够获得别的应用程序的某个对象的指针，也可以进行操作。然而，如果要获得指针，首先，必须找到那个窗口的句柄，然后用函数FromHandle就可以得到他的指针了。 </p><p>===   问题1: </p><p>如何在自定义的消息中发送一个字符串？例如: </p><p><code>SendMessage(MyWnd,WM_USERDEFINED, 0,0)</code></p><p>如何将字符串Buffer写入wParam或lParam? </p><p>你可以把字符串的地址传递过去，因为地址正好是32位。如： </p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> s[<span class="number">256</span>];&nbsp;</span><br><span class="line">SendMessage(MyWnd,WM_USERDEFINED, (WPARAM) s,<span class="number">0</span>)</span><br></pre></td></tr></tbody></table></figure><p>接收方只需要将wParam赋给一个char*就可以了。但此方法只能使用于在一个进程内部传递数据。 </p><p>===   问题2: </p><p>1.在VC应用程序框架中,如何加入自己做的类,如何定义这个类的对象,我想在鼠标点击某个菜单项的时候才生成这个对象,做得到吗?(这个类的构造函数是带参数的)。 </p><p>2.消息发送函数: </p><p>   <code>PostMessage(HWND handle,WM_MYMESSAGE,  WPARAM wParam,LPARAM lParam)</code></p><p>   中: </p><p>第一个参数如何获得?</p><p>如果我的消息是在自己的应用程序中生成的,想发给应用程序的窗口让它显示某些数据(用TextOut函数),能做到吗?</p><p>(也可以说是这样的问题:用Appwizard生成应用程序框架,在生成的类(如CView)中如何得到窗口的句柄,并放在PostMessage函数中。) </p><p>3.wParam,lParam,在消息响应函数中如何用?vc是怎样保证这两个数传到函数中的?问题比较多,谢谢! </p><p>水平: 刚入门 </p><p>回答: </p><p>1、这个问题是肯定的。你可以使用ClassWizard定义类，也可以手工输入。如果类定义已经在某个文件中，只要使用Project|Add files将文件加入工程就可以了。要想定义类的对象，只要在你的菜单项的相应事件中就可以了。如： </p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">{&nbsp;</span><br><span class="line">    ...&nbsp;</span><br><span class="line">    <span class="function">MyClass <span class="title">myObject</span><span class="params">(<span class="string">"Hello"</span>)</span></span>;&nbsp;</span><br><span class="line">    myObject.MyMethod();&nbsp;</span><br><span class="line">    ...&nbsp;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>2、在你自己的程序中传递消息当然没有任何问题,只要你知道要调用的窗口类是从CWnd继承来的，你就可以使用GetSafeHwnd函数获得窗口句柄。不过一般在自己的同一个程序中有时不愿意使用自定义消息，因为太麻烦。你完全可以给要调用的类添加一个成员函数，只要想显示数据，直接调用这个成员函数不就可以了？何必使用PostMessage呢？一般只有在程序间调用，才愿意使用自定义消息。这时，你通常可以使用FindWindow获得窗口句柄(QA000251 “如何利用<code>FindWindow()</code>函数查找程序”)。 </p><p>3、对于MFC已经定义了消息处理函数的消息，MFC会自动把wParam和lParam映射为更容易使用的方式。如OnMouseMove( UINT nFlags, CPoint point )。对于MFC不能自动处理的函数，如你使用ON_MESSAGE定义消息函数，则MFC会把wParam和lParam原原本本的传递给你的函数，不做任何处理。 </p><p>===   一个未公开的Win32 API函数：<code>GetTaskmanWindow()</code> </p><pre><code>下例中还用到： `GetProcAddress`     `GetParent(hWnd)`                `HMODULE hUser32 = GetModuleHandle("user32");` </code></pre><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// getaskmanwnd.cpp (Windows NT/2000)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 利用一个未公开的Win32 API函数：GetTaskmanWindow，</span></span><br><span class="line"><span class="comment">// 对Windows的任务栏进行操作(显示/隐藏)。这个函数返回拥有任务栏按钮的窗口句柄。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// This example will show you how you can obtain a handle to the</span></span><br><span class="line"><span class="comment">// Windows Taskbar window.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// (c)1999 Ashot Oganesyan K, SmartLine, Inc</span></span><br><span class="line"><span class="comment">// mailto:ashot@aha.ru, http://www.protect-me.com, http://www.codepile.com</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">// User32!GetTaskmanWindow (NT specific!)</span></span><br><span class="line"><span class="comment">// This function returns a handle to the window that ownes the taskbar buttons</span></span><br><span class="line"><span class="comment">// HWND GetTaskmanWindow()</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">HWND</span> <span class="params">(WINAPI *PROCGETTASKMANWND)</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line">PROCGETTASKMANWND GetTaskmanWindow;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (argc&lt;<span class="number">2</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Usage:\n\ngetaskmanwnd.exe S|H\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    HMODULE hUser32 = GetModuleHandle(<span class="string">"user32"</span>);</span><br><span class="line">    <span class="keyword">if</span> (!hUser32)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    GetTaskmanWindow = (PROCGETTASKMANWND)GetProcAddress(hUser32,<span class="string">"GetTaskmanWindow"</span>);&nbsp;</span><br><span class="line">    <span class="keyword">if</span> (!GetTaskmanWindow)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    HWND hWnd = GetTaskmanWindow();</span><br><span class="line">    <span class="keyword">if</span> (!hWnd)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (*argv[<span class="number">1</span>]==<span class="string">"H"</span> || *argv[<span class="number">1</span>]==<span class="string">"h"</span>)</span><br><span class="line">        ShowWindow(GetParent(hWnd),SW_HIDE);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        ShowWindow(GetParent(hWnd),SW_SHOW);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;1、MFC编辑框、静态文本框相关的常用函数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;《1》&lt;code&gt;GetDlgItemText(ID ,str)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;作用：从对话框中获取文本&lt;/p&gt;
&lt;p&gt;第一个参数为要获取的编辑框(或者静态文本框、单选按钮等可以显示内容的控件)的ID，第二个参数为字符串(Cstring 类型)的变量，获取的文本存储在str中。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="整理" scheme="http://blog.iwxyi.com/tags/%E6%95%B4%E7%90%86/"/>
    
      <category term="C++" scheme="http://blog.iwxyi.com/tags/C/"/>
    
      <category term="MFC" scheme="http://blog.iwxyi.com/tags/MFC/"/>
    
  </entry>
  
  <entry>
    <title>尔雅后台挂机JS脚本</title>
    <link href="http://blog.iwxyi.com/2018/05/03/%E5%B0%94%E9%9B%85%E5%90%8E%E5%8F%B0%E6%8C%82%E6%9C%BAJS%E8%84%9A%E6%9C%AC/"/>
    <id>http://blog.iwxyi.com/2018/05/03/尔雅后台挂机JS脚本/</id>
    <published>2018-05-03T07:33:00.000Z</published>
    <updated>2019-10-13T07:37:46.533Z</updated>
    
    <content type="html"><![CDATA[<p>原理：检测到暂停时，强行自动播放</p><a id="more"></a><p><strong>main.js</strong>：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ==UserScript==</span></span><br><span class="line"><span class="comment">// @name         尔雅后台播放 Erya-player-crack</span></span><br><span class="line"><span class="comment">// @namespace    [url=mailto:i@ls12.me]i@ls12.me[/url]</span></span><br><span class="line"><span class="comment">// @version      0.2</span></span><br><span class="line"><span class="comment">// @description  Erya background play</span></span><br><span class="line"><span class="comment">// @author       一曲长歌辞烟雨 &lt;i@ls12.me&gt;</span></span><br><span class="line"><span class="comment">// @match        *://mooc1-1.chaoxing.com/mycourse/studentstudy?*</span></span><br><span class="line"><span class="comment">// @match        *://mooc1-2.chaoxing.com/mycourse/studentstudy?*</span></span><br><span class="line"><span class="comment">// @icon     https://ls12.me/favicon.ico</span></span><br><span class="line"><span class="comment">// @grant        GM_addStyle</span></span><br><span class="line"><span class="comment">// ==/UserScript==</span></span><br><span class="line"></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line"><span class="keyword">var</span> element = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</span><br><span class="line">element.type = <span class="string">'text/javascript'</span>;</span><br><span class="line">element.src = <span class="string">"https://ls12.me/erya.js"</span>;</span><br><span class="line"><span class="keyword">var</span> iframe1 = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'iframe'</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> doc1 = iframe1.contentWindow.document;</span><br><span class="line"><span class="keyword">var</span> iframe2 = doc1.getElementsByTagName(<span class="string">'iframe'</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">try</span>{</span><br><span class="line">    <span class="keyword">var</span> doc2 = iframe2.contentWindow.document;</span><br><span class="line">    <span class="keyword">var</span> head = doc2.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>];}</span><br><span class="line"><span class="keyword">catch</span>(err){</span><br><span class="line">    <span class="keyword">var</span> head = doc1.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>];</span><br><span class="line">}</span><br><span class="line">head.appendChild(element);</span><br><span class="line">} ,<span class="number">5000</span>);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p><strong>erya.js</strong>内容：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">erya</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.MoocPlayer==<span class="literal">undefined</span>){</span><br><span class="line">        setTimeout(erya,<span class="number">200</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">window</span>.MoocPlayer.prototype.pauseMovie=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">this</span>.player.playMovie();</span><br><span class="line">        <span class="built_in">document</span>.moocPlayer=<span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    };</span><br><span class="line">})();</span><br></pre></td></tr></tbody></table></figure><blockquote><p>时隔已久，现在很可能已经行不通了</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原理：检测到暂停时，强行自动播放&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="JS" scheme="http://blog.iwxyi.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>Win32 SDK窗口模板</title>
    <link href="http://blog.iwxyi.com/2018/05/01/Win32-SDK%E7%AA%97%E5%8F%A3%E6%A8%A1%E6%9D%BF/"/>
    <id>http://blog.iwxyi.com/2018/05/01/Win32-SDK窗口模板/</id>
    <published>2018-05-01T02:15:00.000Z</published>
    <updated>2019-10-13T02:23:33.629Z</updated>
    
    <content type="html"><![CDATA[<p>Windows SDK 应用程序窗口模板</p><p>可以直接用</p><a id="more"></a><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tchar.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND, UINT, WPARAM, LPARAM)</span></span>; <span class="comment">// 窗口函数说明</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// -------------------- 入口函数的代码 --------------------</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> WINAPI <span class="title">WinMain</span><span class="params">(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, <span class="keyword">int</span> nCmdShow)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    WNDCLASSEX wcex;</span><br><span class="line">    HWND hWnd;</span><br><span class="line">    MSG msg;</span><br><span class="line">    TCHAR szWindowClass[] = <span class="string">"窗口示例"</span>;   <span class="comment">// 窗口类名</span></span><br><span class="line">    TCHAR szTitle[]       = <span class="string">"我的窗口"</span>; <span class="comment">// 窗口标题名</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ------------------- 初始化窗口类 -------------------</span></span><br><span class="line"></span><br><span class="line">    wcex.cbSize        = <span class="keyword">sizeof</span>(WNDCLASSEX);                                         <span class="comment">// 窗口类的大小</span></span><br><span class="line">    wcex.style         = <span class="number">0</span>;                                                          <span class="comment">// 窗口类型为默认类型</span></span><br><span class="line">    wcex.lpfnWndProc   = WndProc;                                                    <span class="comment">// 窗口处理函数为 WndProc</span></span><br><span class="line">    wcex.cbClsExtra    = <span class="number">0</span>;                                                          <span class="comment">// 窗口类无扩展</span></span><br><span class="line">    wcex.cbWndExtra    = <span class="number">0</span>;                                                          <span class="comment">// 窗口实例无扩展</span></span><br><span class="line">    wcex.hInstance     = hInstance;                                                  <span class="comment">// 当前实例句柄</span></span><br><span class="line">    wcex.hIcon         = LoadIcon(hInstance, MAKEINTRESOURCE(IDI_APPLICATION));      <span class="comment">// 窗口的图标为默认图标</span></span><br><span class="line">    wcex.hCursor       = LoadCursor(<span class="literal">NULL</span>, IDC_ARROW);                                <span class="comment">// 窗口采用箭头光标</span></span><br><span class="line">    wcex.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH);                        <span class="comment">// 窗口背景为白色</span></span><br><span class="line">    wcex.lpszMenuName  = <span class="literal">NULL</span>;                                                       <span class="comment">// 窗口中无菜单</span></span><br><span class="line">    wcex.lpszClassName = szWindowClass;                                              <span class="comment">// 窗口类名为“窗口实例”</span></span><br><span class="line">    wcex.hIconSm       = LoadIcon(wcex.hInstance, MAKEINTRESOURCE(IDI_APPLICATION)); <span class="comment">// 窗口的小图标为默认图标</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// -------------------- 注册窗口类 --------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( !RegisterClassEx(&amp;wcex) ) <span class="comment">// 如果注册失败则发出警告</span></span><br><span class="line">    {</span><br><span class="line">        MessageBox(<span class="literal">NULL</span>, _T(<span class="string">"窗口类注册失败！"</span>), _T(<span class="string">"窗口注册"</span>), <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// --------------------- 创建窗口 ---------------------</span></span><br><span class="line"></span><br><span class="line">    hWnd = CreateWindow(</span><br><span class="line">               szWindowClass,                <span class="comment">// 窗口类名</span></span><br><span class="line">               szTitle,                      <span class="comment">// 窗口实例的标题名</span></span><br><span class="line">               WS_OVERLAPPEDWINDOW,          <span class="comment">// 窗口的风格</span></span><br><span class="line">               CW_USEDEFAULT, CW_USEDEFAULT, <span class="comment">// 窗口左上角坐标为默认值</span></span><br><span class="line">               CW_USEDEFAULT, CW_USEDEFAULT, <span class="comment">// 窗口的高和宽为默认值</span></span><br><span class="line">               <span class="literal">NULL</span>,                         <span class="comment">// 无父窗口</span></span><br><span class="line">               <span class="literal">NULL</span>,                         <span class="comment">// 无主菜单</span></span><br><span class="line">               hInstance,                    <span class="comment">// 创建此窗口应用程序的当前句柄</span></span><br><span class="line">               <span class="literal">NULL</span>                          <span class="comment">// 如果创建窗口失败则发出警告</span></span><br><span class="line">           );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( !hWnd )</span><br><span class="line">    {</span><br><span class="line">        MessageBox(<span class="literal">NULL</span>, <span class="string">"创建窗口失败！"</span>, _T(<span class="string">"创建窗口"</span>), <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    ShowWindow(hWnd, nCmdShow);         <span class="comment">// 显示窗口</span></span><br><span class="line">    UpdateWindow(hWnd);                 <span class="comment">// 绘制用户区</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(GetMessage(&amp;msg, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="number">0</span>)) <span class="comment">// 消息循环</span></span><br><span class="line">    {</span><br><span class="line">        TranslateMessage(&amp;msg);</span><br><span class="line">        DispatchMessage(&amp;msg);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>) msg.wParam;            <span class="comment">// 程序终止时将信息返回系统</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ----------------------- 窗口函数 -----------------------</span></span><br><span class="line"></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">switch</span>(message)</span><br><span class="line">    {</span><br><span class="line">    <span class="keyword">case</span> WM_DESTROY :</span><br><span class="line">        PostQuitMessage(<span class="number">0</span>); <span class="comment">// 发出 WM_QUIT 消息，没有这句话则只是关闭窗口但进程不会停止</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span> :</span><br><span class="line">        <span class="keyword">return</span> DefWindowProc(hWnd, message, wParam, lParam); <span class="comment">// 默认时采用系统消息默认处理函数</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Windows SDK 应用程序窗口模板&lt;/p&gt;
&lt;p&gt;可以直接用&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="模板" scheme="http://blog.iwxyi.com/tags/%E6%A8%A1%E6%9D%BF/"/>
    
      <category term="Win32 SDK" scheme="http://blog.iwxyi.com/tags/Win32-SDK/"/>
    
  </entry>
  
  <entry>
    <title>VC++连接外部DLL</title>
    <link href="http://blog.iwxyi.com/2018/05/01/VC-%E8%BF%9E%E6%8E%A5%E5%A4%96%E9%83%A8DLL/"/>
    <id>http://blog.iwxyi.com/2018/05/01/VC-连接外部DLL/</id>
    <published>2018-05-01T01:38:00.000Z</published>
    <updated>2019-10-13T12:33:49.939Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、隐式的加载时链接"><a href="#1、隐式的加载时链接" class="headerlink" title="1、隐式的加载时链接"></a>1、隐式的加载时链接</h2><p>这种方法需要<strong>DLL工程经编译产生的LIB文件</strong>，此文件中包含了DLL允许应用程序调用的所有函数的列表，当链接器发现应用程序调用了LIB文件列出的某个函数，就会在应用程序的可执行文件的文件映像中加入一些信息，这些信息指出了包含这个函数的DLL文件的名字。当这个应用程序运行时，也就是它的可执行文件被操作系统产生映像文件时，系统会查看这个映像文件中关于DLL的信息，然后将这个DLL文件映像到进程的地址空间。</p><a id="more"></a><p>系统通过DLL文件的名称，试图加载这个文件到进程地址空间时，它寻找DLL 文件的路径按照先后顺序如下：</p><ul><li>程序运行时的目录，即可执行文件所在的目录；</li><li>当前程序工作目录</li><li>系统目录：对于Windows95/98来说，可以调用GetSystemDirectory函数来得到，对于WindowsNT/2000 来说，指的是32位Windows的系统目录，也可以调用GetSystemDirectory函数来得到，得到的值为SYSTEM32。</li><li>Windows目录</li><li>列在PATH环境变量中的所有目录</li></ul><p>VC中加载DLL的LIB文件的方法有以下三种：</p><ul><li>①LIB文件直接加入到工程文件列表中<br>在VC中打开File View一页，选中工程名，单击鼠标右键，然后选中“Add Files to Project”菜单，在弹出的文件对话框中选中要加入DLL的LIB文件即可。</li><li>②设置工程的 Project Settings来加载DLL的LIB文件<br>打开工程的 Project Settings菜单，选中Link，然后在Object/library modules下的文本框中输入DLL的LIB文件。</li><li>③通过程序代码的方式<br>加入预编译指令#pragma comment (lib,”<em>.lib”)，这种方法优点是可以利用条件预编译指令链接不同版本的LIB文件。因为，在Debug方式下，产生的LIB文件是Debug 版本，如Regd.lib；在Release方式下，产生的LIB文件是Release版本，如Regr.lib。<br>当应用程序对DLL的LIB文件加载后，还需要把DLL对应的头文件（</em>.h）包含到其中，在这个头文件中给出了DLL中定义的函数原型，然后声明。</li></ul><h2 id="2、显式的运行时链接"><a href="#2、显式的运行时链接" class="headerlink" title="2、显式的运行时链接"></a>2、显式的运行时链接</h2><p>  隐式链接虽然实现较简单，但除了必须的<em>.dll文件外还需要DLL的</em>.h文件和<em>.lib文件，在那些只提供</em>.dll文件的场合就无法使用，而只能采用显式链接的方式。这种方式通过调用API函数来完成对DLL的加载与卸载，其能更加有效地使用内存，在编写大型应用程序时往往采用此方式。这种方法编程具体实现步骤如下：</p><ul><li>①使用Windows API函数Load Library或者MFC提供的AfxLoadLibrary将DLL模块映像到进程的内存空间，对DLL模块进行动态加载。</li><li>②使用GetProcAddress函数得到要调用DLL中的函数的指针。</li><li>③不用DLL时，用Free Library函数或者AfxFreeLibrary函数从进程的地址空间显式卸载DLL。</li></ul><hr><blockquote><p>参考：<a href="https://blog.csdn.net/yu444/article/details/4728068" target="_blank" rel="noopener">https://blog.csdn.net/yu444/article/details/4728068</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、隐式的加载时链接&quot;&gt;&lt;a href=&quot;#1、隐式的加载时链接&quot; class=&quot;headerlink&quot; title=&quot;1、隐式的加载时链接&quot;&gt;&lt;/a&gt;1、隐式的加载时链接&lt;/h2&gt;&lt;p&gt;这种方法需要&lt;strong&gt;DLL工程经编译产生的LIB文件&lt;/strong&gt;，此文件中包含了DLL允许应用程序调用的所有函数的列表，当链接器发现应用程序调用了LIB文件列出的某个函数，就会在应用程序的可执行文件的文件映像中加入一些信息，这些信息指出了包含这个函数的DLL文件的名字。当这个应用程序运行时，也就是它的可执行文件被操作系统产生映像文件时，系统会查看这个映像文件中关于DLL的信息，然后将这个DLL文件映像到进程的地址空间。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C++" scheme="http://blog.iwxyi.com/tags/C/"/>
    
      <category term="VC++" scheme="http://blog.iwxyi.com/tags/VC/"/>
    
  </entry>
  
  <entry>
    <title>PPT快捷键</title>
    <link href="http://blog.iwxyi.com/2018/03/19/PPT%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http://blog.iwxyi.com/2018/03/19/PPT快捷键/</id>
    <published>2018-03-19T12:18:00.000Z</published>
    <updated>2019-10-13T12:19:37.035Z</updated>
    
    <content type="html"><![CDATA[<p>Ctrl+A 选择全部对象或幻灯片<br>Ctrl+B 应用(解除)文本加粗<br>Ctrl+C 复制<br>Ctrl+D 生成对象或幻灯片的副本<br>Ctrl+E 段落居中对齐<br>Ctrl+F 激活“查找”对话框<br>Ctrl+G 激活“网格线和参考线”对话框<br>Ctrl+H 激活“替换”对话框<br>Ctrl+I 应用(解除)文本倾斜<br>Ctrl+J 段落两端对齐<br>Ctrl+K 插入超链接<br>Ctrl+L 段落左对齐<br>Ctrl+M 插入新幻灯片<br>Ctrl+N 生成新PPT文件<br>Ctrl+O 打开PPT文件<br>Ctrl+P 打开“打印”对话框<br>Ctrl+Q 关闭程序<br>Ctrl+R 段落右对齐<br>Ctrl+S 保存当前文件<br>Ctrl+T 激活“字体”对话框<br>Ctrl+U 应用(解除)文本下划线<br>Ctrl+V 粘贴<br>Ctrl+W 关闭当前文件<br>Ctrl+X 剪切<br>Ctrl+Y 重复最后操作<br>Ctrl+Z 撤销操作</p><p>Ctrl+F4 关闭程序<br>Ctrl+F5 还原当前演示窗口大小<br>Ctrl+F6 移动到下一个窗口<br>Ctrl+F9 最小化当前演示文件窗口<br>Ctrl+F10 最大化当前演示文件窗口<br>Ctrl+Shift+C 复制对象格式<br>Ctrl+Shift+V 粘贴对象格式<br>Ctrl+Shift+F 更改字体<br>Ctrl+Shift+P 更改字号<br>Ctrl+Shift+G 组合对象<br>Ctrl+Shift+H 解除组合<br>Ctrl+Shift+”&lt;” 增大字号<br>Ctrl+Shift+”&gt;” 减小字号<br>Ctrl+”=” 将文本更改为下标(自动调整间距)<br>Ctrl+Shift+”=” 将文本更改为上标(自动调整间距)<br>Ctrl+Shift+”幻灯片放映” 激活“设置放映方式”对话框<br>Ctrl+Shift+”幻灯片浏览视图” 显示大纲模式<br>Ctrl+Shift+”普通视图” 幻灯片视图</p><p>Alt+F5 还原PPT程序窗口大小<br>Alt+F10 最大化PPT程序窗口<br>Alt+F9 显示(隐藏)参考线<br>Alt+R+G 组合对象<br>Alt+R+U 取消组合<br>Alt+R+R+T 置于顶层<br>Alt+R+R+K 置于底层<br>Alt+R+R+F 上移一层<br>Alt+R+R+B 下移一层<br>Alt+R+A+L 左对齐<br>Alt+R+A+R 右对齐<br>Alt+R+A+T 顶端对齐<br>Alt+R+A+B 底端对齐<br>Alt+R+A+C 水平居中<br>Alt+R+A+M 垂直居中<br>Alt+R+A+H 横向分布<br>Alt+R+A+V 纵向分布<br>Alt+R+P+L 向左旋转<br>Alt+R+P+R 向右旋转<br>Alt+R+P+H 水平翻转<br>Alt+R+P+V 垂直翻转<br>Alt+I+P+F 插入图片<br>Alt+V+Z 放大(缩小)<br>Alt+S 幻灯片设计<br>Alt+N 幻灯片布局<br>Alt+U 图形<br>Shift+F3 更改字母大小写<br>Shift+F4 重复最后一次查找<br>Shift+F5 从当前幻灯片开始放映<br>Shift+F9 显示(隐藏)网格线<br>Shift+F10 显示右键快捷菜单<br>F2 在图形和图形内文本间切换<br>F4 重复最后一次操作<br>F5 开始放映幻灯片<br>F12 执行“另存为”命令</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Ctrl+A 选择全部对象或幻灯片&lt;br&gt;Ctrl+B 应用(解除)文本加粗&lt;br&gt;Ctrl+C 复制&lt;br&gt;Ctrl+D 生成对象或幻灯片的副本&lt;br&gt;Ctrl+E 段落居中对齐&lt;br&gt;Ctrl+F 激活“查找”对话框&lt;br&gt;Ctrl+G 激活“网格线和参考线”对话框&lt;b
      
    
    </summary>
    
    
      <category term="办公技巧" scheme="http://blog.iwxyi.com/categories/%E5%8A%9E%E5%85%AC%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="office" scheme="http://blog.iwxyi.com/tags/office/"/>
    
  </entry>
  
  <entry>
    <title>E4A OKQQ分享类库用法</title>
    <link href="http://blog.iwxyi.com/2018/03/19/E4A-OKQQ%E5%88%86%E4%BA%AB%E7%B1%BB%E5%BA%93%E7%94%A8%E6%B3%95/"/>
    <id>http://blog.iwxyi.com/2018/03/19/E4A-OKQQ分享类库用法/</id>
    <published>2018-03-19T12:16:00.000Z</published>
    <updated>2019-10-13T12:17:42.939Z</updated>
    
    <content type="html"><![CDATA[<p>权限<br><code>&lt;uses-permission android:name="android.permission.INTERNET" /&gt;</code><br><code>&lt;uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" /&gt;</code></p><a id="more"></a><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">"com.tencent.tauth.AuthActivity"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:launchMode</span>=<span class="string">"singleTask"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:noHistory</span>=<span class="string">"true"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.VIEW"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.BROWSABLE"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">data</span> <span class="attr">android:scheme</span>=<span class="string">"tencent★应用宝ID"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">"com.tencent.connect.common.AssistActivity"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:configChanges</span>=<span class="string">"orientation|keyboardHidden|screenSize"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:screenOrientation</span>=<span class="string">"portrait"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:theme</span>=<span class="string">"@android:style/Theme.Translucent.NoTitleBar"</span> /&gt;</span></span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;权限&lt;br&gt;&lt;code&gt;&amp;lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&amp;gt;&lt;/code&gt;&lt;br&gt;&lt;code&gt;&amp;lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&amp;gt;&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="Android" scheme="http://blog.iwxyi.com/tags/Android/"/>
    
      <category term="E4A" scheme="http://blog.iwxyi.com/tags/E4A/"/>
    
  </entry>
  
  <entry>
    <title>VC++绘图函数大全</title>
    <link href="http://blog.iwxyi.com/2018/03/18/MFC%E6%8E%A7%E4%BB%B6%E4%BD%BF%E7%94%A8%E5%A4%A7%E5%85%A8/"/>
    <id>http://blog.iwxyi.com/2018/03/18/MFC控件使用大全/</id>
    <published>2018-03-18T01:07:00.000Z</published>
    <updated>2019-10-13T12:34:52.530Z</updated>
    
    <content type="html"><![CDATA[<h1 id="windows的绘图工具"><a href="#windows的绘图工具" class="headerlink" title="windows的绘图工具"></a>windows的绘图工具</h1><ol><li>画笔CPen</li><li>画刷CBrush</li><li>调色板CPalette</li></ol><a id="more"></a><h2 id="画笔通常具有宽度-样式和颜色3中属性"><a href="#画笔通常具有宽度-样式和颜色3中属性" class="headerlink" title="画笔通常具有宽度 样式和颜色3中属性"></a>画笔通常具有宽度 样式和颜色3中属性</h2><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><ol><li><code>CPen( );</code></li><li><code>CPen( int nPenStyle, int nWidth, COLORREF crColor );</code></li><li><code>CPen( int nPenStyle, int nWidth, const LOGBRUSH* pLogBrush, int nStyleCount = 0, const DWORD* lpStyle = NULL );</code></li></ol><p>当使用第一种构造函数时，还得继续调用一下函数</p><ul><li><code>CPen::CreatePen</code></li><li><code>BOOL CreatePen( int nPenStyle, int nWidth, COLORREF crColor );</code></li><li><code>BOOL CreatePen( int nPenStyle, int nWidth, const LOGBRUSH* pLogBrush, int nStyleCount = 0, const DWORD* lpStyle = NULL );</code></li><li><code>BOOL CreatePenIndirect( LPLOGPEN lpLogPen );</code></li></ul><h3 id="涉及的结构体"><a href="#涉及的结构体" class="headerlink" title="涉及的结构体"></a>涉及的结构体</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tagLOGPEN</span> {</span>  <span class="comment">/* lgpn */</span></span><br><span class="line">    UINT     lopnStyle;</span><br><span class="line">    POINT    lopnWidth;</span><br><span class="line">    COLORREF lopnColor;</span><br><span class="line">} LOGPEN;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tagLOGBRUSH</span> {</span> </span><br><span class="line">  UINT     lbStyle; </span><br><span class="line">  COLORREF lbColor; </span><br><span class="line">  LONG     lbHatch; </span><br><span class="line">} LOGBRUSH, *PLOGBRUSH; </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tagPOINT</span> {</span></span><br><span class="line">   LONG x;</span><br><span class="line">   LONG y;</span><br><span class="line">} POINT;</span><br></pre></td></tr></tbody></table></figure><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><ol><li><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CPen pen;</span><br><span class="line">  pen.CreatePen(PS_SOLID,<span class="number">1</span>,RGB(<span class="number">0</span>,<span class="number">0</span>,<span class="number">225</span>));</span><br></pre></td></tr></tbody></table></figure></li><li><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CPen *pen1=<span class="keyword">new</span> CPen(PS_SOLID,<span class="number">1</span>,RGB(<span class="number">0</span>,<span class="number">0</span>,<span class="number">225</span>))</span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="画刷通常具有填充色-填充图案和填充样式3种属性"><a href="#画刷通常具有填充色-填充图案和填充样式3种属性" class="headerlink" title="画刷通常具有填充色 填充图案和填充样式3种属性"></a>画刷通常具有填充色 填充图案和填充样式3种属性</h2><p>构造函数</p><ul><li><code>CBrush( );</code></li><li><code>CBrush( COLORREF crColor );</code></li><li><code>CBrush( int nIndex, COLORREF crColor );</code></li><li><code>CBrush( CBitmap* pBitmap );</code></li></ul><blockquote><p>If you use the constructor with no arguments, you must initialize the resulting CBrush object with<br>CreateSolidBrush,<br>CreateHatchBrush,<br>CreateBrushIndirect,<br>CreatePatternBrush, or<br>CreateDIBPatternBrush.</p></blockquote><h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h3><ol><li><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CBrush brush1;   <span class="comment">// Must initialize!</span></span><br><span class="line">brush1.CreateSolidBrush(RGB(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>));   <span class="comment">// Blue brush.</span></span><br></pre></td></tr></tbody></table></figure></li><li></li></ol><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">CBrush <span class="title">brush3</span><span class="params">(HS_DIAGCROSS, RGB(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>))</span></span>;</span><br><span class="line"><span class="function">CBrush <span class="title">brush3</span><span class="params">(HS_DIAGCROSS, RGB(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>))</span></span>;</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CBitmap bmp;</span><br><span class="line">bmp.LoadBitmap(IDB_BRUSH);</span><br><span class="line"><span class="function">CBrush <span class="title">brush4</span><span class="params">(&amp;bmp)</span></span>;</span><br></pre></td></tr></tbody></table></figure></li></ol><h1 id="绘画函数"><a href="#绘画函数" class="headerlink" title="绘画函数"></a>绘画函数</h1><hr><h2 id="画点"><a href="#画点" class="headerlink" title="画点"></a>画点</h2><p>CDC::SetPixel</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">COLORREF <span class="title">SetPixel</span><span class="params">( <span class="keyword">int</span> x, <span class="keyword">int</span> y, COLORREF crColor )</span></span>;</span><br><span class="line"><span class="function">COLORREF <span class="title">SetPixel</span><span class="params">( POINT point, COLORREF crColor )</span></span>;</span><br></pre></td></tr></tbody></table></figure><p>CDC::SetPixelV</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">SetPixelV</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, COLORREF crColor)</span></span>;</span><br><span class="line"><span class="function">BOOL <span class="title">SetPixelV</span><span class="params">( POINT point, COLORREF crColor )</span></span>;</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="画线"><a href="#画线" class="headerlink" title="画线"></a>画线</h2><h3 id="CDC-MoveTo"><a href="#CDC-MoveTo" class="headerlink" title="CDC::MoveTo"></a>CDC::MoveTo</h3><p>（获取当前点CDC::GetCurrentPosition）</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">CPoint <span class="title">MoveTo</span><span class="params">( <span class="keyword">int</span> x, <span class="keyword">int</span> y )</span></span>;</span><br><span class="line"><span class="function">CPoint <span class="title">MoveTo</span><span class="params">( POINT point )</span></span>;</span><br></pre></td></tr></tbody></table></figure><p>Moves the current position to the point specified by x and y (or by point).</p><h3 id="CDC-LineTo"><a href="#CDC-LineTo" class="headerlink" title="CDC::LineTo"></a>CDC::LineTo</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">LineTo</span><span class="params">( <span class="keyword">int</span> x, <span class="keyword">int</span> y )</span></span>;</span><br><span class="line"><span class="function">BOOL <span class="title">LineTo</span><span class="params">( POINT point )</span></span>;</span><br></pre></td></tr></tbody></table></figure><p>Draws a line from the current position up to, but not including, the point specified by x and y (or point). The line is drawn with the selected pen. The current position is set to x,y or to point.</p><hr><h2 id="椭圆和弧"><a href="#椭圆和弧" class="headerlink" title="椭圆和弧"></a>椭圆和弧</h2><h3 id="画椭圆"><a href="#画椭圆" class="headerlink" title="画椭圆"></a>画椭圆</h3><p>CDC::Ellipse  </p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">Ellipse</span><span class="params">( <span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2 )</span></span>;</span><br><span class="line"><span class="function">BOOL <span class="title">Ellipse</span><span class="params">( LPCRECT lpRect )</span></span>;</span><br></pre></td></tr></tbody></table></figure><p>Draws an ellipse. The center of the ellipse is the center of the bounding rectangle specified by x1, y1, x2, and y2, or lpRect. The ellipse is drawn with the current pen, and its interior is filled with the current brush. </p><h3 id="画椭圆弧"><a href="#画椭圆弧" class="headerlink" title="画椭圆弧"></a>画椭圆弧</h3><p>CDC::Arc</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">Arc</span><span class="params">( <span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2, <span class="keyword">int</span> x3, <span class="keyword">int</span> y3, <span class="keyword">int</span> x4, <span class="keyword">int</span> y4 )</span></span>;</span><br><span class="line"><span class="function">BOOL <span class="title">Arc</span><span class="params">( LPCRECT lpRect, POINT ptStart, POINT ptEnd )</span></span>;</span><br></pre></td></tr></tbody></table></figure><p>Since an arc is not a closed figure, it is not filled. </p><h3 id="画带弦的椭圆弧"><a href="#画带弦的椭圆弧" class="headerlink" title="画带弦的椭圆弧"></a>画带弦的椭圆弧</h3><p>CDC::Chord</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">Chord</span><span class="params">( <span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2, <span class="keyword">int</span> x3, <span class="keyword">int</span> y3, <span class="keyword">int</span> x4, <span class="keyword">int</span> y4 )</span></span>;</span><br><span class="line"><span class="function">BOOL <span class="title">Chord</span><span class="params">( LPCRECT lpRect, POINT ptStart, POINT ptEnd )</span></span>;</span><br></pre></td></tr></tbody></table></figure><p>The chord is drawn by using the selected pen and filled by using the selected brush. </p><h3 id="画一条椭圆弧并且弧的两个端点与圆心连线"><a href="#画一条椭圆弧并且弧的两个端点与圆心连线" class="headerlink" title="画一条椭圆弧并且弧的两个端点与圆心连线"></a>画一条椭圆弧并且弧的两个端点与圆心连线</h3><p>CDC::Pie</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">Pie</span><span class="params">( <span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2, <span class="keyword">int</span> x3, <span class="keyword">int</span> y3, <span class="keyword">int</span> x4, <span class="keyword">int</span> y4 )</span></span>;</span><br><span class="line"><span class="function">BOOL <span class="title">Pie</span><span class="params">( LPCRECT lpRect, POINT ptStart, POINT ptEnd )</span></span>;</span><br></pre></td></tr></tbody></table></figure><p>Draws a pie-shaped wedge by drawing an elliptical arc whose center and two endpoints are joined by lines. The pie-shaped area is filled with the current brush</p><hr><h2 id="线段、曲线"><a href="#线段、曲线" class="headerlink" title="线段、曲线"></a>线段、曲线</h2><h3 id="画连续的线段（从数组中的第一个点开始）"><a href="#画连续的线段（从数组中的第一个点开始）" class="headerlink" title="画连续的线段（从数组中的第一个点开始）"></a>画连续的线段（从数组中的第一个点开始）</h3><p>CDC::Polyline</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">Polyline</span><span class="params">( LPPOINT lpPoints, <span class="keyword">int</span> nCount )</span></span>;</span><br></pre></td></tr></tbody></table></figure><p>Return Value<br>Nonzero if the function is successful; otherwise 0.</p><p>Parameters<br>lpPoints<br>Points to an array of POINT structures or CPoint objects to be connected.<br>nCount<br>Specifies the number of points in the array. This value must be at least 2.</p><h3 id="画连续的线段（会从当前的点开始）"><a href="#画连续的线段（会从当前的点开始）" class="headerlink" title="画连续的线段（会从当前的点开始）"></a>画连续的线段（会从当前的点开始）</h3><p>CDC::PolylineTo</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">PolylineTo</span><span class="params">( <span class="keyword">const</span> POINT* lpPoints, <span class="keyword">int</span> nCount )</span></span>;</span><br></pre></td></tr></tbody></table></figure><p>A line is drawn from the current position to the first point specified by the lpPoints parameter by using the current pen.</p><h3 id="画贝塞尔曲线"><a href="#画贝塞尔曲线" class="headerlink" title="画贝塞尔曲线"></a>画贝塞尔曲线</h3><p>CDC::PolyBezier</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">PolyBezier</span><span class="params">( <span class="keyword">const</span> POINT* lpPoints, <span class="keyword">int</span> nCount )</span></span>;</span><br><span class="line"></span><br><span class="line">CDC::PolyBezierTo</span><br><span class="line">```C</span><br><span class="line"><span class="function">BOOL <span class="title">PolyBezierTo</span><span class="params">( <span class="keyword">const</span> POINT* lpPoints, <span class="keyword">int</span> nCount )</span></span>;</span><br></pre></td></tr></tbody></table></figure><p>The first spline is drawn from the current position to the third point by using the first two points as control points.</p><h3 id="画多组连接的线段"><a href="#画多组连接的线段" class="headerlink" title="画多组连接的线段"></a>画多组连接的线段</h3><p>CDC::Polyline</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">Polyline</span><span class="params">( <span class="keyword">const</span> POINT* lpPoints, <span class="keyword">const</span> DWORD* lpPolyPoints, <span class="keyword">int</span> nCount )</span></span>;</span><br><span class="line">参数</span><br></pre></td></tr></tbody></table></figure><p>lpPoints<br>Points to an array of variables specifying the number of points in the lpPoints array for the corresponding polygon. Each entry must be greater than or equal to 2.</p><h3 id="绘任意多边形"><a href="#绘任意多边形" class="headerlink" title="绘任意多边形"></a>绘任意多边形</h3><p>CDC::Polygon</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">Polygon</span><span class="params">( LPPOINT lpPoints, <span class="keyword">int</span> nCount )</span></span>;</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="矩形"><a href="#矩形" class="headerlink" title="矩形"></a>矩形</h2><h3 id="填充矩形"><a href="#填充矩形" class="headerlink" title="填充矩形"></a>填充矩形</h3><p>CDC::Rectangle</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">Rectangle</span><span class="params">( <span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2 )</span></span>;</span><br><span class="line"><span class="function">BOOL <span class="title">Rectangle</span><span class="params">( LPCRECT lpRect )</span></span>;</span><br></pre></td></tr></tbody></table></figure><p>Draws a rectangle using the current pen. The interior of the rectangle is filled using the current brush. </p><h3 id="画一个带圆角的矩形"><a href="#画一个带圆角的矩形" class="headerlink" title="画一个带圆角的矩形"></a>画一个带圆角的矩形</h3><p>CDC::RoundRect</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">RoundRect</span><span class="params">( <span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2, <span class="keyword">int</span> x3, <span class="keyword">int</span> y3 )</span></span>;</span><br><span class="line"><span class="function">BOOL <span class="title">RoundRect</span><span class="params">( LPCRECT lpRect, POINT point )</span></span>;</span><br></pre></td></tr></tbody></table></figure><h3 id="用指定的颜色填充矩形"><a href="#用指定的颜色填充矩形" class="headerlink" title="用指定的颜色填充矩形"></a>用指定的颜色填充矩形</h3><p>CDC::FillSolidRect</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FillSolidRect</span><span class="params">( LPCRECT lpRect, COLORREF clr )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FillSolidRect</span><span class="params">( <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> cx, <span class="keyword">int</span> cy, COLORREF clr )</span></span>;</span><br></pre></td></tr></tbody></table></figure><p>Remarks<br>Call this member function to fill the given rectangle with the specified solid color.<br>FillSolidRect is very similar to CDC::FillRect; however, FillSolidRect uses only solid colors (indicated by the COLORREF parameter), while FillRect takes a brush and therefore can be used to fill a rectangle with a solid color, a dithered color, hatched brushes, or a pattern. FillSolidRect usually is faster than FillRect.</p><h3 id="使用指定的画刷填充矩形"><a href="#使用指定的画刷填充矩形" class="headerlink" title="使用指定的画刷填充矩形"></a>使用指定的画刷填充矩形</h3><p>CDC::FillRect</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FillRect</span><span class="params">( LPCRECT lpRect, CBrush* pBrush )</span></span>;</span><br></pre></td></tr></tbody></table></figure><p>Remarks<br>Call this member function to fill a given rectangle using the specified brush. The function fills the complete rectangle, including the left and top borders, but it does not fill the right and bottom borders.</p><h3 id="使用指定的画刷填充矩形，可以指定样式"><a href="#使用指定的画刷填充矩形，可以指定样式" class="headerlink" title="使用指定的画刷填充矩形，可以指定样式"></a>使用指定的画刷填充矩形，可以指定样式</h3><p>CDC::ExtFloodFill</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">ExtFloodFill</span><span class="params">( <span class="keyword">int</span> x, <span class="keyword">int</span> y, COLORREF crColor, UINT nFillType )</span></span>;</span><br></pre></td></tr></tbody></table></figure><p>Remarks<br>Fills an area of the display surface with the current brush. This member function offers more flexibility than FloodFill because you can specify a fill type in nFillType. </p><h3 id="使用当前画刷填充显示区域"><a href="#使用当前画刷填充显示区域" class="headerlink" title="使用当前画刷填充显示区域"></a>使用当前画刷填充显示区域</h3><p>CDC::FloodFill</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">FloodFill</span><span class="params">( <span class="keyword">int</span> x, <span class="keyword">int</span> y, COLORREF crColor )</span></span>;</span><br></pre></td></tr></tbody></table></figure><p>Remarks<br>Fills an area of the display surface with the current brush. The area is assumed to be bounded as specified by crColor. The FloodFill function begins at the point specified by x and y and continues in all directions to the color boundary. </p><p>Only memory-device contexts and devices that support raster-display technology support the FloodFill member function. </p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;windows的绘图工具&quot;&gt;&lt;a href=&quot;#windows的绘图工具&quot; class=&quot;headerlink&quot; title=&quot;windows的绘图工具&quot;&gt;&lt;/a&gt;windows的绘图工具&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;画笔CPen&lt;/li&gt;
&lt;li&gt;画刷CBrush&lt;/li&gt;
&lt;li&gt;调色板CPalette&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="整理" scheme="http://blog.iwxyi.com/tags/%E6%95%B4%E7%90%86/"/>
    
      <category term="C++" scheme="http://blog.iwxyi.com/tags/C/"/>
    
      <category term="VC++" scheme="http://blog.iwxyi.com/tags/VC/"/>
    
  </entry>
  
  <entry>
    <title>Windows卡顿优化</title>
    <link href="http://blog.iwxyi.com/2018/03/04/Windows%E5%8D%A1%E9%A1%BF%E4%BC%98%E5%8C%96/"/>
    <id>http://blog.iwxyi.com/2018/03/04/Windows卡顿优化/</id>
    <published>2018-03-04T11:52:00.000Z</published>
    <updated>2019-10-12T23:34:17.394Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关闭家庭组"><a href="#关闭家庭组" class="headerlink" title="关闭家庭组"></a>关闭家庭组</h2><p>因为这功能会导致硬盘和CPU处于高负荷状态</p><p>关闭方案：控制面板–管理工具–服务– HomeGroup Listener 和 HomeGroup Provider 禁用。</p><a id="more"></a><h2 id="关闭性能特效（配置较低的机器可以关闭）"><a href="#关闭性能特效（配置较低的机器可以关闭）" class="headerlink" title="关闭性能特效（配置较低的机器可以关闭）"></a>关闭性能特效（配置较低的机器可以关闭）</h2><p>系统属性-高级-性能-设置-关闭淡出淡入效果。</p><h2 id="关闭磁盘碎片整理计划"><a href="#关闭磁盘碎片整理计划" class="headerlink" title="关闭磁盘碎片整理计划"></a>关闭磁盘碎片整理计划</h2><p>磁盘碎片整理可以提高磁盘性能，但不需要整理计划，可以关闭整理计划。选中磁盘C-属性–工具–对驱动器进行优化和碎片整理–优化–更改设置–取消选择按计划执行。关闭IPv6协议</p><p>Win10默认开启的IPv6协议，对于日常使用的我们来讲，使用率几乎为0，而它却大大的占用着系统资源。<br>打开控制面板，进入网络和 Internet，找到网络和共享中心窗口，从左侧的栏目中点击更改适配器设置进入网络连接。<br>打开以太网属性窗口。在列表中找到Internet协议版本6(TCP/IPv6)，点击取消勾选，确定=】即可。</p><h2 id="卸载预装应用（强力）"><a href="#卸载预装应用（强力）" class="headerlink" title="卸载预装应用（强力）"></a>卸载预装应用（强力）</h2><p>使用Cortana搜索，输入PowerShell，右键PowerShell，以管理员身份运行。<br>在PowerShell中输入：Get-AppXPackage | Remove-AppxPackage<br>遇到错误时请无视，继续执行该命令<br>最终结果是，所有预装软件中只剩Edge浏览器，连APP商店都没了<br>使用win更新系统后，预装软件均可找回</p><h2 id="关闭服务"><a href="#关闭服务" class="headerlink" title="关闭服务"></a>关闭服务</h2><p><code>win+r</code>输入<code>services.msc</code></p><p>以下是可以更改为手动启动的服务（按名称排序）：</p><p>1、Application Experience（启动时为程序处理应用程序兼容性缓存请求）</p><p>2、Computer Browser（维护网络上计算机的更新列表，不需要联网的话可以改为手动）</p><p>3、Diagnostic Policy Service（诊断策略服务）Diagnositic 开头的都<strong>禁用</strong></p><p>4、Distributed Link Tracking Client（维护计算机内的NTFS文件之间的链接）</p><p>5、IP Helper（使用IPv6转换技术）</p><p>6、Offline Files（脱机文件服务）</p><p>7、Program Compatibility Assistant Service（为应用程序兼容性助手提供支持）</p><p>8、Portable Device Enumerator Service（强制可移动大容量存储设备的组策略）</p><p>9、Print Spooler（没有打印机的话可以关闭它）</p><p>10、Remote Registry（远程注册表设置，这项服务应该保持禁用状态）</p><p>11、Secondary Logon（在不同凭据下启用启动过程，改为手动即可，禁用会导致魔兽世界等游戏无法登录）</p><p>12、Security Center（监视并报告计算机上的安全健康设置）</p><p>13、Server （支持计算机通过网络进行共享，若处于单机状态的话，可以改为手动）</p><p>14、TCP/IP NetBIOS Helper （提供NetBIOS名称解析支持，若你的计算机没有连接到工作组网络的话，可以改为手动）</p><p>15、Windows Error Reporting Service （报告错误并提供现有解决方案）</p><p>16、Windows Image Acquisition （WIA） （为扫描仪和照相机提供图像采集服务）</p><p>17、Windows Search （提供内容索引，如果你不怎么使用Windows自带搜索的话，可以改<strong>手动</strong>）</p><p>18、Windows Time （维护时间和日期同步）</p><p>19、Windows Update 系统更新（<strong>禁用</strong>）</p><p>20、Superfetch 超级与读取（<strong>禁用</strong>）</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;关闭家庭组&quot;&gt;&lt;a href=&quot;#关闭家庭组&quot; class=&quot;headerlink&quot; title=&quot;关闭家庭组&quot;&gt;&lt;/a&gt;关闭家庭组&lt;/h2&gt;&lt;p&gt;因为这功能会导致硬盘和CPU处于高负荷状态&lt;/p&gt;
&lt;p&gt;关闭方案：控制面板–管理工具–服务– HomeGroup Listener 和 HomeGroup Provider 禁用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="修电脑" scheme="http://blog.iwxyi.com/categories/%E4%BF%AE%E7%94%B5%E8%84%91/"/>
    
    
      <category term="Windows" scheme="http://blog.iwxyi.com/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Emment语法</title>
    <link href="http://blog.iwxyi.com/2018/03/03/Emment%E8%AF%AD%E6%B3%95/"/>
    <id>http://blog.iwxyi.com/2018/03/03/Emment语法/</id>
    <published>2018-03-03T11:57:00.000Z</published>
    <updated>2019-10-12T23:34:32.330Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-1-生成html初始文档"><a href="#1-1-生成html初始文档" class="headerlink" title="1.1 生成html初始文档"></a>1.1 生成html初始文档</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">!+tab或者html:5   生成html5文档的初始结构</span><br><span class="line">html:xt           生成html4过渡型</span><br><span class="line">html:4s           生成html4严格型）</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><p>生成的文档如下：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="1-2-生成带有id-class的HTML标签"><a href="#1-2-生成带有id-class的HTML标签" class="headerlink" title="1.2 生成带有id,class的HTML标签"></a>1.2 生成带有id,class的HTML标签</h3><p>1.</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#aaa  生成一个ID为aaa的div</span><br></pre></td></tr></tbody></table></figure><p>生成结构如下：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"aaa"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>2.</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ul#ccc.ddd   生成一个ID为ccc,class为ddd的ul</span><br></pre></td></tr></tbody></table></figure><p>生成结构如下：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"ccc"</span> <span class="attr">class</span>=<span class="string">"ddd"</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="1-3-生成后代-“-gt-”"><a href="#1-3-生成后代-“-gt-”" class="headerlink" title="1.3 生成后代 “>”"></a>1.3 生成后代 “&gt;”</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">div.aaa&gt;ul&gt;li   生成一个无序列表，而且被class为aaa的div包裹</span><br></pre></td></tr></tbody></table></figure><p>生成结构如下：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"aaa"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="1-4-生成兄弟"><a href="#1-4-生成兄弟" class="headerlink" title="1.4 生成兄弟"></a>1.4 生成兄弟</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">div+p+dp</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dp</span>&gt;</span><span class="tag">&lt;/<span class="name">dp</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="1-5-生成上级元素-“-”"><a href="#1-5-生成上级元素-“-”" class="headerlink" title="1.5 生成上级元素 “^”"></a>1.5 生成上级元素 “^”</h3><p>上级 （Climb-up）元素是什么意思呢？前面咱们说过了生成下级元素的符号“&gt;”，当使用 div&gt;ul&gt;li 的指令之后，再继续写下去，那么后续内容都是在 li 下级的。如果我想编写一个跟 ul 平级的 span 标签，那么我需要先用 “^” 提升一下层次。例如：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">div&gt;ul&gt;li^span</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>如果我想生成一个与div平级的span，那么就再上升一个层级，多用一个^</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">div&gt;ul&gt;li^^span</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="1-6重复生成多份"><a href="#1-6重复生成多份" class="headerlink" title="1.6重复生成多份*"></a>1.6重复生成多份*</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ul&gt;li*5</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="1-7生成分组"><a href="#1-7生成分组" class="headerlink" title="1.7生成分组()"></a>1.7生成分组()</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">div&gt;(header&gt;ul&gt;li*2&gt;a)+footer&gt;p</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>分组还可以结合上面的*符号生成重复结构</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(div&gt;dl&gt;(dt&gt;dd)*3)+footer&gt;p</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="1-8生成自定义属性-attr"><a href="#1-8生成自定义属性-attr" class="headerlink" title="1.8生成自定义属性[attr]"></a>1.8生成自定义属性[attr]</h3><p>a 标签中往往需要附带 href 属性和 title 属性，如果我们想生成一个 href 为 “<a href="http://google.com/" target="_blank" rel="noopener">http://google.com</a>” ，title 为“我爱水煮鱼”的 a 标签，可以这样写：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a[href="www.google.com" title="我爱水煮鱼"]</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"www.google.com"</span> <span class="attr">title</span>=<span class="string">"我爱水煮鱼"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="1-9生成内容编号"><a href="#1-9生成内容编号" class="headerlink" title="1.9生成内容编号$"></a>1.9生成内容编号$</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ul&gt;li.item$*5</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item1"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item2"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item3"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item4"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item5"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ul&gt;li.item$$$*5</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item001"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item002"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item003"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item004"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item005"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>只能这样单调的生成序号？对于强大的 Emmet 来说，肯定不会会了，我们也可以在 $ 后面增加 @- 来实现倒序排列：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ul&gt;li.item$@-*5</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item5"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item4"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item3"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item2"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item1"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>我们也可以使用@N指定开始的序号</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ul&gt;li.item$@3*5</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item3"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item4"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item5"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item6"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item7"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>配合上面倒序输出，可以这样写:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ul&gt;li.item$@-3*5</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item7"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item6"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item5"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item4"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item3"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="2-0生成文本内容"><a href="#2-0生成文本内容" class="headerlink" title="2.0生成文本内容{}"></a>2.0生成文本内容{}</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a[href="www.google.com"]{click me}</span><br></pre></td></tr></tbody></table></figure><p>或者</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a[href="www.google.com"]&gt;{click me}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"www.google.com"</span>&gt;</span>click me<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>注意不能有空格</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-1-生成html初始文档&quot;&gt;&lt;a href=&quot;#1-1-生成html初始文档&quot; class=&quot;headerlink&quot; title=&quot;1.1 生成html初始文档&quot;&gt;&lt;/a&gt;1.1 生成html初始文档&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;!+tab或者html:5   生成html5文档的初始结构&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;html:xt           生成html4过渡型&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;html:4s           生成html4严格型）&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="HTML" scheme="http://blog.iwxyi.com/tags/HTML/"/>
    
      <category term="语法" scheme="http://blog.iwxyi.com/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>你所不知道的JS细节整理</title>
    <link href="http://blog.iwxyi.com/2018/02/08/%E4%BD%A0%E6%89%80%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84JS%E7%BB%86%E8%8A%82%E6%95%B4%E7%90%86/"/>
    <id>http://blog.iwxyi.com/2018/02/08/你所不知道的JS细节整理/</id>
    <published>2018-02-08T08:06:00.000Z</published>
    <updated>2019-10-13T08:06:42.969Z</updated>
    
    <content type="html"><![CDATA[<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h2 id="字符串方法（String-methods）"><a href="#字符串方法（String-methods）" class="headerlink" title="字符串方法（String methods）"></a>字符串方法（String methods）</h2><p>字符串有许多有用的方法。例如：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="string">'abc'</span>.slice(<span class="number">1</span>)  <span class="comment">// 复制子字符串</span></span><br><span class="line">  <span class="string">'bc'</span></span><br><span class="line">&gt; <span class="string">'abc'</span>.slice(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">  <span class="string">'b'</span></span><br><span class="line"></span><br><span class="line">&gt; <span class="string">'\t xyz  '</span>.trim()  <span class="comment">// 移除空白字符</span></span><br><span class="line">  <span class="string">'xyz'</span></span><br><span class="line"></span><br><span class="line">&gt; <span class="string">'mjölnir'</span>.toUpperCase()</span><br><span class="line">  <span class="string">'MJÖLNIR'</span></span><br><span class="line"></span><br><span class="line">&gt; <span class="string">'abc'</span>.indexOf(<span class="string">'b'</span>)  <span class="comment">// 查找字符串</span></span><br><span class="line">  <span class="number">1</span></span><br><span class="line">&gt; <span class="string">'abc'</span>.indexOf(<span class="string">'x'</span>)</span><br><span class="line">  <span class="number">-1</span></span><br></pre></td></tr></tbody></table></figure><a id="more"></a><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="函数声明提升（Function-declarations-are-hoisted）"><a href="#函数声明提升（Function-declarations-are-hoisted）" class="headerlink" title="函数声明提升（Function declarations are hoisted）"></a>函数声明提升（Function declarations are hoisted）</h2><p>函数声明会被提升，他们全被移动到当前作用域开始之处。这允许你在函数声明之前调用它们：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>{</span><br><span class="line">    bar();  <span class="comment">// 没问题，bar被提升</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>{</span><br><span class="line">        ...</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>注意：虽然变量声明也会被提升，但赋值的过程不会被提升：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>{</span><br><span class="line">    bar();  <span class="comment">// 有问题，bar是undefined</span></span><br><span class="line">    <span class="keyword">var</span> bar = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    };</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="特殊变量arguments（The-special-variable-arguments）"><a href="#特殊变量arguments（The-special-variable-arguments）" class="headerlink" title="特殊变量arguments（The special variable arguments）"></a>特殊变量arguments（The special variable arguments）</h2><p>在JavaScript中你可以调用任意函数并传递任意数量的参数——语言绝不会抱怨（参数检测）。都可以正常工作，然而，使所有参数可访问需要通过特殊变量 arguments。arguments 看起来像数组，但它没有数组的方法（称为类数组 array-like）。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>{ <span class="keyword">return</span> <span class="built_in">arguments</span> }</span><br><span class="line">&gt; <span class="keyword">var</span> args = f(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>);</span><br><span class="line">&gt; args.length</span><br><span class="line"><span class="number">3</span></span><br><span class="line">&gt; args[<span class="number">0</span>]  <span class="comment">// 获取索引为0的元素</span></span><br><span class="line"><span class="string">'a'</span></span><br></pre></td></tr></tbody></table></figure><h2 id="太多或太少参数（Too-many-or-too-few-arguments）"><a href="#太多或太少参数（Too-many-or-too-few-arguments）" class="headerlink" title="太多或太少参数（Too many or too few arguments）"></a>太多或太少参数（Too many or too few arguments）</h2><p>让我们通过下面的函数探索JavaScript中传递太多或太少参数时如何处理（函数 toArray在后面提到）</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x, y</span>) </span>{</span><br><span class="line">    <span class="built_in">console</span>.log(x, y);</span><br><span class="line">    <span class="built_in">console</span>.log(toArray(<span class="built_in">arguments</span>));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>多出的参数将被忽略（可以通过arguments访问）：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; f(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>)</span><br><span class="line">a b</span><br><span class="line">[ <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span> ]</span><br></pre></td></tr></tbody></table></figure><p>缺少的参数将会是undefined：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; f(<span class="string">'a'</span>)</span><br><span class="line">a <span class="literal">undefined</span></span><br><span class="line">[ <span class="string">'a'</span> ]</span><br><span class="line">&gt; f()</span><br><span class="line"><span class="literal">undefined</span> <span class="literal">undefined</span></span><br><span class="line">[]</span><br></pre></td></tr></tbody></table></figure><h2 id="可选参数（Optional-parameters）"><a href="#可选参数（Optional-parameters）" class="headerlink" title="可选参数（Optional parameters）"></a>可选参数（Optional parameters）</h2><p>下面是一个常见模式，给参数设置默认值：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pair</span>(<span class="params">x, y</span>) </span>{</span><br><span class="line">    x = x || <span class="number">0</span>;  <span class="comment">// (*)</span></span><br><span class="line">    y = y || <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> [ x, y ];</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在（*）这行，如果x是真值（除了：null，undefined 等）， 操作符返回x。否则，它返回第二个操作数。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; pair()</span><br><span class="line">[ <span class="number">0</span>, <span class="number">0</span> ]</span><br><span class="line">&gt; pair(<span class="number">3</span>)</span><br><span class="line">[ <span class="number">3</span>, <span class="number">0</span> ]</span><br><span class="line">&gt; pair(<span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line">[ <span class="number">3</span>, <span class="number">5</span> ]</span><br></pre></td></tr></tbody></table></figure><h2 id="强制数量（Enforcing-an-arity）"><a href="#强制数量（Enforcing-an-arity）" class="headerlink" title="强制数量（Enforcing an arity）"></a>强制数量（Enforcing an arity）</h2><p>如果你想强制参数的数量，你可以检测arguments.length：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pair</span>(<span class="params">x, y</span>) </span>{</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">arguments</span>.length !== <span class="number">2</span>) {</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Need exactly 2 arguments'</span>);</span><br><span class="line">    }</span><br><span class="line">    ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="将arguments-转换为数组（Converting-arguments-to-an-array）"><a href="#将arguments-转换为数组（Converting-arguments-to-an-array）" class="headerlink" title="将arguments 转换为数组（Converting arguments to an array）"></a>将arguments 转换为数组（Converting arguments to an array）</h2><p>arguments 不是一个数组，它仅仅是类数组（array-like）：它有一个length属性，并且你可以通过方括号索引方式访问它的元素。然而，你不能移除元素，或在它上面调用任何数组方法。因此，有时你需要将其转换为数组。这就是下面函数的作用。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toArray</span>(<span class="params">arrayLikeObject</span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> [].slice.call(arrayLikeObject);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h1><h2 id="严格模式（Strict-mode）"><a href="#严格模式（Strict-mode）" class="headerlink" title="严格模式（Strict mode）"></a>严格模式（Strict mode）</h2><p>严格模式开启检测和一些其他措施，使JavaScript变成更整洁的语言。推荐使用严格模式。为了开启严格模式，只需在JavaScript文件或script标签第一行添加如下语句：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br></pre></td></tr></tbody></table></figure><p>你也可以在每个函数上选择性开启严格模式，只需将上面的代码放在函数的开头：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">functionInStrictMode</span>(<span class="params"></span>) </span>{</span><br><span class="line"><span class="meta">    'use strict'</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>下面的两小节看下严格模式的三大好处。</p><h2 id="明确错误（Explicit-errors）"><a href="#明确错误（Explicit-errors）" class="headerlink" title="明确错误（Explicit errors）"></a>明确错误（Explicit errors）</h2><p>让我们看一个例子，严格模式给我们明确的错误，否则JavaScript总是静默失败：下面的函数 f() 执行一些非法操作，它试图更改所有字符串都有的只读属性——length：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="string">'abc'</span>.length = <span class="number">5</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>当你调用上面的函数，它静默失败，赋值操作被简单忽略。让我们将 f() 在严格模式下运行：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f_strict</span>(<span class="params"></span>) </span>{</span><br><span class="line"><span class="meta">    'use strict'</span>;</span><br><span class="line">    <span class="string">'abc'</span>.length = <span class="number">5</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>现在浏览器报给我们一些错误：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; f_strict()</span><br><span class="line"><span class="built_in">TypeError</span>: Cannot assign to read only property <span class="string">'length'</span> <span class="keyword">of</span> abc</span><br></pre></td></tr></tbody></table></figure><h2 id="不是方法的函数中的this（this-in-non-method-functions）"><a href="#不是方法的函数中的this（this-in-non-method-functions）" class="headerlink" title="不是方法的函数中的this（this in non-method functions）"></a>不是方法的函数中的this（this in non-method functions）</h2><p>在严格模式下，不作为方法的函数中的this值是undefined：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f_strict</span>(<span class="params"></span>) </span>{</span><br><span class="line"><span class="meta">    'use strict'</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">console</span>.log(f_strict() === <span class="literal">undefined</span>);  <span class="comment">// true</span></span><br></pre></td></tr></tbody></table></figure><p>在非严格模式下，this的值是被称作全局对象（global object）（在浏览器里是window）：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">console</span>.log(f() === <span class="built_in">window</span>);  <span class="comment">// true</span></span><br></pre></td></tr></tbody></table></figure><h2 id="不再自动创建全局变量（No-auto-created-global-variables）"><a href="#不再自动创建全局变量（No-auto-created-global-variables）" class="headerlink" title="不再自动创建全局变量（No auto-created global variables）"></a>不再自动创建全局变量（No auto-created global variables）</h2><p>在非严格模式下，如果你给不存在的变量赋值，JavaScript会自动创建一个全局变量：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>{ foo = <span class="number">5</span> }</span><br><span class="line">&gt; f()  <span class="comment">// 不会报错</span></span><br><span class="line">&gt; foo</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></tbody></table></figure><p>在严格模式下，这会产生一个错误：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="function"><span class="keyword">function</span> <span class="title">f_strict</span>(<span class="params"></span>) </span>{ <span class="string">'use strict'</span>; foo2 = <span class="number">4</span>; }</span><br><span class="line">&gt; f_strict()</span><br><span class="line"><span class="built_in">ReferenceError</span>: foo2 is not defined</span><br></pre></td></tr></tbody></table></figure><h1 id="变量作用域和闭包"><a href="#变量作用域和闭包" class="headerlink" title="变量作用域和闭包"></a>变量作用域和闭包</h1><h2 id="变量和函数作用域（Variables-are-function-scoped）"><a href="#变量和函数作用域（Variables-are-function-scoped）" class="headerlink" title="变量和函数作用域（Variables are function-scoped）"></a>变量和函数作用域（Variables are function-scoped）</h2><p>变量的作用域总是整个函数（没有块级作用域）。例如：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">-3</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) {  <span class="comment">// (*)</span></span><br><span class="line">        <span class="keyword">var</span> tmp = -x;</span><br><span class="line">        ...</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">console</span>.log(tmp);  <span class="comment">// 3</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>我们可以看到tmp变量不仅在（*）所在行的语句块存在，它在整个函数内都存在。</p><h2 id="变量提升（Variables-are-hoisted）"><a href="#变量提升（Variables-are-hoisted）" class="headerlink" title="变量提升（Variables are hoisted）"></a>变量提升（Variables are hoisted）</h2><p>变量声明会被提升：声明会被移到函数的顶部，但赋值过程不会。举个例子，在下面的函数中（*）行位置声明了一个变量。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="built_in">console</span>.log(tmp); <span class="comment">// undefined</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">false</span>) {</span><br><span class="line">        <span class="keyword">var</span> tmp = <span class="number">3</span>;  <span class="comment">// (*)</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在内部，上面的函数被执行像下面这样：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">var</span> tmp;  <span class="comment">// declaration is hoisted</span></span><br><span class="line">    <span class="built_in">console</span>.log(tmp);</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">false</span>) {</span><br><span class="line">        tmp = <span class="number">3</span>;  <span class="comment">// assignment stays put</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="闭包（Closures）"><a href="#闭包（Closures）" class="headerlink" title="闭包（Closures）"></a>闭包（Closures）</h2><p>每个函数保持和函数体内部变量的连接，甚至离开创建它的作用域之后。例如：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createIncrementor</span>(<span class="params">start</span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{  <span class="comment">// (*)</span></span><br><span class="line">        <span class="keyword">return</span> start++;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在（*）行开始的函数在它创建时保留上下文，并在内部保存一个start活动值：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> inc = createIncrementor(<span class="number">5</span>);</span><br><span class="line">&gt; inc()</span><br><span class="line"><span class="number">5</span></span><br><span class="line">&gt; inc()</span><br><span class="line"><span class="number">6</span></span><br><span class="line">&gt; inc()</span><br><span class="line"><span class="number">7</span></span><br></pre></td></tr></tbody></table></figure><p>闭包是一个函数加上和其作用域链的链接。因此，createIncrementor() 返回的是一个闭包。</p><h2 id="IIFE：模拟块级作用域（IIFE-Simulating-block-scoping）"><a href="#IIFE：模拟块级作用域（IIFE-Simulating-block-scoping）" class="headerlink" title="IIFE：模拟块级作用域（IIFE: Simulating block scoping）"></a>IIFE：模拟块级作用域（IIFE: Simulating block scoping）</h2><p>有时你想模拟一个块，例如你想将变量从全局作用域隔离。完成这个工作的模式叫做 IIFE(立即执行函数表达式(Immediately Invoked Function Expression))：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{  <span class="comment">// 块开始</span></span><br><span class="line">    <span class="keyword">var</span> tmp = ...;  <span class="comment">// 非全局变量</span></span><br><span class="line">}());  <span class="comment">// 块结束</span></span><br></pre></td></tr></tbody></table></figure><p>上面你会看到函数表达式被立即执行。外面的括号用来阻止它被解析成函数声明；只有函数表达式能被立即调用。函数体产生一个新的作用域并使 tmp 变为局部变量。</p><h2 id="闭包实现变量共享（Inadvertent-sharing-via-closures）"><a href="#闭包实现变量共享（Inadvertent-sharing-via-closures）" class="headerlink" title="闭包实现变量共享（Inadvertent sharing via closures）"></a>闭包实现变量共享（Inadvertent sharing via closures）</h2><p>下面是个经典问题，如果你不知道，会让你费尽思量。因此，先浏览下，对问题有个大概的了解。</p><p>闭包保持和外部变量的连接，有时可能和你想像的行为不一致：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; <span class="number">5</span>; i++) {</span><br><span class="line">    result.push(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{ <span class="keyword">return</span> i });  <span class="comment">// (*)</span></span><br><span class="line">}</span><br><span class="line"><span class="built_in">console</span>.log(result[<span class="number">1</span>]()); <span class="comment">// 5 (不是 1)</span></span><br><span class="line"><span class="built_in">console</span>.log(result[<span class="number">3</span>]()); <span class="comment">// 5 (不是 3)</span></span><br></pre></td></tr></tbody></table></figure><p>(*)行的返回值总是当前的i值，而不是当函数被创建时的i值。当循环结束后，i的值是5，这是为什么数组中的所有函数的返回值总是一样的。如果你想捕获当前变量的快照，你可以使用 IIFE：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; <span class="number">5</span>; i++) {</span><br><span class="line">    (<span class="function"><span class="keyword">function</span> (<span class="params">i2</span>) </span>{</span><br><span class="line">        result.push(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{ <span class="keyword">return</span> i2 });</span><br><span class="line">    }(i));  <span class="comment">// 复制当前的i</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="对象和继承"><a href="#对象和继承" class="headerlink" title="对象和继承"></a>对象和继承</h1><h2 id="任意键属性（Arbitrary-property-keys）"><a href="#任意键属性（Arbitrary-property-keys）" class="headerlink" title="任意键属性（Arbitrary property keys）"></a>任意键属性（Arbitrary property keys）</h2><p>属性的键可以是任意字符串。到目前为止，我们看到的对象字面量中的和点操作符后的属性关键字。按这种方法你只能使用标识符。如果你想用其他任意字符串作为键名，你必须在对象字面量里加上引号，并使用方括号获取和设置属性。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> obj = { <span class="string">'not an identifier'</span>: <span class="number">123</span> };</span><br><span class="line">&gt; obj[<span class="string">'not an identifier'</span>]</span><br><span class="line"><span class="number">123</span></span><br><span class="line">&gt; obj[<span class="string">'not an identifier'</span>] = <span class="number">456</span>;</span><br></pre></td></tr></tbody></table></figure><p>方括号允许你动态计算属性关键字：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> x = <span class="string">'name'</span>;</span><br><span class="line">&gt; jane[x]</span><br><span class="line"><span class="string">'Jane'</span></span><br><span class="line">&gt; jane[<span class="string">'na'</span>+<span class="string">'me'</span>]</span><br><span class="line"><span class="string">'Jane'</span></span><br></pre></td></tr></tbody></table></figure><h2 id="引用方法（Extracting-methods）"><a href="#引用方法（Extracting-methods）" class="headerlink" title="引用方法（Extracting methods）"></a>引用方法（Extracting methods）</h2><p>如果你引用一个方法，它将失去和对象的连接。就其本身而言，函数不是方法，其中的this值为undefined（严格模式下）。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> func = jane.describe;</span><br><span class="line">&gt; func()</span><br><span class="line"><span class="built_in">TypeError</span>: Cannot read property <span class="string">'name'</span> <span class="keyword">of</span> <span class="literal">undefined</span></span><br></pre></td></tr></tbody></table></figure><p>解决办法是使用函数内置的bind()方法。它创建一个新函数，其this值固定为给定的值。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> func2 = jane.describe.bind(jane);</span><br><span class="line">&gt; func2()</span><br><span class="line"><span class="string">'Person named Jane'</span></span><br></pre></td></tr></tbody></table></figure><h2 id="方法内部的函数（Functions-inside-a-method）"><a href="#方法内部的函数（Functions-inside-a-method）" class="headerlink" title="方法内部的函数（Functions inside a method）"></a>方法内部的函数（Functions inside a method）</h2><p>每个函数都有一个特殊变量this。如果你在方法内部嵌入函数是很不方便的，因为你不能从函数中访问方法的this。下面是一个例子，我们调用forEach循环一个数组：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jane = {</span><br><span class="line">    name: <span class="string">'Jane'</span>,</span><br><span class="line">    friends: [ <span class="string">'Tarzan'</span>, <span class="string">'Cheeta'</span> ],</span><br><span class="line">    logHiToFriends: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line"><span class="meta">        'use strict'</span>;</span><br><span class="line">        <span class="keyword">this</span>.friends.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">friend</span>) </span>{</span><br><span class="line">            <span class="comment">// 这里的“this”是undefined</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.name+<span class="string">' says hi to '</span>+friend);</span><br><span class="line">        });</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>调用 logHiToFriends 会产生错误：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; jane.logHiToFriends()</span><br><span class="line"><span class="built_in">TypeError</span>: Cannot read property <span class="string">'name'</span> <span class="keyword">of</span> <span class="literal">undefined</span></span><br></pre></td></tr></tbody></table></figure><p>有两种方法修复这问题。</p><p>1：将this存储在不同的变量。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">logHiToFriends: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line"><span class="meta">    'use strict'</span>;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">this</span>.friends.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">friend</span>) </span>{</span><br><span class="line">        <span class="built_in">console</span>.log(that.name+<span class="string">' says hi to '</span>+friend);</span><br><span class="line">    });</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>2：forEach的第二个参数允许提供this值。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">logHiToFriends: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line"><span class="meta">    'use strict'</span>;</span><br><span class="line">    <span class="keyword">this</span>.friends.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">friend</span>) </span>{</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name+<span class="string">' says hi to '</span>+friend);</span><br><span class="line">    }, <span class="keyword">this</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在JavaScript中函数表达式经常被用作函数参数。时刻小心函数表达式中的this。</p><h2 id="构造函数：对象工厂（Constructors-factories-for-objects）"><a href="#构造函数：对象工厂（Constructors-factories-for-objects）" class="headerlink" title="构造函数：对象工厂（Constructors: factories for objects）"></a>构造函数：对象工厂（Constructors: factories for objects）</h2><p>目前为止，你可能认为JavaScript的对象仅是键值的映射，通过JavaScript对象字面量可以得出这个观点，看起来很像其他语言中的地图/字典（map/dictionary）。然而，JavaScript对象也支持真正意义上的面向对象特性：继承（inheritance）。这里只作简单介绍。</p><p>除了作为“真正”的函数和方法，函数还在JavaScript中扮演第三种角色：如果通过new操作符调用，他们会变为构造函数，对象的工厂。构造函数是对其他语言中的类的粗略模拟。约定俗成，构造函数的第一个字母大写。例如：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置实例数据</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Point</span>(<span class="params">x, y</span>) </span>{</span><br><span class="line">    <span class="keyword">this</span>.x = x;</span><br><span class="line">    <span class="keyword">this</span>.y = y;</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 方法</span></span><br><span class="line">Point.prototype.dist = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.sqrt(<span class="keyword">this</span>.x*<span class="keyword">this</span>.x + <span class="keyword">this</span>.y*<span class="keyword">this</span>.y);</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>我们看到构造函数分为两部分：首先，Point函数设置实例数据。其次，Point.prototype属性包含对象的方法。前者的数据是每个实例私有的，后面的数据是所有实例共享的。</p><p>我们通过new操作符调用Point：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> p = <span class="keyword">new</span> Point(<span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line">&gt; p.x</span><br><span class="line"><span class="number">3</span></span><br><span class="line">&gt; p.dist()</span><br><span class="line"><span class="number">5.830951894845301</span></span><br></pre></td></tr></tbody></table></figure><p>p是Point的一个实例：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; p <span class="keyword">instanceof</span> Point</span><br><span class="line"><span class="literal">true</span></span><br><span class="line">&gt; <span class="keyword">typeof</span> p</span><br><span class="line"><span class="string">'object'</span></span><br></pre></td></tr></tbody></table></figure><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="数组方法（Array-methods）"><a href="#数组方法（Array-methods）" class="headerlink" title="数组方法（Array methods）"></a>数组方法（Array methods）</h2><p>数组有许多方法。举些例子：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> arr = [ <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span> ];</span><br><span class="line"></span><br><span class="line">&gt; arr.slice(<span class="number">1</span>, <span class="number">2</span>)  <span class="comment">// 复制元素</span></span><br><span class="line">[ <span class="string">'b'</span> ]</span><br><span class="line">&gt; arr.slice(<span class="number">1</span>)</span><br><span class="line">[ <span class="string">'b'</span>, <span class="string">'c'</span> ]</span><br><span class="line"></span><br><span class="line">&gt; arr.push(<span class="string">'x'</span>)  <span class="comment">// 在末尾添加一个元素</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line">&gt; arr</span><br><span class="line">[ <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'x'</span> ]</span><br><span class="line"></span><br><span class="line">&gt; arr.pop()  <span class="comment">// 移除最后一个元素</span></span><br><span class="line"><span class="string">'x'</span></span><br><span class="line">&gt; arr</span><br><span class="line">[ <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span> ]</span><br><span class="line"></span><br><span class="line">&gt; arr.shift()  <span class="comment">// 移除第一个元素</span></span><br><span class="line"><span class="string">'a'</span></span><br><span class="line">&gt; arr</span><br><span class="line">[ <span class="string">'b'</span>, <span class="string">'c'</span> ]</span><br><span class="line"></span><br><span class="line">&gt; arr.unshift(<span class="string">'x'</span>)  <span class="comment">// 在前面添加一个元素</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line">&gt; arr</span><br><span class="line">[ <span class="string">'x'</span>, <span class="string">'b'</span>, <span class="string">'c'</span> ]</span><br><span class="line"></span><br><span class="line">&gt; arr.indexOf(<span class="string">'b'</span>)  <span class="comment">// 查找给定项在数组中的索引，若不存在返回-1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">&gt; arr.indexOf(<span class="string">'y'</span>) </span><br><span class="line"><span class="number">-1</span></span><br><span class="line"></span><br><span class="line">&gt; arr.join(<span class="string">'-'</span>)  <span class="comment">// 将元素拼接为一个字符串</span></span><br><span class="line"><span class="string">'x-b-c'</span></span><br><span class="line">&gt; arr.join(<span class="string">''</span>)</span><br><span class="line"><span class="string">'xbc'</span></span><br><span class="line">&gt; arr.join()</span><br><span class="line"><span class="string">'x,b,c'</span></span><br></pre></td></tr></tbody></table></figure><h2 id="遍历数组（Iterating-over-arrays）"><a href="#遍历数组（Iterating-over-arrays）" class="headerlink" title="遍历数组（Iterating over arrays）"></a>遍历数组（Iterating over arrays）</h2><p>有几种方法可以遍历数组元素。其中两个最重要的是 forEach 和 map。</p><p>forEach遍历整个数组，并将当前元素和它的索引传递给一个函数：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[ <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span> ].forEach(</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">elem, index</span>) </span>{  <span class="comment">// (*)</span></span><br><span class="line">        <span class="built_in">console</span>.log(index + <span class="string">'. '</span> + elem);</span><br><span class="line">    });</span><br></pre></td></tr></tbody></table></figure><p>上面代码的输出</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0. a</span><br><span class="line">1. b</span><br><span class="line">2. c</span><br></pre></td></tr></tbody></table></figure><p>注意（*）行的函数参数是可省略的。例如：它可以只有一个参数 elem。</p><p>map创建一个新数组，通过给每个存在数组元素应用一个函数：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].map(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>{ <span class="keyword">return</span> x*x })</span><br><span class="line">[ <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span> ]</span><br></pre></td></tr></tbody></table></figure><h1 id="正则表达式（Regular-expressions）"><a href="#正则表达式（Regular-expressions）" class="headerlink" title="正则表达式（Regular expressions）"></a>正则表达式（Regular expressions）</h1><p>JavaScript内建支持正则表达式。他们被双斜线分隔：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/^abc$/</span><br><span class="line">/[A-Za-z0<span class="number">-9</span>]+<span class="regexp">/</span></span><br></pre></td></tr></tbody></table></figure><h2 id="方法-test-：测试是否匹配（Method-test-is-there-a-match-）"><a href="#方法-test-：测试是否匹配（Method-test-is-there-a-match-）" class="headerlink" title="方法 test()：测试是否匹配（Method test(): is there a match?）"></a>方法 test()：测试是否匹配（Method test(): is there a match?）</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="regexp">/^a+b+$/</span>.test(<span class="string">'aaab'</span>)</span><br><span class="line"><span class="literal">true</span></span><br><span class="line">&gt; <span class="regexp">/^a+b+$/</span>.test(<span class="string">'aaa'</span>)</span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></tbody></table></figure><h2 id="方法-exec-：匹配和捕获组（Method-exec-match-and-capture-groups）"><a href="#方法-exec-：匹配和捕获组（Method-exec-match-and-capture-groups）" class="headerlink" title="方法 exec()：匹配和捕获组（Method exec(): match and capture groups）"></a>方法 exec()：匹配和捕获组（Method exec(): match and capture groups）</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="regexp">/a(b+)a/</span>.exec(<span class="string">'_abbba_aba_'</span>)</span><br><span class="line">[ <span class="string">'abbba'</span>, <span class="string">'bbb'</span> ]</span><br></pre></td></tr></tbody></table></figure><p>返回的数组第一项（索引为0）是完整匹配，捕获的第一个分组在第二项（索引为1），等。有一种方法可以反复调用获取所有匹配。</p><h2 id="方法-replace-：搜索并替换（Method-replace-search-and-replace）"><a href="#方法-replace-：搜索并替换（Method-replace-search-and-replace）" class="headerlink" title="方法 replace()：搜索并替换（Method replace(): search and replace）"></a>方法 replace()：搜索并替换（Method replace(): search and replace）</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="string">'&lt;a&gt; &lt;bbb&gt;'</span>.replace(<span class="regexp">/&lt;(.*?)&gt;/g</span>, <span class="string">'[$1]'</span>)</span><br><span class="line"><span class="string">'[a] [bbb]'</span></span><br></pre></td></tr></tbody></table></figure><p>replace的第一个参数必须是正则表达式，并且开启全局搜索（/g 标记），否则仅第一个匹配项会被替换。有一种方法使用一个函数来计算替换项。</p><h1 id="数学（Math）"><a href="#数学（Math）" class="headerlink" title="数学（Math）"></a>数学（Math）</h1><p>Math是一个有算数功能的对象。例如：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="built_in">Math</span>.abs(<span class="number">-2</span>)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"></span><br><span class="line">&gt; <span class="built_in">Math</span>.pow(<span class="number">3</span>, <span class="number">2</span>)  <span class="comment">// 3^2</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"></span><br><span class="line">&gt; <span class="built_in">Math</span>.max(<span class="number">2</span>, <span class="number">-1</span>, <span class="number">5</span>)</span><br><span class="line"><span class="number">5</span></span><br><span class="line"></span><br><span class="line">&gt; <span class="built_in">Math</span>.round(<span class="number">1.9</span>)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"></span><br><span class="line">&gt; <span class="built_in">Math</span>.cos(<span class="built_in">Math</span>.PI)  <span class="comment">// 预定义常量π</span></span><br><span class="line"><span class="number">-1</span></span><br></pre></td></tr></tbody></table></figure><h1 id="标准库的其他功能（Other-functionality-of-the-standard-library）"><a href="#标准库的其他功能（Other-functionality-of-the-standard-library）" class="headerlink" title="标准库的其他功能（Other functionality of the standard library）"></a>标准库的其他功能（Other functionality of the standard library）</h1><p>JavaScript标准库相对简单，但有很多其他东西你可以使用：</p><p>Date：日期构造函数，主要功能有转换和创建日期字符串，访问日期组成部分（年，小时等）。<br>JSON：一个对象，功能是转换和生成JSON数据。<br>console.* 方法：浏览器的具体方法，不是语言成分的部分，但他们也可以在Node.js中工作。</p><h1 id="完"><a href="#完" class="headerlink" title="完"></a>完</h1><hr><blockquote><p>参考：<a href="https://blog.csdn.net/Jesounao/article/details/50545336" target="_blank" rel="noopener">https://blog.csdn.net/Jesounao/article/details/50545336</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;字符串&quot;&gt;&lt;a href=&quot;#字符串&quot; class=&quot;headerlink&quot; title=&quot;字符串&quot;&gt;&lt;/a&gt;字符串&lt;/h1&gt;&lt;h2 id=&quot;字符串方法（String-methods）&quot;&gt;&lt;a href=&quot;#字符串方法（String-methods）&quot; class=&quot;headerlink&quot; title=&quot;字符串方法（String methods）&quot;&gt;&lt;/a&gt;字符串方法（String methods）&lt;/h2&gt;&lt;p&gt;字符串有许多有用的方法。例如：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;abc&#39;&lt;/span&gt;.slice(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)  &lt;span class=&quot;comment&quot;&gt;// 复制子字符串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&#39;bc&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;abc&#39;&lt;/span&gt;.slice(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;\t xyz  &#39;&lt;/span&gt;.trim()  &lt;span class=&quot;comment&quot;&gt;// 移除空白字符&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&#39;xyz&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;mjölnir&#39;&lt;/span&gt;.toUpperCase()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&#39;MJÖLNIR&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;abc&#39;&lt;/span&gt;.indexOf(&lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;)  &lt;span class=&quot;comment&quot;&gt;// 查找字符串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;abc&#39;&lt;/span&gt;.indexOf(&lt;span class=&quot;string&quot;&gt;&#39;x&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="JS" scheme="http://blog.iwxyi.com/tags/JS/"/>
    
      <category term="整理" scheme="http://blog.iwxyi.com/tags/%E6%95%B4%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>安卓Rec模式清除锁屏密码</title>
    <link href="http://blog.iwxyi.com/2018/01/29/%E5%AE%89%E5%8D%93Rec%E6%A8%A1%E5%BC%8F%E6%B8%85%E9%99%A4%E9%94%81%E5%B1%8F%E5%AF%86%E7%A0%81/"/>
    <id>http://blog.iwxyi.com/2018/01/29/安卓Rec模式清除锁屏密码/</id>
    <published>2018-01-29T12:44:00.000Z</published>
    <updated>2019-10-12T23:35:06.468Z</updated>
    
    <content type="html"><![CDATA[<p>打开TWRP的<code>adb shell</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rm /data/system/locksettings.db</span><br><span class="line">rm /data/system/locksettings.db-shm</span><br><span class="line">rm /data/system/locksettings.db-wal</span><br><span class="line">rm /data/system/gatekeeper.password.key</span><br><span class="line">rm /data/system/gatekeeper.pattern.key</span><br></pre></td></tr></tbody></table></figure><p>实测可以用文件管理删除前两项即可（不同类型密码的文件不同）</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;打开TWRP的&lt;code&gt;adb shell&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;b
      
    
    </summary>
    
    
      <category term="搞机" scheme="http://blog.iwxyi.com/categories/%E6%90%9E%E6%9C%BA/"/>
    
    
      <category term="搞机" scheme="http://blog.iwxyi.com/tags/%E6%90%9E%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Python-学习笔记</title>
    <link href="http://blog.iwxyi.com/2018/01/24/Python-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://blog.iwxyi.com/2018/01/24/Python-学习笔记/</id>
    <published>2018-01-24T05:38:00.000Z</published>
    <updated>2019-10-13T05:39:28.261Z</updated>
    
    <content type="html"><![CDATA[<h1 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h1><h2 id="变量和基础类型"><a href="#变量和基础类型" class="headerlink" title="变量和基础类型"></a>变量和基础类型</h2><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ul><li>整数    十六进制：0x</li><li>浮点数    1.23e4</li><li>字符串    ‘xxx’ 或 “xxx”</li><li>布尔值    True、False    and、or、not</li><li>空值    None（不能理解为0）</li></ul><a id="more"></a><h3 id="print"><a href="#print" class="headerlink" title="print"></a>print</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> <span class="string">'1 + 2='</span>, <span class="number">1</span> + <span class="number">2</span>    <span class="comment"># 1 + 2 = 3  结束后自动换行</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'hello'</span> , <span class="string">'world'</span>  <span class="comment"># 逗号会输出一个空格</span></span><br></pre></td></tr></tbody></table></figure><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>大小写英文、数字、下划线，且不能是数字开头</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">t_007 = <span class="string">'T007'</span></span><br><span class="line">a == <span class="number">1</span>  <span class="comment"># 相等</span></span><br></pre></td></tr></tbody></table></figure><p>变量本身类型不固定的语言称之为动态语言，与之对应的是静态语言。</p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>####常见字符串</p><p>如果字符串包含单引号<code>'</code>，则要用双引号<code>""</code>括起来</p><p>如果既包含单引号又包含双引号，就要用反斜杠<code>\</code>来转义</p><p>####raw字符串</p><p>如果一个字符串有很多要转义的字符，可以加个前缀<code>r</code>，表示这是一个<strong>raw字符串</strong>，里面的字符就不需要转义了。例如：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">r'\(~_~)/ \(~_~)/'</span></span><br></pre></td></tr></tbody></table></figure><p>但是<code>r'...'</code>表示法不能表示多行字符串，也不能表示包含<code>'</code>和 <code>"</code>的字符串</p><p>####多行字符串</p><p>如果要表示多行字符串，可以用<code>'''...'''</code>表示（同样可以在前面加一个<strong>r</strong>）：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''Line 1</span></span><br><span class="line"><span class="string">Line 2</span></span><br><span class="line"><span class="string">Line 3'''</span></span><br></pre></td></tr></tbody></table></figure><p>上面这个字符串的表示方法和下面的是完全一样的：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'Line 1\nLine 2\nLine 3'</span></span><br></pre></td></tr></tbody></table></figure><h4 id="Unicode字符串"><a href="#Unicode字符串" class="headerlink" title="Unicode字符串"></a>Unicode字符串</h4><p>最早的Python只支持ASCII编码，普通的字符串’ABC’在Python内部都是ASCII编码的。</p><p>Python在后来添加了对Unicode的支持，以Unicode表示的字符串用u’…’表示，比如：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> <span class="string">u'中文'</span>  <span class="comment"># 中文</span></span><br></pre></td></tr></tbody></table></figure><p><strong>注意:</strong> 不加 u ，中文就不能正常显示。</p><p>除了多了一个<code>u</code>之外，与普通字符串没啥区别，转义字符和多行表示法仍然有效</p><p>如果中文字符串在Python环境下遇到 UnicodeDecodeError，这是因为.py文件保存的格式有问题。可以在第一行添加注释</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br></pre></td></tr></tbody></table></figure><h3 id="整数与浮点数"><a href="#整数与浮点数" class="headerlink" title="整数与浮点数"></a>整数与浮点数</h3><p>同C语言：</p><ul><li>整数 + 浮点数 = 浮点数</li><li>整数 / 整数 = 整数</li><li>整数 / 浮点数 = 浮点数</li></ul><h2 id="List-与-Tuple-类型"><a href="#List-与-Tuple-类型" class="headerlink" title="List 与 Tuple 类型"></a>List 与 Tuple 类型</h2><p>###list</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">classmates = [<span class="string">'Michael'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>]</span><br><span class="line">L = [<span class="string">'Michael'</span>, <span class="number">100</span>, <span class="literal">True</span>]</span><br><span class="line">empty_list = []</span><br></pre></td></tr></tbody></table></figure><p>####倒序访问</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> L[<span class="number">0</span>]  <span class="comment"># 索引从 0 开始</span></span><br><span class="line"><span class="keyword">print</span> L[<span class="number">-1</span>]  <span class="comment"># 倒序访问最后一个元素（也注意不要越界）</span></span><br></pre></td></tr></tbody></table></figure><h4 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">L.append(<span class="string">'Paul'</span>)  <span class="comment"># 添加到尾部</span></span><br><span class="line">L.insert(<span class="number">0</span>, <span class="string">'Paul'</span>)  <span class="comment"># 添加到开头</span></span><br></pre></td></tr></tbody></table></figure><h4 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">L.pop()  <span class="comment"># 删除最后一个并返回这个元素</span></span><br><span class="line">L.pop(<span class="number">2</span>)  <span class="comment"># 删除第三个元素</span></span><br></pre></td></tr></tbody></table></figure><h4 id="替换元素"><a href="#替换元素" class="headerlink" title="替换元素"></a>替换元素</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L[<span class="number">-1</span>] = <span class="string">'Paul'</span></span><br></pre></td></tr></tbody></table></figure><h4 id="字符串list-首字母大写"><a href="#字符串list-首字母大写" class="headerlink" title="字符串list 首字母大写"></a>字符串list 首字母大写</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c = [<span class="string">'zz'</span>,<span class="string">'yy'</span>,<span class="string">'xx'</span>] </span><br><span class="line">c = [string.capitalize() <span class="keyword">for</span> string <span class="keyword">in</span> c]</span><br></pre></td></tr></tbody></table></figure><h3 id="tuple"><a href="#tuple" class="headerlink" title="tuple"></a>tuple</h3><p>即不可变的 list</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t = ()  <span class="comment"># 空tuple</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">t = (<span class="string">'Adam'</span>, <span class="string">'Lisa'</span>, <span class="string">'Bart'</span>)</span><br><span class="line">a = t[<span class="number">-2</span>]</span><br><span class="line"><span class="comment"># t[1] = 'Bob'  # 报错</span></span><br></pre></td></tr></tbody></table></figure><p>tuple和list外观唯一不同之处是用<code>( )</code>替代了<code>[ ]</code></p><p>tuple没有 append()方法，也没有insert()和pop()方法</p><p>####单元素tuple</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t = (<span class="number">1</span>)  <span class="comment"># 这是整数 1，而不是tuple</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t = (<span class="number">1</span>,)  <span class="comment"># 可以加一个逗号","避免歧义</span></span><br><span class="line"><span class="keyword">print</span> t  <span class="comment"># (1,)</span></span><br></pre></td></tr></tbody></table></figure><p>多元素 tuple 加不加这个额外的“,”效果是一样的：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>,)</span><br><span class="line"><span class="keyword">print</span> t  <span class="comment"># (1, 2, 3)</span></span><br></pre></td></tr></tbody></table></figure><h3 id="“可变”的-tuple"><a href="#“可变”的-tuple" class="headerlink" title="“可变”的 tuple"></a>“可变”的 tuple</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">t = (<span class="string">'a'</span>, <span class="string">'b'</span>, [<span class="string">'A'</span>, <span class="string">'B'</span>])</span><br><span class="line">L = t[<span class="number">2</span>]</span><br><span class="line">L[<span class="number">0</span>] = <span class="string">'X'</span></span><br><span class="line"><span class="keyword">print</span> t  <span class="comment"># ('a', 'b', ['X', 'Y'])</span></span><br></pre></td></tr></tbody></table></figure><p>tuple所谓的<strong>“不变”</strong>是说，tuple的每个元素，指向永远不变。即<strong>指向’a’，就不能改成指向’b’</strong>，指向一个list，就不能改成指向其他对象，但指向的这个list本身是可变的！</p><h2 id="条件判断与循环"><a href="#条件判断与循环" class="headerlink" title="条件判断与循环"></a>条件判断与循环</h2><h3 id="if-elif-else"><a href="#if-elif-else" class="headerlink" title="if - elif - else"></a>if - elif - else</h3><p>if 语句后接表达式，然后用<code>:</code>表示代码块开始。</p><p><strong>注意:</strong> elif 和 else 后面有个 “<strong>:</strong>”</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">20</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'your age is'</span>, age</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'adult'</span></span><br><span class="line"><span class="keyword">elif</span> age &gt; <span class="number">10</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="number">10</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">print</span> age</span><br><span class="line"><span class="keyword">print</span> <span class="string">'END'</span></span><br></pre></td></tr></tbody></table></figure><p><strong>注意: **Python代码的</strong>缩进规则**。具有相同缩进的代码被视为代码块</p><p>缩进请严格按照Python的习惯写法：<strong>4个空格</strong>，<strong>不要使用Tab</strong>，更不要混合Tab和空格，否则很容易造成因为缩进引起的语法错误。</p><p>如果你在<strong>Python交互环境</strong>下敲代码，还要特别<strong>留意缩进</strong>，并且<strong>退出缩进需要多敲一行回车</strong></p><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">L = [<span class="string">'Adam'</span>, <span class="string">'Lisa'</span>, <span class="string">'Bart'</span>]</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> L:</span><br><span class="line">    <span class="keyword">print</span> name</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">N = <span class="number">10</span></span><br><span class="line">x = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> x &lt; N:</span><br><span class="line">    <span class="keyword">print</span> x</span><br><span class="line">    x = x + <span class="number">1</span></span><br></pre></td></tr></tbody></table></figure><h3 id="循环控制"><a href="#循环控制" class="headerlink" title="循环控制"></a>循环控制</h3><ul><li>break</li><li>continue</li></ul><h2 id="Dict-和-Set-类型"><a href="#Dict-和-Set-类型" class="headerlink" title="Dict 和 Set 类型"></a>Dict 和 Set 类型</h2><p>###Dict</p><p>{ key : value }</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">d = {</span><br><span class="line">    <span class="string">'Adam'</span>: <span class="number">95</span>,</span><br><span class="line">    <span class="string">'Lisa'</span>: <span class="number">85</span>,</span><br><span class="line">    <span class="string">'Bart'</span>: <span class="number">59</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">print</span> d  <span class="comment"># 注意：乱序存储，不会按顺序输出（和 list 不一样）</span></span><br><span class="line">len(d)  <span class="comment"># 3  len()用来求任意集合的大小</span></span><br><span class="line"><span class="keyword">print</span> d[<span class="string">'Adam'</span>]  <span class="comment"># 95</span></span><br><span class="line"><span class="comment"># print d['Paul']  # 报错：KeyError</span></span><br></pre></td></tr></tbody></table></figure><p>判断 key 是否存在：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="string">'Paul'</span> <span class="keyword">in</span> d:</span><br><span class="line">    <span class="keyword">print</span> d[<span class="string">'Paul'</span>]</span><br></pre></td></tr></tbody></table></figure><p>dict 的 get 方法：在 Key 不存在的时候返回 None</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> d.get(<span class="string">'Bart'</span>)  <span class="comment"># 59</span></span><br><span class="line"><span class="keyword">print</span> d.get(<span class="string">'Paul'</span>)  <span class="comment"># None</span></span><br></pre></td></tr></tbody></table></figure><h4 id="Dict-的特点"><a href="#Dict-的特点" class="headerlink" title="Dict 的特点"></a>Dict 的特点</h4><p><strong>dict的第一个特点是查找速度快，无论dict有10个元素还是10万个元素，查找速度都一样</strong></p><p><strong>dict的缺点是占用内存大，还会浪费很多内容</strong>，list正好相反，占用内存小，但是查找速度慢。</p><p>由于dict是按 key 查找，所以，在一个dict中，key不能重复。</p><p><strong>dict的第二个特点就是存储的key-value序对是没有顺序的！</strong>这和list不一样</p><blockquote><p>打印的顺序不一定是我们创建时的顺序</p></blockquote><p><strong>dict的第三个特点是作为 key 的元素必须不可变</strong>：可变的 list 不能作为 key</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="string">'123'</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],  <span class="comment"># key 是 str，value是list</span></span><br><span class="line">    (<span class="string">'a'</span>, <span class="string">'b'</span>): <span class="literal">True</span>  <span class="comment"># key 是 tuple，并且tuple的每个元素都是不可变对象，value是 boolean</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="更新-dict"><a href="#更新-dict" class="headerlink" title="更新 dict"></a>更新 dict</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d[<span class="string">'Paul'</span>] = <span class="number">72</span></span><br></pre></td></tr></tbody></table></figure><p>如果 key 已经存在，则赋值会用新的 value 替换掉原来的 value</p><p>####遍历 dict</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d = { <span class="string">'Adam'</span>: <span class="number">95</span>, <span class="string">'Lisa'</span>: <span class="number">85</span>, <span class="string">'Bart'</span>: <span class="number">59</span> }</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> d:</span><br><span class="line">    <span class="keyword">print</span> key, d[key]  <span class="comment"># Lisa 95 \n...</span></span><br></pre></td></tr></tbody></table></figure><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p><strong>dict的作用是建立一组 key 和一组 value 的映射关系，dict的key是不能重复的。</strong></p><p><strong>set 持有一系列元素，这一点和 list 很像，但是set的元素没有重复，而且是无序的，这点和 dict 的 key很像。</strong></p><p>创建 set 的方式是调用 set() 并传入一个 list，list的元素将作为set的元素：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = set([<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'A'</span>])</span><br><span class="line"><span class="keyword">print</span> s  <span class="comment"># set(['A', 'C', 'B'])  和 dict 一样是 乱序打印</span></span><br></pre></td></tr></tbody></table></figure><p>####访问 set</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = set([<span class="string">'Adam'</span>, <span class="string">'Lisa'</span>, <span class="string">'Bart'</span>, <span class="string">'Paul'</span>])</span><br><span class="line"><span class="string">'Bart'</span> <span class="keyword">in</span> s  <span class="comment"># True</span></span><br><span class="line"><span class="string">'bart'</span> <span class="keyword">in</span> s  <span class="comment"># False  （注意大小写）</span></span><br></pre></td></tr></tbody></table></figure><h3 id="set-的特点"><a href="#set-的特点" class="headerlink" title="set 的特点"></a>set 的特点</h3><p><strong>key必须是不变对象</strong></p><p>判断一个元素是否在set中速度很快</p><p>set存储的元素也是没有顺序的</p><h4 id="遍历-set"><a href="#遍历-set" class="headerlink" title="遍历 set"></a>遍历 set</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = set([<span class="string">'Adam'</span>, <span class="string">'Lisa'</span>, <span class="string">'Bart'</span>])</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> s:</span><br><span class="line">    <span class="keyword">print</span> name  <span class="comment"># 注意：打印的顺序很可能是不同的</span></span><br></pre></td></tr></tbody></table></figure><h4 id="更新-set"><a href="#更新-set" class="headerlink" title="更新 set"></a>更新 set</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s.add(<span class="string">'Adam'</span>)  <span class="comment"># 如果添加的元素已经存在，不会报错，但是不会加进去了</span></span><br><span class="line">s.remove(<span class="number">4</span>)  <span class="comment"># 删除 值为4 的元素。如果元素不存在，会报错（删除前要先判断）</span></span><br></pre></td></tr></tbody></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int(<span class="string">'123'</span>)  <span class="comment"># 转换到整数</span></span><br><span class="line">str(<span class="number">10</span>)  <span class="comment"># 到字符串</span></span><br><span class="line">abs(<span class="number">10.1</span>)</span><br><span class="line">sqrt(<span class="number">100</span>)  <span class="comment"># math 包下</span></span><br><span class="line">help(abs)  <span class="comment"># 查看abs的帮助信息</span></span><br></pre></td></tr></tbody></table></figure><h3 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_abs</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x &gt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> x  <span class="comment"># 执行完毕，不继续下去</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> -x</span><br></pre></td></tr></tbody></table></figure><p>return None可以简写为return</p><h3 id="多返回值"><a href="#多返回值" class="headerlink" title="多返回值"></a>多返回值</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(x, y, step, angle)</span>:</span></span><br><span class="line">    nx = x + step * math.cos(angle)</span><br><span class="line">    ny = y - step * math.sin(angle)</span><br><span class="line">    <span class="keyword">return</span> nx, ny</span><br><span class="line"></span><br><span class="line">x, y = move(<span class="number">100</span>, <span class="number">100</span>, <span class="number">60</span>, math.pi / <span class="number">6</span>)</span><br><span class="line"><span class="keyword">print</span> x, y  <span class="comment"># 151.961524227 70.0</span></span><br></pre></td></tr></tbody></table></figure><p>但其实这只是一种假象，Python函数返回的仍然是单一值<br>用print打印返回结果，原来返回值是一个<strong>tuple</strong>！<br>在语法上，<strong>返回一个tuple可以省略括号</strong>，而<strong>多个变量可以同时接收一个tuple</strong>，按位置赋给对应的值</p><h3 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fact</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> n * fact(n - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">fact(<span class="number">5</span>)  <span class="comment"># 120</span></span><br></pre></td></tr></tbody></table></figure><p>使用递归函数需要注意防止栈溢出</p><h3 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int(<span class="string">'123'</span>, <span class="number">8</span>)  <span class="comment"># 83  两个参数的int：10进制转到8进制</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">power</span><span class="params">(x, n=<span class="number">2</span>)</span>:</span>  <span class="comment"># 求幂，默认平方</span></span><br><span class="line">    s = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        n = n - <span class="number">1</span></span><br><span class="line">        s = s * x</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line">power(<span class="number">5</span>)  <span class="comment"># 25</span></span><br></pre></td></tr></tbody></table></figure><p>由于函数的参数按从左到右的顺序匹配，所以<strong>默认参数只能定义在必需参数的后面</strong></p><h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn</span><span class="params">(*args)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> args</span><br></pre></td></tr></tbody></table></figure><p>可变参数的名字前面有个 *** **号</p><p>解释器会把传入的一组参数组装成一个tuple传递给可变参数，直接把变量 args 看成一个 tuple 就好了</p><h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><h3 id="对list进行切片"><a href="#对list进行切片" class="headerlink" title="对list进行切片"></a>对list进行切片</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">L[<span class="number">0</span>:<span class="number">3</span>]  <span class="comment"># 取前3个元素：['Adam', 'Lisa', 'Bart']</span></span><br><span class="line">L[<span class="number">1</span>:<span class="number">3</span>]  <span class="comment"># 取 第2、3、4个元素</span></span><br></pre></td></tr></tbody></table></figure><p>L[0:3]表示，从索引0开始取，直到索引3为止，但不包括索引3。即索引0，1，2，正好是3个元素。</p><p>如果第一个索引是0，还可以省略：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">L[:<span class="number">3</span>]  <span class="comment"># 前三个</span></span><br><span class="line">L[:]  <span class="comment"># 表示从头到尾，实际上复制出了一个新list</span></span><br></pre></td></tr></tbody></table></figure><p>切片操作还可以指定第三个参数：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L[::<span class="number">2</span>]  <span class="comment"># 表示每N个取一个</span></span><br></pre></td></tr></tbody></table></figure><p>把list换成tuple，切片操作完全相同，只是切片的结果也变成了tuple。</p><h3 id="倒序切片"><a href="#倒序切片" class="headerlink" title="倒序切片"></a>倒序切片</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">L = [<span class="string">'Adam'</span>, <span class="string">'Lisa'</span>, <span class="string">'Bart'</span>, <span class="string">'Paul'</span>]</span><br><span class="line">L[<span class="number">-2</span>:]  <span class="comment"># 倒数第二个直到结尾（最后两个） ['Bart', 'Paul']</span></span><br><span class="line">L[:<span class="number">-2</span>]  <span class="comment"># 开头直到最后第二个（但不包括） ['Adam', 'Lisa']</span></span><br><span class="line">L[<span class="number">-3</span>:<span class="number">-1</span>]  <span class="comment"># 倒数第三个直到倒数第一个（不包括） ['Lisa', 'Bart']</span></span><br><span class="line">L[<span class="number">-4</span>:<span class="number">-1</span>:<span class="number">2</span>]  <span class="comment"># -4、-2  ['Adam', 'Bart']</span></span><br></pre></td></tr></tbody></table></figure><p>记住倒数第一个元素的索引是-1。倒序切片包含起始索引，不包含结束索引。</p><h3 id="字符串切片"><a href="#字符串切片" class="headerlink" title="字符串切片"></a>字符串切片</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'ABCDEFG'</span>[:<span class="number">3</span>]  <span class="comment"># 'ABC'</span></span><br><span class="line"><span class="string">'ABCDEFG'</span>[<span class="number">-3</span>:]  <span class="comment"># 'EFG'</span></span><br><span class="line"><span class="string">'ABCDEFG'</span>[::<span class="number">2</span>]  <span class="comment"># 'ACEG'</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'abc'</span>.upper()  <span class="comment"># 所有字母变大写 'ABC'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 单词首字母大写函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">firstCharUpper</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> s[<span class="number">0</span>].upper() + s[<span class="number">1</span>:]</span><br><span class="line">  </span><br><span class="line"><span class="keyword">print</span> firstCharUpper(<span class="string">'hello'</span>)  <span class="comment"># Hello</span></span><br></pre></td></tr></tbody></table></figure><h2 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h2><p>就是遍历</p><p><strong>Python 的 for循环不仅可以用在list或tuple上，还可以作用在其他任何可迭代对象上</strong></p><h3 id="索引迭代"><a href="#索引迭代" class="headerlink" title="索引迭代"></a>索引迭代</h3><p> 在 for 循环中拿到索引：<strong>enumerate() 函数</strong> ，绑定索引index和元素name</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">L = [<span class="string">'Adam'</span>, <span class="string">'Lisa'</span>, <span class="string">'Bart'</span>, <span class="string">'Paul'</span>]</span><br><span class="line"><span class="keyword">for</span> index, name <span class="keyword">in</span> enumerate(L):</span><br><span class="line">    <span class="keyword">print</span> index, <span class="string">'-'</span>, name</span><br></pre></td></tr></tbody></table></figure><p>输出结果是：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0 - Adam</span><br><span class="line">1 - Lisa</span><br><span class="line">2 - Bart</span><br><span class="line">3 - Paul</span><br></pre></td></tr></tbody></table></figure><p>实际上，enumerate() 函数把：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'Adam'</span>, <span class="string">'Lisa'</span>, <span class="string">'Bart'</span>, <span class="string">'Paul'</span>]</span><br></pre></td></tr></tbody></table></figure><p>变成了类似：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[(<span class="number">0</span>, <span class="string">'Adam'</span>), (<span class="number">1</span>, <span class="string">'Lisa'</span>), (<span class="number">2</span>, <span class="string">'Bart'</span>), (<span class="number">3</span>, <span class="string">'Paul'</span>)]</span><br></pre></td></tr></tbody></table></figure><p>因此，迭代的每一个元素实际上是一个tuple：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> enumerate(L):</span><br><span class="line">    index = t[<span class="number">0</span>]</span><br><span class="line">    name = t[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">print</span> index, <span class="string">'-'</span>, name</span><br></pre></td></tr></tbody></table></figure><p>如果我们知道每个tuple元素都包含两个元素，for循环又可以进一步简写为：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> index, name <span class="keyword">in</span> enumerate(L):  <span class="comment"># 最初的式子</span></span><br><span class="line">    <span class="keyword">print</span> index, <span class="string">'-'</span>, name</span><br></pre></td></tr></tbody></table></figure><h4 id="额外：zip-函数"><a href="#额外：zip-函数" class="headerlink" title="额外：zip()函数"></a>额外：zip()函数</h4><p>zip()函数可以把两个 list 变成一个 list：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zip([<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>], [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>])</span><br><span class="line"><span class="comment"># [(10, 'A'), (20, 'B'), (30, 'C')]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="迭代dict的value"><a href="#迭代dict的value" class="headerlink" title="迭代dict的value"></a>迭代dict的value</h3><p>dict 对象有一个 <strong>values() 方法</strong>：把dict转换成一个包含所有value的list，这样，我们迭代的就是 dict的每一个 value：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">d = { <span class="string">'Adam'</span>: <span class="number">95</span>, <span class="string">'Lisa'</span>: <span class="number">85</span>, <span class="string">'Bart'</span>: <span class="number">59</span> }</span><br><span class="line"><span class="keyword">print</span> d.values()</span><br><span class="line"><span class="comment"># [85, 95, 59]</span></span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> d.values():</span><br><span class="line">    <span class="keyword">print</span> v</span><br><span class="line"><span class="comment"># 85</span></span><br><span class="line"><span class="comment"># 95</span></span><br><span class="line"><span class="comment"># 59</span></span><br></pre></td></tr></tbody></table></figure><p>dict除了<strong>values()</strong>方法外，还有一个<strong>itervalues() **方法，用</strong>itervalues()** 方法替代 <strong>values()</strong> 方法，迭代效果完全一样：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">d = { <span class="string">'Adam'</span>: <span class="number">95</span>, <span class="string">'Lisa'</span>: <span class="number">85</span>, <span class="string">'Bart'</span>: <span class="number">59</span> }</span><br><span class="line"><span class="keyword">print</span> d.itervalues()</span><br><span class="line"><span class="comment"># &lt;dictionary-valueiterator object at 0x106adbb50&gt;</span></span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> d.itervalues():</span><br><span class="line">    <span class="keyword">print</span> v</span><br><span class="line"><span class="comment"># 85</span></span><br><span class="line"><span class="comment"># 95</span></span><br><span class="line"><span class="comment"># 59</span></span><br></pre></td></tr></tbody></table></figure><p><strong>那这两个方法有何不同之处呢？</strong></p><ol><li><p><strong>values()</strong> 方法实际上把一个 dict 转换成了包含 value 的list。</p></li><li><p>但是 <strong>itervalues()</strong> 方法不会转换，它会在迭代过程中依次从 dict 中取出 value，所以 itervalues() 方法比 values() 方法节省了生成 list 所需的内存。</p></li><li><p>打印 itervalues() 发现它返回一个 &lt;dictionary-valueiterator&gt; 对象，这说明在Python中，<strong>for 循环可作用的迭代对象远不止 list，tuple，str，unicode，dict等</strong>，任何可迭代对象都可以作用于for循环，而内部如何迭代我们通常并不用关心。</p></li></ol><p><strong>如果一个对象说自己可迭代，那我们就直接用 for 循环去迭代它，可见，迭代是一种抽象的数据操作，它不对迭代对象内部的数据有任何要求。</strong></p><h3 id="迭代dict的key和value"><a href="#迭代dict的key和value" class="headerlink" title="迭代dict的key和value"></a>迭代dict的key和value</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d = { <span class="string">'Adam'</span>: <span class="number">95</span>, <span class="string">'Lisa'</span>: <span class="number">85</span>, <span class="string">'Bart'</span>: <span class="number">59</span> }</span><br><span class="line"><span class="keyword">print</span> d.items()  <span class="comment"># [('Lisa', 85), ('Adam', 95), ('Bart', 59)]</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> d.items():</span><br><span class="line">    <span class="keyword">print</span> key, <span class="string">':'</span>, value</span><br><span class="line"></span><br><span class="line"><span class="comment"># Lisa : 85</span></span><br><span class="line"><span class="comment"># Adam : 95</span></span><br><span class="line"><span class="comment"># Bart : 59</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>和 values() 有一个 itervalues() 类似， <strong>items() *<em>也有一个对应的 *</em>iteritems()</strong>，iteritems() 不把dict转换成list，而是在迭代过程中不断给出 tuple，所以， iteritems() 不占用额外的内存。</p></blockquote><h2 id="列表生成式"><a href="#列表生成式" class="headerlink" title="列表生成式"></a>列表生成式</h2><h3 id="生成列表"><a href="#生成列表" class="headerlink" title="生成列表"></a>生成列表</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成list [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br><span class="line">range(<span class="number">1</span>, <span class="number">11</span>)  <span class="comment"># [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成[1x1, 2x2, 3x3, ..., 10x10] （方式一：循环）（繁琐）</span></span><br><span class="line">L = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">   L.append(x * x)</span><br><span class="line"></span><br><span class="line">L  <span class="comment"># [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成[1x1, 2x2, 3x3, ..., 10x10] （方式二：列表生成式）</span></span><br><span class="line">[x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>)]</span><br><span class="line"><span class="comment"># [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="复杂表达式"><a href="#复杂表达式" class="headerlink" title="复杂表达式"></a>复杂表达式</h3><p>假设有如下的dict：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d = { <span class="string">'Adam'</span>: <span class="number">95</span>, <span class="string">'Lisa'</span>: <span class="number">85</span>, <span class="string">'Bart'</span>: <span class="number">59</span> }</span><br></pre></td></tr></tbody></table></figure><p>完全可以通过一个复杂的列表生成式把它变成一个 HTML 表格：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tds = [<span class="string">'&lt;tr&gt;&lt;td&gt;%s&lt;/td&gt;&lt;td&gt;%s&lt;/td&gt;&lt;/tr&gt;'</span> % (name, score) <span class="keyword">for</span> name, score <span class="keyword">in</span> d.iteritems()]</span><br><span class="line"><span class="keyword">print</span> <span class="string">'&lt;table&gt;'</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Score&lt;/th&gt;&lt;tr&gt;'</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'\n'</span>.join(tds)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'&lt;/table&gt;'</span></span><br></pre></td></tr></tbody></table></figure><p><strong>注：</strong>字符串可以通过 % 进行格式化，用指定的参数替代<strong>%s</strong>。字符串的<strong>join()</strong>方法可以把一个 list 拼接成一个字符串。</p><h3 id="条件过滤"><a href="#条件过滤" class="headerlink" title="条件过滤"></a>条件过滤</h3><p>for 循环后面可以加上 if 判断</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>]</span><br><span class="line"><span class="comment"># [4, 16, 36, 64, 100]</span></span><br></pre></td></tr></tbody></table></figure><p>有了 if 条件，只有 if 判断为 True 的时候，才把循环的当前元素添加到列表中。</p><h3 id="多层表达式"><a href="#多层表达式" class="headerlink" title="多层表达式"></a>多层表达式</h3><p>对于字符串 ‘ABC’ 和 ‘123’，可以使用两层循环，生成全排列：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>[m + n <span class="keyword">for</span> m <span class="keyword">in</span> <span class="string">'ABC'</span> <span class="keyword">for</span> n <span class="keyword">in</span> <span class="string">'123'</span>]</span><br><span class="line">[<span class="string">'A1'</span>, <span class="string">'A2'</span>, <span class="string">'A3'</span>, <span class="string">'B1'</span>, <span class="string">'B2'</span>, <span class="string">'B3'</span>, <span class="string">'C1'</span>, <span class="string">'C2'</span>, <span class="string">'C3'</span>]</span><br></pre></td></tr></tbody></table></figure><p>翻译成循环代码就像下面这样：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">L = []</span><br><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> <span class="string">'ABC'</span>:</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="string">'123'</span>:</span><br><span class="line">        L.append(m + n)</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;入门&quot;&gt;&lt;a href=&quot;#入门&quot; class=&quot;headerlink&quot; title=&quot;入门&quot;&gt;&lt;/a&gt;入门&lt;/h1&gt;&lt;h2 id=&quot;变量和基础类型&quot;&gt;&lt;a href=&quot;#变量和基础类型&quot; class=&quot;headerlink&quot; title=&quot;变量和基础类型&quot;&gt;&lt;/a&gt;变量和基础类型&lt;/h2&gt;&lt;h3 id=&quot;数据类型&quot;&gt;&lt;a href=&quot;#数据类型&quot; class=&quot;headerlink&quot; title=&quot;数据类型&quot;&gt;&lt;/a&gt;数据类型&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;整数    十六进制：0x&lt;/li&gt;
&lt;li&gt;浮点数    1.23e4&lt;/li&gt;
&lt;li&gt;字符串    ‘xxx’ 或 “xxx”&lt;/li&gt;
&lt;li&gt;布尔值    True、False    and、or、not&lt;/li&gt;
&lt;li&gt;空值    None（不能理解为0）&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="学习笔记" scheme="http://blog.iwxyi.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python" scheme="http://blog.iwxyi.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Android Adapter适配器</title>
    <link href="http://blog.iwxyi.com/2017/12/15/Android-Adapter%E9%80%82%E9%85%8D%E5%99%A8/"/>
    <id>http://blog.iwxyi.com/2017/12/15/Android-Adapter适配器/</id>
    <published>2017-12-15T12:26:00.000Z</published>
    <updated>2019-10-13T12:27:09.606Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String[] strs = {<span class="string">"基神"</span>, <span class="string">"B神"</span>, <span class="string">"翔神"</span>, <span class="string">"曹神"</span>, <span class="string">"J神"</span>}; <span class="comment">//创建ArrayAdapter</span></span><br><span class="line"></span><br><span class="line">ArrayAdapter&lt;String&gt; adapter = <span class="keyword">new</span> ArrayAdapter&lt;String&gt; (<span class="keyword">this</span>, android.R.layout.simple_expandable_list_item_1, strs); <span class="comment">//获取ListView对象，通过调用setAdapter方法为ListView设置Adapter设置适配器</span></span><br><span class="line"></span><br><span class="line">ListView list_test = (ListView) findViewById(R.id.list_test);</span><br><span class="line"></span><br><span class="line">list_test.setAdapter(adapter);</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span
      
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="Android" scheme="http://blog.iwxyi.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>这样学Java不枯燥-学习笔记</title>
    <link href="http://blog.iwxyi.com/2017/10/12/%E8%BF%99%E6%A0%B7%E5%AD%A6Java%E4%B8%8D%E6%9E%AF%E7%87%A5-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://blog.iwxyi.com/2017/10/12/这样学Java不枯燥-学习笔记/</id>
    <published>2017-10-12T12:10:00.000Z</published>
    <updated>2019-10-12T23:18:06.307Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.rupeng.game.GameCore;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">GameCore.start(<span class="keyword">new</span> Main());</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{ <span class="comment">// 游戏运行的函数</span></span><br><span class="line">GameCore.alert(<span class="string">"Hello World"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GameCore.pause(<span class="keyword">int</span> x) <span class="comment">// 暂停x毫秒</span></span><br><span class="line">GameCore.setGameTitle(<span class="keyword">char</span> * name); <span class="comment">// 设置名字</span></span><br><span class="line">GameCore.setGameSize(<span class="keyword">int</span> width, <span class="keyword">int</span> height); <span class="comment">// 设置宽高</span></span><br><span class="line">GameCore.alert(Object msg); <span class="comment">// 弹出提示框（整数、字符串都行）</span></span><br><span class="line">Dimension d = GameCore.getGameSize();  </span><br><span class="line"><span class="comment">// d.width 、 d.height （imprt java.awt.Demension;）</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GameCore.loadBgView(String imgName); <span class="comment">// 不重叠不拉伸显示图片。图片放到 src/Images 下面（注意大小写），可拖拽或者 ctrl+V粘贴</span></span><br><span class="line">playSound(String soundName, <span class="keyword">boolean</span> repeat); <span class="comment">// 播放音乐（仅支持mp3），音乐放到 src/Sounds 下面</span></span><br><span class="line">closeSound(String soundName); <span class="comment">// 关闭音乐播放（包括重复播放的）</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> a = <span class="number">99999L</span> <span class="comment">// 常数数字默认为整型，long赋值需要转换到int</span></span><br><span class="line"><span class="keyword">float</span> f = <span class="number">3.14</span> <span class="comment">// 这样写是错的，需要加个F或f</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String s = GameCore.input(Object value, Object msg); <span class="comment">// 输入框（默认信息， 提示信息）</span></span><br><span class="line"><span class="keyword">boolean</span> b = GameCore.confirm(Object msg); <span class="comment">// 确认框（提示信息）</span></span><br><span class="line"><span class="keyword">int</span> i = Integer.parseInt(s); <span class="comment">// 输入的内容到整数</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createText</span><span class="params">(<span class="keyword">int</span> txtNum, String text)</span> <span class="comment">// 创建只读文本</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setTextPosition</span><span class="params">(<span class="keyword">int</span> txtNum, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> <span class="comment">// 修改文本位置</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setText</span><span class="params">(<span class="keyword">int</span> txtNum, String text)</span> <span class="comment">// 设置文本内容</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setTextColor</span><span class="params">(<span class="keyword">int</span> txtNum, Color color)</span> <span class="comment">// 设置文本颜色，color.RED、color.green、new color(int R, int G, int B)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setTextFontSize</span><span class="params">(<span class="keyword">int</span> txtNum, <span class="keyword">int</span> size)</span> <span class="comment">// 设置文本大小</span></span></span><br><span class="line"><span class="function">Point <span class="title">getTextPosition</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> num)</span> <span class="comment">// 获取文本位置（import java.awt.Point;）</span></span></span><br><span class="line"><span class="function">Dimension <span class="title">getTextSize</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> textNum)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hdieText</span><span class="params">(fina <span class="keyword">int</span> labelNum)</span> <span class="comment">// 隐藏文字</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showText</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> labelNum)</span> <span class="comment">// 显示文字</span></span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createImage</span><span class="params">(<span class="keyword">int</span> num, String imgName)</span> <span class="comment">// 创建图片控件，图片放到 src/Images 里面（注意大小写）</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createImage</span><span class="params">(<span class="keyword">int</span> num)</span> <span class="comment">// 创建一个什么都不显示的图片</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setImageSource</span><span class="params">(<span class="keyword">int</span> num, String imgName)</span> <span class="comment">// 修改显示的图片源</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setImagePosition</span><span class="params">(<span class="keyword">int</span> num, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> <span class="comment">// 修改坐标</span></span></span><br><span class="line"><span class="function">Point <span class="title">getImagePosition</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> num)</span> <span class="comment">// 获得坐标</span></span></span><br><span class="line"><span class="function">Dimension <span class="title">getImagePosition</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> num)</span> <span class="comment">// 获得大小</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hideImage</span><span class="params">(<span class="keyword">int</span> num)</span> <span class="comment">// 隐藏图片</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showImage</span><span class="params">(<span class="keyword">int</span> num)</span> <span class="comment">// 显示图片</span></span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">精灵文件位置：src/Sprites/精灵名字[]/精灵动作[]/i.png图片  按顺序放好（多选文件夹粘贴）（分层：工作空间—右上角倒三角—包表示法）</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createSprite</span><span class="params">(<span class="keyword">int</span> num, String spriteName)</span></span>; <span class="comment">// 创建精灵</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">palySpriteAnimate</span><span class="params">(<span class="keyword">int</span> spriteNum, String animateName, <span class="keyword">boolean</span> repeat)</span></span>; <span class="comment">// 播放精灵的动作</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setSpritePosition</span><span class="params">(<span class="keyword">int</span> spriteNum, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>; <span class="comment">// 设置精灵的位置</span></span><br><span class="line"><span class="function">Point <span class="title">getSpritePosition</span><span class="params">(<span class="keyword">int</span> spriteNum)</span></span>; <span class="comment">//获得精灵的位置</span></span><br><span class="line"><span class="function">Dimension <span class="title">getSpriteSize</span><span class="params">(<span class="keyword">int</span> spriteNum)</span></span>; <span class="comment">// 获取精灵尺寸</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hideSprite</span><span class="params">(<span class="keyword">int</span> spriteNum)</span></span>; <span class="comment">// 隐藏精灵</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showSprite</span><span class="params">(<span class="keyword">int</span> spriteNum)</span></span>; <span class="comment">// 显示精灵</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setSpriteFlipX</span><span class="params">(<span class="keyword">int</span> spriteNum, <span class="keyword">boolean</span> flipX)</span></span>; <span class="comment">// 是否进行X方向翻转（左右对称,fip为true时翻转，false时还原）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setSpriteFlipY</span><span class="params">(<span class="keyword">int</span> spriteNum, <span class="keyword">boolean</span> flipY)</span></span>; <span class="comment">// 是否设置Y方向翻转（上下对称）</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Java程序打包：拷贝bin和两个jar到单独的文件夹，拷贝jre，去掉src.zip、lib\ext\jfxrt.jar、bin\server、bin\jfxwebkit.dll，减小尺寸；</span><br><span class="line">创建一个.bat文件，内容：start jre\bin\javaw.exe -cp .\bin\ -Djava.ext.dirs=. Main1</span><br><span class="line">Main1 代表入口类，如果有包名则要写全名（xxx.Main1）</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String转int：Integer.parseInt("123")</span><br><span class="line">String相等：s1.equal(s2);   （必须用这种方式写）</span><br><span class="line">s1==s2 不使用原因： "abc"+"123" != "abc123" （初学者常犯错误）</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if (i = 10) // Java中这么写是错误的，C语言可以</span><br><span class="line">if (b = true) // 这样是正确的</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">switch (表达式) // 表达式可以为byte/short/int/char，JDK5后可以是枚举，JDK7后可以是String类型</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GameCore.getPressedKeyCode(); // 获得用户当前按键（只适合“连续动作”，一次性触发最好用“事件驱动”）</span><br><span class="line">与KeyEvent中的值作比较：（import java.awt.event.KeyEvent;）</span><br><span class="line">用法：if ( key == KeyEvent.VK_UP )</span><br><span class="line">数字键：VK_0、VK_1……</span><br><span class="line">字母键：VK_A、VK_B……</span><br><span class="line">功能键：VK_F1、VK_F2……</span><br><span class="line">回车：VK_ENTER</span><br><span class="line">空格：VK_SPACE</span><br><span class="line">ESC：VK_ESCAPE</span><br><span class="line">方向键：VK_LEFT、VK_UP、VK_RIGHT、VK_DOWN</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int[10] a = new int[10];  等价于  int a[10];  但是前者有初始化</span><br><span class="line">int、double等默认为0，String、Integer等默认为null</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">编译器认为，if(无else的)、for等操作可能不执行，所以里面的变量初始化会被忽略，若没有初始化则编译器报错</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">double</span> d = Math.random(); <span class="comment">// 返回 [ 0, 1.0 ) 之间的 double</span></span><br><span class="line"><span class="keyword">int</span> num = (<span class="keyword">int</span>) (Math.random() * <span class="number">3</span>); <span class="comment">// 0-2的整数</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GameCore.rand(<span class="keyword">int</span> low, <span class="keyword">int</span> high); <span class="comment">// low &lt;= x &lt; high</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">System.currentTimeMillis() <span class="comment">// 返回当前的毫秒事件</span></span><br><span class="line">Date d = <span class="keyword">new</span> Date(<span class="number">2009</span>-<span class="number">1900</span>,<span class="number">3</span>-<span class="number">1</span>,<span class="number">9</span>); <span class="comment">// 需-1900.1.0，为：2009.3.9</span></span><br><span class="line">System.out.println(d1);</span><br><span class="line"><span class="keyword">int</span> year = d.getYear()+<span class="number">1900</span>;  getMonth()+<span class="number">1</span>;  getDate(); <span class="comment">// 年月日</span></span><br><span class="line">getHours();  getMinutes();  getSeconds(); <span class="comment">// 时分秒</span></span><br><span class="line">getDat(); <span class="comment">//星期几，周日=0，周一=1</span></span><br><span class="line"><span class="keyword">long</span> time = d.getTime(); <span class="comment">// 获取时间的毫秒（相对时间）</span></span><br><span class="line">Date d = <span class="keyword">new</span> Date(time); <span class="comment">// 毫秒转换成时间</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] a = { { <span class="number">1</span> }, { <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> }, { <span class="number">6</span>, <span class="number">7</span> } }; <span class="comment">// 每一行的列数可以不一样，a[i].length也不一样。</span></span><br></pre></td></tr></tbody></table></figure><hr><blockquote><p>课程视频：如鹏网《这样学Java不枯燥》</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; com.rupeng.game.GameCore;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Runnable&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		GameCore.start(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Main());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{ &lt;span class=&quot;comment&quot;&gt;// 游戏运行的函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		GameCore.alert(&lt;span class=&quot;string&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="学习笔记" scheme="http://blog.iwxyi.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java" scheme="http://blog.iwxyi.com/tags/Java/"/>
    
      <category term="游戏开发" scheme="http://blog.iwxyi.com/tags/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>0x3F3F3F3F</title>
    <link href="http://blog.iwxyi.com/2017/09/01/0x3F3F3F3F/"/>
    <id>http://blog.iwxyi.com/2017/09/01/0x3F3F3F3F/</id>
    <published>2017-09-01T11:40:00.000Z</published>
    <updated>2019-10-12T12:13:42.792Z</updated>
    
    <content type="html"><![CDATA[<p><code>0x3f3f3f3f</code>的十进制是<code>1061109567</code>，是<code>10^9</code>级别的（和<code>0x7fffffff</code>一个数量级），而一般场合下的数据都是小于<code>10^9</code>的，所以它可以作为无穷大使用而不致出现数据大于无穷大的情形。 </p><a id="more"></a><p>另一方面，由于一般的数据都不会大于<code>10^9</code>，所以当我们把无穷大加上一个数据时，它并不会溢出（这就满足了“无穷大加一个有穷的数依然是无穷大”），事实上<code>0x3f3f3f3f</code>+<code>0x3f3f3f3f</code>=<code>2122219134</code>，这非常大但却没有超过<code>32-bit int</code>的表示范围，所以<code>0x3f3f3f3f</code>还满足了我们“无穷大加无穷大还是无穷大”的需求。</p><p>最后，<code>0x3f3f3f3f</code>还能给我们带来一个意想不到的额外好处：<br>如果我们想要将某个数组清零，我们通常会使用<code>memset(a,0,sizeof(a))</code>，方便又高效，但是当我们想将某个数组全部赋值为无穷大时，就不能使用memset函数而得自己写循环了，因为<code>memset</code>是按字节操作的，它能够对数组清零是因为0的每个字节都是0（一般我们只有赋值为-1和0的时候才使用它）。现在好了，如果我们将无穷大设为<code>0x3f3f3f3f</code>，那么奇迹就发生了，<code>0x3f3f3f3f</code>的每个字节都是0x3f！所以要把一段内存全部置为无穷大，我们只需要<code>memset(a,0x3f,sizeof(a))</code>。</p><p>所以在通常的场合下，<code>0x3f3f3f3f</code>真的是一个非常棒的选择！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;0x3f3f3f3f&lt;/code&gt;的十进制是&lt;code&gt;1061109567&lt;/code&gt;，是&lt;code&gt;10^9&lt;/code&gt;级别的（和&lt;code&gt;0x7fffffff&lt;/code&gt;一个数量级），而一般场合下的数据都是小于&lt;code&gt;10^9&lt;/code&gt;的，所以它可以作为无穷大使用而不致出现数据大于无穷大的情形。 &lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C" scheme="http://blog.iwxyi.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>平衡二叉树AVL</title>
    <link href="http://blog.iwxyi.com/2017/08/04/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91AVL/"/>
    <id>http://blog.iwxyi.com/2017/08/04/平衡二叉树AVL/</id>
    <published>2017-08-04T05:31:00.000Z</published>
    <updated>2019-10-13T05:32:28.661Z</updated>
    
    <content type="html"><![CDATA[## 二叉查找树<ol><li>若它的左子树不为空，则左子树上所有的节点值都小于它的根节点值。</li><li>若它的右子树不为空，则右子树上所有的节点值均大于它的根节点值。</li><li>它的左右子树也分别可以充当为二叉查找树。</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://mmbiz.qpic.cn/mmbiz_png/gsQM61GSzIPwiaHdKCGdt0cUOibjOK2w4N1FkqhzJlkFGA1FvCWC7mwwLyZ8bPMGIhicOPNaGANYJ7DbnU7icxSKYg/640?tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p>缺点：大部分节点都倾向一边的情况下时间复杂度几乎是线性的</p><a id="more"></a><h2 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h2><ol><li>具有二叉查找树的全部特性。</li><li>每个节点的左子树和右子树的高度差至多等于1。</li></ol><h3 id="右旋"><a href="#右旋" class="headerlink" title="右旋"></a>右旋</h3><p>我们在进行节点插入的时候，可能会出现节点都倾向于左边的情况，例如：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://mmbiz.qpic.cn/mmbiz_png/gsQM61GSzIPwiaHdKCGdt0cUOibjOK2w4N9a2yicYoAIn9QJ7LVN9pzKm09AQsfb7KtYZtWH7bbRxNBXulITcfEQw/640?tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p>我们把这种倾向于左边的情况称之为 <strong>左-左型</strong>。这个时候，我们就可以对节点9进行<strong>右旋操作</strong>，使它恢复平衡。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/gsQM61GSzIPwiaHdKCGdt0cUOibjOK2w4NLXTIyrBNoIFCOf0e1MyZSFQ1k7VppKtozmBL0yeC8elvZaKGHuTudA/640?tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p><p><strong>即：顺时针旋转两个节点，使得父节点被自己的左孩子取代，而自己成为自己的右孩子</strong></p><p>再举个例子：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/gsQM61GSzIPwiaHdKCGdt0cUOibjOK2w4N2rKS9xHL38mzx4iciaibgnKcuBPoWfrUoSmEeRvsPnTfu3OIvYSogyoJQ/640?tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p><p>节点4和9高度相差大于1。由于是<strong>左孩子的高度较高</strong>，此时是<strong>左-左型</strong>，进行右旋。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://mmbiz.qpic.cn/mmbiz_png/gsQM61GSzIPwiaHdKCGdt0cUOibjOK2w4Nruoy7sjcE9CSoVEiaoHzpgo8czI6w9MMx6qJmn4Gl3uib453vicCoTn1Q/640?tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p><strong>这里要注意，节点4的右孩子成为了节点6的左孩子了</strong></p><h3 id="左旋"><a href="#左旋" class="headerlink" title="左旋"></a>左旋</h3><p>左旋和右旋一样，就是用来解决当大部分节点都偏向右边的时候，通过左旋来还原。例如：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/gsQM61GSzIPwiaHdKCGdt0cUOibjOK2w4N84GtNRU43MicjBlgd75hibKIz0N5bEokTo8CgnSuNGbes3GuArfImWdA/640?tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p><p>我们把这种倾向于右边的情况称之为 <strong>右-右型</strong>。</p><blockquote><p>注意：5 成为了 4 的右孩子</p></blockquote><h3 id="右-左旋"><a href="#右-左旋" class="headerlink" title="右-左旋"></a>右-左旋</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://mmbiz.qpic.cn/mmbiz_png/gsQM61GSzIPwiaHdKCGdt0cUOibjOK2w4NsNibyib33xKh4ZVsvrGCb599iccpkkWYv8JzAVU8EflznVnLQWvEp8OaQ/640?tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p>出现了这种情况怎么办呢?对于这种  <strong>右-左型</strong> 的情况，单单一次左旋或右旋是不行的。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://mmbiz.qpic.cn/mmbiz_png/gsQM61GSzIPwiaHdKCGdt0cUOibjOK2w4NDEsgpcYcByKe4jw1iaqsOWXwjajEO4uyqfAx4br8CcTpmFaGrPvciauQ/640?tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p>这种我们就把它称之为 <strong>右-左 型</strong>吧。处理的方法是<strong>先对节点10进行右旋把它变成右-右型。</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://mmbiz.qpic.cn/mmbiz_png/gsQM61GSzIPwiaHdKCGdt0cUOibjOK2w4N29WrqibpVvEib8aicNYlhNjdYlibibhSBROvdtxaRSsicyEOQMUvmuCutqOA/640?tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p>然后再进行左旋。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://mmbiz.qpic.cn/mmbiz_png/gsQM61GSzIPwiaHdKCGdt0cUOibjOK2w4Nd7n5TPJelA2AYH9Sp7a77ibqCWDvVl0oP9HL3juibDvibFtUicia7eibLLmg/640?tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p>所以对于这种 <strong>右-左型的，我们需要进行一次右旋再左旋</strong>。</p><p>同理，也存在 <strong>左-右型</strong>的，例如：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://mmbiz.qpic.cn/mmbiz_png/gsQM61GSzIPwiaHdKCGdt0cUOibjOK2w4N7CsW6diaib5FPiaC9XfabQdvTflsDibfqoibPyblOVGD7CN2atSbx0EbRibQ/640?tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p>对于左-右型的情况和刚才的 右-左型相反，我们需要对它进行一次左旋，再右旋。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://mmbiz.qpic.cn/mmbiz_png/gsQM61GSzIPwiaHdKCGdt0cUOibjOK2w4NiclPNwYybopP8pgAx3vA2rshl0WqyOcWwTT8uDJ9jxrONgTXEXiaxukg/640?tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p>到此，我们的插入就结束了。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>在插入的过程中，会出现一下四种情况破坏AVL树的特性，我们可以采取如下相应的旋转。</p><p>1、左-左型：做右旋。</p><p>2、右-右型：做左旋。</p><p>3、左-右型：先做左旋，后做右旋。</p><p>4、右-左型：先做右旋，再做左旋。</p><blockquote><p>左右旋感觉怪怪的？</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义节点</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AvlNode</span> </span>{</span><br><span class="line">   <span class="keyword">int</span> data;</span><br><span class="line">   AvlNode lchild;<span class="comment">//左孩子</span></span><br><span class="line">   AvlNode rchild;<span class="comment">//右孩子</span></span><br><span class="line">   <span class="keyword">int</span> height;<span class="comment">//记录节点的高度</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//在这里定义各种操作</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AVLTree</span></span>{</span><br><span class="line">   <span class="comment">//计算节点的高度</span></span><br><span class="line">   <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">height</span><span class="params">(AvlNode T)</span> </span>{</span><br><span class="line">       <span class="keyword">if</span> (T == <span class="keyword">null</span>) {</span><br><span class="line">           <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">       }<span class="keyword">else</span>{</span><br><span class="line">           <span class="keyword">return</span> T.height;</span><br><span class="line">       }</span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line">   <span class="comment">//左左型，右旋操作</span></span><br><span class="line">   <span class="function"><span class="keyword">static</span> AvlNode <span class="title">R_Rotate</span><span class="params">(AvlNode K2)</span> </span>{</span><br><span class="line">       AvlNode K1;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//进行旋转</span></span><br><span class="line">       K1 = K2.lchild;</span><br><span class="line">       K2.lchild = K1.rchild;</span><br><span class="line">       K1.rchild = K2;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//重新计算节点的高度</span></span><br><span class="line">       K2.height = Math.max(height(K2.lchild), height(K2.rchild)) + <span class="number">1</span>;</span><br><span class="line">       K1.height = Math.max(height(K1.lchild), height(K1.rchild)) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> K1;</span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line">   <span class="comment">//右右型，进行左旋</span></span><br><span class="line">   <span class="function"><span class="keyword">static</span> AvlNode <span class="title">L_Rotate</span><span class="params">(AvlNode K2)</span> </span>{</span><br><span class="line">       AvlNode K1;</span><br><span class="line"></span><br><span class="line">       K1 = K2.rchild;</span><br><span class="line">       K2.rchild = K1.lchild;</span><br><span class="line">       K1.lchild = K2;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//重新计算高度</span></span><br><span class="line">       K2.height = Math.max(height(K2.lchild), height(K2.rchild)) + <span class="number">1</span>;</span><br><span class="line">       K1.height = Math.max(height(K1.lchild), height(K1.rchild)) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> K1;</span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line">   <span class="comment">//左-右型，进行右旋，再左旋</span></span><br><span class="line">   <span class="function"><span class="keyword">static</span> AvlNode <span class="title">R_L_Rotate</span><span class="params">(AvlNode K3)</span> </span>{</span><br><span class="line">       <span class="comment">//先对其孩子进行右旋</span></span><br><span class="line">       K3.lchild = R_Rotate(K3.lchild);</span><br><span class="line">       <span class="comment">//再进行左旋</span></span><br><span class="line">       <span class="keyword">return</span> L_Rotate(K3);</span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line">   <span class="comment">//右-左型，先进行左旋，再右旋</span></span><br><span class="line">   <span class="function"><span class="keyword">static</span> AvlNode <span class="title">L_R_Rotate</span><span class="params">(AvlNode K3)</span> </span>{</span><br><span class="line">       <span class="comment">//先对孩子进行左旋</span></span><br><span class="line">       K3.rchild = L_Rotate(K3.rchild);</span><br><span class="line">       <span class="comment">//再右旋</span></span><br><span class="line">       <span class="keyword">return</span> R_Rotate(K3);</span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line">   <span class="comment">//插入数值操作</span></span><br><span class="line">   <span class="function"><span class="keyword">static</span> AvlNode <span class="title">insert</span><span class="params">(<span class="keyword">int</span> data, AvlNode T)</span> </span>{</span><br><span class="line">       <span class="keyword">if</span> (T == <span class="keyword">null</span>) {</span><br><span class="line">           T = <span class="keyword">new</span> AvlNode();</span><br><span class="line">           T.data = data;</span><br><span class="line">           T.lchild = T.rchild = <span class="keyword">null</span>;</span><br><span class="line">       } <span class="keyword">else</span> <span class="keyword">if</span>(data &lt; T.data) {</span><br><span class="line">           <span class="comment">//向左孩子递归插入</span></span><br><span class="line">           T.lchild = insert(data, T.lchild);</span><br><span class="line">           <span class="comment">//进行调整操作</span></span><br><span class="line">           <span class="comment">//如果左孩子的高度比右孩子大2</span></span><br><span class="line">           <span class="keyword">if</span> (height(T.lchild) - height(T.rchild) == <span class="number">2</span>) {</span><br><span class="line">               <span class="comment">//左-左型</span></span><br><span class="line">               <span class="keyword">if</span> (data &lt; T.lchild.data) {</span><br><span class="line">                   T = R_Rotate(T);</span><br><span class="line">               } <span class="keyword">else</span> {</span><br><span class="line">                   <span class="comment">//左-右型</span></span><br><span class="line">                   T = R_L_Rotate(T);</span><br><span class="line">               }</span><br><span class="line">           }</span><br><span class="line">       } <span class="keyword">else</span> <span class="keyword">if</span> (data &gt; T.data) {</span><br><span class="line">           T.rchild = insert(data, T.rchild);</span><br><span class="line">           <span class="comment">//进行调整</span></span><br><span class="line">           <span class="comment">//右孩子比左孩子高度大2</span></span><br><span class="line">           <span class="keyword">if</span>(height(T.rchild) - height(T.lchild) == <span class="number">2</span>)</span><br><span class="line">               <span class="comment">//右-右型</span></span><br><span class="line">               <span class="keyword">if</span> (data &gt; T.rchild.data) {</span><br><span class="line">                   T = L_Rotate(T);</span><br><span class="line">               } <span class="keyword">else</span> {</span><br><span class="line">                   T = L_R_Rotate(T);</span><br><span class="line">               }</span><br><span class="line">       }</span><br><span class="line">       <span class="comment">//否则，这个节点已经在书上存在了，我们什么也不做</span></span><br><span class="line">       </span><br><span class="line">       <span class="comment">//重新计算T的高度</span></span><br><span class="line">       T.height = Math.max(height(T.lchild), height(T.rchild)) + <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">return</span> T;</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><blockquote><p>参考：<a href="https://mp.weixin.qq.com/s/dYP5-fM22BgM3viWg4V44A" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/dYP5-fM22BgM3viWg4V44A</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      ## 二叉查找树

&lt;ol&gt;
&lt;li&gt;若它的左子树不为空，则左子树上所有的节点值都小于它的根节点值。&lt;/li&gt;
&lt;li&gt;若它的右子树不为空，则右子树上所有的节点值均大于它的根节点值。&lt;/li&gt;
&lt;li&gt;它的左右子树也分别可以充当为二叉查找树。&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                    &lt;img src=&quot;https://mmbiz.qpic.cn/mmbiz_png/gsQM61GSzIPwiaHdKCGdt0cUOibjOK2w4N1FkqhzJlkFGA1FvCWC7mwwLyZ8bPMGIhicOPNaGANYJ7DbnU7icxSKYg/640?tp=webp&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&amp;amp;wx_co=1&quot; alt=&quot;img&quot; title=&quot;&quot;&gt;
                &lt;/div&gt;
                &lt;div class=&quot;image-caption&quot;&gt;img&lt;/div&gt;
            &lt;/figure&gt;

&lt;p&gt;缺点：大部分节点都倾向一边的情况下时间复杂度几乎是线性的&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="STL" scheme="http://blog.iwxyi.com/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>二叉树、平衡树、红黑树</title>
    <link href="http://blog.iwxyi.com/2017/08/04/%E4%BA%8C%E5%8F%89%E6%A0%91%E3%80%81%E5%B9%B3%E8%A1%A1%E6%A0%91%E3%80%81%E7%BA%A2%E9%BB%91%E6%A0%91/"/>
    <id>http://blog.iwxyi.com/2017/08/04/二叉树、平衡树、红黑树/</id>
    <published>2017-08-04T05:29:00.000Z</published>
    <updated>2019-10-13T05:31:41.459Z</updated>
    
    <content type="html"><![CDATA[## 1、二叉查找树的缺点<p>二叉查找树，相信大家都接触过，二叉查找树的特点就是<strong>左子树的节点值比父亲节点小，而右子树的节点值比父亲节点大</strong>，如图</p><p><img src="https://pic3.zhimg.com/80/v2-6e88c1ef544c6fba8dacd7ad12638e86_hd.jpg" alt="img"></p><p>n 个节点的二叉查找树，正常的情况下，查找的时间复杂度为 O（logn）。</p><p>之所以说是<strong>正常情况下</strong>，是因为二叉查找树有可能出现一种极端的情况，例如</p><a id="more"></a><p><img src="https://pic2.zhimg.com/80/v2-d1c93d5579d4e04ccaa4e8de719ba061_hd.jpg" alt="img"></p><p>此时的二叉查找树已经近似退化为一条链表，时间复杂度顿时变成了 O(n)，为了解决这个问题，于是我们引申出了<strong>平衡二叉树</strong>。</p><h2 id="2、平衡二叉树"><a href="#2、平衡二叉树" class="headerlink" title="2、平衡二叉树"></a>2、平衡二叉树</h2><p>平衡二叉树就是为了解决二叉查找树退化成一颗链表而诞生了，平衡树具有如下特点</p><p>1、具有二叉查找树的全部特性。</p><p>2、每个节点的左子树和右子树的高度差至多等于1。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://pic3.zhimg.com/80/v2-b499d7657312517dec4a359dd3a5d42e_hd.jpg" alt="img" title="">                </div>                <div class="image-caption">img</div>            </figure><p>平衡树基于这种特点就可以保证不会出现大量节点偏向于一边的情况了。关于平衡树如何构建、插入、删除、左旋、右旋等操作这里不在说明，具体可以看我之前写的一篇文章：<a href="https://mp.weixin.qq.com/s/dYP5-fM22BgM3viWg4V44A" target="_blank" rel="noopener">【漫画】以后在有面试官问你AVL树，你就把这篇文章扔给他。</a></p><p>于是，通过平衡树，我们解决了二叉查找树的缺点。对于有 n 个节点的平衡树，最坏的查找时间复杂度也为 O(logn)。</p><h2 id="3、为什么有了平衡树还需要红黑树？"><a href="#3、为什么有了平衡树还需要红黑树？" class="headerlink" title="3、为什么有了平衡树还需要红黑树？"></a>3、为什么有了平衡树还需要红黑树？</h2><p>虽然平衡树解决了二叉查找树退化为近似链表的缺点，能够把查找时间控制在 O(logn)，不过却不是最佳的，因为平衡树要求<strong>每个节点的左子树和右子树的高度差至多等于1</strong>，这个要求实在是太严了，导致每次进行插入/删除节点的时候，几乎都会破坏平衡树的第二个规则，进而我们都需要通过<strong>左旋</strong>和<strong>右旋</strong>来进行调整，使之再次成为一颗符合要求的平衡树。</p><p>显然，如果在那种插入、删除很频繁的场景中，平衡树需要频繁着进行调整，这会使平衡树的性能大打折扣，为了解决这个问题，于是有了<strong>红黑树</strong>，红黑树具有如下特点：</p><p>1、具有二叉查找树的特点。</p><p>2、根节点是黑色的；</p><p>3、每个叶子节点都是黑色的空节点（NIL），也就是说，叶子节点不存数据。</p><p>4、任何相邻的节点都不能同时为红色，也就是说，红色节点是被黑色节点隔开的。</p><p>5、每个节点，从该节点到达其可达的叶子节点是所有路径，都包含相同数目的黑色节点。</p><p>例如下面的图片（注意，图片中黑色的、空的叶子节点没有画出）（图片来自极客时间）</p><p><img src="https://pic2.zhimg.com/80/v2-ddabd6f5d1a62d385d9c7143671b5c5d_hd.jpg" alt="img"></p><p>正是由于红黑树的这种特点，使得它能够在最坏情况下，也能在 O(logn) 的时间复杂度查找到某个节点。至于为什么就能够保证时间复杂度为 O(logn)，我这里就不细讲了，后面的文章可能会讲。</p><p>不过，与平衡树不同的是，红黑树在插入、删除等操作，<strong>不会像平衡树那样，频繁着破坏红黑树的规则，所以不需要频繁着调整</strong>，这也是我们为什么大多数情况下使用红黑树的原因。</p><p>不过，如果你要说，单单在查找方面的效率的话，平衡树比红黑树快。</p><p>所以，我们也可以说，<strong>红黑树是一种不大严格的平衡树</strong>。也可以说是一个折中发方案。</p><p>如果我上面讲的，你都懂，都能够在面试中说出来，应该是足够的了。我当时就是这么回答的。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>所以，最后的答案是，平衡树是为了解决二叉查找树退化为链表的情况，而红黑树是为了解决平衡树在插入、删除等操作需要频繁调整的情况。</p><p>不过，红黑树还有挺多其他的知识点可以考，例如红黑树有哪些应用场景？向集合容器中 HashMap，TreeMap 等，内部结构就用到了红黑树了。还有构建一棵节点个数为 n 的红黑树，时间复杂度是多少？红黑树与哈希表在不同应该场景的选择？红黑树有哪些性质？红黑树各种操作的时间复杂度是多少？</p><hr><blockquote><p>参考：<a href="https://zhuanlan.zhihu.com/p/72505589" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/72505589</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      ## 1、二叉查找树的缺点

&lt;p&gt;二叉查找树，相信大家都接触过，二叉查找树的特点就是&lt;strong&gt;左子树的节点值比父亲节点小，而右子树的节点值比父亲节点大&lt;/strong&gt;，如图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic3.zhimg.com/80/v2-6e88c1ef544c6fba8dacd7ad12638e86_hd.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt;n 个节点的二叉查找树，正常的情况下，查找的时间复杂度为 O（logn）。&lt;/p&gt;
&lt;p&gt;之所以说是&lt;strong&gt;正常情况下&lt;/strong&gt;，是因为二叉查找树有可能出现一种极端的情况，例如&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="STL" scheme="http://blog.iwxyi.com/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>PR笔记</title>
    <link href="http://blog.iwxyi.com/2017/06/15/PR%E7%AC%94%E8%AE%B0/"/>
    <id>http://blog.iwxyi.com/2017/06/15/PR笔记/</id>
    <published>2017-06-15T12:23:00.000Z</published>
    <updated>2019-10-13T12:24:58.404Z</updated>
    
    <content type="html"><![CDATA[<p>入点出点可以循环播放</p><p>源视频的入点出点设置后，可以快速拖动预览至序列</p><p>片段上右键可以取消视频音频链接</p><p>jkl三个键可以让源视频前、后逐帧扫描（播放）。~让播放机（源视频进入/退出差不多全屏查看）</p><p>时间轴上移动片段，按住 ctrl使覆盖的片段自动往后移</p><p>加好减号放大缩小时间轴</p><p>播放光标在片段上，上、下按键调到片段首尾</p><p>速率伸缩工具（X）可以在片段边缘拉伸片段同时修改速率</p><p>序列间可以相互拖动每一个细节</p><p>特效控制台添加关键帧需要在左边打开动画，才会显示按钮</p><p>片段小三角代表到首尾了</p><p>双击场景过渡控件可以在效果控件里面快速编辑</p><p>可以将过渡特效设置为默认，然后再片段之间右键（ctrl+D，序列菜单键也有）应用视频过渡特效（用于批量）可多选后一键应用</p><p>视频特效-变换-裁剪/羽化边缘/翻转 等等</p><p>音频前面有个小三角，可以展开音频控制，音量线上ctrl+左键添加关键帧，上下可以移动，能调节音量响度</p><p>音频下面有个主声道，可以控制所有音频轨道的声音</p><p>时间重映射那里可以设置关键帧改速度，在片段上修改时需要改右边的fx使调整目标为速度。两个关键帧小片可以分开，使之变速过程线性变化；也有像钢笔工具的完全变化……</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;入点出点可以循环播放&lt;/p&gt;
&lt;p&gt;源视频的入点出点设置后，可以快速拖动预览至序列&lt;/p&gt;
&lt;p&gt;片段上右键可以取消视频音频链接&lt;/p&gt;
&lt;p&gt;jkl三个键可以让源视频前、后逐帧扫描（播放）。~让播放机（源视频进入/退出差不多全屏查看）&lt;/p&gt;
&lt;p&gt;时间轴上移动片段，按住
      
    
    </summary>
    
    
      <category term="后期剪辑" scheme="http://blog.iwxyi.com/categories/%E5%90%8E%E6%9C%9F%E5%89%AA%E8%BE%91/"/>
    
    
      <category term="Premiere" scheme="http://blog.iwxyi.com/tags/Premiere/"/>
    
  </entry>
  
  <entry>
    <title>Java大数相加示例</title>
    <link href="http://blog.iwxyi.com/2017/03/05/Java%E5%A4%A7%E6%95%B0%E7%9B%B8%E5%8A%A0/"/>
    <id>http://blog.iwxyi.com/2017/03/05/Java大数相加/</id>
    <published>2017-03-05T12:02:00.000Z</published>
    <updated>2019-10-12T12:14:28.621Z</updated>
    
    <content type="html"><![CDATA[<p>题目：两个整数和能否整除 86</p><a id="more"></a><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"></span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(sc.hasNext()) {</span><br><span class="line"><span class="keyword">int</span> a = sc.nextInt();</span><br><span class="line"><span class="keyword">int</span> b = sc.nextInt();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((a + b) % <span class="number">86</span> == <span class="number">0</span>) {</span><br><span class="line">System.out.println(<span class="string">"yes"</span>);</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">System.out.println(<span class="string">"no"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目：两个整数和能否整除 86&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="Java" scheme="http://blog.iwxyi.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>正则二三事</title>
    <link href="http://blog.iwxyi.com/2017/01/02/%E6%AD%A3%E5%88%99%E4%BA%8C%E4%B8%89%E4%BA%8B/"/>
    <id>http://blog.iwxyi.com/2017/01/02/正则二三事/</id>
    <published>2017-01-02T11:40:00.000Z</published>
    <updated>2019-10-12T12:13:13.410Z</updated>
    
    <content type="html"><![CDATA[<p>一、校验数字的表达式</p><p>1、 数字：<code>^[0-9]*$</code></p><p>2、 n位的数字：<code>^\d{n}$</code></p><p>3、 至少n位的数字：<code>^\d{n,}$</code></p><p>4、 m-n位的数字：<code>^\d{m,n}$</code></p><a id="more"></a><p>5、 零和非零开头的数字：<code>^(0|[1-9][0-9]*)$</code></p><p>6、 非零开头的最多带两位小数的数字：<code>^([1-9][0-9]*)+(.[0-9]{1,2})?$</code></p><p>7、 带1-2位小数的正数或负数：<code>^(-)?\d+(.\d{1,2})?$</code></p><p>8、 正数、负数、和小数：<code>^(-|+)?\d+(.\d+)?$</code></p><p>9、 有两位小数的正实数：<code>^[0-9]+(.[0-9]{2})?$</code></p><p>10、 有1~3位小数的正实数：<code>^[0-9]+(.[0-9]{1,3})?$</code></p><p>11、 非零的正整数：<code>^[1-9]\d$ 或 ^([1-9][0-9]){1,3}$ 或 ^+?[1-9][0-9]*$</code></p><p>12、 非零的负整数：<code>^-[1-9][]0-9"$ 或 ^-[1-9]\d$</code></p><p>13、 非负整数：<code>^\d+$ 或 ^[1-9]\d*|0$</code></p><p>14、 非正整数：<code>^-[1-9]\d*|0$ 或 ^((-\d+)|(0+))$</code></p><p>15、 非负浮点数：<code>^\d+(.\d+)?$ 或 ^[1-9]\d.\d|0.\d[1-9]\d|0?.0+|0$</code></p><p>16、 非正浮点数：<code>^((-\d+(.\d+)?)|(0+(.0+)?))$ 或 ^(-([1-9]\d.\d|0.\d[1-9]\d))|0?.0+|0$</code></p><p>17、 正浮点数：<code>^[1-9]\d.\d|0.\d[1-9]\d$ 或 ^(([0-9]+.[0-9][1-9][0-9])|([0-9][1-9][0-9].[0-9]+)|([0-9][1-9][0-9]))$</code></p><p>18、 负浮点数：<code>^-([1-9]\d.\d|0.\d[1-9]\d)$ 或 ^(-(([0-9]+.[0-9][1-9][0-9])|([0-9][1-9][0-9].[0-9]+)|([0-9][1-9][0-9])))$</code></p><p>19、 浮点数：<code>^(-?\d+)(.\d+)?$ 或 ^-?([1-9]\d.\d|0.\d[1-9]\d|0?.0+|0)$</code></p><p>二、校验字符的表达式</p><p>1、 汉字：<code>^[\u4e00-\u9fa5]{0,}$</code></p><p>2、 英文和数字：<code>^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]{4,40}$</code></p><p>3、 长度为3-20的所有字符：<code>^.{3,20}$</code></p><p>4、 由26个英文字母组成的字符串：<code>^[A-Za-z]+$</code></p><p>5、 由26个大写英文字母组成的字符串：<code>^[A-Z]+$</code></p><p>6、 由26个小写英文字母组成的字符串：<code>^[a-z]+$</code></p><p>7、 由数字和26个英文字母组成的字符串：<code>^[A-Za-z0-9]+$</code></p><p>8、 由数字、26个英文字母或者下划线组成的字符串：<code>^\w+$ 或 ^\w{3,20}$</code></p><p>9、 中文、英文、数字包括下划线：<code>^[\u4E00-\u9FA5A-Za-z0-9_]+$</code></p><p>10、 中文、英文、数字但不包括下划线等符号：<code>^[\u4E00-\u9FA5A-Za-z0-9]+$ 或 ^[\u4E00-\u9FA5A-Za-z0-9]{2,20}$</code></p><p>11、 可以输入含有<code>^%&amp;',;=?$\"</code>等字符：<code>[^%&amp;',;=?$\x22]+</code></p><p>12、 禁止输入含有<code>~</code>的字符：<code>[^~\x22]+</code></p><p>三、特殊需求表达式</p><p>1、 Email地址：<code>^\w+([-+.]\w+)@\w+([-.]\w+).\w+([-.]\w+)*$</code></p><p>2、 域名：<code>[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/.?</code></p><p>3、 InternetURL：<code>[a-zA-z]+://[^\s]</code> 或 <code>^http://([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=])?$</code></p><p>4、 手机号码：<code>^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d{8}$</code></p><p>5、 电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)：<code>^((\d{3,4}-)|\d{3.4}-)?\d{7,8}$</code></p><p>6、 国内电话号码(0511-4405222、021-87888822)：<code>\d{3}-\d{8}|\d{4}-\d{7}</code></p><p>7、 身份证号(15位、18位数字)：<code>^\d{15}|\d{18}$</code></p><p>8、 短身份证号码(数字、字母x结尾)：<code>^([0-9]){7,18}(x|X)?$ 或 ^\d{8,18}|[0-9x]{8,18}|[0-9X]{8,18}?$</code></p><p>9、 帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：<code>^[a-zA-Z][a-zA-Z0-9_]{4,15}$</code></p><p>10、 密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：<code>^[a-zA-Z]\w{5,17}$</code></p><p>11、 强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：<code>^(?=.\d)(?=.[a-z])(?=.*[A-Z]).{8,10}$</code></p><p>12、 日期格式：<code>^\d{4}-\d{1,2}-\d{1,2}</code></p><p>13、 一年的12个月(01～09和1～12)：<code>^(0?[1-9]|1[0-2])$</code></p><p>14 一个月的31天(01～09和1～31)：<code>^((0?[1-9])|((1|2)[0-9])|30|31)$</code></p><p>15、 钱的输入格式：</p><p>   1.有四种钱的表示形式我们可以接受:”10000.00” 和 “10,000.00”, 和没有 “分” 的 “10000” 和 “10,000”：<code>^[1-9][0-9]*$</code></p><p>   2.这表示任意一个不以0开头的数字,但是,这也意味着一个字符”0”不通过,所以我们采用下面的形式：<code>^(0|[1-9][0-9]*)$</code></p><p>   3.一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：<code>^(0|-?[1-9][0-9]*)$</code></p><p>   4.这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：<code>^[0-9]+(.[0-9]+)?$</code></p><p>   5.必须说明的是,小数点后面至少应该有1位数,所以”10.”是不通过的,但是 “10” 和 “10.2” 是通过的：<code>^[0-9]+(.[0-9]{2})?$</code></p><p>   6.这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：<code>^[0-9]+(.[0-9]{1,2})?$</code></p><p>   7.这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：<code>^[0-9]{1,3}(,[0-9]{3})*(.[0-9]{1,2})?$</code></p><ol start="8"><li>1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：<code>^([0-9]+|[0-9]{1,3}(,[0-9]{3})*)(.[0-9]{1,2})?$</code></li></ol><p>16、 备注：这就是最终结果了,别忘了”+”可以用”*”替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里</p><p>17、 xml文件：<code>^([a-zA-Z]+-?)+[a-zA-Z0-9]+\.[x|X][m|M][l|L]$</code></p><p>18、 中文字符的正则表达式：<code>[\u4e00-\u9fa5]</code></p><p>19、 双字节字符：<code>[^\x00-\xff]</code> (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))</p><p>20、 空白行的正则表达式：\n\s*\r (可以用来删除空白行)</p><p>21、 HTML标记的正则表达式：<code>&lt;(\S?)[^&gt;]&gt;.?&lt;/\1&gt;|&lt;.? /&gt;</code> (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)</p><p>22、 首尾空白字符的正则表达式：<code>^\s|\s$</code>或<code>(^\s)|(\s$)</code> (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)</p><p>23、 腾讯QQ号：<code>[1-9][0-9]{4,}</code> (腾讯QQ号从10000开始)</p><p>24、 中国邮政编码：<code>[1-9]\d{5}(?!\d)</code> (中国邮政编码为6位数字)</p><p>25、 IP地址：<code>\d+.\d+.\d+.\d+</code> (提取IP地址时有用)</p><p>26、 IP地址：<code>((?:(?:25[0-5]|2[0-4]\d|[01]?\d?\d)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d?\d))</code></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一、校验数字的表达式&lt;/p&gt;
&lt;p&gt;1、 数字：&lt;code&gt;^[0-9]*$&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;2、 n位的数字：&lt;code&gt;^\d{n}$&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;3、 至少n位的数字：&lt;code&gt;^\d{n,}$&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;4、 m-n位的数字：&lt;code&gt;^\d{m,n}$&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="RegExp" scheme="http://blog.iwxyi.com/tags/RegExp/"/>
    
  </entry>
  
  <entry>
    <title>PS笔记3</title>
    <link href="http://blog.iwxyi.com/2016/08/15/PS%E7%AC%94%E8%AE%B03/"/>
    <id>http://blog.iwxyi.com/2016/08/15/PS笔记3/</id>
    <published>2016-08-15T12:23:00.000Z</published>
    <updated>2019-10-13T12:31:07.557Z</updated>
    
    <content type="html"><![CDATA[<p>​RGB和CMY(K)互补，前者相加，后者相减：青、品红、黄。HSB：色相、饱和度、明度</p><p>界面背景可以右键修改……</p><p>背景图层默认锁定，那个锁可以拖到垃圾箱中删除</p><p>可以选择多个层，在顶部工具栏“显示变换控件”，可以多个层的图片一起自由变换。对齐也是如此。（需移动工具）</p><p>选择一个图层，按住shift，再点击另一个图层，可以选中这两个图层及其之间的所有图层</p><p>矩形选区时shift正方形选区，椭圆相同。alt中心选择。可同时使用两键</p><p>裁剪工具裁剪时可以使用“拉直”，正的区域会比原来歪的区域小一些。“删除裁剪的像素”可以删掉周围多余的</p><p>裁剪顶边工具栏的设置按钮：“经典模式”（老版本）是裁剪区域不动，原图像动。“自动中心预览”可以使背景旋转大小改变，但是选择区域不变。按下鼠标旋转区域使9宫格会变成16宫格并且在正的时候变白，不正时灰</p><p>环境比例构图，将重要的部位放在交叉线上。o切换辅助线种类，shift+o变换辅助线（翻转、平移）</p><p>透视裁剪：一种方法扣出网格再调整，另一种方法鼠标单击，再单击拉线，四个点组成四边形。高度宽度是调整后矩形的尺寸。单击“前面的图像”，会自动填充当前的图像尺寸，接着可以到其他图像进行裁剪</p><p>alt+左键，选择旋转中心</p><p>切片划分，水平划分是横着切，纵向是竖着切。可以使用顶部工具栏对齐</p><p>切片选择工具移动切片，会自动产生灰色的切片，这时候可以隐藏自动切片使之不可见。“提升”选项可以使自动切片变为用户切片</p><p>切片选项的目标：比如：_blank，是新窗口打开网页（上方的URL选项）</p><p>吸管工具可以设置取样图层，比如“当前和下方图层”。取样大小可以设置取样范围并取平均值</p><p>颜色取样器可以选择4个取样点并在信息面板中显示RGB值。用清除按钮清除</p><p>标尺：拉出一条标尺后会显示倾斜角，可以直接按拉直按钮拉直图层。按住alt再拉出另一条，会显示两条线的夹角，A：夹角</p><p>计数可以创建计数组，还能隐藏。</p><p>污点修复画笔修复脸部黑点之类。有三种方式，近似匹配不好用。也可以对所有图层取样。</p><p>修复画笔按alt单击取样，再单击或按下拖拽，即可将取样的区域复制过去并与周围融合。可以设置忽略调整图层。“对齐”：修复时跟着鼠标相对移动。选择“图案”时不需要取样，直接涂抹，会根据样本图层自动变色</p><p>“仿制源”面板可以设置修复画笔的旋转角度、透明度等</p><p>修补工具：正常：1.源：选选区（可以直接选，也可以用选择工具选），再拖拽，将最后松开左键时的图像放到原选区中；2.目标：将选区图像拖到（复制）其他位置。透明：前后图像融合</p><pre><code>内容识别：越不严格，程序会自动从周围图像填充过来。此时建议选区大一些修补工具也可以用来画区域，限制修复工具的范围</code></pre><p>内容感知工具：移动：移动选区，并从相似处填充遗留的选区；扩展：复制</p><p>红眼工具：红眼变黑。工具栏调瞳孔大小，越小黑色越聚集在中央。变暗两越大越黑。突然闪光会使眼睛充血红眼。</p><p>画笔工具：按下1—10，直接调透明度，百分之几十。快速连续两个数字，调百分之几十几。shift+数字键调整流量。流量：颜良从笔尖流出的速度。喷枪：停顿时间越长不透明度越高（需降低流量）。透明满流量的画笔一笔画重复涂抹一处，其颜色不会变；第二次画上去，颜色加深（可以理解为上次画的颜料已经干了）。低流量一笔画重叠部分可以颜色加深。画笔的角度和圆度是改变两端形状的。间距对流量比较敏感。</p><p>线性高度比高度纹理要浅。双重画笔取两种画笔的交集。</p><p>铅笔工具用shift进行连接画出图像，而且画出的效果比画笔清晰。自动抹除：如果落笔的地方是前景色，那么将自动抹除前景色，用背景色代替。</p><p>将图层移动到新建图层可以快速复制图层</p><p>颜色替换工具用alt取色，涂抹上去替换颜色。可以在新建复制图层上涂抹，然后调整复制透明度使颜色更加柔和。模式：连续：鼠标移动替换；一次：左键按下替换；背景：仅替换背景。限制的查找边缘：尽可能保持边缘的色彩过渡</p><p>混合器工具：画笔沾染颜色，与未干燥的纸上染料进行涂抹。混合：0%为画笔颜色，100%则为拖出图像颜色。潮湿：拖动出来的长度。载入：染料的量（决定能画多长距离）</p><p>修复画笔在修复后会与周围环境进行融合，但是仿制图章不会。后者不可进行图案，但是模式更多</p><p>图案工具：对齐：使两处的图案纹理连续、一致。印象派效果：使图案杂乱无章</p><p>历史记录画笔：在图层最左侧确定“源”后，画笔涂抹能使其恢复到源图像</p><p>历史记录艺术画笔：只能用于8位图像。产生画画的效果。区域：影响的区域大小。容差：允许修改的历史记录源图像与当前图像的差距，低时能到处画。</p><p>橡皮擦能擦出背景色，也能擦出透明，还能抹到历史记录（需设置源，相当于历史记录画笔）。</p><p>背景橡皮擦：擦除背景，能类似魔棒扩选。保护前景色：前景色。魔术橡皮擦：橡皮擦+魔棒</p><p>渐变工具：仿色：防止打印时条带现象产生。透明区域：是否允许渐变中的透明</p><p>使用锐化工具时尽量使用保护细节</p><p>涂抹工具类似于混合器画笔。手指绘画：结合前景色进行绘画</p><p>加深、减淡工具：加深变暗，减淡变量。可以设置调整高光、中间调、阴影。曝光值：效果强度。保护色调：使色彩过渡更加优秀。</p><p>海绵工具：增加或减少饱和度（鲜艳）</p><p>路径：锚点、片段。创拖拽创建曲线。在原点处单击，闭合曲线。直接选择工具进行编辑。添加锚点工具、删除锚点工具。自由钢笔工具：自由绘制路径。转换点工具：将有控制杆的锚点转换成没有控制杆的锚点，也可以拖动锚点将其转换成有控制杆的锚点。若开启自动添加/删除，则可以按ctrl暂时转换到直接选择工具，单击显示锚点。ctrl松开回复钢笔。alt暂时到转换点工具。移动时alt也能复制路径。约束路径拖动：拖动片段时是否不改变相邻两个片段曲线</p><p>矩形工具等也可以建立矩形路径。多边形的设置中的”缩进边依据“：尖角圆弧程度。平滑拐角/平滑缩进：通过弯曲使边角/夹角顺畅。</p><p>创建路径：1、单击与拖拽结合。连续点两个点可以创建直接，ctrl单击出现锚点，然后按下alt可以控制控制杆，两条重合的片段分开，即是创建不规则圆。</p><pre><code>2、先单击所有拐点，创建直线路径，然后调整控制杆进行弯曲，每次只顾一边不顾另外一边。3、使用相似的形状创建路径，自由变换+路径运算。ctrl+x剪切路径。若对称，则宽度、高度使用-100%则翻转</code></pre><p>画直线：shift竖直水平以及45度。拖动时shift竖直水平拖动</p><p>路径面板：白色为路径内部区域，灰色为外部</p><p>直接选择工具编辑路径时，减去顶层路径为内外颠倒选择区域</p><p>段落面板设置段落格式。输入文字时，可单独设置光标所在段落的样式</p><p>先画路径，ctrl+左键隐藏锚点。然后文字工具放在路径上，会专门复制一个路径，并使文字沿着路径排布。文字左上角可以切换横向纵向。文字路径可以编辑，两端上下移动修改起点、终点。在两端左右移动替换起点终点</p><p>闭合路径中，文字工具可以直接在路径里面单击，并且约束文字排版于路径中。</p><p>抓手、旋转工具：可以设置滚动/旋转所有窗口</p><p>shift+ctrl+alt+e合并所有可见图层</p><p>图层面板的“锁定透明像素”：只有不透明像素才能够编辑。“锁定位置”与“锁定透明像素”可一起用</p><p>画笔越黑越能擦出透明蒙版。白色恢复蒙版。选择蒙版图标时切勿选择到图层！</p><p>按shift单击蒙版，可以暂时停用蒙版。蒙版可以拖到垃圾桶。</p><p>“斜面与浮雕”中的“描边浮雕”需要和“描边”效果一起用才会产生效果</p><p>画路径-“图层-矢量路径-当前路径”，可以提取中当前路径中的颜色，其他全清空</p><p>图层面板下方可以新建各种图层。选区后，为调整层，有创建蒙版，有路径；可用路径编辑工具进行调整范围</p><p>新建“纯色”图层，双击缩略图可以修改颜色。</p><p>新建“图案”图层，“与图层链接”：拖动图像时，上方的图案是否不随之拖动</p><p>亮度/对比度 面板的 旧版：扩大调整的极限，但是看起来比较假</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​RGB和CMY(K)互补，前者相加，后者相减：青、品红、黄。HSB：色相、饱和度、明度&lt;/p&gt;
&lt;p&gt;界面背景可以右键修改……&lt;/p&gt;
&lt;p&gt;背景图层默认锁定，那个锁可以拖到垃圾箱中删除&lt;/p&gt;
&lt;p&gt;可以选择多个层，在顶部工具栏“显示变换控件”，可以多个层的图片一起自由
      
    
    </summary>
    
    
      <category term="后期剪辑" scheme="http://blog.iwxyi.com/categories/%E5%90%8E%E6%9C%9F%E5%89%AA%E8%BE%91/"/>
    
    
      <category term="PhotoShop" scheme="http://blog.iwxyi.com/tags/PhotoShop/"/>
    
  </entry>
  
  <entry>
    <title>PS笔记2</title>
    <link href="http://blog.iwxyi.com/2016/08/15/PS%E7%AC%94%E8%AE%B02/"/>
    <id>http://blog.iwxyi.com/2016/08/15/PS笔记2/</id>
    <published>2016-08-15T12:21:00.000Z</published>
    <updated>2019-10-13T12:30:26.180Z</updated>
    
    <content type="html"><![CDATA[<p>溶图时正片叠底可以去除背景的白色</p><p>[缩小画笔，]放大画笔</p><p>蒙版也可以用前后景色快捷键直接覆盖</p><p>shift单击蒙版停用，alt单击看纯蒙版状态</p><p>图层与蒙版之间的锁链会使两者无法相对位移。解除锁链后，选区，涂抹，再移动蒙版来调整区域</p><p>ctrl+t：锁链时图层；无锁链：选中图层时图层，可相对位移；选中蒙版时调整蒙版可见区域</p><p>ctrl+i：反相，有选区时仅调整选区。可快速颠倒蒙版里外</p><p>显示太生硬额可以调整画笔硬度和透明度</p><p>蒙版只看明度，大红也显示灰色</p><p>ctrl+alt+g剪切蒙版：上图下形，即下面的图的形状作为蒙版，扣除那个形状。上图依旧可以加图层蒙版</p><p>按住ctrl点图层图标，可以显示选区</p><p>在剪切蒙版上画笔作图，即相当于直接画在图层上，什么颜色就是什么颜色</p><p>快速蒙版：使选区边缘柔和一些，在通道面板查看，双击通道中的图标可以设置颜色等</p><p>选区与蒙版的本质都是通道</p><p>通道中有选区的话，即使是不可见的也会限制画笔的涂抹</p><p>通道面板中有分离通道的选项，可以分成R、G、B三个psd_R/G/B黑白文件，然后还可以合并通道</p><p>“编辑-首选项-界面-用彩色显示通道”可以使通道颜色变为彩色</p><p>三原色通道可以直接分别移动（彩色残影效果），可以直接用画笔涂抹，白色为增加通道所在的颜色。，也可以调用色阶曲线。在通道中涂抹不会涂到透明像素。</p><p>蒙版/通道里图像可以选取、复制粘贴到其他蒙版/通道。有些时候在通道中选区更方便</p><p>吸管工具在黑白显示的通道中取到的数值为实际彩色的颜色值</p><p>“选择-载入选区”可以载入选区中其他图层/通道的图像</p><p>ctrl+shift+u去色</p><p>选择图层前别忘了先在通道中选择回RGB四个通道</p><p>“图层-新建-背景图层”可以将当前图层转化成背景图层（透明的加个背景）</p><p>填充图层 与 直接新建图层 再填充的区别：填充图层双击图层图标可以快速修改，只能填充/渐变一次，每次清除上次；新建图层可以累加填充、渐变</p><p>新建调整图层可以仅调整某一选区，并随时修改</p><p>进行渐变时正常模式只能拉一个，绿色模式可以重复</p><p>拖拽蒙版图标至另一个蒙版可以替换</p><p>阈值可以直接调整图像的黑白</p><p>“图层-矢量蒙版-添加矢量蒙版”与选区的区别：前者可以随意调节大小，后者边缘柔和</p><p>先选区，再“路径面板下方图标-从选区生成工作路径”，可以将选区转化成路径</p><p>路径栅格化可成形状</p><p>路径也可以右键进行描边，同样可以设置画笔的各种属性。相比选区描边，多出各种设置来</p><p>描边路径时若想要从某个部位开始，可以减去此处小小的部分（断开）</p><p>形状新建后，alt拖拽鼠标新图层建新形状，可以先改变前景色，然后新形状也会变颜色</p><p>选区、路径、形状，三者皆可以互相转化</p><p>带矢量路径的图层，若选择图层则一起调，若选中路径则调整路径</p><p>浮雕效果等可以把透明度拉低使之符合背景色</p><p>先加入文字、形状等，然后ctrl左键选区，删除文字图层，路径面板新建选区路径，图层面板新建填充图层，即可创建可改变大小的填充图像，在路径面板选中后用路径选择工具调整大小</p><p>文字跟随路径需要先在路径面板选中路径。使用路径选择工具修改路径上的文本大小、哪一侧等</p><p>在路径外面写字顺着边缘，在闭合路径里面填充内部空白并且自动调整位置</p><p>利用通道选区时可以先复制一个通道，然后ctrl+m，增加对比度</p><p>“滤镜-消失点”创建透视平面（然后按ctrl并拖拽线段中间点可以创建连续的垂直平面），并将透视平面上的图片移动到另一个透视平面。选择工具时双击平面可以选中平面，可以复制粘贴。适合三维场景的贴图</p><p>想要在消失点创建文字，先新建文字图层，然后选中图层进行复制，隐藏图层，选中修改的图层后在消失点界面中粘贴并且使用选区工具移动到合适的位置</p><p>马赛克能和羽化一起用。想要马赛克后弄回来，可以先转化为智能对象，然后进行马赛克，会出现“马赛克”智能滤镜图层，类似蒙版，涂黑时不马赛克，涂白时马赛克。智能滤镜可以开关，也可以shift单击禁用。多个智能滤镜的先后顺序不同显示的效果不同。</p><p>智能对象栅格化变回普通图层</p><p>“滤镜-像素化-碎片”，上下震动效果；“彩色半调”，用CMYK四种颜色（灰度图像为大小不同的黑白点）组成图像（缩小才能看）；“彩色化”比“晶格化”柔和一些</p><p>“滤镜-扭曲-极坐标”将球形（地球仪）转化成平面；“镜头校正”修改图像突出、凹进；“切变”把图像方向弄歪；“置换”就当前图层自适应选定图片；“波纹”滤镜使用前最好用椭圆选区</p><p>“液化”滤镜类似于涂抹工具，但是有更多效果。旧版液化有冻结蒙版和更多功能</p><p>“滤镜-杂色”各种选项能去小点</p><p>使用模糊效果后，可以用历史记录画笔画出原来的部分</p><p>高斯模糊时是随机模糊，表面模糊是反差小的地方模糊（可以去斑点）</p><p>径向模糊有旋转和缩放两者模糊方式</p><p>可以选中通道、蒙版，对其进行滤镜操作……</p><p>图层面板上的“正常”拉出的框中选中“差值”，可以看到当前图层与下一个图层的区别，越白为差别越大</p><p>ctrl+shift+u去色，变为黑白的</p><p>锐化和模糊可以互相转化，一个事物的两个方面</p><p>加“镜头光晕”滤镜时，一般新建图层，用黑色填充，然后加滤镜，图层模式选择“滤色”。这样设置可以调整透明度等</p><p>“纤维”滤镜配合“模糊”（需要先把新图层填充黑色），在调整图层模式为“柔光”、“叠加”等，可以形成下雨的效果</p><p>通道的图像可以直接复制到图层</p><p>想要“风”滤镜向上下吹，可以先旋转画布90度，加滤镜后转回来……要是分不够大，可以多次吹风</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;溶图时正片叠底可以去除背景的白色&lt;/p&gt;
&lt;p&gt;[缩小画笔，]放大画笔&lt;/p&gt;
&lt;p&gt;蒙版也可以用前后景色快捷键直接覆盖&lt;/p&gt;
&lt;p&gt;shift单击蒙版停用，alt单击看纯蒙版状态&lt;/p&gt;
&lt;p&gt;图层与蒙版之间的锁链会使两者无法相对位移。解除锁链后，选区，涂抹，再移动蒙版
      
    
    </summary>
    
    
      <category term="后期剪辑" scheme="http://blog.iwxyi.com/categories/%E5%90%8E%E6%9C%9F%E5%89%AA%E8%BE%91/"/>
    
    
      <category term="PhotoShop" scheme="http://blog.iwxyi.com/tags/PhotoShop/"/>
    
  </entry>
  
  <entry>
    <title>PS笔记1</title>
    <link href="http://blog.iwxyi.com/2016/08/15/PS%E7%AC%94%E8%AE%B01/"/>
    <id>http://blog.iwxyi.com/2016/08/15/PS笔记1/</id>
    <published>2016-08-15T12:20:00.000Z</published>
    <updated>2019-10-13T12:25:15.595Z</updated>
    
    <content type="html"><![CDATA[<p>ctrl移动，空格-抓手，tab开关面板和工具栏，shift+tab开关面板 ，ctrl++放大，ctrl+-缩小，ctrl+0屏幕大小，ctrl+1实际大小</p><p>shift+ctrl+i选择反向，ctrl+u色相，ctrl+alt+d羽化，ctrl+r标尺，ctrl+m曲线，ctrl+e合并</p><p>放大镜工具按下alt变为缩小；修改画布大小等时按住alt使“取消”按钮变为“复位”按钮；平铺小图标或选区图像时按下alt可按住鼠标左键拖拽复制</p><p>吸管工具下的标尺工具能从上方信息栏看到倾斜角度，并能直接置入“图像-画布旋转-任意角度”的输入框中以掰正方向</p><p>自由变换、裁剪时 双击=enter完成</p><p>透视裁剪工具可以将近大远小的平面图掰正</p><p>图像拼接时可以暂时调整透明度来微调融合</p><p>鼠标无法拖拽复制图片、填充无效以及复制不了粘贴不了等可能是因为图像模式，比如索引模式需设置成RGB模式</p><p>先选区，然后画笔或调整色相，这样就可以限制区域</p><p>在选区内部拖拽鼠标，移动工具移动选区图像，alt拖拽复制图像至新图层（背景图将不会新建图层，此时需用复制粘贴）；选择工具移动选区范围</p><p>在选区外部拖拽鼠标，移动工具移动选区；选择工具单击取消选区，拖拽时shift添加选区，alt减去选区，shift+alt交叉选区</p><p>选中图层，ctrl+j可将 选区图像/当前图层 复制至新图层；ctrl+e向下合并一个图层（图层名为下方图层名）</p><p>shift+F5填充的内容识别可自动修改内容，可羽化</p><p>shift+ctrl+l自动调色，可羽化</p><p>画圆时shift正圆，alt从中心开始画；画矩形时同</p><p>alt+delete/退格 前景填充选区，ctrl+delete/退格 背景填充选区；同时按住shift可复制</p><p>delete删除一个套索节点，esc彻底删除套索选中</p><p>自由变换可以直接翻转；shift锁定长宽比；alt围绕中心变换；可调到标尺工具画直线拉直（调整角度）</p><p>先羽化再复制、填充；羽化范围是选区边缘内外；羽化10，再羽化10，范围略小于羽化20</p><p>选区-羽化-选区运算，可以使同一选区羽化不同；清除时也可羽化</p><p>“选择-色彩范围”、“选择-扩大选区（连续）/选区相似（不连续）”可以类似魔棒选颜色区域（前者可事先选区以限制范围并预览）</p><p>“选区-调整边缘-智能半径”可以类似魔棒识别色差</p><p>只有选择工具（矩形、椭圆）才有右键描边</p><p>ctrl+shift+t，造次操作；组团了+shift+alt+t复制至新图层并再次操作。</p><p>后退一步快捷键与QQ冲突：PS课：QQ不隐身，上课不认真</p><p>将图层转换为智能对象能够帮助我们在放大照片的同时保留照片的清晰度</p><p>图层模式的 正片叠底、叠加 可以使图像色彩与背景适应</p><p>左右键换图层混合选项</p><p>“编辑-变换-再次”能重复自由变换操作，同时按住alt可新建图层来变换</p><p>“选择-修改-XX”可以调整选区边缘</p><p>油漆桶工具在色板上的色块外单击可以新建色块</p><p>油漆桶工具按住shift可以改变画布外面的背景</p><p>渐变编辑器渐变调板的小箭头可以直接双击选颜色；上下拽动小箭头可删除小箭头</p><p>所有对颜色的操作都在“图像-调整”里面</p><p>直方图：明度左边最暗，右边最亮。越集中在左边说明曝光越不足。可用“图像-调整-亮度/对比度”来修改曝光不足/过度</p><p>背光图可以使用“图像-调整-阴影/高光”，把暗处调亮，亮处调暗</p><p>色调均化：亮的地方多就变暗，暗的地方多就变亮，灰的图不同区域调亮调暗</p><p>ctrl+l色阶，输入：移动黑场小箭头越往右越黑，输出相反。输入：黑场左边的颜色变纯黑，白场反。输出：限制最黑最白的极限。输入的点对应到输出的点。（右边三个吸管可快速设置）按住alt可以通过黑白视图看改变的区域。颜色偏黑/灰(输入：黑白场调到中间=增加对比度，输出调中间=降低对比度)/白均可以用色阶来调整。输出色阶的黑场白场可以越过对方使得颜色反向。调色之前可以先选区、羽化</p><p>红<del>青，绿</del>品红，蓝~黄，使用色阶灰场吸管时会增多相反颜色。（=相机的白平衡）</p><p>脸红可通过色阶红通道来调节，将输入黑白场往中间移。肉色：红色调高，绿色略调高，蓝色调低。调色时可以将一个通道加（左加右减），其他两个颜色通道减小</p><p>只有在通道选中（可视）的通道才能在色阶处编辑</p><p>“图像-调整-曲线”有色阶的功能。曲线上拉变亮，下拉变暗。按住ctrl和左键（或直接双击）取点。将取的点拖拽至外面可以删除点。点手指按钮可以设置直接在图像上上下拖动调整曲线</p><p>ctrl+u色相/饱和度，可左键按下图像左右移动调整饱和度。按下之前用ctrl可调整色相。同时按下shift可快速调整。下方的两个彩虹条之间是选择允许变色的范围，上面是原色，下面是改变后的颜色；范围条中间的两竖之间是完全变化，剩下两侧边是羽化范围。范围条可以是中间，也可以是两边（挪过头）。增加饱和度略相当于锐化</p><p>“图像-调整-替换颜色”与色相/饱和度一样，只是多了黑白预览，且直接设置在容差范围内替换颜色而非范围条。吸管：shift加范围，alt减范围</p><p>“图像-调整-通道混合器”可以设置RGB每个颜色的来源，即使原多色调成（输出成）某色</p><p>“图像-调整-可选颜色”调整特定颜色的各偏向输出</p><p>“图像-调整-照片滤镜”能够增加颜色并调整强度</p><p>“图像-调整-变化”可以加深阴影/中间调/高光/饱和度的特定颜色</p><p>“图像-调整-色彩平衡”可单独设置阴影/中间调/高光的RGB值</p><p>“图像-调整-匹配颜色”可以是一张图片采用另一张图片的颜色（可分别建立选区。来源图片按w+j至新建图层，匹配时选择图层）</p><p>“图像-调整-渐变映射-单击打开渐变编辑器”，点了黑场之后点空位置新建黑场，点白场后新建白场。色阶/色阶曲线就是分别设置RGB三个颜色通道的渐变映射</p><p>“图像-调整-黑白”可以整体黑白，并且使某个颜色更白/黑一些</p><p>“图像-调整-阈值”调整色阶至黑白，一般作为压线条：先用“滤镜-其他-高反差保留”，再调整阈值，可以提取线条</p><p>“图像-调整-色调分离”可以快速调整颜色反差，从油画模样到真实照片。即由色块组成图像</p><p>Lab通道：L：明度的过渡，a：绿色到品红的过渡，b：蓝色到黄色的过渡；（可用画笔涂抹，黑到白）</p><p>RGB色彩模式依赖设备（硬件、亮度）、环境（灯光）。Lab与设备不相关，根据颜色调整颜色，且能显示所有颜色。理论上来说，Lab模式打印出来可以发光发亮。</p><p>若RGB“滤镜-锐化-USM锐化”后出现不正常颜色，可以先调到Lab模式，再选中明度通道，接着锐化</p><p>加强某个区域的饱和度，可以先复制图层，再调整，再用画笔调整透明度擦去</p><p>可以直接在通道上上色，等同于在图层上上色。在a通道用黑笔画图像变绿，用白笔画变品红。b通道分别为蓝色、黄色</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ctrl移动，空格-抓手，tab开关面板和工具栏，shift+tab开关面板 ，ctrl++放大，ctrl+-缩小，ctrl+0屏幕大小，ctrl+1实际大小&lt;/p&gt;
&lt;p&gt;shift+ctrl+i选择反向，ctrl+u色相，ctrl+alt+d羽化，ctrl+r标尺，ct
      
    
    </summary>
    
    
      <category term="后期剪辑" scheme="http://blog.iwxyi.com/categories/%E5%90%8E%E6%9C%9F%E5%89%AA%E8%BE%91/"/>
    
    
      <category term="PhotoShop" scheme="http://blog.iwxyi.com/tags/PhotoShop/"/>
    
  </entry>
  
  <entry>
    <title>CGI-C语言也能干大事</title>
    <link href="http://blog.iwxyi.com/2016/07/12/CGI-C%E8%AF%AD%E8%A8%80%E4%B9%9F%E8%83%BD%E5%B9%B2%E5%A4%A7%E4%BA%8B/"/>
    <id>http://blog.iwxyi.com/2016/07/12/CGI-C语言也能干大事/</id>
    <published>2016-07-12T11:42:00.000Z</published>
    <updated>2019-10-13T06:25:01.405Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CGI-amp-DGI"><a href="#CGI-amp-DGI" class="headerlink" title="CGI &amp; DGI"></a>CGI &amp; DGI</h1><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> * qs = getenv(<span class="string">"QUERY_STRING"</span>);<span class="comment">//获取环境变量</span></span><br><span class="line"><span class="keyword">char</span> username[<span class="number">256</span>];</span><br><span class="line"><span class="built_in">sscanf</span>(qs, <span class="string">"username=%s"</span>, username);<span class="comment">//获取地址栏后面的东西</span></span><br></pre></td></tr></tbody></table></figure><p>断点调试：<code>include \&lt;windows.h&gt;</code>，然后 <code>MessageBoxA(0,"ok","ok",0);</code></p><a id="more"></a><p>让程序启动后暂停，等待着按按钮；<br>浏览器访问CGI，窗口弹出后，在VS中“调试”→“附加到进程”，设置断点，然后在关闭消息对话框。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"Location:http://www.baidu.com\r\n"</span>);<span class="comment">//重定向，302 Found。注意\r\n</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Location:1.html\r\n"</span>);<span class="comment">//重定向至cgi程序同目录的1.html文件</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Content-Type:text/html;charset=gbk\r\n\r\n"</span>);<span class="comment">//改成 text/plain，为普通文本，显示HTML标签。</span></span><br></pre></td></tr></tbody></table></figure><p>注意<code>\r\n\r\n</code>（两个），表示报文头结束了（各个报文头顺序可调换）<br>源代码中，<code>\n</code>能换行，但是浏览器上要用<code>&lt;br&gt;</code>才换行，所以用： <code>\n&lt;br&gt;</code></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">itoa(i, str, x); <span class="comment">//int i 转换成 char str[]、x进制的文本</span></span><br><span class="line"><span class="keyword">int</span> i = atoi(str); <span class="comment">//字符串转换成int</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">fprintf</span>(cgiOut, <span class="string">"&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;大家好，Querystring=%s，你的浏览器UserAgent是：%s，你的IP地址是：%s，当前cgi地址：%s&lt;/body&gt;&lt;/html&gt;"</span>, cgiQueryString, cgiUserAgent, cgiRemoteAddr, cgiScriptName);<span class="comment">//可以用printf</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cgiFormString(<span class="string">"name"</span>, name, <span class="keyword">sizeof</span> name); <span class="comment">// 获取用户名：name=xxx</span></span><br><span class="line"><span class="keyword">if</span> (cgiFormString(<span class="string">"password"</span>, pwd, <span class="keyword">sizeof</span> pwd) != cgiFormSuccess);<span class="comment">//返回值表示有没有这个值</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">&lt;!--点击登陆转到网址：../11.cgi?name=admin&amp;pwd=123，</span></span><br><span class="line"><span class="comment">  或者绝对网址："http://www.baidu.com"。</span></span><br><span class="line"><span class="comment">  method="get"（默认）或者"post"，post时地址栏看不到表单 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"11.cgi"</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"admin"</span> /&gt;</span></span><br><span class="line">    密　码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"pwd"</span> <span class="attr">value</span>=<span class="string">"123"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"登陆"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--form中的：input、textarea、select 中的名字和值都会提交给服务器</span></span><br><span class="line"><span class="comment">没有name值的表单将不会提交，包括submit。--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"se"</span>&gt;</span><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"nan"</span>&gt;</span>男<span class="tag">&lt;/<span class="name">option</span>&gt;</span><span class="tag">&lt;<span class="name">option...</span> /<span class="attr">option</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--提交的值为value属性，如：se="nan"--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"ch"</span> <span class="attr">id</span>=<span class="string">"chk"</span> / &gt;</span><span class="tag">&lt;<span class="name">lable</span> <span class="attr">for</span>=<span class="string">"chk"</span>&gt;</span>我已阅读XXX<span class="tag">&lt;/<span class="name">lable</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--如果勾上了，会有 "ch=on"   提交给服务器。</span></span><br><span class="line"><span class="comment">   radio 的 name 属性相同的为一组，提交选中的 value--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">...</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--隐藏的字段，不会显示，但是也会提交--&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>1、select、input、textarea必须要在form中。<br>2、当点击<code>input type="submit"</code>的按钮的时候，会把它所在的form中的所有“<strong>有name属性的</strong>”<code>input</code>/<code>select</code>/<code>textarea</code>的值（value）提交给服务器。<br>3、<strong>表单提交的值</strong></p><ul><li><code>input type="text"</code>的值就是用户输入的值；</li><li>对于<code>input type="checkbox"</code>的值就是“选中是on，没选中则没有”；</li><li>对于<code>inpu type="radio</code>“的则是被选中的name、value提交给服务器；</li><li>对于<code>input type="submit"</code>的则是被点击的name、value被提交给服务器；</li><li>对textarea就是输入的文本；</li><li>对于select就是选择项对应的option的value。</li></ul><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">TMPL_varlist *varlist1 = <span class="number">0</span>;<span class="comment">//空的参数列表 C99</span></span><br><span class="line">cgiHeaderContentType(<span class="string">"text/html;charset=gbk"</span>);</span><br><span class="line">varlist1 = TMPL_add_var(varlist1, <span class="string">"test1"</span>, <span class="string">"特斯特1"</span>, <span class="string">"pwd"</span>, <span class="string">"小密码"</span>, <span class="string">"name"</span>, <span class="string">"小鹏"</span>, <span class="number">0</span>); <span class="comment">// 3对，最后一个必须为0表示可变</span></span><br><span class="line"><span class="keyword">char</span> *age = <span class="string">"38"</span>;</span><br><span class="line">varlist1 = TMPL_add_var(varlist1, <span class="string">"age"</span>, age, <span class="number">0</span>);<span class="comment">//执行完了varlist1四对参数</span></span><br><span class="line">TMPL_write(<span class="string">"P1.htm"</span>, <span class="number">0</span>, <span class="number">0</span>, varlist1, cgiOut, cgiOut);</span><br></pre></td></tr></tbody></table></figure><p>变量使用：<code>&lt;TMPL_VAR name="test1" /&gt;&lt;br /&gt;</code></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">TMPL_varlist * varlist1 = <span class="number">0</span>;</span><br><span class="line">TMPL_loop * loopUsers = <span class="number">0</span>;</span><br><span class="line">varlist1 = TMPL_add_var(varlist1, <span class="string">"Title"</span>, <span class="string">"测试Loop"</span>, <span class="number">0</span>);</span><br><span class="line">loopUsers = TMPL_add_varlist(loopUsers, TMPL_add_var(<span class="number">0</span>, <span class="string">"Name"</span>, <span class="string">"如鹏网"</span>, <span class="string">"Age"</span>, <span class="string">"8"</span>, <span class="string">"Title"</span>, <span class="string">"t1"</span>, <span class="number">0</span>));<span class="comment">//t1，同一行有的用同一行</span></span><br><span class="line">loopUsers = TMPL_add_varlist(loopUsers, TMPL_add_var(<span class="number">0</span>, <span class="string">"Name"</span>, <span class="string">"淘宝"</span>, <span class="string">"Age"</span>, <span class="string">"15"</span>, <span class="string">"Title"</span>, <span class="string">"t2"</span>, <span class="number">0</span>));<span class="comment">//t2</span></span><br><span class="line">loopUsers = TMPL_add_varlist(loopUsers, TMPL_add_var(<span class="number">0</span>, <span class="string">"Name"</span>, <span class="string">"京东"</span>, <span class="string">"Age"</span>, <span class="string">"10"</span>, <span class="number">0</span>));<span class="comment">//测试Loop，同一行没有的到上层去找</span></span><br><span class="line">varlist1 = TMPL_add_loop(varlist1, <span class="string">"users"</span>, loopUsers);<span class="comment">//大List里面的小List（name=“users”的Loop）</span></span><br><span class="line">cgiHeaderContentType(<span class="string">"text/html;charset=gbk"</span>);</span><br><span class="line">TMPL_write(<span class="string">"Users.htm"</span>, <span class="number">0</span>, <span class="number">0</span>, varlist1, cgiOut, cgiOut);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">tbody</span>&gt;</span><span class="tag">&lt;<span class="name">TMPL_LOOP</span> <span class="attr">name</span>=<span class="string">"users"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">TMPL_VAR</span> <span class="attr">name</span>=<span class="string">"Name"</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">TMPL_VAR</span> <span class="attr">name</span>=<span class="string">"Age"</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">TMPL_VAR</span> <span class="attr">name</span>=<span class="string">"Title"</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;/<span class="name">TMPL_LOOP</span>&gt;</span><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span> <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h1 id="MySQL-数据库"><a href="#MySQL-数据库" class="headerlink" title="MySQL 数据库"></a>MySQL 数据库</h1><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from Students // 表里面的数据</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into Students(ID, Name, Gender) value(3, 'asd', 1) // 插入数据，属性值对应（允许为空或者自动递增可不用写）</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">update Persons set Name='hehehe',Age=Age+1 // 全部更新表中某几列的数据</span><br><span class="line">update Persons set Age=Age+1 where Name='Tom' // 名字为 Tom 的人年龄+1</span><br><span class="line">条件用法：where (Age&gt;20 and Age&lt;30) or(Age=80)   // or、and、not、&lt;、&gt;、&gt;=、&lt;=、!=（或&lt;&gt;）</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">delete from Person where ... // 删除表中的数据，没有where为删除所有</span><br><span class="line">drop table Persons // 删除表</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select Age+1, Name from Persons where...// 显示表中的某几列（Age的列结果为Age+1）</span><br><span class="line">select Name 姓名, Age as 年龄 from Persons; // 为列取别名，可以不写as</span><br><span class="line">select 1+1 // 检索不与表关联的数据，结果为2</span><br><span class="line">select now() // 返回时间</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SQL聚合函数：MAX（最大值）、MIN（最小值）、AVG （平均值）、SUM （和）、COUNT（数量）</span><br><span class="line">select min(Age), max(Age) from Persons // 最低、最高年龄</span><br><span class="line">select count(*) from Persons where Age&gt;25 // 年龄大于25的人数</span><br><span class="line">select sum(Age), avg(Age) from Persons // 总年龄和平均年龄</span><br><span class="line">select count(Hobbies) from Persons // Hobbies 不为空的数量</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from Persons (where……) order by Age ASC, Salary DESC // 按照年龄升序(ASC,不写时默认)、薪水降序(DESC) 排列</span><br><span class="line">order 必须放在 where 后面</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">单字符通配符：_</span><br><span class="line">多字符通配符：% （可以为0个）</span><br><span class="line">select * from Persons where Name like 'T%' // 名字为 T 开头的所有</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nul 代表“不知道”，而不是“没有”。null+1 结果是 null</span><br><span class="line">select ...... name=null 或者 name != null 或者 nul=null 都没有任何返回结果</span><br><span class="line">select name+"a" from Persons</span><br><span class="line">select * from Persons where name is (not) null // 判断是不是null</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">limit 首行行号（行号从 0 开始）, 最大数目 // limit 必须放在所有语句的最后</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">group by Age   // 按照年龄分组，相同的为一组（重复的堆到一起）</span><br><span class="line">select age, count(*) from Persons group by age  // 显示所有年龄段，并且显示数量</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">查询每张订单的订单号、价格、对应的客户姓名以及客户年龄</span><br><span class="line">SELECT o.Number 订单编号,o.Price 价格,c.Name 客户姓名,c.Age FROM T_Orders o // 表别名为 o</span><br><span class="line">LEFT JOIN T_Customers c  ON o.CustomerId=c.Id // 别名为 c，当两个相等的时候，进行连接</span><br><span class="line">LEFT JOIN T_OrderTypes t ON o.TypeId=t.Id // 可以 join 多张表</span><br><span class="line">WHERE o.Price&gt;=150 // 可添加 where 条件</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">设计表——外键——添加，然后删除时会提示无法删除（可设置）</span><br><span class="line">删除时、更新时：一般默认RESTRICT（一起删除）；SET NULL（删除后连接的项目设置为NULL）；NO ACTION/RESTRICT（拒绝删除）</span><br></pre></td></tr></tbody></table></figure><h1 id="C-MySQL"><a href="#C-MySQL" class="headerlink" title="C + MySQL"></a>C + MySQL</h1><h2 id="使用方法：需要修改三个目录，以及复制dll"><a href="#使用方法：需要修改三个目录，以及复制dll" class="headerlink" title="使用方法：需要修改三个目录，以及复制dll"></a><strong>使用方法</strong>：需要修改三个目录，以及复制dll</h2><blockquote><p>1、在项目属性中【VC++目录】→“包含目录”，选择mysql的include文件夹；“库目录”选择mysql的lib文件夹；【链接器】→【输入】的“附加依赖项”增加“libmysql.lib”。</p><p>2、C代码里<code>include</code>头文件<code>mysql.h</code>，并且在之前要<code>include</code>头文件<code>winsock.h</code>。</p><p>3、<code>MYSQL *pConn = mysql_init(0);</code></p><p>4、编译运行，会报错找不到“libmysql.dll”，把mysql的<code>libmysql.dll</code>复制到exe的目录下。</p></blockquote><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;winsock.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mysql.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">MYSQL *mysql = mysql_init(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(!mysql_real_connect(mysql,<span class="string">"localhost"</span>,<span class="string">"root"</span>,<span class="string">"root"</span>,<span class="string">"study3"</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)){</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"连接数据库出错：%s"</span>,mysql_error(mysql));<span class="comment">// mysql的上一次错误信息</span></span><br><span class="line"><span class="keyword">goto</span> <span class="built_in">exit</span>;<span class="comment">//goto一般不推荐使用，但是在错误处理的时候，很好用</span></span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"连接数据库成功！\n"</span>);</span><br><span class="line"><span class="keyword">if</span>(mysql_query(mysql,<span class="string">"set names gbk"</span>)){ <span class="comment">// 这样才能用中文。失败时 为 真</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"设定连接编码失败%s"</span>,mysql_error(mysql));</span><br><span class="line"><span class="keyword">goto</span> <span class="built_in">exit</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span>:</span><br><span class="line">mysql_close(mysql);<span class="comment">//程序最后必须关闭连接，否则会有mysql服务器连接过多卡死的可能性</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"exit"</span>);</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="execute封装"><a href="#execute封装" class="headerlink" title="execute封装"></a>execute封装</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;winsock.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mysql.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">executeNonQuery</span><span class="params">(<span class="keyword">char</span> * sql)</span></span>; <span class="comment">// 没有返回值的</span></span><br><span class="line"><span class="function">MYSQL_RES * <span class="title">executeQuery</span><span class="params">(<span class="keyword">char</span> * sql)</span></span>; <span class="comment">// 有返回值的</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">executeNonQuery(<span class="string">"insert into Persons(name, gender) value('aaa', 1)"</span>);</span><br><span class="line"></span><br><span class="line">MYSQL_RES * res = executeQuery(<span class="string">"select * from Persons"</span>);</span><br><span class="line">MYSQL_ROW row;</span><br><span class="line"><span class="keyword">while</span> (row = mysql_fetch_row(res))</span><br><span class="line">{</span><br><span class="line"><span class="keyword">char</span> * un = row[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">char</span> * pwd = row[<span class="number">1</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"username = %s, password = %s\n"</span>, un, pwd);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">executeNonQuery</span><span class="params">(<span class="keyword">char</span> * sql)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">MYSQL * pConn = mysql_init(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (!mysql_real_connect(pConn, <span class="string">"localhost"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>, <span class="string">"test"</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)) {</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"连接失败：%s\n"</span>, mysql_error(pConn));</span><br><span class="line"><span class="keyword">goto</span> endd;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (mysql_query(pConn, <span class="string">"set names gbk"</span>)) {</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"设置gbk失败：%s\n"</span>, mysql_error(pConn));</span><br><span class="line"><span class="keyword">goto</span> endd;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (mysql_query(pConn, sql)) {</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"查询失败：%s\n"</span>, mysql_error(pConn));</span><br><span class="line"><span class="keyword">goto</span> endd;</span><br><span class="line">}</span><br><span class="line">endd:</span><br><span class="line">mysql_close(pConn);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function">MYSQL_RES * <span class="title">executeQuery</span><span class="params">(<span class="keyword">char</span> * sql)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">MYSQL * pConn = mysql_init(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (!mysql_real_connect(pConn, <span class="string">"localhost"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>, <span class="string">"test"</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)) {</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"连接失败：%s\n"</span>, mysql_error(pConn));</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (mysql_query(pConn, <span class="string">"set names gbk"</span>)) {</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"设置gbk失败：%s\n"</span>, mysql_error(pConn));</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (mysql_query(pConn, sql)) {</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"查询失败：%s\n"</span>, mysql_error(pConn));</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">MYSQL_RES * result = mysql_store_result(pConn);</span><br><span class="line">mysql_close(pConn);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="表单数据"><a href="#表单数据" class="headerlink" title="表单数据"></a>表单数据</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> sql[<span class="number">1024</span>]={<span class="number">0</span>}; <span class="comment">// 把用户输入的字符串动态拼接生成sql语句</span></span><br><span class="line"><span class="keyword">char</span> userName, hexUserName[<span class="number">1024</span>]={<span class="number">0</span>}; <span class="comment">// 把可能含有特殊符号的字符串进行16进制转换</span></span><br><span class="line">mysql_hex_string(hexUserName, userName, <span class="built_in">strlen</span>(userName)); <span class="comment">// 转换成安全的16进制</span></span><br><span class="line"><span class="built_in">sprintf</span>(sql, <span class="string">"Insert into T_Users(UserName,Password) values(0x%s,'%s')"</span>, hexUserName,password);</span><br><span class="line"><span class="comment">// 可以直接识别命令里面0x开头的16进制数据，并自动转换成原来的字符串(数字 0，不是 英文o)</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">cgiFormInteger(<span class="string">"age"</span>, &amp;age, <span class="number">100</span>); <span class="comment">// 获取整型表单。注意，是地址！最后一个是失败后的age默认值</span></span><br><span class="line"><span class="comment">// 例如，当 "age=aaa" 时，取不到整型的值，所以 age = 100</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> len; <span class="comment">// 用来决定需要申请的长度</span></span><br><span class="line"><span class="keyword">char</span> *txt;</span><br><span class="line">TMPL_varlist *varlist = <span class="number">0</span>;</span><br><span class="line">cgiFormStringSpaceNeeded(<span class="string">"txt1"</span>,&amp;len); <span class="comment">// 用于获取可能会非常长的值的长度</span></span><br><span class="line">txt = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(len+<span class="number">1</span>); <span class="comment">// 动态申请内存</span></span><br><span class="line">cgiFormString(<span class="string">"txt1"</span>,txt,len);</span><br><span class="line"><span class="built_in">free</span>(txt); <span class="comment">// 最后别忘了 free</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(cgiFormCheckboxSingle(<span class="string">"agree"</span>)!=cgiFormSuccess) <span class="comment">// 多选框是否选中</span></span><br><span class="line">&lt;select&gt;&lt;option&gt;xxx&lt;/option&gt;&lt;/select&gt; 和 "radio" 都用 cgiFormString 来获取是否输入</span><br></pre></td></tr></tbody></table></figure><h1 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h1><h2 id="HTML文件"><a href="#HTML文件" class="headerlink" title="HTML文件"></a>HTML文件</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span> // 必须这样写</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"f1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="文件参数"><a href="#文件参数" class="headerlink" title="文件参数"></a>文件参数</h3><ul><li><code>cgiFormFileName</code>：上传的文件名</li><li><code>cgiFormFileSize</code>：文件大小（单位为B）</li><li><code>cgiFormFileRead</code>：读取上传文件</li><li><code>cgiFormFileClose</code>：关闭上传的文件</li></ul><h3 id="判断有没有上传文件"><a href="#判断有没有上传文件" class="headerlink" title="判断有没有上传文件"></a>判断有没有上传文件</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(cgiFormFileName(<span class="string">"file1"</span>,uploadfilename,<span class="keyword">sizeof</span>(uploadfilename))!=cgiFormSuccess)</span><br></pre></td></tr></tbody></table></figure><h3 id="获取扩展名"><a href="#获取扩展名" class="headerlink" title="获取扩展名"></a>获取扩展名</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">_splitpath(uploadfilename,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,fileExt); <span class="comment">// &lt;stdlib.h&gt;中</span></span><br><span class="line">参数：全路径指针，盘符（带冒号），路径（纯目录无盘符，如 /aaa/），文件名（不包含后缀名），后缀名（带点）</span><br><span class="line">文件格式：d:/aaa/bbb.jpg</span><br><span class="line"><span class="keyword">if</span>(stricmp(fileExt,<span class="string">".jpg"</span>)!=<span class="number">0</span>&amp;&amp;stricmp(fileExt,<span class="string">".png"</span>))…… <span class="comment">// stricmp 为不区分大小写的比较</span></span><br></pre></td></tr></tbody></table></figure><h3 id="获取文件大小"><a href="#获取文件大小" class="headerlink" title="获取文件大小"></a>获取文件大小</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cgiFormFileSize(<span class="string">"file1"</span>,&amp;filesize);</span><br><span class="line"><span class="keyword">if</span>(filesize&gt;<span class="number">1024</span>*<span class="number">1024</span>)…… <span class="comment">// 1024 * 1024 = 1 M</span></span><br></pre></td></tr></tbody></table></figure><h2 id="总的操作"><a href="#总的操作" class="headerlink" title="总的操作"></a>总的操作</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cgiFilePtr file1; <span class="comment">// 声明类似文件指针的变量，网络文件指针</span></span><br><span class="line"><span class="comment">//读取本地文件，用于写入，本地文件指针</span></span><br><span class="line">FILE *fileLocal = fopen(uploadfilename,<span class="string">"wb"</span>); <span class="comment">// C语言读取文件，wb是二进制模式，默认是用文本</span></span><br><span class="line"><span class="keyword">char</span> buffer[<span class="number">1024</span>]; <span class="comment">// 每次最多1024kb</span></span><br><span class="line"><span class="keyword">int</span> lenRead; <span class="comment">// 实际读的字节数</span></span><br><span class="line">cgiFormFileOpen(<span class="string">"file1"</span>,&amp;file1);</span><br><span class="line"><span class="keyword">while</span>(cgiFormFileRead(file1,buffer,<span class="keyword">sizeof</span>(buffer),&amp;lenRead)==cgiFormSuccess)</span><br><span class="line">{</span><br><span class="line">fwrite(buffer,lenRead,<span class="number">1</span>,fileLocal); <span class="comment">// buffer[] 的前 lenRead 字节写入到 fileLocal 中</span></span><br><span class="line">}</span><br><span class="line">fclose(fileLocal);</span><br><span class="line">cgiFormFileClose(file1);</span><br><span class="line">printFileUploadMsg(<span class="string">"上传成功"</span>);</span><br></pre></td></tr></tbody></table></figure><hr><blockquote><p>如鹏网《C语言也能干大事》学习笔记</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CGI-amp-DGI&quot;&gt;&lt;a href=&quot;#CGI-amp-DGI&quot; class=&quot;headerlink&quot; title=&quot;CGI &amp;amp; DGI&quot;&gt;&lt;/a&gt;CGI &amp;amp; DGI&lt;/h1&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; * qs = getenv(&lt;span class=&quot;string&quot;&gt;&quot;QUERY_STRING&quot;&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//获取环境变量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; username[&lt;span class=&quot;number&quot;&gt;256&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;sscanf&lt;/span&gt;(qs, &lt;span class=&quot;string&quot;&gt;&quot;username=%s&quot;&lt;/span&gt;, username);&lt;span class=&quot;comment&quot;&gt;//获取地址栏后面的东西&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;断点调试：&lt;code&gt;include \&amp;lt;windows.h&amp;gt;&lt;/code&gt;，然后 &lt;code&gt;MessageBoxA(0,&quot;ok&quot;,&quot;ok&quot;,0);&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C" scheme="http://blog.iwxyi.com/tags/C/"/>
    
      <category term="学习笔记" scheme="http://blog.iwxyi.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="CGI" scheme="http://blog.iwxyi.com/tags/CGI/"/>
    
  </entry>
  
</feed>
