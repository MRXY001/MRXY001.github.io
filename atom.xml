<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>云笺</title>
  
  <subtitle>一些技术摘要和写作技巧</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.iwxyi.com/"/>
  <updated>2019-10-12T12:32:42.797Z</updated>
  <id>http://blog.iwxyi.com/</id>
  
  <author>
    <name>命燃芯乂</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>工厂模式</title>
    <link href="http://blog.iwxyi.com/2019/10/12/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://blog.iwxyi.com/2019/10/12/工厂模式/</id>
    <published>2019-10-12T12:18:00.000Z</published>
    <updated>2019-10-12T12:32:42.797Z</updated>
    
    <content type="html"><![CDATA[<h1 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h1><p>在平时编程中，构建对象最常用的方式是 new 一个对象。乍一看这种做法没什么不好，而实际上这也属于一种硬编码。每 new 一个对象，相当于<strong>调用者多知道了一个类</strong>，增加了类与类之间的联系，不利于程序的松耦合。其实构建过程可以被封装起来，工厂模式便是用于封装对象的设计模式。</p><a id="more"></a><h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2><p>举个例子，直接 new 对象的方式相当于当我们需要一个苹果时，我们需要知道苹果的构造方法，需要一个梨子时，需要知道梨子的构造方法。更好的实现方式是有一个水果工厂，我们告诉工厂需要什么种类的水果，水果工厂将我们需要的水果制造出来给我们就可以了。这样我们就无需知道苹果、梨子是怎么种出来的，<strong>只用和水果工厂打交道</strong>即可。</p><p>水果工厂：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FruitFactory</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Fruit <span class="title">create</span><span class="params">(String type)</span></span>{</span><br><span class="line">        <span class="keyword">switch</span> (type){</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"苹果"</span>: <span class="keyword">return</span> <span class="keyword">new</span> Apple();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"梨子"</span>: <span class="keyword">return</span> <span class="keyword">new</span> Pear();</span><br><span class="line">            <span class="keyword">default</span>: <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"暂时没有这种水果"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>调用：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>{</span><br><span class="line">        FruitFactory fruitFactory = <span class="keyword">new</span> FruitFactory();</span><br><span class="line">        Fruit apple = fruitFactory.create(<span class="string">"苹果"</span>);</span><br><span class="line">        Fruit pear = fruitFactory.create(<span class="string">"梨子"</span>);</span><br><span class="line">        apple.eat();</span><br><span class="line">        pear.eat();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>事实上，将构建过程封装的好处不仅可以<strong>降低耦合</strong>，如果某个产品构造方法相当复杂，使用工厂模式可以大大<strong>减少代码重复</strong>。</p><p>简单工厂模式就是让一个工厂类承担构建所有对象的职责。调用者需要什么产品，让工厂生产出来即可。它的弊端也显而易见：</p><ul><li>一是如果需要生产的产品过多，此模式会导致<strong>工厂类过于庞大</strong>，承担过多的职责，变成超级类。当苹果生产过程需要修改时，要来修改此工厂。梨子生产过程需要修改时，也要来修改此工厂。也就是说这个类不止一个引起修改的原因。违背了单一职责原则。</li><li>二是当要生产新的产品时，必须在工厂类中<strong>添加新的分支</strong>。而开闭原则告诉我们：类应该对修改封闭。我们希望在添加新功能时，只需增加新的类，而不是修改既有的类，所以这就违背了开闭原则。</li></ul><h2 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h2><p>为了解决简单工厂模式的这两个弊端，工厂方法模式应运而生，它规定每个产品都有一个专属工厂。比如苹果有专属的苹果工厂，梨子有专属的梨子工厂，Java 代码如下：</p><p>苹果工厂：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppleFactory</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Fruit <span class="title">create</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Apple();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>梨子工厂：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PearFactory</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Fruit <span class="title">create</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Pear();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>调用者：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>{</span><br><span class="line">        AppleFactory appleFactory = <span class="keyword">new</span> AppleFactory();</span><br><span class="line">        Fruit apple = appleFactory.create();</span><br><span class="line">        PearFactory pearFactory = <span class="keyword">new</span> PearFactory();</span><br><span class="line">        Fruit pear = pearFactory.create();</span><br><span class="line">        apple.eat();</span><br><span class="line">        pear.eat();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>调用者虽然不需要和 Apple 、Pear 类打交道了，但却需要和 <code>AppleFactory</code>、<code>PearFactory</code> 类打交道。有几种水果就需要知道几个工厂类，耦合度完全没有下降啊，甚至还增加了代码量！</p><p>仔细想一想，工厂模式的第二个优点在工厂方法模式中还是存在的。当构建过程相当复杂时，工厂将构建过程封装起来，调用者可以很方便的直接使用，同样以苹果生产为例：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppleFactory</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Fruit <span class="title">create</span><span class="params">()</span></span>{</span><br><span class="line">        AppleSeed appleSeed = <span class="keyword">new</span> AppleSeed();</span><br><span class="line">        Sunlight sunlight = <span class="keyword">new</span> Sunlight();</span><br><span class="line">        Water water = <span class="keyword">new</span> Water();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Apple(appleSeed, sunlight, water);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>调用者无需知道苹果的生产细节，当生产过程需要修改时也无需更改调用端。同时，工厂方法模式解决了简单工厂模式的两个弊端。</p><ul><li>当生产的产品种类越来越多时，工厂类不会变成超级类。<strong>工厂类会越来越多</strong>，保持灵活。<strong>不会越来越大</strong>、变得臃肿。如果苹果的生产过程需要修改时，只需修改苹果工厂。梨子的生产过程需要修改时，只需修改梨子工厂。符合单一职责原则。</li><li>当需要生产新的产品时，无需更改既有的工厂，只需要<strong>添加新的工厂</strong>即可。保持了面向对象的可扩展性，符合开闭原则。</li></ul><h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><p>工厂方法模式可以进一步优化，提取出工厂接口：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IFactory</span> </span>{</span><br><span class="line">    <span class="function">Fruit <span class="title">create</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>然后苹果工厂和梨子工厂都实现此接口：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppleFactory</span> <span class="keyword">implements</span> <span class="title">IFactory</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Fruit <span class="title">create</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Apple();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PearFactory</span> <span class="keyword">implements</span> <span class="title">IFactory</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Fruit <span class="title">create</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Pear();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>此时，调用者可以将 <code>AppleFactory</code> 和 <code>PearFactory</code> 统一作为 <code>IFactory</code> 对象使用：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>{</span><br><span class="line">        IFactory appleFactory = <span class="keyword">new</span> AppleFactory();</span><br><span class="line">        Fruit apple = appleFactory.create();</span><br><span class="line">        IFactory pearFactory = <span class="keyword">new</span> PearFactory();</span><br><span class="line">        Fruit pear = pearFactory.create();</span><br><span class="line">        apple.eat();</span><br><span class="line">        pear.eat();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>可以看到，我们在创建时指定了具体的工厂类后，在使用时就无需再关心是哪个工厂类，只需要将此工厂当作抽象的 <code>IFactory</code> 接口使用即可。这种经过抽象的工厂方法模式被称作<strong>抽象工厂模式</strong>。</p><p>由于客户端只和 <code>IFactory</code> 打交道了，调用的是接口中的方法，使用时根本<strong>不需要知道是在哪个具体工厂</strong>中实现的这些方法，这就使得<strong>替换工厂</strong>变得非常容易。</p><p>例如：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>{</span><br><span class="line">        IFactory factory = <span class="keyword">new</span> AppleFactory();</span><br><span class="line">        Fruit fruit = factory.create();</span><br><span class="line">        fruit.eat();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>如果需要替换为吃梨子，只需要更改一行代码即可：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>{</span><br><span class="line">        IFactory factory = <span class="keyword">new</span> PearFactory();</span><br><span class="line">        Fruit fruit = factory.create();</span><br><span class="line">        fruit.eat();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>IFactory 中只有一个抽象方法时，或许还看不出抽象工厂模式的威力。实际上抽象工厂模式主要用于替换一系列方法。例如将程序中的 SQL Server 数据库整个替换为 Access 数据库，使用抽象方法模式的话，只需在 IFactory 接口中定义好增删改查四个方法，让 SQLFactory 和 AccessFactory 实现此接口，调用时直接使用 IFactory 中的抽象方法即可，调用者无需知道使用的什么数据库，我们就可以非常方便的整个替换程序的数据库，并且让客户端毫不知情。</p><p>抽象工厂模式很好的发挥了开闭原则、依赖倒置原则，但缺点是抽象工厂模式<strong>太重了</strong>，如果 IFactory 接口需要新增功能，则会影响到所有的具体工厂类。使用抽象工厂模式，替换具体工厂时只需更改一行代码，但要新增抽象方法则需要修改所有的具体工厂类。所以抽象工厂模式适用于增加同类工厂这样的横向扩展需求，不适合新增功能这样的纵向扩展。</p><blockquote><p>参考：<a href="https://zhuanlan.zhihu.com/p/85624457" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/85624457</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;工厂模式&quot;&gt;&lt;a href=&quot;#工厂模式&quot; class=&quot;headerlink&quot; title=&quot;工厂模式&quot;&gt;&lt;/a&gt;工厂模式&lt;/h1&gt;&lt;p&gt;在平时编程中，构建对象最常用的方式是 new 一个对象。乍一看这种做法没什么不好，而实际上这也属于一种硬编码。每 new 一个对象，相当于&lt;strong&gt;调用者多知道了一个类&lt;/strong&gt;，增加了类与类之间的联系，不利于程序的松耦合。其实构建过程可以被封装起来，工厂模式便是用于封装对象的设计模式。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="设计模式" scheme="http://blog.iwxyi.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>单例模式</title>
    <link href="http://blog.iwxyi.com/2019/10/12/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://blog.iwxyi.com/2019/10/12/单例模式/</id>
    <published>2019-10-12T12:17:00.000Z</published>
    <updated>2019-10-12T12:32:49.237Z</updated>
    
    <content type="html"><![CDATA[<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><p>单例模式非常常见，某个对象全局只需要一个实例时，就可以使用单例模式。它的优点也显而易见：</p><ul><li>它能够避免对象重复创建，节约空间并提升效率</li><li>避免由于操作不同实例导致的逻辑错误</li></ul><p>单例模式有两种实现方式：<strong>饿汉式</strong>和<strong>懒汉式</strong>。</p><a id="more"></a><h2 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h2><p>饿汉式：变量在声明时便初始化。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>{</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>{</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>可以看到，我们将构造方法定义为 <code>private</code>，这就保证了其他类无法实例化此类，必须通过 <code>getInstance</code> 方法才能获取到唯一的 instance 实例，非常直观。但饿汉式有一个弊端，那就是即使这个单例不需要使用，它也会<strong>在类加载之后立即创建出来，占用一块内存，并增加类初始化时间</strong>。就好比一个电工在修理灯泡时，先把所有工具拿出来，不管是不是所有的工具都用得上。就像一个饥不择食的饿汉，所以称之为饿汉式。</p><h2 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h2><p>懒汉式：先声明一个空变量，需要用时才初始化。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>{</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">null</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>{</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) {</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>我们先声明了一个初始值为 null 的 instance 变量，当需要使用时判断此变量是否已被初始化，没有初始化的话才 new 一个实例出来。就好比电工在修理灯泡时，开始比较偷懒，什么工具都不拿，当发现需要使用螺丝刀时，才把螺丝刀拿出来。当需要用钳子时，再把钳子拿出来。就像一个不到万不得已不会行动的懒汉，所以称之为懒汉式。</p><p>懒汉式解决了饿汉式的弊端，好处是<strong>按需加载，避免了内存浪费，减少了类初始化时间</strong>。</p><h3 id="双检锁方式：线程安全"><a href="#双检锁方式：线程安全" class="headerlink" title="双检锁方式：线程安全"></a>双检锁方式：线程安全</h3><p>上述代码的懒汉式单例乍一看没什么问题，但其实它不是线程安全的。如果有多个线程同一时间调用 getInstance 方法，instance 变量<strong>可能会被实例化多次</strong>。为了保证线程安全，我们需要给判空过程加上锁：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>{</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">synchronized</span> (Singleton.class) {</span><br><span class="line">            <span class="keyword">if</span> (instance == <span class="keyword">null</span>) {</span><br><span class="line">                instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这样就能保证多个线程调用 getInstance 时，一次最多只有一个线程能够执行判空并 new 出实例的操作，所以 instance 只会实例化一次。</p><h4 id="双检锁提高性能"><a href="#双检锁提高性能" class="headerlink" title="双检锁提高性能"></a>双检锁提高性能</h4><p>但这样的写法仍然有问题，当多个线程调用 getInstance 时，每次都需要执行 synchronized 同步化方法，这样会严重影响程序的执行效率。所以更好的做法是在同步化之前，<strong>再加上一层检查</strong>：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>{</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) {</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) {</span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这样增加一种检查方式后，如果 instance 已经被实例化，则不会执行同步化操作，大大提升了程序效率。上面这种写法也就是我们平时较常用的双检锁方式实现的线程安全的单例模式。</p><h3 id="静态内部类方式"><a href="#静态内部类方式" class="headerlink" title="静态内部类方式"></a>静态内部类方式</h3><p>除了双检锁方式外，还有一种比较常见的静态内部类方式保证懒汉式单例的线程安全：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>{</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>{</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.instance;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>虽然我们经常使用这种静态内部类的懒加载方式，但其中的原理不一定每个人都清楚。接下来我们便来分析其原理，搞清楚两个问题：</p><ul><li>静态内部类方式是怎么实现懒加载的</li><li>静态内部类方式是怎么保证线程安全的</li></ul><blockquote><p>Java 类的加载过程包括：加载、验证、准备、解析、初始化。初始化阶段即执行类的 clinit 方法（clinit = class + initialize），包括为类的静态变量赋初始值和执行静态代码块中的内容。但<strong>不会立即加载内部类，内部类会在使用时才加载</strong>。所以当此 Singleton 类加载时，SingletonHolder 并不会被立即加载，所以不会像饿汉式那样占用内存。</p><p>另外，Java 虚拟机规定，<strong>当访问一个类的静态字段时，如果该类尚未初始化，则立即初始化此类</strong>。当调用Singleton 的 getInstance 方法时，由于其使用了 SingletonHolder 的静态变量 instance，所以这时才会去初始化 SingletonHolder，在 SingletonHolder 中 new 出 Singleton 对象。这就实现了懒加载。</p><p>第二个问题的答案是 Java 虚拟机的设计是非常稳定的，早已经考虑到了多线程并发执行的情况。虚拟机在加载类的 clinit 方法时，会保证 clinit 在多线程中被正确的加锁、同步。<strong>即使有多个线程同时去初始化一个类，一次也只有一个线程可以执行 clinit 方法</strong>，其他线程都需要阻塞等待，从而保证了线程安全。</p></blockquote><p>懒汉式的缺点就是<strong>将程序加载时间从启动时延后到了运行时</strong>，虽然启动时间缩短了，但我们浏览页面时就会看到数据的 loading 过程。</p><p>一般的建议是：对于构建不复杂，加载完成后会立即使用的单例对象，推荐使用饿汉式。对于构建过程耗时较长，并不是所有使用此类都会用到的单例对象，推荐使用懒汉式。</p><blockquote><p>参考：<a href="https://zhuanlan.zhihu.com/p/85624457" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/85624457</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;单例模式&quot;&gt;&lt;a href=&quot;#单例模式&quot; class=&quot;headerlink&quot; title=&quot;单例模式&quot;&gt;&lt;/a&gt;单例模式&lt;/h1&gt;&lt;p&gt;单例模式非常常见，某个对象全局只需要一个实例时，就可以使用单例模式。它的优点也显而易见：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;它能够避免对象重复创建，节约空间并提升效率&lt;/li&gt;
&lt;li&gt;避免由于操作不同实例导致的逻辑错误&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;单例模式有两种实现方式：&lt;strong&gt;饿汉式&lt;/strong&gt;和&lt;strong&gt;懒汉式&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="设计模式" scheme="http://blog.iwxyi.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>修电脑</title>
    <link href="http://blog.iwxyi.com/2019/09/24/%E4%BF%AE%E7%94%B5%E8%84%91/"/>
    <id>http://blog.iwxyi.com/2019/09/24/修电脑/</id>
    <published>2019-09-24T12:39:00.000Z</published>
    <updated>2019-10-12T12:39:50.665Z</updated>
    
    <content type="html"><![CDATA[<h2 id="WIN无操作自动休眠"><a href="#WIN无操作自动休眠" class="headerlink" title="WIN无操作自动休眠"></a>WIN无操作自动休眠</h2><p>这是系统<strong>无人值守时睡眠时间</strong>的设定，默认是两分钟。</p><a id="more"></a><p>解决方法：</p><p><code>regedit</code>进入注册表管理器，定位到<code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Power\PowerSettings\238C9FA8-0AAD-41ED-83F4-97BE242C8F20\7bc4a2f9-d8fc-4469-b07b-33eb785aaca0</code>，修改<code>attributes</code>的值为2。</p><p>进入高级电源设置，在睡眠选项中会出现“无人参与系统睡眠超时”，将默认的2分钟修改成你想要的时间。</p><h2 id="开关注册中心"><a href="#开关注册中心" class="headerlink" title="开关注册中心"></a>开关注册中心</h2><p><code>regedit</code>进入注册表编辑器，<code>计算机\HKEY_CURRENT_USER\Software\Policies\Microsoft\Windows\Explorer</code>新建项<code>DisableNotificationCenter</code>，值为1时关闭操作中心。重启电脑生效。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;WIN无操作自动休眠&quot;&gt;&lt;a href=&quot;#WIN无操作自动休眠&quot; class=&quot;headerlink&quot; title=&quot;WIN无操作自动休眠&quot;&gt;&lt;/a&gt;WIN无操作自动休眠&lt;/h2&gt;&lt;p&gt;这是系统&lt;strong&gt;无人值守时睡眠时间&lt;/strong&gt;的设定，默认是两分钟。&lt;/p&gt;
    
    </summary>
    
    
      <category term="修电脑" scheme="http://blog.iwxyi.com/categories/%E4%BF%AE%E7%94%B5%E8%84%91/"/>
    
    
      <category term="Windows" scheme="http://blog.iwxyi.com/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>小顶堆TopN</title>
    <link href="http://blog.iwxyi.com/2019/07/07/%E5%B0%8F%E9%A1%B6%E5%A0%86TopN/"/>
    <id>http://blog.iwxyi.com/2019/07/07/小顶堆TopN/</id>
    <published>2019-07-07T12:48:00.000Z</published>
    <updated>2019-10-12T12:49:29.508Z</updated>
    
    <content type="html"><![CDATA[<p>应用场景：10亿个数中取前1000大的数</p><a id="more"></a><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmallHeap</span> </span>{</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;description&gt;获取前N数据&lt;/description&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> n</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: ouyp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span>: Seeyon V7.0 SP2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018年10月16日 下午4:52:27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] topN(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> n) {</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 构建堆积</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">int</span>[] list = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">System.arraycopy(arr, <span class="number">0</span>, list, <span class="number">0</span>, n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line"><span class="keyword">int</span> t = i;</span><br><span class="line"><span class="keyword">while</span> (t != <span class="number">0</span> &amp;&amp; list[parent(t)] &gt; list[t]) {</span><br><span class="line">swap(list, t, t = parent(t));</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 小顶堆</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n, len = arr.length; i &lt; len; i++) {</span><br><span class="line"><span class="keyword">if</span> (arr[i] &gt;= list[<span class="number">0</span>]) {</span><br><span class="line"><span class="comment">// 置换栈顶</span></span><br><span class="line">list[<span class="number">0</span>] = arr[i];</span><br><span class="line"><span class="comment">// 调整栈顶</span></span><br><span class="line"><span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ((left(t) &lt; n &amp;&amp; list[t] &gt; list[left(t)]) || (right(t) &lt; n &amp;&amp; list[t] &gt; list[right(t)])) {</span><br><span class="line"><span class="keyword">if</span> (right(t) &lt; n &amp;&amp; list[right(t)] &lt; list[left(t)]) {</span><br><span class="line">swap(list, t, t = right(t));</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">swap(list, t, t = left(t));</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;description&gt;对象交换&lt;/description&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> list</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> j</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: ouyp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span>: Seeyon V7.0 SP2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018年10月16日 下午4:56:33</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] list, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> tmp = list[i];</span><br><span class="line">list[i] = list[j];</span><br><span class="line">list[j] = tmp;</span><br><span class="line">}</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;description&gt;父节点索引&lt;/description&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: ouyp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018年10月16日 下午3:34:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">parent</span><span class="params">(<span class="keyword">int</span> i)</span> </span>{</span><br><span class="line"><span class="keyword">return</span> (i - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;description&gt;左孩子索引&lt;/description&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: ouyp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018年10月16日 下午4:01:30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">left</span><span class="params">(<span class="keyword">int</span> i)</span> </span>{</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span> * i + <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;description&gt;右孩子索引&lt;/description&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: ouyp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018年10月16日 下午4:02:04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">right</span><span class="params">(<span class="keyword">int</span> i)</span> </span>{</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span> * i + <span class="number">2</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]{<span class="number">56</span>, <span class="number">30</span>, <span class="number">71</span>, <span class="number">18</span>, <span class="number">29</span>, <span class="number">93</span>, <span class="number">44</span>, <span class="number">75</span>, <span class="number">20</span>, <span class="number">65</span>, <span class="number">68</span>, <span class="number">34</span>};</span><br><span class="line">System.out.println(<span class="string">"原始数组: "</span>);</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line">System.out.println(<span class="string">"调整后数组: "</span>);</span><br><span class="line">System.out.println(Arrays.toString(SmallHeap.topN(arr, <span class="number">5</span>)));</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;应用场景：10亿个数中取前1000大的数&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="算法" scheme="http://blog.iwxyi.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>公众号token服务器配置</title>
    <link href="http://blog.iwxyi.com/2019/04/14/%E5%85%AC%E4%BC%97%E5%8F%B7token%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/"/>
    <id>http://blog.iwxyi.com/2019/04/14/公众号token服务器配置/</id>
    <published>2019-04-14T12:30:00.000Z</published>
    <updated>2019-10-12T12:38:03.322Z</updated>
    
    <content type="html"><![CDATA[<h1 id="修改公众号的服务器配置"><a href="#修改公众号的服务器配置" class="headerlink" title="修改公众号的服务器配置"></a>修改公众号的服务器配置</h1><p><img src="/images/pasted-0.png" alt="配置"></p><p>Token配置代码，文件放在对应的URL路径下</p><p>微信会发送GET请求来验证</p><a id="more"></a><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">define(<span class="string">"TOKEN"</span>, <span class="string">"mrxy"</span>); <span class="comment">// 你自己的Token</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//验证消息</span></span><br><span class="line">$echoStr = $_GET[<span class="string">"echostr"</span>];</span><br><span class="line"><span class="keyword">if</span>(checkSignature()){</span><br><span class="line">    <span class="keyword">echo</span> $echoStr;</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//检查签名</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkSignature</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    $signature = $_GET[<span class="string">"signature"</span>];</span><br><span class="line">    $timestamp = $_GET[<span class="string">"timestamp"</span>];</span><br><span class="line">    $nonce = $_GET[<span class="string">"nonce"</span>];</span><br><span class="line">    $token = TOKEN;</span><br><span class="line">    $tmpArr = <span class="keyword">array</span>($token, $timestamp, $nonce);</span><br><span class="line">    sort($tmpArr, SORT_STRING);</span><br><span class="line">    $tmpStr = implode($tmpArr);</span><br><span class="line">    $tmpStr = sha1($tmpStr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>($tmpStr == $signature){</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    }<span class="keyword">else</span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>微信授权网页登录：<a href="https://www.cnblogs.com/whowhere/p/5787247.html" target="_blank" rel="noopener">https://www.cnblogs.com/whowhere/p/5787247.html</a></p></blockquote><blockquote><p>微信扫码登录：<a href="https://www.cnblogs.com/0201zcr/p/5133062.html" target="_blank" rel="noopener">https://www.cnblogs.com/0201zcr/p/5133062.html</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;修改公众号的服务器配置&quot;&gt;&lt;a href=&quot;#修改公众号的服务器配置&quot; class=&quot;headerlink&quot; title=&quot;修改公众号的服务器配置&quot;&gt;&lt;/a&gt;修改公众号的服务器配置&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/pasted-0.png&quot; alt=&quot;配置&quot;&gt;&lt;/p&gt;
&lt;p&gt;Token配置代码，文件放在对应的URL路径下&lt;/p&gt;
&lt;p&gt;微信会发送GET请求来验证&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="微信小程序" scheme="http://blog.iwxyi.com/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET文件操作</title>
    <link href="http://blog.iwxyi.com/2019/01/24/ASP-NET%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    <id>http://blog.iwxyi.com/2019/01/24/ASP-NET文件操作/</id>
    <published>2019-01-24T13:09:00.000Z</published>
    <updated>2019-10-12T13:11:05.049Z</updated>
    
    <content type="html"><![CDATA[<p>以文件为例,如果对文件夹操作,基本上将File换为Directory即可<br>(例:<code>FileInfo file = new FileInfo(Path);</code>与<code>DirectoryInfo directory = new DirectoryInfo (Path);</code>)</p><a id="more"></a><p><strong>1获取文件信息</strong></p><p>在知道文件相对路径的情形,下面代码可以获取文件的详细信息</p><figure class="highlight c#"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fileinfo</span>(<span class="params"><span class="keyword">string</span> Path</span>)</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    Path = Server.MapPath(Path);<span class="comment">//获取文件的物理路径</span></span><br><span class="line">    FileInfo file = <span class="keyword">new</span> FileInfo(Path);<span class="comment">//实例该路径文件信息</span></span><br><span class="line">    <span class="keyword">var</span> length=file.Length;<span class="comment">//文件大小,字节</span></span><br><span class="line">    <span class="keyword">var</span> name = file.Name;<span class="comment">//文件名</span></span><br><span class="line">    <span class="keyword">var</span> fullname = file.FullName;<span class="comment">//文件路径</span></span><br><span class="line">    <span class="keyword">var</span> extension = file.Extension;<span class="comment">//文件后缀名</span></span><br><span class="line">    ......</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>获取的信息还有创建时间,最后访问时间等等,可以自行研究</p><p><strong>2新建文件</strong></p><p>新建一个文件。（Create 后会一直占用，最好加上 Dispose）</p><figure class="highlight c#"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">NewFile</span>(<span class="params"><span class="keyword">string</span> filePath</span>)</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    filePath=Server.MapPath(filePath);<span class="comment">//获取想创建文件的物理路径</span></span><br><span class="line">    <span class="keyword">if</span> (System.IO.File.Exists(newfilepath))</span><br><span class="line">    {</span><br><span class="line">        <span class="comment">//判断新建的文件是否已经存在</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"文件已经存在"</span>)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    System.IO.File.Create(newfilepath);<span class="comment">//创建</span></span><br><span class="line">    ......</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>3复制文件,移动(剪切)文件,重命名文件</strong></p><p>复制文件:</p><figure class="highlight c#"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Copy</span>(<span class="params"><span class="keyword">string</span> Path,<span class="keyword">string</span> targetPath</span>)</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    Path = Server.MapPath(Path);<span class="comment">//原文件的物理路径</span></span><br><span class="line">    targetPath = Server.MapPath(targetPath);<span class="comment">//复制到的新位置物理路径</span></span><br><span class="line">    <span class="comment">//判断到的新地址是否存在重命名文件</span></span><br><span class="line">    <span class="keyword">if</span> (System.IO.File.Exists(targetPath))</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"存在同名文件"</span>);<span class="comment">//抛出异常</span></span><br><span class="line">    }        </span><br><span class="line">     System.IO.File.Copy(Path,targetPath);<span class="comment">//复制到新位置,不允许覆盖现有文件</span></span><br><span class="line">    .......</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>移动文件,重命名:</p><figure class="highlight c#"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">MoveOrRename</span>(<span class="params"><span class="keyword">string</span> Path,<span class="keyword">string</span> targetPath</span>)</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    Path = Server.MapPath(Path);<span class="comment">//原文件的物理路径</span></span><br><span class="line">    targetPath = Server.MapPath(targetPath);<span class="comment">//移动到的新位置的物理路径(如果还是当前文件夹,则会重命名文件)</span></span><br><span class="line">    <span class="comment">//判断到的新地址是否存在重命名文件</span></span><br><span class="line">    <span class="keyword">if</span> (System.IO.File.Exists(targetPath))</span><br><span class="line">    {</span><br><span class="line">        <span class="comment">//判断是新位置是否存在同名(判断重命名是狗和其他文件冲突)</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"已经存在同名文件"</span>);</span><br><span class="line">    }</span><br><span class="line">    System.IO.File.Move(Path,targetPath);<span class="comment">//2个文件在不同目录则是移动,如果在相同目录下则是重命名</span></span><br><span class="line">    ......</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>复制文件不会删除,移动或者重命名(方法相同,就是目标位置不同)会删除原文件.</p><p> <strong>4上传文件</strong></p><figure class="highlight c#"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">HttpPost</span>]<span class="comment">//通过Post请求接收前台传来的文件数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ActionResult <span class="title">UploadFile</span>(<span class="params"><span class="keyword">string</span> dirPath</span>)</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">var</span> filepath = Server.MapPath(Path);<span class="comment">//获取上传的文件存入目录的物理路径</span></span><br><span class="line">    <span class="keyword">var</span> file = Request.Files[<span class="string">"file"</span>];<span class="comment">//获取文件内容</span></span><br><span class="line">    <span class="keyword">if</span> (file == <span class="literal">null</span> || file.ContentLength == <span class="number">0</span>)</span><br><span class="line">    {</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"文件不存在"</span>);<span class="comment">//简单判断下文件</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">var</span> newfilepath = Server.MapPath(dirPath + <span class="string">"\\"</span> + file.FileName);<span class="comment">//获取文件名的物理路径</span></span><br><span class="line">    <span class="comment">//判断要上传的文件是否与目录中的文件重命名</span></span><br><span class="line">    <span class="keyword">if</span> (System.IO.File.Exists(newfilepath))</span><br><span class="line">    {</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"文件不存在"</span>);<span class="comment">//简单判断下文件是否存在</span></span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//文件存放到指定的文件中 ;</span></span><br><span class="line">    file.SaveAs(newfilepath);</span><br><span class="line">    ......</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>会自动创建存有该类容和命名的文件,不用多此一举去创建一个新文件再放入内容.</p><p> <strong>5遍历当前目录和其子目录所有文件</strong></p><figure class="highlight c#"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">string</span>[] <span class="title">GetFiles</span>(<span class="params"><span class="keyword">string</span> dir, <span class="keyword">string</span> regexPattern = <span class="literal">null</span>, <span class="keyword">bool</span> recurse = <span class="literal">true</span>, <span class="keyword">bool</span> throwEx = <span class="literal">false</span></span>)</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="comment">//recurse:是否递归</span></span><br><span class="line">    <span class="comment">//throwEx:是否报出异常</span></span><br><span class="line">    List&lt;<span class="keyword">string</span>&gt; lst = <span class="keyword">new</span> List&lt;<span class="keyword">string</span>&gt;();</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">string</span> item <span class="keyword">in</span> Directory.GetFileSystemEntries(dir))</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">bool</span> isFile = (System.IO.File.GetAttributes(item) &amp; FileAttributes.Directory) != FileAttributes.Directory;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (isFile &amp;&amp; (regexPattern == <span class="literal">null</span> || Regex.IsMatch(Path.GetFileName(item), regexPattern, RegexOptions.IgnoreCase | RegexOptions.Multiline)))</span><br><span class="line">                {</span><br><span class="line">                    lst.Add(item);</span><br><span class="line">                }</span><br><span class="line"></span><br><span class="line">                <span class="comment">//递归</span></span><br><span class="line">                <span class="keyword">if</span> (recurse &amp;&amp; !isFile)</span><br><span class="line">                {</span><br><span class="line">                    lst.AddRange(GetFiles(item, regexPattern, <span class="literal">true</span>));</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">catch</span> { <span class="keyword">if</span> (throwEx) { <span class="keyword">throw</span>; } }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">catch</span> { <span class="keyword">if</span> (throwEx) { <span class="keyword">throw</span>; } }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> lst.ToArray();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p> 这个不多说,网上找到的代码,亲测有效</p><h3 id="System-IO-File-Create-不会自动释放，一定要Dispose"><a href="#System-IO-File-Create-不会自动释放，一定要Dispose" class="headerlink" title="System.IO.File.Create 不会自动释放，一定要Dispose"></a><a href="https://www.cnblogs.com/LCX/p/4307845.html" target="_blank" rel="noopener">System.IO.File.Create 不会自动释放，一定要Dispose</a></h3><p>这样会导致W3P进程一直占用这个文件</p><p><code>System.IO.File.Create(HttpContext.Current.Server.MapPath(strName));</code></p><p>最好加上<code>Dispose()</code></p><p><code>System.IO.File.Create(HttpContext.Current.Server.MapPath(strName)).Dispose();</code></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以文件为例,如果对文件夹操作,基本上将File换为Directory即可&lt;br&gt;(例:&lt;code&gt;FileInfo file = new FileInfo(Path);&lt;/code&gt;与&lt;code&gt;DirectoryInfo directory = new DirectoryInfo (Path);&lt;/code&gt;)&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="ASP.NET" scheme="http://blog.iwxyi.com/tags/ASP-NET/"/>
    
      <category term="文件" scheme="http://blog.iwxyi.com/tags/%E6%96%87%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET-学习笔记</title>
    <link href="http://blog.iwxyi.com/2019/01/15/ASP-NET-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://blog.iwxyi.com/2019/01/15/ASP-NET-学习笔记/</id>
    <published>2019-01-15T13:11:00.000Z</published>
    <updated>2019-10-12T13:12:11.403Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ASP-NET-简介"><a href="#ASP-NET-简介" class="headerlink" title="ASP.NET 简介"></a>ASP.NET 简介</h1><p>ASP.NET 是新一代的 ASP。它无法兼容经典 ASP，但 ASP.NET 可以引用 ASP。</p><p>ASP.NET 页面需要编译，因此比经典 ASP 更快。</p><p>ASP.NET 拥有更好的语言支持，大量用户控件，基于 XML 的组件，以及对用户认证的整合。</p><p>ASP.NET 页面的扩展名是 .aspx，通常由 VB (Visual Basic) 或 C# (C sharp) 编写。</p><p>ASP.NET 中的用户控件可以通过不同的语言进行编写，包括 C++ 和 Java。</p><p>当浏览器请求 ASP.NET 文件时，ASP.NET 引擎读取该文件，编译并执行文件中的脚本，然后以纯 HTML 向浏览器返回结果。</p><p>扩展名</p><ul><li>ASP 文件的文件扩展名是 .asp</li><li>ASP.NET 文件的文件扩展名是 .aspx</li><li>ASP.NET 文件使用 C# 语法的文件扩展名是 .cshtml</li><li>ASP.NET 文件使用 Razor VB 语法的文件扩展名是 .vbhtml</li></ul><h1 id="WP-教程"><a href="#WP-教程" class="headerlink" title="WP 教程"></a>WP 教程</h1><p>Web Pages 是三种 ASP.NET 编程模型中的一种，用于创建 ASP.NET 网站和 web 应用程序。</p><p>其他两种编程模型是 Web Forms 和 MVC (Model, View, Controller)。</p><p>Web Pages 是最简单的 ASP.NET 网页开发编程模型。它提供了一种简单的方法将 HTML、CSS、JavaScript 以及服务器代码结合起来。</p><h2 id="WP-Razor"><a href="#WP-Razor" class="headerlink" title="WP Razor"></a>WP Razor</h2><ul><li>Razor 是一种向网页添加基于服务器的代码的标记语法</li><li>Razor 拥有传统 ASP.NET 标记的能力，但是更易学习，更易使用</li><li>Razor 是一种类似 ASP 和 PHP 的服务器端标记语法</li><li>Razor 支持 C# 和 Visual Basic 编程语言</li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;The time is @DateTime.Now&lt;/p&gt;</span><br></pre></td></tr></tbody></table></figure><p>包含常规的 HTML 标记，此外还包含：由 @ 标记的 Razor 代码。</p><hr><p><strong>C# 的主要 Razor 语法规则</strong></p><ul><li>Razor 代码块由 @{ … } 包围</li><li>行内表达式（变量和函数）以 @ 开始</li><li>代码语句以分号结束</li><li>变量通过 var 关键词进行声明</li><li>字符串用引用来包围</li><li>C# 代码对大小写敏感</li><li>C# 文件的扩展名是 .cshtml</li></ul><p><strong>实例</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 单行代码块 --&gt;</span><br><span class="line">@{ var myMessage = "Hello World"; }</span><br><span class="line"></span><br><span class="line">&lt;!-- 行内表达式或变量 --&gt;</span><br><span class="line">&lt;p&gt;The value of myMessage is: @myMessage&lt;/p&gt; </span><br><span class="line"></span><br><span class="line">&lt;!-- 多行代码块 --&gt;</span><br><span class="line">@{</span><br><span class="line">var greeting = "Welcome to our site!";</span><br><span class="line">var weekDay = DateTime.Now.DayOfWeek;</span><br><span class="line">var greetingMessage = greeting + " Today is: " + weekDay;</span><br><span class="line">}</span><br><span class="line">&lt;p&gt;The greeting is: @greetingMessage&lt;/p&gt;</span><br></pre></td></tr></tbody></table></figure><hr><p><strong>VB 的主要 Razor 语法规则</strong></p><ul><li>Razor 代码块由 @Code … End 包围</li><li>行内表达式（变量和函数）以 @ 开始</li><li>变量通过 Dim 关键词进行声明</li><li>字符串用引用来包围</li><li>C# 代码对大小写不敏感</li><li>C# 文件的扩展名是 .vbhtml</li></ul><p><strong>实例</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 单行代码块 --&gt;</span><br><span class="line">@Code dim myMessage = "Hello World" End Code</span><br><span class="line"> </span><br><span class="line">&lt;!-- 行内表达式或变量 --&gt;</span><br><span class="line">&lt;p&gt;The value of myMessage is: @myMessage&lt;/p&gt; </span><br><span class="line"> </span><br><span class="line">&lt;!-- 多行代码块 --&gt;</span><br><span class="line">@Code</span><br><span class="line">dim greeting = "Welcome to our site!" </span><br><span class="line">dim weekDay = DateTime.Now.DayOfWeek </span><br><span class="line">dim greetingMessage = greeting &amp; " Today is: " &amp; weekDay</span><br><span class="line">End Code </span><br><span class="line"></span><br><span class="line">&lt;p&gt;The greeting is: @greetingMessage&lt;/p&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="WP-布局"><a href="#WP-布局" class="headerlink" title="WP 布局"></a>WP 布局</h2><p>###内容快</p><p>使用 <code>@RenderPage()</code> 方法从不同的文件导入内容。</p><p>内容块（来自另一个文件）能够被输入网页中的任意位置，并可包含文本、标记和代码，就像任何常规的网页那样。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    @RenderPage("header.cshtml")</span><br><span class="line">    &lt;h1&gt;Hello Web Pages&lt;/h1&gt; </span><br><span class="line">    &lt;p&gt;This is a paragraph&lt;/p&gt;</span><br><span class="line">    @RenderPage("footer.cshtml")</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="布局页面"><a href="#布局页面" class="headerlink" title="布局页面"></a>布局页面</h3><p>创建一致外观的另一种方法是使用布局网页。布局网页包含网页的结构，而不是内容。当网页（内容页）链接到布局页时，它会根据布局页（模板）来显示。</p><p>布局页类似普通的网页，但是会<strong>在引用内容页的位置调用 <code>@RenderBody()</code> 方法</strong>。</p><p>每个内容页必须以 <code>Layout</code> 指令开头。</p><p>布局网页：Layout.cshtml</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;p&gt;This is header text&lt;/p&gt;</span><br><span class="line">    @RenderBody()</span><br><span class="line">    &lt;p&gt;© 2012 W3School. All rights reserved.&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><p>任意网页：（被包含在布局网页中）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@{Layout="Layout.cshtml";}</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;Welcome to W3Schools&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;</span><br><span class="line">Lorem ipsum dolor sit amet, consectetur adipisicing elit,sed do eiusmod tempor </span><br><span class="line">incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud </span><br><span class="line">exercitation ullamco laborisnisi ut aliquip ex ea commodo consequat.</span><br><span class="line">&lt;/p&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="防止代码泄露"><a href="#防止代码泄露" class="headerlink" title="防止代码泄露"></a>防止代码泄露</h3><p>名称以下划线开头的文件无法通过 web 来浏览。</p><p>隐藏敏感信息（数据库密码、电邮密码等）的常用方法是把这些信息保存在名为 “_AppStart” 的独立文件中</p><h4 id="AppStart-cshtml"><a href="#AppStart-cshtml" class="headerlink" title="_AppStart.cshtml"></a>_AppStart.cshtml</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@{</span><br><span class="line">    WebMail.SmtpServer = "mailserver.example.com";</span><br><span class="line">    WebMail.EnableSsl = true;</span><br><span class="line">    WebMail.UserName = "username@example.com";</span><br><span class="line">    WebMail.Password = "your-password";</span><br><span class="line">    WebMail.From = "your-name-here@example.com";</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="WP-文件夹"><a href="#WP-文件夹" class="headerlink" title="WP 文件夹"></a>WP 文件夹</h2><p>ASP.NET 网页的典型文件夹结构：</p><ul><li>“Account” 文件夹包含登录和安全文件</li><li>“App_Data” 文件包含数据库和数据文件</li><li>“Images” 文件夹包含图片</li><li>“Scripts” 文件夹包含浏览器脚本</li><li>“Shared” 文件夹包含通用文件（比如布局和样式文件）</li></ul><h3 id="物理文件结构"><a href="#物理文件结构" class="headerlink" title="物理文件结构"></a>物理文件结构</h3><p>类似：<code>C:\Johnny\Documents\MyWebSites\Demo\Images</code></p><h3 id="URL-和路径"><a href="#URL-和路径" class="headerlink" title="URL 和路径"></a>URL 和路径</h3><p>URL 用于从 web 访问文件：</p><p><code>http://www.w3school.com.cn/html5/html5_intro.asp</code></p><p>URL 在服务器上对应的文件是：</p><p><code>C:\MyWebSites\htm5\html5_intro.asp</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">URL       http://www.w3school.com.cn/html/html5_intro.asp</span><br><span class="line">服务器名w3school</span><br><span class="line">虚拟路径/html/html5_intro.asp</span><br><span class="line">物理路径C:\MyWebSites\w3school\/html/html5_intro.asp</span><br></pre></td></tr></tbody></table></figure><h3 id="操作符"><a href="#操作符" class="headerlink" title="~ 操作符"></a>~ 操作符</h3><p>如需在编程代码中规定虚拟根目录，请使用 ~ 操作符。</p><p>如果您使用 ~ 操作符，而不是路径，就能够在不改变任何代码的情况下，将网站移动到不同的文件夹或位置：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var myImagesFolder = "~/images";</span><br><span class="line">var myStyleSheet = "~/styles/StyleSheet.css";</span><br></pre></td></tr></tbody></table></figure><h3 id="Server-MapPath-方法"><a href="#Server-MapPath-方法" class="headerlink" title="Server.MapPath 方法"></a>Server.MapPath 方法</h3><p>Server.MapPath 方法将虚拟路径 (/default.cshtml) 转换为服务器能够理解的物理路径 (C:\Johnny\MyWebSited\Demo\default.cshtml)。</p><p>当需要打开位于服务器上的数据文件时，您就会用到该方法（数据文件只能通过完整的物理路径来访问）：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var pathName = "~/dataFile.txt";</span><br><span class="line">var fileName = Server.MapPath(pathName);</span><br></pre></td></tr></tbody></table></figure><h3 id="Href-方法"><a href="#Href-方法" class="headerlink" title="Href 方法"></a>Href 方法</h3><p>Href 方法把代码中的路径转换为浏览器能够理解的路径（浏览器无法理解 ~ 操作符）。</p><p>您使用 Href 方法来创建指向资源（比如图片和 CSS 文件）的路径。</p><p>您会经常在 HTML 、&lt;a&gt;、&lt;img&gt; 以及 &lt;link&gt; 元素中用到该方法：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@{var myStyleSheet = "~/Shared/Site.css";}</span><br><span class="line"></span><br><span class="line">&lt;!-- 创建指向 CSS 文件的链接 --&gt;</span><br><span class="line">&lt;link rel="stylesheet" type="text/css" href="@Href(myStyleSheet)" /&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 同上 : --&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="WP-全局"><a href="#WP-全局" class="headerlink" title="WP 全局"></a>WP 全局</h2><h3 id="Web-启动之前：-AppStart"><a href="#Web-启动之前：-AppStart" class="headerlink" title="Web 启动之前：_AppStart"></a>Web 启动之前：_AppStart</h3><p>假如站点根目录中名为 _AppStart 的页面存在，ASP.NET 会在站点内的任何页面被请求之前首先运行这个页面。</p><p>通常 _AppStart 用于启动代码和全局值的初始化，比如计数器和全局名称。</p><p>注释 1：_AppStart 的文件扩展名应与网页相同，比如 _AppStart.cshtml。</p><p>注释 2：_AppStart 有下划线前缀。正因如此，用户才无法直接查看该文件</p><h3 id="每张页面之前：-PageStart"><a href="#每张页面之前：-PageStart" class="headerlink" title="每张页面之前：_PageStart"></a>每张页面之前：_PageStart</h3><p>就像在站点启动前运行 _AppStart 那样，您能够在每个文件夹中的任意页面之前运行代码。</p><p>对于 web 中的每个文件夹，您能够添加名为 _PageStart 的文件。</p><p>通常 _PageStart 用于设置文件夹中所有页面的布局文件，或者在运行页面之前检查用户登录。</p><blockquote><p>当请求到来时，ASP.NET 检查 _AppStart 是否存在。如果存在，并且这是对站点的第一次请求，则运行 _AppStart。</p><p>然后 ASP.NET 检查 _PageStart 是否存在。如果存在，则运行 _PageStart，在被请求的页面之前。</p><p>如果您在 _PageStart 内部引用了对 RunPage() 的调用，那么您可以规定在何处运行被请求的页面。否则，_PageStart 在被请求页面之前运行。</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ASP-NET-简介&quot;&gt;&lt;a href=&quot;#ASP-NET-简介&quot; class=&quot;headerlink&quot; title=&quot;ASP.NET 简介&quot;&gt;&lt;/a&gt;ASP.NET 简介&lt;/h1&gt;&lt;p&gt;ASP.NET 是新一代的 ASP。它无法兼容经典 ASP，但 ASP.NE
      
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
      <category term="学习笔记" scheme="http://blog.iwxyi.com/categories/Code/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="ASP.NET" scheme="http://blog.iwxyi.com/tags/ASP-NET/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式-讲解</title>
    <link href="http://blog.iwxyi.com/2018/12/07/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F-%E8%AE%B2%E8%A7%A3/"/>
    <id>http://blog.iwxyi.com/2018/12/07/正则表达式-讲解/</id>
    <published>2018-12-07T13:05:00.000Z</published>
    <updated>2019-10-12T13:06:53.461Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Markdown-简介"><a href="#Markdown-简介" class="headerlink" title="Markdown 简介"></a>Markdown 简介</h2><p>Markdown 是一种轻量级的「<strong>标记语言</strong>」，通常为程序员群体所用，适用于泡技术论坛、写博客日志、技术文稿、记录代码片段、起草邮件等场景。 </p><p>可以通过简单、易读易写的<strong>文本格式</strong>生成结构化的 HTML 网页，以及 Word 和 pdf 文档。目前 知乎、简书、github、Stackoverflow、以及绝大多数博客论坛 均支持这种格式。 </p><a id="more"></a><h3 id="为什么要学-Markdown？"><a href="#为什么要学-Markdown？" class="headerlink" title="为什么要学 Markdown？"></a>为什么要学 Markdown？</h3><p>因为简单；因为好用；因为这篇教程就是用 Markdown 写的。</p><p>让“码字的归码字，排版的归排版”，专注写作，效率快速提升；</p><p>除此之外基础的任务管理、项目管理、逻辑梳理、公式协作等等，都可以用基本的Markdown来完成……</p><h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h3><p>简单符号排版，15 分钟上手。</p><p>纯键盘操作，写作时少调用鼠标，效率能提升很多。</p><p>使用 Markdown 的 h1、h2、h3 标题，列表、分列表，结构和逻辑都很清晰。排版成同样的效果，md 与 word 比起来简直毫不费力气。另外，还有插入图片、链接、粗体、斜体等功能。</p><p>纯文本编辑，轻量级。纯文本有很多好处，例如占用空间小、移植方便快捷、可以用 git 比较版本、编辑时不需要软件支持等。</p><p>目前支持将 md 转换为多种格式，包括 html、tex、pdf 等。</p><h3 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h3><ul><li>语法不是很统一，不同的编辑器语法有区别</li><li>不能对文档进行精细调整，或者个性化调整。</li><li>据说过于程序员友好。</li></ul><h3 id="对话式红楼梦"><a href="#对话式红楼梦" class="headerlink" title="对话式红楼梦"></a>对话式红楼梦</h3><h4 id="曹雪芹写的效果如下："><a href="#曹雪芹写的效果如下：" class="headerlink" title="曹雪芹写的效果如下："></a>曹雪芹写的效果如下：</h4><p>贾芸听声音像是熟人，仔细一看，原来是紧邻倪二。这倪二是个泼皮，专放重利债，在赌博场吃饭，专爱喝酒打架。此时正从欠钱人家索债归来，已在醉乡，不料贾芸碰了他，就要动手。贾芸叫道：“老二！住手！是我冲撞了你。”倪二一听他的语音，将醉眼睁开一看，见是贾芸，忙松了手，趔趄著笑道：“原来是贾二爷。这会子那里去？”贾芸道：“告诉不得你，平白的又讨了个没趣儿！”倪二道：“不妨。有什么不平的事，告诉我，我替你出气。这三街六巷，凭他是谁，若得罪了我醉金刚倪二的街坊，管叫他人离家散！”贾芸道：“老二，你别生气，听我告诉你这缘故。”便把卜世仁一段事告诉了倪二。倪二听了，大怒道：“要不是二爷的亲戚，我就骂出来，真真把人气死！－－也罢，你也不必愁，我这里现有几两银子，你要用只管拿去。我们好街坊，这银子是不要利钱的。”一头说，一头从搭包内掏出一包银子来。</p><hr><h4 id="Markdown-的效果"><a href="#Markdown-的效果" class="headerlink" title="Markdown 的效果"></a>Markdown 的效果</h4><p> <strong>用Markdown简单处理一下的话，这段的排版就变了：</strong></p><p>贾芸听声音像是熟人，仔细一看，原来是紧邻倪二。这倪二是个泼皮，专放重利债，在赌博场吃饭，专爱喝酒打架。此时正从欠钱人家索债归来，已在醉乡，不料贾芸碰了他，就要动手。贾芸叫道：</p><blockquote><p>“老二！住手！是我冲撞了你。”</p></blockquote><p>倪二一听他的语音，将醉眼睁开一看，见是贾芸，忙松了手，趔趄著笑道：</p><blockquote><p>“原来是贾二爷。这会子那里去？”</p></blockquote><p>贾芸道：</p><blockquote><p>“告诉不得你，平白的又讨了个没趣儿！”</p></blockquote><p>倪二道：</p><blockquote><p>“不妨。有什么不平的事，告诉我，我替你出气。这三街六巷，凭他是谁，若得罪了我醉金刚倪二的街坊，管叫他人离家散！”</p></blockquote><p>贾芸道：</p><blockquote><p>“老二，你别生气，听我告诉你这缘故。”</p></blockquote><p>便把卜世仁一段事告诉了倪二。倪二听了，大怒道：</p><blockquote><p>“要不是二爷的亲戚，我就骂出来，真真把人气死！－－也罢，你也不必愁，我这里现有几两银子，你要用只管拿去。我们好街坊，这银子是不要利钱的。”</p></blockquote><p>一头说，一头从搭包内掏出一包银子来。</p><hr><h2 id="开始撰写-Markdown"><a href="#开始撰写-Markdown" class="headerlink" title="开始撰写 Markdown"></a>开始撰写 Markdown</h2><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>Markdown 支持两种标题的语法，类 Setext 和类 atx 形式。（部分编辑器不支持）</p><p>类 Setext 形式是用底线的形式，利用 = （最高阶标题）和 - （第二阶标题），例如：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">This is an H1</span><br><span class="line">=============</span><br><span class="line"></span><br><span class="line">This is an H2</span><br><span class="line">-------------</span><br></pre></td></tr></tbody></table></figure><p>类 Atx 形式则是在行首插入 1 到 6 个 # ，对应到标题 1 到 6 阶，例如：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 这是 H1</span><br><span class="line"></span><br><span class="line">## 这是 H2</span><br><span class="line"></span><br><span class="line">###### 这是 H6</span><br></pre></td></tr></tbody></table></figure><p>你可以选择性地「闭合」类 atx 样式的标题，这纯粹只是美观用的，若是觉得这样看起来比较舒适，你就可以在行尾加上 #，而行尾的 # 数量也不用和开头一样（行首的井字符数量决定标题的阶数）：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 这是 H1 #</span><br><span class="line"></span><br><span class="line">## 这是 H2 ##</span><br><span class="line"></span><br><span class="line">### 这是 H3 ######</span><br></pre></td></tr></tbody></table></figure><h3 id="区块引用Blockquotes"><a href="#区块引用Blockquotes" class="headerlink" title="区块引用Blockquotes"></a>区块引用Blockquotes</h3><p>Markdown 标记区块引用是使用类似 email 中用 &gt; 的引用方式。如果你还熟悉在 email 信件中的引言部分，你就知道怎么在 Markdown 文件中建立一个区块引用，那会看起来像是你自己先断好行，然后在每行的最前面加上 &gt; ：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,</span><br><span class="line">&gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.</span><br><span class="line">&gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</span><br><span class="line">&gt; </span><br><span class="line">&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse</span><br><span class="line">&gt; id sem consectetuer libero luctus adipiscing.</span><br></pre></td></tr></tbody></table></figure><p>Markdown 也允许你偷懒只在整个段落的第一行最前面加上 &gt; ：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,</span><br><span class="line">consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.</span><br><span class="line">Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</span><br><span class="line"></span><br><span class="line">&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse</span><br><span class="line">id sem consectetuer libero luctus adipiscing.</span><br></pre></td></tr></tbody></table></figure><p>区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 &gt; ：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> This is the first level of quoting.</span><br><span class="line">&gt;</span><br><span class="line">&gt; &gt; This is nested blockquote.</span><br><span class="line">&gt;</span><br><span class="line">&gt; Back to the first level.</span><br></pre></td></tr></tbody></table></figure><p>引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; ## 这是一个标题。</span><br><span class="line">&gt; </span><br><span class="line">&gt; 1.   这是第一行列表项。</span><br><span class="line">&gt; 2.   这是第二行列表项。</span><br><span class="line">&gt; </span><br><span class="line">&gt; 给出一些例子代码：</span><br><span class="line">&gt; </span><br><span class="line">&gt;     return shell_exec("echo $input | $markdown_script");</span><br></pre></td></tr></tbody></table></figure><p>任何像样的文本编辑器都能轻松地建立 email 型的引用。例如在 BBEdit 中，你可以选取文字后然后从选单中选择增加引用阶层。</p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>Markdown 支持有序列表和无序列表。</p><p>无序列表使用星号、加号或是减号作为列表标记：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*   Red</span><br><span class="line">*   Green</span><br><span class="line">*   Blue</span><br></pre></td></tr></tbody></table></figure><p>等同于：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">+   Red</span><br><span class="line">+   Green</span><br><span class="line">+   Blue</span><br></pre></td></tr></tbody></table></figure><p>也等同于：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-   Red</span><br><span class="line">-   Green</span><br><span class="line">-   Blue</span><br></pre></td></tr></tbody></table></figure><p>有序列表则使用数字接着一个英文句点（word里面也是这样）：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. Bird</span><br><span class="line">2. McHale</span><br><span class="line">3. Parish</span><br></pre></td></tr></tbody></table></figure><p>列表项目标记通常是放在最左边，但是其实也可以缩进，最多 3 个空格，项目标记后面则一定要接着至少一个空格或制表符。</p><p>要让列表看起来更漂亮，你可以把内容用固定的缩进整理好：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.</span><br><span class="line">    Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,</span><br><span class="line">    viverra nec, fringilla in, laoreet vitae, risus.</span><br><span class="line">*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.</span><br><span class="line">    Suspendisse id sem consectetuer libero luctus adipiscing.</span><br></pre></td></tr></tbody></table></figure><p>但是如果你懒，那也行：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.</span><br><span class="line">Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,</span><br><span class="line">viverra nec, fringilla in, laoreet vitae, risus.</span><br><span class="line">*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.</span><br><span class="line">Suspendisse id sem consectetuer libero luctus adipiscing.</span><br></pre></td></tr></tbody></table></figure><p>列表项目可以包含多个段落，每个项目下的段落都必须缩进 4 个空格或是 1 个制表符：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.  This is a list item with two paragraphs. Lorem ipsum dolor</span><br><span class="line">    sit amet, consectetuer adipiscing elit. Aliquam hendrerit</span><br><span class="line">    mi posuere lectus.</span><br><span class="line"></span><br><span class="line">    Vestibulum enim wisi, viverra nec, fringilla in, laoreet</span><br><span class="line">    vitae, risus. Donec sit amet nisl. Aliquam semper ipsum</span><br><span class="line">    sit amet velit.</span><br><span class="line"></span><br><span class="line">2.  Suspendisse id sem consectetuer libero luctus adipiscing.</span><br></pre></td></tr></tbody></table></figure><p>如果你每行都有缩进，看起来会看好很多，当然，再次地，如果你很懒惰，Markdown 也允许：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">*   This is a list item with two paragraphs.</span><br><span class="line"></span><br><span class="line">    This is the second paragraph in the list item. You're</span><br><span class="line">only required to indent the first line. Lorem ipsum dolor</span><br><span class="line">sit amet, consectetuer adipiscing elit.</span><br><span class="line"></span><br><span class="line">*   Another item in the same list.</span><br></pre></td></tr></tbody></table></figure><p>如果要在列表项目内放进引用，那 &gt; 就需要缩进：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*   A list item with a blockquote:</span><br><span class="line"></span><br><span class="line">    &gt; This is a blockquote</span><br><span class="line">    &gt; inside a list item.</span><br></pre></td></tr></tbody></table></figure><p>如果要放代码区块的话，该区块就需要缩进两次，也就是 8 个空格或是 2 个制表符：（有些编辑器不支持）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*   一列表项包含一个列表区块：</span><br><span class="line"></span><br><span class="line">        &lt;代码写在这&gt;</span><br></pre></td></tr></tbody></table></figure><p>当然，项目列表很可能会不小心产生，像是下面这样的写法</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1986. What a great season.</span><br></pre></td></tr></tbody></table></figure><p>换句话说，也就是在行首出现数字-句点-空白，要避免这样的状况，你可以在句点前面加上反斜杠。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1986\. What a great season.</span><br></pre></td></tr></tbody></table></figure><h3 id="待办事项"><a href="#待办事项" class="headerlink" title="待办事项"></a>待办事项</h3><p>用 <code>- [ ]</code> 来表示一个待办事项列表（注意有三个空格）</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- [ ] 未完成列表</span><br><span class="line">- [x] 已完成列表</span><br></pre></td></tr></tbody></table></figure><h3 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h3><p>和程序相关的写作或是标签语言原始码通常会有已经排版好的代码区块，通常这些区块我们并不希望它以一般段落文件的方式去排版，而是照原来的样子显示，Markdown 会用 <code>&lt;pre&gt;</code> 和 <code>&lt;code&gt;</code> 标签来把代码区块包起来。</p><p>要在 Markdown 中建立代码区块很简单，只要用一对</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">~~~C++</span><br><span class="line">```C++</span><br><span class="line">    for (int i = 0; i &lt; 10; i++)</span><br><span class="line">        printf("%d\n", i);</span><br></pre></td></tr></tbody></table></figure><p></p><p><del>~</del></p><p>上面的</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 分隔线</span><br><span class="line"></span><br><span class="line">你可以在一行中用三个以上的短横杠来建立一个分隔线，行内不能有其他东西。</span><br></pre></td></tr></tbody></table></figure><p></p><hr><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 链接</span><br><span class="line"></span><br><span class="line">链接文字用 [方括号] 来标记，要建立一个行内的链接，只要在方块括号后面紧接着圆括号并插入网址链接即可，例如：</span><br></pre></td></tr></tbody></table></figure><p>This is <a href="http://example.com/" target="_blank" rel="noopener">an example</a> inline link.</p><p><a href="http://example.net/" target="_blank" rel="noopener">This link</a> has no title attribute.</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">如果你是要链接到同样主机的资源，你可以使用相对路径：</span><br></pre></td></tr></tbody></table></figure><p>See my <a href="/about/">About</a> page for details.</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 强调</span><br><span class="line"></span><br><span class="line">Markdown 使用星号（*）和底线（_）作为标记强调字词的符号 。一对是斜体，两对是粗体。</span><br></pre></td></tr></tbody></table></figure><p><em>single asterisks</em></p><p><em>single underscores</em></p><p><strong>double asterisks</strong></p><p><strong>double underscores</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*single asterisks*</span><br><span class="line"></span><br><span class="line">_single underscores_</span><br><span class="line"></span><br><span class="line">**double asterisks**</span><br><span class="line"></span><br><span class="line">__double underscores__</span><br><span class="line"></span><br><span class="line">你可以随便用你喜欢的样式，唯一的限制是，你用什么符号开启标签，就要用什么符号结束。</span><br><span class="line"></span><br><span class="line">强调也可以直接插在文字中间：</span><br></pre></td></tr></tbody></table></figure><p>un<em>frigging</em>believable</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">但是**如果你的 \* 和 _ 两边都有空白的话，它们就只会被当成普通的符号。**</span><br><span class="line"></span><br><span class="line">如果要在文字前后直接插入普通的星号或底线，你可以用反斜线：</span><br></pre></td></tr></tbody></table></figure><p>*this text is surrounded by literal asterisks*</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 删除线</span><br><span class="line"></span><br><span class="line">使用两对波浪线 ~~ 来给文字加上~~删除线~~。注意波浪线和文字之间不能有空格。</span><br></pre></td></tr></tbody></table></figure><p><del>删除线</del></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 代码</span><br><span class="line"></span><br><span class="line">如果要标记一小段行内代码，你可以用反引号把它包起来（`），例如：</span><br></pre></td></tr></tbody></table></figure><p>Use the <code>printf()</code> function.</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">如果要在代码区段内插入反引号，你可以用多个反引号来开启和结束代码区段：</span><br></pre></td></tr></tbody></table></figure><p><code>There is a literal backtick (`) here.</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 图片</span><br><span class="line"></span><br><span class="line">很明显地，要在纯文字应用中设计一个「自然」的语法来插入图片是有一定难度的。</span><br><span class="line"></span><br><span class="line">Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： 行内式和参考式。</span><br><span class="line"></span><br><span class="line">行内式的图片语法看起来像是：</span><br></pre></td></tr></tbody></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/path/to/img.jpg" alt="Alt text" title="">                </div>                <div class="image-caption">Alt text</div>            </figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">详细叙述如下：</span><br><span class="line"></span><br><span class="line">- 一个惊叹号 !</span><br><span class="line">- 接着一个方括号，里面放上图片的替代文字</span><br><span class="line">- 接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上 选择性的 'title' 文字。</span><br><span class="line"></span><br><span class="line">到目前为止， Markdown 还没有办法指定图片的宽高，如果你需要的话，你可以使用普通的 `&lt;img&gt;` 标签。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 反斜杠</span><br><span class="line"></span><br><span class="line">Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文字旁边的方式来做出强调效果，你可以在星号的前面加上反斜杠：</span><br></pre></td></tr></tbody></table></figure><p>*literal asterisks*</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</span><br></pre></td></tr></tbody></table></figure><p>\   反斜线<br>`   反引号</p><ul><li>星号<br>_   底线<br>{}  花括号<br>[]  方括号<br>()  括弧<h1 id="井字号"><a href="#井字号" class="headerlink" title="井字号"></a>井字号</h1></li></ul><ul><li>加号</li></ul><ul><li>减号<br>.   英文句点<br>!   惊叹号<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 自动链接</span><br><span class="line"></span><br><span class="line">Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用方括号包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如：</span><br></pre></td></tr></tbody></table></figure></li></ul><p><a href="http://example.com/" target="_blank" rel="noopener">http://example.com/</a></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">邮址的自动链接也很类似，只是 Markdown 会先做一个编码转换的过程，把文字字符转成 16 进位码的 HTML 实体，这样的格式可以糊弄一些不好的邮址收集机器人，例如：</span><br></pre></td></tr></tbody></table></figure><p><a href="mailto:address@example.com" target="_blank" rel="noopener">address@example.com</a></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 表格</span><br><span class="line"></span><br><span class="line">表格是Markdown语法中比较复杂的一个，其语法如下：</span><br></pre></td></tr></tbody></table></figure><table><thead><tr><th align="center">表头</th><th align="center">条目一</th><th align="center">条目二</th></tr></thead><tbody><tr><td align="center">项目</td><td align="center">项目一</td><td align="center">项目二</td></tr><tr><td align="center">```</td><td align="center"></td><td align="center"></td></tr></tbody></table><p>以上标记显示效果如下：</p><table><thead><tr><th>表头</th><th>条目一</th><th>条目二</th></tr></thead><tbody><tr><td>项目</td><td>项目一</td><td>项目二</td></tr></tbody></table><blockquote><p>注：三个短斜杠左右的冒号用于控制对齐方式，只放置左边冒号表示文字居左，只放置右边冒号表示文字居右，如果两边都放置冒号表示文字居中。不加冒号默认左对齐。</p></blockquote><h3 id="文字上色"><a href="#文字上色" class="headerlink" title="文字上色"></a>文字上色</h3><p>使用Markdown的同学最郁闷的地方恐怕就是不能给文字添加颜色了。事实上，Markdown的最初目标就是为纯写作而生的。因此，它并没有考虑文字颜色这一点。所以，单纯使用Markdown设置文字颜色已经做不到了。但你可以这样做：</p><ol><li>先用Markdown编辑完成</li><li>导出为html，在需要上色的部分手动添加标签<code>&lt;font color='#ff0000'&gt;  &lt;/font&gt;</code>保存即可。</li></ol><h3 id="Latex数学公式"><a href="#Latex数学公式" class="headerlink" title="Latex数学公式"></a>Latex数学公式</h3><p>1.行内公式：使用两个”$”符号引用公式:</p><p><code>$公式$</code></p><p>2.行间公式：使用两对“$$”符号引用公式：</p><p><code>$$公式$$</code></p><p>输例如$\sqrt{x^{2}}$ </p><h3 id="上标下标"><a href="#上标下标" class="headerlink" title="上标下标"></a>上标下标</h3><p>在<code>$ $</code> 公式中，用 <code>^p</code> 表示上标。若有多个，用 <code>{ }</code> 括起来。</p><p>下标符号为 <code>_</code>，用法同上标。</p><blockquote><p>Typora 的扩展语法中，可以用<code>^上标^</code>与<code>~下标~</code>来表示（需要先到设置中开启）</p></blockquote><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>在文档中，内容远远比工具和格式重要。但适当的格式和工具也会增强文字的渲染力。</p><p>Markdown 是纯文本和富文本之间最恰当的选择。</p><hr><blockquote><p>博客来源：整理，网络，主要是 <a href="http://www.markdown.cn/" target="_blank" rel="noopener">http://www.markdown.cn/</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Markdown-简介&quot;&gt;&lt;a href=&quot;#Markdown-简介&quot; class=&quot;headerlink&quot; title=&quot;Markdown 简介&quot;&gt;&lt;/a&gt;Markdown 简介&lt;/h2&gt;&lt;p&gt;Markdown 是一种轻量级的「&lt;strong&gt;标记语言&lt;/strong&gt;」，通常为程序员群体所用，适用于泡技术论坛、写博客日志、技术文稿、记录代码片段、起草邮件等场景。 &lt;/p&gt;
&lt;p&gt;可以通过简单、易读易写的&lt;strong&gt;文本格式&lt;/strong&gt;生成结构化的 HTML 网页，以及 Word 和 pdf 文档。目前 知乎、简书、github、Stackoverflow、以及绝大多数博客论坛 均支持这种格式。 &lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
      <category term="讲解" scheme="http://blog.iwxyi.com/categories/Code/%E8%AE%B2%E8%A7%A3/"/>
    
    
      <category term="语法" scheme="http://blog.iwxyi.com/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>栈与队列-讲解</title>
    <link href="http://blog.iwxyi.com/2018/12/07/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97-%E8%AE%B2%E8%A7%A3/"/>
    <id>http://blog.iwxyi.com/2018/12/07/栈与队列-讲解/</id>
    <published>2018-12-07T12:50:00.000Z</published>
    <updated>2019-10-12T12:55:55.637Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><p>栈是一种特殊的线性表。其特殊性在于限定插入和删除数据元素的操作只能在线性表的一端进行。如下所示：</p><a id="more"></a><p><img src="/images/pasted-1.png" alt="栈"></p><p>结论：先进后出 &amp;&amp; 后进先出（Last In First Out），简称为LIFO线性表。</p><p>例子：手机任务的返回栈、食堂餐盘从下到上叠起来，送给洗盘子的人，从上到下洗</p><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><p>队列(Queue)也是一种运算受限的线性表，它的运算限制与栈不同，是两头都有限制，插入只能在表的一端进行(只进不出)，而删除只能在表的另一端进行(只出不进)，允许删除的一端称为队尾(rear)，允许插入的一端称为队头 (Front),如图所示：</p><p><img src="%5Cimages%5Cpasted-2.png" alt="队列"></p><p>结论：队列的操作原则是先进先出的，所以队列又称作FIFO表(First In First Out)</p><p>例子：各种排队</p><h2 id="纯-C-用法（函数）"><a href="#纯-C-用法（函数）" class="headerlink" title="纯 C 用法（函数）"></a>纯 C 用法（函数）</h2><h3 id="栈-1"><a href="#栈-1" class="headerlink" title="栈"></a>栈</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_SIZE 1000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> _data[MAX_SIZE], _size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> _size != <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (_size &lt; MAX_SIZE<span class="number">-1</span>) {</span><br><span class="line">        _data[_size++] = x;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (_size) {</span><br><span class="line">        _data[--_size] = <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> _size;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">front</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> _size ? _data[<span class="number">0</span>] : <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">back</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> _size ? _data[_size<span class="number">-1</span>] : <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"></span><br><span class="line">    push(<span class="number">100</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, back());</span><br><span class="line">    push(<span class="number">20</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, back());</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>数组转指针：</p><p><code>_data\[([^M].*)\]</code>替换<code>*(_data + \1)</code></p><h2 id="纯C用法（结构体）"><a href="#纯C用法（结构体）" class="headerlink" title="纯C用法（结构体）"></a>纯C用法（结构体）</h2><h3 id="栈-2"><a href="#栈-2" class="headerlink" title="栈"></a>栈</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stack</span> {</span></span><br><span class="line">    <span class="keyword">int</span> _data[<span class="number">1000</span>];</span><br><span class="line">    <span class="keyword">int</span> _size;</span><br><span class="line"></span><br><span class="line">    Stack() {          <span class="comment">// 初始化</span></span><br><span class="line">        _size = <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    Stack(Stack&amp; q) {  <span class="comment">// 拷贝（引用）</span></span><br><span class="line">        _size = q.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; _size; i++)</span><br><span class="line">            _data[i] = q.at(i);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> </span>{     <span class="comment">// 是否为空</span></span><br><span class="line">        <span class="keyword">return</span> !_size;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>{       <span class="comment">// 尺寸</span></span><br><span class="line">        <span class="keyword">return</span> _size;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">at</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{    <span class="comment">// 数据</span></span><br><span class="line">        <span class="keyword">return</span> (x&gt;=<span class="number">0</span> &amp;&amp; x &lt; _size) ? _data[x] : <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{ <span class="comment">// 放入一个</span></span><br><span class="line">        <span class="keyword">if</span> (_size &lt; <span class="number">1000</span>)</span><br><span class="line">            _data[_size++] = x;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>{       <span class="comment">// 取出一个</span></span><br><span class="line">        <span class="keyword">if</span> (_size) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; _size<span class="number">-1</span>; i++)</span><br><span class="line">                _data[i] = _data[i+<span class="number">1</span>];</span><br><span class="line">            --_size;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">front</span><span class="params">()</span> </span>{      <span class="comment">// 获取最新进入的</span></span><br><span class="line">        <span class="keyword">return</span> _size?_data[<span class="number">0</span>] : <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">back</span><span class="params">()</span> </span>{       <span class="comment">// 获取最后进入的</span></span><br><span class="line">        <span class="keyword">return</span> _size?_data[_size<span class="number">-1</span>] : <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>{</span><br><span class="line">        _size = <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    Stack s;</span><br><span class="line"></span><br><span class="line">    s.push(<span class="number">100</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, s.back());</span><br><span class="line">    s.push(<span class="number">20</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, s.back());</span><br><span class="line"></span><br><span class="line">    <span class="function">Stack <span class="title">s2</span><span class="params">(s)</span></span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, s.back());</span><br><span class="line">    s2.clear();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="C-用法"><a href="#C-用法" class="headerlink" title="C++ 用法"></a>C++ 用法</h2><h3 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br></pre></td></tr></tbody></table></figure><h3 id="定义方式"><a href="#定义方式" class="headerlink" title="定义方式"></a>定义方式</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">statck&lt;<span class="keyword">int</span>&gt; q;</span><br></pre></td></tr></tbody></table></figure><h3 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h3><h4 id="栈-3"><a href="#栈-3" class="headerlink" title="栈"></a>栈</h4><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s.empty() <span class="comment">//如果栈为空返回true，否则返回false  </span></span><br><span class="line">s.size()  <span class="comment">//返回栈中元素的个数  </span></span><br><span class="line">s.pop()   <span class="comment">//删除栈顶元素但不返回其值  </span></span><br><span class="line">s.top()   <span class="comment">//返回栈顶的元素，但不删除该元素  </span></span><br><span class="line">s.push(x) <span class="comment">//在栈顶压入新元素 ，参数X为要压入的元素</span></span><br></pre></td></tr></tbody></table></figure><h4 id="队列-1"><a href="#队列-1" class="headerlink" title="队列"></a>队列</h4><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">q.empty() <span class="comment">// 如果队列为空返回true，否则返回false  </span></span><br><span class="line">q.size()  <span class="comment">// 返回队列中元素的个数  </span></span><br><span class="line">q.pop()   <span class="comment">//删除队列首元素但不返回其值  </span></span><br><span class="line">q.front() <span class="comment">// 返回队首元素的值，但不删除该元素  </span></span><br><span class="line">q.push(x) <span class="comment">//在队尾压入新元素 ，X为要压入的元素</span></span><br><span class="line">q.back()  <span class="comment">//返回队列尾元素的值，但不删除该元素</span></span><br></pre></td></tr></tbody></table></figure><h4 id="智能指针"><a href="#智能指针" class="headerlink" title="智能指针"></a>智能指针</h4><p>迭代器 <code>iterator</code></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt;::iterator i;</span><br><span class="line"><span class="keyword">for</span> (i = s.begin(); i != s.end(); ++i)</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *i &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></tbody></table></figure><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; s;</span><br><span class="line">    <span class="keyword">char</span> a = <span class="string">'a'</span>, b = <span class="string">'b'</span>;</span><br><span class="line">    </span><br><span class="line">    q.push(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"push 1"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"empty:"</span> &lt;&lt; q.empty() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"push 2"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    q.push(<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"front:"</span> &lt;&lt; q.front() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    q.pop();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"pop"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"front:"</span> &lt;&lt; q.front() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    q.pop();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"pop"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"empty:"</span> &lt;&lt; q.empty() &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"-----"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    s.push(a);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"push "</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"size:"</span> &lt;&lt; s.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"top:"</span> &lt;&lt; s.top() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    s.push(b);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"push "</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"top:"</span> &lt;&lt; s.top() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    s.pop();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"pop"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"top:"</span> &lt;&lt; s.top() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;h3 id=&quot;栈&quot;&gt;&lt;a href=&quot;#栈&quot; class=&quot;headerlink&quot; title=&quot;栈&quot;&gt;&lt;/a&gt;栈&lt;/h3&gt;&lt;p&gt;栈是一种特殊的线性表。其特殊性在于限定插入和删除数据元素的操作只能在线性表的一端进行。如下所示：&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
      <category term="讲解" scheme="http://blog.iwxyi.com/categories/Code/%E8%AE%B2%E8%A7%A3/"/>
    
    
      <category term="算法" scheme="http://blog.iwxyi.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式-讲解</title>
    <link href="http://blog.iwxyi.com/2018/12/06/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%95%99%E7%A8%8B/"/>
    <id>http://blog.iwxyi.com/2018/12/06/正则表达式教程/</id>
    <published>2018-12-06T12:56:00.000Z</published>
    <updated>2019-10-12T13:05:17.530Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>正则表达式(Regular Expression，简称 RegExp)是一种<strong>文本模式</strong>，包括普通字符（例如，a 到 z 之间的字母）和特殊字符（称为”元字符”）。它使用<strong>单个字符串</strong>来描述、匹配<strong>一系列</strong>匹配某个句法规则的字符串。</p><a id="more"></a><h2 id="为什么使用正则表达式？"><a href="#为什么使用正则表达式？" class="headerlink" title="为什么使用正则表达式？"></a>为什么使用正则表达式？</h2><p>典型的搜索和替换操作要求您提供与预期的搜索结果<strong>匹配</strong>的确切文本。虽然这种技术对于对静态文本执行简单搜索和替换任务可能已经足够了，但它缺乏灵活性，若采用这种方法搜索<strong>动态文本</strong>，即使不是不可能，至少也会变得很困难。</p><h2 id="例1：文件匹配"><a href="#例1：文件匹配" class="headerlink" title="例1：文件匹配"></a>例1：文件匹配</h2><p><code>data(\w)?\.dat</code> 匹配下列所有文件</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data.dat</span><br><span class="line">data1.dat</span><br><span class="line">data2.dat</span><br><span class="line">datax.dat</span><br><span class="line">dataN.dat</span><br></pre></td></tr></tbody></table></figure><p>使用 <code>*</code> 字符代替 <code>?</code> 字符扩大了找到的文件的数量。<code>data.*\.dat</code> 匹配下列所有文件：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data.dat</span><br><span class="line">data1.dat</span><br><span class="line">data2.dat</span><br><span class="line">data12.dat</span><br><span class="line">datax.dat</span><br><span class="line">dataXYZ.dat</span><br></pre></td></tr></tbody></table></figure><h2 id="例2：colou-r"><a href="#例2：colou-r" class="headerlink" title="例2：colou?r"></a>例2：colou?r</h2><p>同时匹配 <code>color</code>与<code>colour</code></p><h2 id="例3：特定格式"><a href="#例3：特定格式" class="headerlink" title="例3：特定格式"></a>例3：特定格式</h2><p><code>^[0-9]+abc$</code></p><ul><li><code>^</code> 为匹配输入字符串的开始位置</li><li><code>[0-9]+</code>匹配多个数字， <code>[0-9]</code> 匹配单个数字，+ 匹配一个或者多个。</li><li><code>abc$</code>匹配字母 <code>abc</code> 并以 <code>abc</code> 结尾，<code>$</code> 为匹配输入字符串的结束位置。</li></ul><p>我们在写用户注册表单时，只允许用户名包含字符、数字、下划线和连接字符(-)，并设置用户名的长度，我们就可以使用这一类正则表达式来设定。</p><h2 id=""><a href="#" class="headerlink" title="()"></a>()</h2><p><code>()</code> 标记一个子表达式的<strong>开始和结束</strong>位置。子表达式可以获取供以后使用。要匹配这些字符，请使用 <code>\(</code> 和 <code>\)</code>。</p><h2 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h2><p>所谓特殊字符，就是一些有<strong>特殊含义</strong>的字符。</p><p>许多元字符要求在试图匹配它们时特别对待。若要匹配这些特殊字符，必须首先使字符”转义”，即，将反斜杠字符\ 放在它们前面。下表列出了正则表达式中的特殊字符：</p><table><thead><tr><th>特别字符</th><th>描述</th></tr></thead><tbody><tr><td>$</td><td>匹配输入字符串的结尾位置。如果设置了 RegExp 对象的 Multiline 属性，则 <code>$</code> 也匹配 ‘\n’ 或 ‘\r’。要匹配 <code>$</code> 字符本身，请使用 <code>\$</code>。</td></tr><tr><td>( )</td><td>标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用 ( 和 )。</td></tr><tr><td>*</td><td>匹配前面的子表达式零次或多次。要匹配 * 字符，请使用 *。</td></tr><tr><td>+</td><td>匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 +。</td></tr><tr><td>.</td><td>匹配除换行符 \n 之外的任何单字符。要匹配 . ，请使用 . 。</td></tr><tr><td>[</td><td>标记一个中括号表达式的开始。要匹配 [，请使用 [。</td></tr><tr><td>?</td><td>匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配 ? 字符，请使用 ?。</td></tr><tr><td>\</td><td>将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。例如， ‘n’ 匹配字符 ‘n’。’\n’ 匹配换行符。序列 ‘\‘ 匹配 “"，而 ‘(‘ 则匹配 “(“。</td></tr><tr><td>^</td><td>匹配输入字符串的开始位置，除非在方括号表达式中使用，此时它表示不接受该字符集合。要匹配 ^ 字符本身，请使用 ^。</td></tr><tr><td>{</td><td>标记限定符表达式的开始。要匹配 {，请使用 {。</td></tr><tr><td>|</td><td>指明两项之间的一个选择。要匹配 |，请使用 |。</td></tr></tbody></table><h2 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h2><p>限定符用来指定正则表达式的一个给定组件必须要<strong>出现多少次</strong>才能满足匹配。有 * 或 + 或 ? 或 {n} 或 {n,} 或 {n,m} 共6种。</p><p>正则表达式的限定符有：</p><table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td>*</td><td>匹配前面的子表达式零次或多次。例如，zo* 能匹配 “z” 以及 “zoo”。* 等价于{0,}。</td></tr><tr><td>+</td><td>匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。</td></tr><tr><td>?</td><td>匹配前面的子表达式零次或一次。例如，”do(es)?” 可以匹配 “do” 、 “does” 中的 “does” 、 “doxy” 中的 “do” 。? 等价于 {0,1}。</td></tr><tr><td>{n}</td><td>n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。</td></tr><tr><td>{n,}</td><td>n 是一个非负整数。至少匹配n 次。例如，’o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。’o{1,}’ 等价于 ‘o+’。’o{0,}’ 则等价于 ‘o*’。</td></tr><tr><td>{n,m}</td><td>m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。例如，”o{1,3}” 将匹配 “fooooood” 中的前三个 o。’o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。</td></tr></tbody></table><h2 id="定位符"><a href="#定位符" class="headerlink" title="定位符"></a>定位符</h2><p>定位符使您能够将正则表达式固定到<strong>行首或行尾</strong>。它们还使您能够创建这样的正则表达式，这些正则表达式出现在一个单词内、在一个单词的开头或者一个单词的结尾。</p><p>定位符用来描述字符串或单词的边界，^ 和 $ 分别指字符串的开始与结束，\b 描述单词的前或后边界，\B 表示非单词边界。</p><p>正则表达式的定位符有：</p><table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td>^</td><td>匹配输入字符串开始的位置。如果设置了 RegExp 对象的 Multiline 属性，^ 还会与 \n 或 \r 之后的位置匹配。</td></tr><tr><td>$</td><td>匹配输入字符串结尾的位置。如果设置了 RegExp 对象的 Multiline 属性，$ 还会与 \n 或 \r 之前的位置匹配。</td></tr><tr><td>\b</td><td>匹配一个单词边界，即字与空格间的位置。</td></tr><tr><td>\B</td><td>非单词边界匹配。</td></tr></tbody></table><blockquote><p><strong>注意</strong>：不能将限定符与定位符一起使用。</p></blockquote><h2 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h2><p>用圆括号将所有选择项括起来，相邻的选择项之间用|分隔。但用圆括号会有一个副作用，使相关的匹配会被缓存，此时可用?:放在第一个选项前来消除这种副作用。</p><p>其中 <code>?:</code> 是<strong>非捕获元</strong>之一，还有两个非捕获元是 <code>?=</code> 和 <code>?!</code>，这两个还有更多的含义，前者为正向预查，在任何<strong>开始匹配圆括号</strong>内的正则表达式模式的位置来匹配搜索字符串，后者为负向预查，在任何开始不匹配该正则表达式模式的位置来匹配搜索字符串。</p><h2 id="反向引用"><a href="#反向引用" class="headerlink" title="反向引用"></a>反向引用</h2><p>对一个正则表达式模式或部分模式两边添加圆括号将导致相关匹配存储到一个临时缓冲区中，所捕获的每个子匹配都按照在正则表达式模式中从左到右出现的顺序存储。缓冲区编号从 1 开始，最多可存储 99 个捕获的子表达式。每个缓冲区都可以使用 <code>\n</code> 访问，其中 <code>n</code> 为一个标识特定缓冲区的一位或两位十进制数。</p><p>可以使用非捕获元字符 <code>?:</code>、<code>?=</code> 或 <code>?!</code> 来重写捕获，忽略对相关匹配的保存。</p><p>反向引用的最简单的、最有用的应用之一，是提供查找文本中两个相同的相邻单词的匹配项的能力。</p><p>例如：<code>(asd)\1</code>能匹配<code>asdasd</code></p><h2 id="所有元字符"><a href="#所有元字符" class="headerlink" title="所有元字符"></a>所有元字符</h2><table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td>\</td><td>将下一个字符标记为一个特殊字符、或一个原义字符、或一个 向后引用、或一个八进制转义符。例如，’n’ 匹配字符 “n”。’\n’ 匹配一个换行符。序列 ‘\‘ 匹配 “" 而 “(“ 则匹配 “(“。</td></tr><tr><td>^</td><td>匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 ‘\n’ 或 ‘\r’ 之后的位置。</td></tr><tr><td>$</td><td>匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性，$ 也匹配 ‘\n’ 或 ‘\r’ 之前的位置。</td></tr><tr><td>*</td><td>匹配前面的子表达式零次或多次。例如，zo* 能匹配 “z” 以及 “zoo”。* 等价于{0,}。</td></tr><tr><td>+</td><td>匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。</td></tr><tr><td>?</td><td>匹配前面的子表达式零次或一次。例如，”do(es)?” 可以匹配 “do” 或 “does” 。? 等价于 {0,1}。</td></tr><tr><td>{n}</td><td>n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。</td></tr><tr><td>{n,}</td><td>n 是一个非负整数。至少匹配n 次。例如，’o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。’o{1,}’ 等价于 ‘o+’。’o{0,}’ 则等价于 ‘o*’。</td></tr><tr><td>{n,m}</td><td>m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。例如，”o{1,3}” 将匹配 “fooooood” 中的前三个 o。’o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。</td></tr><tr><td>?</td><td>当该字符紧跟在任何一个其他限制符 (*, +, ?, {n}, {n,}, {n,m}) 后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串 “oooo”，’o+?’ 将匹配单个 “o”，而 ‘o+’ 将匹配所有 ‘o’。</td></tr><tr><td>.</td><td>匹配除换行符（\n、\r）之外的任何单个字符。要匹配包括 ‘\n’ 在内的任何字符，请使用像”<strong>(.|\n)</strong>“的模式。</td></tr><tr><td>(pattern)</td><td>匹配 pattern 并获取这一匹配。所获取的匹配可以从产生的 Matches 集合得到，在VBScript 中使用 SubMatches 集合，在JScript 中则使用 $0…$9 属性。要匹配圆括号字符，请使用 ‘(‘ 或 ‘)‘。</td></tr><tr><td>(?:pattern)</td><td>匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用 “或” 字符 (|) 来组合一个模式的各个部分是很有用。例如， ‘industr(?:y|ies) 就是一个比 ‘industry|industries’ 更简略的表达式。</td></tr><tr><td>(?=pattern)</td><td>正向肯定预查（look ahead positive assert），在任何匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，”Windows(?=95|98|NT|2000)”能匹配”Windows2000”中的”Windows”，但不能匹配”Windows3.1”中的”Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td></tr><tr><td>(?!pattern)</td><td>正向否定预查(negative assert)，在任何不匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如”Windows(?!95|98|NT|2000)”能匹配”Windows3.1”中的”Windows”，但不能匹配”Windows2000”中的”Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td></tr><tr><td>(?&lt;=pattern)</td><td>反向(look behind)肯定预查，与正向肯定预查类似，只是方向相反。例如，”`(?&lt;=95</td></tr><tr><td>(?&lt;!pattern)</td><td>反向否定预查，与正向否定预查类似，只是方向相反。例如”`(?&lt;!95</td></tr><tr><td>x|y</td><td>匹配 x 或 y。例如，’z|food’ 能匹配 “z” 或 “food”。’(z|f)ood’ 则匹配 “zood” 或 “food”。</td></tr><tr><td>[xyz]</td><td>字符集合。匹配所包含的任意一个字符。例如， ‘[abc]’ 可以匹配 “plain” 中的 ‘a’。</td></tr><tr><td>[^xyz]</td><td>负值字符集合。匹配未包含的任意字符。例如， <code>'[^abc]'</code> 可以匹配 “plain” 中的’p’、’l’、’i’、’n’。</td></tr><tr><td>[a-z]</td><td>字符范围。匹配指定范围内的任意字符。例如，’[a-z]’ 可以匹配 ‘a’ 到 ‘z’ 范围内的任意小写字母字符。</td></tr><tr><td>[^a-z]</td><td>负值字符范围。匹配任何不在指定范围内的任意字符。例如，’[^a-z]’ 可以匹配任何不在 ‘a’ 到 ‘z’ 范围内的任意字符。</td></tr><tr><td>\b</td><td>匹配一个单词边界，也就是指单词和空格间的位置。例如， ‘er\b’ 可以匹配”never” 中的 ‘er’，但不能匹配 “verb” 中的 ‘er’。</td></tr><tr><td>\B</td><td>匹配非单词边界。’er\B’ 能匹配 “verb” 中的 ‘er’，但不能匹配 “never” 中的 ‘er’。</td></tr><tr><td>\cx</td><td>匹配由 x 指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 ‘c’ 字符。</td></tr><tr><td>\d</td><td>匹配一个数字字符。等价于 [0-9]。</td></tr><tr><td>\D</td><td>匹配一个非数字字符。等价于 <code>[^0-9]</code>。</td></tr><tr><td>\f</td><td>匹配一个换页符。等价于 \x0c 和 \cL。</td></tr><tr><td>\n</td><td>匹配一个换行符。等价于 \x0a 和 \cJ。</td></tr><tr><td>\r</td><td>匹配一个回车符。等价于 \x0d 和 \cM。</td></tr><tr><td>\s</td><td>匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。</td></tr><tr><td>\S</td><td>匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。</td></tr><tr><td>\t</td><td>匹配一个制表符。等价于 \x09 和 \cI。</td></tr><tr><td>\v</td><td>匹配一个垂直制表符。等价于 \x0b 和 \cK。</td></tr><tr><td>\w</td><td>匹配字母、数字、下划线。等价于’[A-Za-z0-9_]’。</td></tr><tr><td>\W</td><td>匹配非字母、数字、下划线。等价于 ‘[^A-Za-z0-9_]’。</td></tr><tr><td>\xn</td><td>匹配 n，其中 n 为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，’\x41’ 匹配 “A”。’\x041’ 则等价于 ‘\x04’ &amp; “1”。正则表达式中可以使用 ASCII 编码。</td></tr><tr><td>\num</td><td>匹配 num，其中 num 是一个正整数。对所获取的匹配的引用。例如，’(.)\1’ 匹配两个连续的相同字符。</td></tr><tr><td>\n</td><td>标识一个八进制转义值或一个向后引用。如果 \n 之前至少 n 个获取的子表达式，则 n 为向后引用。否则，如果 n 为八进制数字 (0-7)，则 n 为一个八进制转义值。</td></tr><tr><td>\nm</td><td>标识一个八进制转义值或一个向后引用。如果 \nm 之前至少有 nm 个获得子表达式，则 nm 为向后引用。如果 \nm 之前至少有 n 个获取，则 n 为一个后跟文字 m 的向后引用。如果前面的条件都不满足，若 n 和 m 均为八进制数字 (0-7)，则 \nm 将匹配八进制转义值 nm。</td></tr><tr><td>\nml</td><td>如果 n 为八进制数字 (0-3)，且 m 和 l 均为八进制数字 (0-7)，则匹配八进制转义值 nml。</td></tr><tr><td>\un</td><td>匹配 n，其中 n 是一个用四个十六进制数字表示的 Unicode 字符。例如， \u00A9 匹配版权符号 (?)。</td></tr></tbody></table><h2 id="等价字符"><a href="#等价字符" class="headerlink" title="等价字符"></a>等价字符</h2><p><code>?</code>, <code>*</code>, <code>+</code>, <code>\d</code>, <code>\w</code> 都是等价字符<br><code>?</code>等价于匹配长度{0,1}<br><code>*</code>等价于匹配长度{0,}<br><code>+</code>等价于匹配长度{1,}<br><code>\d</code>等价于[0-9]<br><code>\w</code>等价于[A-Za-z_0-9]</p><h2 id="常用运算符与表达式"><a href="#常用运算符与表达式" class="headerlink" title="常用运算符与表达式"></a>常用运算符与表达式</h2><p><code>^</code> 开始<br><code>()</code> 域段<br><code>[]</code> 包含,默认是一个字符长度<br><code>[^]</code> 不包含,默认是一个字符长度<br><code>{n,m}</code> 匹配长度<br><code>.</code> 任何单个字符(. 字符点)<br><code>|</code> 或<br><code>\</code> 转义<br><code>$</code> 结尾<br><code>[A-Z]</code> 26个大写字母<br><code>[a-z]</code> 26个小写字母<br><code>[0-9]</code> 0至9数字<br><code>[A-Za-z0-9]</code> 26个大写字母、26个小写字母和0至9数字</p><h2 id="贪婪模式"><a href="#贪婪模式" class="headerlink" title="贪婪模式"></a>贪婪模式</h2><p><strong>*、+限定符都是贪婪的，因为它们会尽可能多的匹配文字，只有在它们的后面加上一个?就可以实现非贪婪或最小匹配。</strong></p><h2 id="字符簇"><a href="#字符簇" class="headerlink" title="字符簇"></a>字符簇</h2><p>略吧，目前作用不大</p><h2 id="实例应用"><a href="#实例应用" class="headerlink" title="实例应用"></a>实例应用</h2><ol><li><p>验证用户名和密码：（”<code>^[a-zA-Z]\w{5,15}$</code>“）正确格式：”<code>[A-Z][a-z]_[0-9]</code>“组成,并且第一个字必须为字母6~16位；</p></li><li><p>验证电话号码：（”<code>^(\\d{3,4}-)\\d{7,8}$</code>“）正确格式：xxx/xxxx-xxxxxxx/xxxxxxxx；</p></li><li><p>验证手机号码：”<code>^1[3|4|5|7|8][0-9]\\d{8}$</code>“；</p></li><li><p>验证身份证号（15位或18位数字）：”<code>\\d{14}[[0-9],0-9xX]</code>“；</p></li><li><p>验证Email地址：(“<code>^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\.\\w+([-.]\\w+)*$</code>“)；</p></li><li><p>只能输入由数字和26个英文字母组成的字符串：(“<code>^[A-Za-z0-9]+$</code>“) ;</p></li><li><p>整数或者小数：<code>^[0-9]+([.]{0,1}[0-9]+){0,1}$</code></p></li><li><p>只能输入数字：”<code>^[0-9]*$</code>“。</p></li><li><p>只能输入n位的数字：”<code>^\\d{n}$</code>“。</p></li><li><p>只能输入至少n位的数字：”<code>^\\d{n,}$</code>“。</p></li><li><p>只能输入m~n位的数字：”<code>^\\d{m,n}$</code>“。</p></li><li><p>只能输入零和非零开头的数字：”<code>^(0|[1-9][0-9]*)$</code>“。</p></li><li><p>只能输入有两位小数的正实数：”<code>^[0-9]+(.[0-9]{2})?$</code>“。</p></li><li><p>只能输入有1~3位小数的正实数：”<code>^[0-9]+(\.[0-9]{1,3})?$</code>“。</p></li><li><p>只能输入非零的正整数：<code>"^\+?[1-9][0-9]*$"</code>。</p></li><li><p>只能输入非零的负整数：<code>"^\-[1-9][0-9]*$"</code>。</p></li><li><p>只能输入长度为3的字符：”<code>^.{3}$</code>“。</p></li><li><p>只能输入由26个英文字母组成的字符串：”<code>^[A-Za-z]+$</code>“。</p></li><li><p>只能输入由26个大写英文字母组成的字符串：”<code>^[A-Z]+$</code>“。</p></li><li><p>只能输入由26个小写英文字母组成的字符串：”<code>^[a-z]+$</code>“。</p></li><li><p>验证是否含有<code>^%&amp;',;=?$\"</code>等字符：<code>"[^%&amp;',;=?$\x22]+"</code>。</p></li><li><p>只能输入汉字：”<code>^[\u4e00-\u9fa5]{0,}$</code>“。</p></li><li><p>验证URL：”<code>^http://([\\w-]+\.)+[\\w-]+(/[\\w-./?%&amp;=]*)?$</code>“。</p></li><li><p>验证一年的12个月：”<code>^(0?[1-9]|1[0-2])$</code>“正确格式为：”01”～”09”和”10”～”12”。</p></li><li><p>验证一个月的31天：”<code>^((0?[1-9])|((1|2)[0-9])|30|31)$</code>“正确格式为；”01”～”09”、”10”～”29”和“30”~“31”。</p></li><li><p>获取日期正则表达式：<code>\d{4}[年|\-|\.]\d{1-12}[月|\-|\.]\d{1-31}日?</code></p><p>评注：可用来匹配大多数年月日信息。</p></li><li><p>匹配双字节字符(包括汉字在内)：<code>[^\x00-\xff]</code></p><p>评注：可以用来计算字符串的长度（一个双字节字符长度计2，ASCII字符计1）</p></li><li><p>匹配空白行的正则表达式：<code>\n\s*\r</code></p><p>评注：可以用来删除空白行</p></li><li><p>匹配HTML标记的正则表达式：<code>&lt;(\S*?)[^&gt;]*&gt;.*?&lt;/&gt;|&lt;.*? /&gt;</code></p><p>评注：网上流传的版本太糟糕，上面这个也仅仅能匹配部分，对于复杂的嵌套标记依旧无能为力</p></li><li><p>匹配首尾空白字符的正则表达式：<code>^\s*|\s*$</code></p><p>评注：可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式</p></li><li><p>匹配网址URL的正则表达式：<code>[a-zA-z]+://[^\s]*</code></p><p>评注：网上流传的版本功能很有限，上面这个基本可以满足需求</p></li><li><p>匹配帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：<code>^[a-zA-Z][a-zA-Z0-9_]{4,15}$</code></p><p>评注：表单验证时很实用</p></li><li><p>匹配腾讯QQ号：<code>[1-9][0-9]\{4,\}</code></p><p>评注：腾讯QQ号从10 000 开始</p></li><li><p>匹配中国邮政编码：<code>[1-9]\\d{5}(?!\d)</code></p><p>评注：中国邮政编码为6位数字</p></li><li><p>匹配ip地址：<code>((2[0-4]\\d|25[0-5]|[01]?\\d\\d?)\.){3}(2[0-4]\\d|25[0-5]|[01]?\\d\\d?)</code>。</p></li></ol><h2 id="C-示例"><a href="#C-示例" class="headerlink" title="C++示例"></a>C++示例</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;regex.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> status ,i;</span><br><span class="line"><span class="keyword">int</span> cflags = REG_EXTENDED;</span><br><span class="line"><span class="keyword">regmatch_t</span> pmatch[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">size_t</span> nmatch = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">regex_t</span> reg;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> * pattern = <span class="string">"^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*.\\w+([-.]\\w+)*$"</span>;</span><br><span class="line"><span class="keyword">char</span> * buf = <span class="string">"chenjiayi@126.com"</span>;</span><br><span class="line">regcomp(&amp;reg,pattern,cflags);<span class="comment">//编译正则模式</span></span><br><span class="line">status = regexec(&amp;reg,buf,nmatch,<span class="number">0</span>);<span class="comment">//执行正则表达式和缓存的比较</span></span><br><span class="line"><span class="keyword">if</span>(status == REG_NOMATCH)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"No match\n"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">0</span> == status)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"比较成功:"</span>);</span><br><span class="line"><span class="keyword">for</span>(i = pmatch[<span class="number">0</span>].rm_so;i&lt;pmatch[<span class="number">0</span>].rm_eo;++i)<span class="built_in">putchar</span>(buf[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">}</span><br><span class="line">regfree(&amp;reg);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>博客来源：<a href="https://blog.csdn.net/chenjiayi_yun/article/details/43375201" target="_blank" rel="noopener">https://blog.csdn.net/chenjiayi_yun/article/details/43375201</a></p></blockquote><blockquote><p>菜鸟教程：<a href="http://www.runoob.com/regexp/regexp-tutorial.html" target="_blank" rel="noopener">http://www.runoob.com/regexp/regexp-tutorial.html</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;正则表达式(Regular Expression，简称 RegExp)是一种&lt;strong&gt;文本模式&lt;/strong&gt;，包括普通字符（例如，a 到 z 之间的字母）和特殊字符（称为”元字符”）。它使用&lt;strong&gt;单个字符串&lt;/strong&gt;来描述、匹配&lt;strong&gt;一系列&lt;/strong&gt;匹配某个句法规则的字符串。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
      <category term="讲解" scheme="http://blog.iwxyi.com/categories/Code/%E8%AE%B2%E8%A7%A3/"/>
    
    
      <category term="RegExp" scheme="http://blog.iwxyi.com/tags/RegExp/"/>
    
  </entry>
  
  <entry>
    <title>汇编MASM-学习笔记</title>
    <link href="http://blog.iwxyi.com/2018/11/19/%E6%B1%87%E7%BC%96MASM-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://blog.iwxyi.com/2018/11/19/汇编MASM-学习笔记/</id>
    <published>2018-11-19T12:18:00.000Z</published>
    <updated>2019-10-12T12:33:03.910Z</updated>
    
    <content type="html"><![CDATA[<h1 id="运行-DOSBox"><a href="#运行-DOSBox" class="headerlink" title="运行 DOSBox"></a>运行 DOSBox</h1><ol><li><code>mount c: d:\masm</code></li><li><code>C:</code></li><li><code>masm test.asm</code> 回车3次</li><li><code>link test.obj</code> 回车4次</li><li><code>debug test.exe</code></li></ol><a id="more"></a><ul><li><code>-r</code> 运行</li><li><code>-t</code> 继续</li><li><code>-t 10</code> 运行10条指令</li><li><code>-d</code> 内存</li><li><code>-u</code> 源码</li><li><code>-p</code> 跳过（尤其是库函数）</li><li><code>-q</code> 退出</li></ul><h1 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h1><ul><li><code>assume</code> 声明</li><li><code>mov</code> 复制内存 <code>mov ax, [bx]</code></li><li><code>inc</code> 加一 <code>inc ax</code></li><li><code>dec</code> 减一</li><li><code>jmp</code> 跳转 <code>jmp loop1</code></li><li><code>cmp</code> 比较大小 <code>cmp ax, bx</code></li><li><code>add</code> 增加某数 <code>add ax, 10</code></li></ul><h2 id="其他指令"><a href="#其他指令" class="headerlink" title="其他指令"></a>其他指令</h2><ul><li><code>ADC</code> 带进位加法</li><li><code>LEA dx, [0000]</code>  相当于<code>MOV</code>字符串</li></ul><p>?                               比较大小</p><p><code>cmp cx, 0</code> 比较结果执行下面的语句</p><ul><li><code>ja</code> &gt;    above</li><li><code>jb</code> &lt;    blow</li><li><code>jbe</code> &lt;=</li><li><code>jae</code> &gt;=</li><li><code>jz</code>   == （相减为 zero）</li><li><code>jnz</code> !=</li></ul><h1 id="库函数"><a href="#库函数" class="headerlink" title="库函数"></a>库函数</h1><ul><li><code>INT 21</code> <ul><li><code>MOV AH 0A</code> 时：接收一个用户输入到 <code>ds[dx]</code></li><li><code>MOV AH 4C</code> 时：退出程序，返回操作系统</li></ul></li></ul><h2 id="寄存器拆开"><a href="#寄存器拆开" class="headerlink" title="寄存器拆开"></a>寄存器拆开</h2><p>AX = AH + AL<br>只有 AX BX CX DX 这四个可以拆开用</p><h1 id="常用代码块"><a href="#常用代码块" class="headerlink" title="常用代码块"></a>常用代码块</h1><h2 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">assume cs:code, ds:data1</span><br><span class="line">mov ax, data1</span><br></pre></td></tr></tbody></table></figure><h2 id="变量加一"><a href="#变量加一" class="headerlink" title="变量加一"></a>变量加一</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov al, [bx] ; 数据段寄存器DS 到 寄存器</span><br><span class="line">inc al       ; 增加 1</span><br><span class="line">mov [bx], al ; 寄存器 到 DS</span><br></pre></td></tr></tbody></table></figure><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mov cx, 0</span><br><span class="line"></span><br><span class="line">loop1:</span><br><span class="line">    inc cx</span><br><span class="line">    cmp cx, 10</span><br><span class="line">    jb loop1</span><br></pre></td></tr></tbody></table></figure><h3 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">while</span> (i &gt;= <span class="number">0</span>) {</span><br><span class="line">    <span class="comment">// P1</span></span><br><span class="line">    i--;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mov ax, 10</span><br><span class="line"></span><br><span class="line">loop1:</span><br><span class="line">cmp ax, 0</span><br><span class="line">jb next</span><br><span class="line">;P1</span><br><span class="line">dec ax</span><br><span class="line">jmp loop1</span><br><span class="line"></span><br><span class="line">next:</span><br></pre></td></tr></tbody></table></figure><h2 id="接收用户输入"><a href="#接收用户输入" class="headerlink" title="接收用户输入"></a>接收用户输入</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MOV AX, 076A</span><br><span class="line">MOV DS, AX</span><br><span class="line">MOV DX, 0000</span><br><span class="line">MOV AH, 0A</span><br><span class="line">INT 21</span><br></pre></td></tr></tbody></table></figure><h2 id="清屏"><a href="#清屏" class="headerlink" title="清屏"></a>清屏</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">    mov ax,cs</span><br><span class="line">    mov ss,ax</span><br><span class="line">    mov sp,0x7c00  ;set stack and sp</span><br><span class="line"></span><br><span class="line">    mov ah,0x06</span><br><span class="line">    mov al,0   ; 准备清窗口</span><br><span class="line"></span><br><span class="line">    mov ch,0   ; 左上角的行号</span><br><span class="line">    mov cl,0   ; 左上角的列号</span><br><span class="line">    mov dh,25  ; 右下角的行号</span><br><span class="line">    mov dl,80  ; 右下角的行号</span><br><span class="line">    mov bh,0x07; 属性为蓝底白字</span><br><span class="line">    int 0x10   ; 执行清空操作</span><br><span class="line"></span><br><span class="line">@1:  </span><br><span class="line">    jmp @1</span><br><span class="line"></span><br><span class="line">    times 510-($-$$) db 0</span><br><span class="line">    db 0x55,0xaa</span><br></pre></td></tr></tbody></table></figure><h2 id="画白线"><a href="#画白线" class="headerlink" title="画白线"></a>画白线</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">mov al, 0x13    ; VGA320×200×8bit 显示模式</span><br><span class="line">mov ah, 0x00</span><br><span class="line">int 0x10</span><br><span class="line"></span><br><span class="line">mov ax, 0x0a000 ; 往显存中放入点数据</span><br><span class="line">mov ds, ax</span><br><span class="line">mov dl, 30</span><br><span class="line">mov ax, 0</span><br><span class="line"></span><br><span class="line">f:</span><br><span class="line">mov bx, ax</span><br><span class="line">mov [ds:bx], dl</span><br><span class="line">inc ax</span><br><span class="line">cmp ax, 50</span><br><span class="line">ja io</span><br><span class="line">jmp f</span><br><span class="line"></span><br><span class="line">io:</span><br></pre></td></tr></tbody></table></figure><h2 id="画线函数"><a href="#画线函数" class="headerlink" title="画线函数"></a>画线函数</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">org 0x7c00</span><br><span class="line"></span><br><span class="line">mov ax, 80; y</span><br><span class="line">mov bx, 50; x1</span><br><span class="line">mov cx, 150; x2</span><br><span class="line"></span><br><span class="line">call drawline; 运行画线</span><br><span class="line"></span><br><span class="line">; y:ax, x1:bx, x2:cx</span><br><span class="line">drawline:</span><br><span class="line">mov dx, 320; 屏幕宽是320</span><br><span class="line">mul dx; dx *= ax 16位中AX为被乘数，8位中AL为被乘数</span><br><span class="line">sub cx, bx; cx = x2-x1 线的宽度</span><br><span class="line">add bx, ax; 横偏移量+横纵偏移量 = 偏移位置</span><br><span class="line">mov dl, 1; 色号</span><br><span class="line">loop0:</span><br><span class="line">mov [ds:bx], dl ; 填充颜色</span><br><span class="line">inc bx; 偏移位置+1</span><br><span class="line">dec cx; 循环次数-1</span><br><span class="line">jnz loop0; 受到上面的DEC的ZF标志位</span><br><span class="line">RET</span><br></pre></td></tr></tbody></table></figure><h2 id="画竖线"><a href="#画竖线" class="headerlink" title="画竖线"></a>画竖线</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">;****************************************</span><br><span class="line">;y1-&gt;ax, y2-&gt;cx, x-&gt;bx</span><br><span class="line">;****************************************</span><br><span class="line">DrawVerticalLine:</span><br><span class="line">mov dx, 320 ; w = 320</span><br><span class="line">mov bp, dx</span><br><span class="line">sub cx, ax  ; y1 = y2-y1  循环次数</span><br><span class="line">mul dx; ax = w * y1 纵偏移量</span><br><span class="line">add bx, ax  ; 横纵偏移量</span><br><span class="line">mov dl, 1</span><br><span class="line">x1: mov [ds:bx], dl</span><br><span class="line">add bx, bp</span><br><span class="line">dec cx</span><br><span class="line">jnz x1</span><br><span class="line">ret</span><br></pre></td></tr></tbody></table></figure><h2 id="设置颜色"><a href="#设置颜色" class="headerlink" title="设置颜色"></a>设置颜色</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mov al, 1      ; 颜色号</span><br><span class="line">mov dx, 0x3c8</span><br><span class="line">out dx, al</span><br><span class="line"></span><br><span class="line">mov al, 100    ; R / 4 = 25</span><br><span class="line">mov dx, 0x3c9</span><br><span class="line">out dx, al</span><br><span class="line"></span><br><span class="line">mov al, 0      ; G</span><br><span class="line">out dx, al</span><br><span class="line"></span><br><span class="line">mov al, 0      ; B</span><br><span class="line">out dx, al</span><br></pre></td></tr></tbody></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">;rgb db 100, 0, 0,  0, 100, 0,  0, 0, 100</span><br><span class="line">rgb db 100, 0, 0,</span><br><span class="line">    db 0, 100, 0,</span><br><span class="line">    db 0, 0, 100</span><br><span class="line"></span><br><span class="line">mov ax, 0</span><br><span class="line">mov ds, ax</span><br><span class="line">mov si, rgb</span><br><span class="line">mov [ds:si], ... ; 偏移地址，si为下标</span><br></pre></td></tr></tbody></table></figure><h2 id="进栈出栈保存变量"><a href="#进栈出栈保存变量" class="headerlink" title="进栈出栈保存变量"></a>进栈出栈保存变量</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">push ax</span><br><span class="line">mov  ax, 0</span><br><span class="line">pop  ax</span><br></pre></td></tr></tbody></table></figure><h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><p>每隔18分之一秒运行一次，多个任务的话会被覆盖掉</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mov word [ds:0x20],int_timer0</span><br></pre></td></tr></tbody></table></figure><h2 id="打印字符"><a href="#打印字符" class="headerlink" title="打印字符"></a>打印字符</h2><p>函数：在 <code>ex:bx</code> 的位置显示一个 ‘A’</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">int_timer0:</span><br><span class="line">mov byte [es:bx],'A'</span><br><span class="line">mov byte [es:bx+1],0x0a</span><br><span class="line">inc bx   ; 自增两次到下次打印的字符</span><br><span class="line">inc bx</span><br><span class="line"></span><br><span class="line">mov al,0x20</span><br><span class="line">mov dx,0x20</span><br><span class="line">out dx,al;EOI=0 中断</span><br><span class="line">iret</span><br></pre></td></tr></tbody></table></figure><h2 id="获取按键输入"><a href="#获取按键输入" class="headerlink" title="获取按键输入"></a>获取按键输入</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">int_key:</span><br><span class="line">mov dx, 0x20  ; 下一个键值可以进来了（没有这一段就只能输入一次按键了）</span><br><span class="line">mov al, 0x61</span><br><span class="line">out dx, al</span><br><span class="line"></span><br><span class="line">mov dx, 0x60  ; 读取一次按键</span><br><span class="line">in al, dx</span><br><span class="line"></span><br><span class="line">cmp al, 0x9e</span><br><span class="line">jz func0</span><br><span class="line"></span><br><span class="line">func0:</span><br></pre></td></tr></tbody></table></figure><h2 id="显示一个数字"><a href="#显示一个数字" class="headerlink" title="显示一个数字"></a>显示一个数字</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;运行-DOSBox&quot;&gt;&lt;a href=&quot;#运行-DOSBox&quot; class=&quot;headerlink&quot; title=&quot;运行 DOSBox&quot;&gt;&lt;/a&gt;运行 DOSBox&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;mount c: d:\masm&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C:&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;masm test.asm&lt;/code&gt; 回车3次&lt;/li&gt;
&lt;li&gt;&lt;code&gt;link test.obj&lt;/code&gt; 回车4次&lt;/li&gt;
&lt;li&gt;&lt;code&gt;debug test.exe&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
      <category term="学习笔记" scheme="http://blog.iwxyi.com/categories/Code/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="汇编" scheme="http://blog.iwxyi.com/tags/%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>贪心算法-讲解</title>
    <link href="http://blog.iwxyi.com/2018/11/04/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
    <id>http://blog.iwxyi.com/2018/11/04/贪心算法/</id>
    <published>2018-11-04T12:46:00.000Z</published>
    <updated>2019-10-12T12:55:00.994Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ACM-贪心算法"><a href="#ACM-贪心算法" class="headerlink" title="ACM 贪心算法"></a>ACM 贪心算法</h1><p>贪心算法（又称贪婪算法）是指，在对问题求解时，总是做出在<strong>当前看来是最好的选择</strong>。也就是说，不从整体最优上加以考虑，他所做出的是在某种意义上的<strong>局部最优解</strong>。</p><a id="more"></a><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="钱币找零问题"><a href="#钱币找零问题" class="headerlink" title="钱币找零问题"></a>钱币找零问题</h3><p>假设1元、2元、5元、10元、20元、50元、100元的纸币分别有c0, c1, c2, c3, c4, c5, c6张。现在要用这些钱来支付K元，至少要用多少张纸币？</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> Count[N]={<span class="number">3</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">5</span>};</span><br><span class="line"><span class="keyword">int</span> Value[N]={<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">20</span>,<span class="number">50</span>,<span class="number">100</span>};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> money;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;money);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=N<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">int</span> c=min(money/Value[i],Count[i]);</span><br><span class="line">money=money-c*Value[i];</span><br><span class="line">num+=c;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(num!=<span class="number">-1</span>) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, num);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="可分割背包问题"><a href="#可分割背包问题" class="headerlink" title="可分割背包问题"></a>可分割背包问题</h3><p>有一个背包，背包容量是M，有N个物品，要求尽可能让装入背包中的物品总价值最大，但不能超过总容量，物品可以只取一部分。</p><p><strong>输入</strong><br>第一行输入一个正整数n（1&lt;=n&lt;=5）,表示有n组测试数据；<br>随后有n测试数据，每组测试数据的第一行有两个正整数s，m（1&lt;=s&lt;=10）;s表示有s个物品。接下来的s行每行有两个正整数v，w，分别表示物品的单位价值和总质量。<br><strong>输出</strong><br>输出每组测试数据中背包内的物品的价值和，每次输出占一行。<br><strong>样例输入</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">3 15</span><br><span class="line">5 10</span><br><span class="line">2 8</span><br><span class="line">3 9</span><br></pre></td></tr></tbody></table></figure><p><strong>样例输出</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">65</span><br></pre></td></tr></tbody></table></figure><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 10000</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> n, m;</span><br><span class="line">        <span class="keyword">int</span> v[MAXN], w[MAXN];</span><br><span class="line"></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;v[i], &amp;w[i]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n - i - <span class="number">1</span>; j++)</span><br><span class="line">                <span class="keyword">if</span> (v[j] &lt; v[j + <span class="number">1</span>])</span><br><span class="line">                {</span><br><span class="line">                    <span class="keyword">int</span> temp = v[j];</span><br><span class="line">                    v[j] = v[j + <span class="number">1</span>];</span><br><span class="line">                    v[j + <span class="number">1</span>] = temp;</span><br><span class="line"></span><br><span class="line">                    temp = w[j];</span><br><span class="line">                    w[j] = w[j + <span class="number">1</span>];</span><br><span class="line">                    w[j + <span class="number">1</span>] = temp;</span><br><span class="line">                }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        {</span><br><span class="line">        <span class="keyword">if</span> (w[i] &gt;= m)</span><br><span class="line">        {</span><br><span class="line">        ans += m * v[i];</span><br><span class="line">        m = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        {</span><br><span class="line">        ans += w[i] * v[i];</span><br><span class="line">        m -= w[i];</span><br><span class="line">        }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; j++)</span><br><span class="line">        <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>])</span><br><span class="line">        {</span><br><span class="line">            temp = arr[j];</span><br><span class="line">            arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">            arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">        }</span><br></pre></td></tr></tbody></table></figure><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n<span class="number">-1</span>; i++)</span><br><span class="line">{</span><br><span class="line">    min = i;<span class="comment">//查找最小值</span></span><br><span class="line">    <span class="keyword">for</span>(j = i+<span class="number">1</span>; j&lt;n; j++)</span><br><span class="line">        <span class="keyword">if</span>(A[min] &gt; A[j])</span><br><span class="line">            min = j;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(min != i)</span><br><span class="line">        swap(&amp;A[min], &amp;A[i]);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="其他排序"><a href="#其他排序" class="headerlink" title="其他排序"></a>其他排序</h3><p>已经帮你们百度好的<a href="https://www.cnblogs.com/maluning/p/7944809.html" target="_blank" rel="noopener">链接</a></p><p>建议用C++的 algorithm 头文件中的 sort 函数，也是ACM中最常用的排序算法。</p><hr><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>贪心算法不是对所有问题都能得到整体最优解，关键是贪心策略的选择，选择的贪心策略必须具备无后效性，即某个状态以前的过程<strong>不会影响以后的状态</strong>，只与当前状态有关。</p><h3 id="⑴贪心策略：总价值最大"><a href="#⑴贪心策略：总价值最大" class="headerlink" title="⑴贪心策略：总价值最大"></a>⑴贪心策略：总价值最大</h3><p>反例：</p><p>W=30<br>物品：A B C<br>重量：28 12 12<br>价值：30 20 20</p><p>根据策略，首先选取物品A，接下来就无法再选取了，可是，选取B、C则更好。</p><h3 id="⑵贪心策略：重量最小"><a href="#⑵贪心策略：重量最小" class="headerlink" title="⑵贪心策略：重量最小"></a>⑵贪心策略：重量最小</h3><p>它的反例与第一种策略的反例差不多。</p><h3 id="⑶贪心策略：单位量价值最大"><a href="#⑶贪心策略：单位量价值最大" class="headerlink" title="⑶贪心策略：单位量价值最大"></a>⑶贪心策略：单位量价值最大</h3><p>反例：</p><p>W=30<br>物品：A B C<br>重量：28 20 10<br>价值：28 20 10</p><p>根据策略，三种物品单位重量价值一样，程序无法依据现有策略作出判断，如果选择A，则答案错误。</p><blockquote><p>【注意：如果物品可以分割为任意大小，那么策略3可得最优解】</p></blockquote><h3 id="4-DP问题（动态规划）"><a href="#4-DP问题（动态规划）" class="headerlink" title="(4)DP问题（动态规划）"></a>(4)DP问题（动态规划）</h3><p>W=40<br>物品：A B C<br>重量：25 20 15<br>价值：25 20 15</p><p>这需要DP。</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="今年暑假不AC（节目表）"><a href="#今年暑假不AC（节目表）" class="headerlink" title="今年暑假不AC（节目表）"></a>今年暑假不AC（节目表）</h3><p>“今年暑假不AC？”<br>“是的。”<br>“那你干什么呢？”<br>“看世界杯呀，笨蛋！”<br>“@#$%^&amp;*%…”</p><p>确实如此，世界杯来了，球迷的节日也来了，估计很多ACMer也会抛开电脑，奔向电视了。<br>作为球迷，一定想看尽量多的完整的比赛，当然，作为新时代的好青年，你一定还会看一些其它的节目，比如新闻联播（永远不要忘记关心国家大事）、非常6+7、超级女生，以及王小丫的《开心辞典》等等，假设你已经知道了所有你喜欢看的电视节目的转播时间表，你会合理安排吗？（目标是能看尽量多的完整节目）</p><p><strong>Input</strong></p><p>输入数据包含多个测试实例，每个测试实例的第一行只有一个整数n(n&lt;=100)，表示你喜欢看的节目的总数，然后是n行数据，每行包括两个数据Ti_s,Ti_e (1&lt;=i&lt;=n)，分别表示第i个节目的开始和结束时间，为了简化问题，每个时间都用一个正整数表示。n=0表示输入结束，不做处理。</p><p><strong>Output</strong></p><p>对于每个测试实例，输出能完整看到的电视节目的个数，每个测试实例的输出占一行。</p><p><strong>Sample Input</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">12 </span><br><span class="line">1 3 </span><br><span class="line">3 4 </span><br><span class="line">0 7 </span><br><span class="line">3 8 </span><br><span class="line">15 19 </span><br><span class="line">15 20 </span><br><span class="line">10 15 </span><br><span class="line">8 18 </span><br><span class="line">6 12 </span><br><span class="line">5 10 </span><br><span class="line">4 14 </span><br><span class="line">2 9 </span><br><span class="line">0</span><br></pre></td></tr></tbody></table></figure><p><strong>Sample Output</strong> </p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></tbody></table></figure><h4 id="代码（HDU-2037）"><a href="#代码（HDU-2037）" class="headerlink" title="代码（HDU 2037）"></a>代码（HDU 2037）</h4><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i, n, j, tmp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) != EOF &amp;&amp; n != <span class="number">0</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">1</span>, a[<span class="number">100</span>] = {<span class="number">0</span>}, b[<span class="number">100</span>] = {<span class="number">0</span>};</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;a[i], &amp;b[i]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; (n - <span class="number">1</span>); i++)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; (n - <span class="number">1</span> - i); j++)</span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">if</span> (b[j] &gt; b[j + <span class="number">1</span>])</span><br><span class="line">                {</span><br><span class="line">                    tmp = a[j];</span><br><span class="line">                    a[j] = a[j + <span class="number">1</span>];</span><br><span class="line">                    a[j + <span class="number">1</span>] = tmp;</span><br><span class="line"></span><br><span class="line">                    tmp = b[j];</span><br><span class="line">                    b[j] = b[j + <span class="number">1</span>];</span><br><span class="line">                    b[j + <span class="number">1</span>] = tmp;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> time = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">if</span> (a[i] &gt;= b [time])</span><br><span class="line">            {</span><br><span class="line">                time = i;</span><br><span class="line">                count++;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, count);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="阶乘之和"><a href="#阶乘之和" class="headerlink" title="阶乘之和"></a>阶乘之和</h3><p><strong>描述</strong><br>给你一个非负数整数n，判断n是不是一些数（这些数不允许重复使用，且为正数）的阶乘之和，如9=1！+2!+3!，如果是，则输出Yes，否则输出No；</p><p><strong>输入</strong><br>第一行有一个整数0&lt;m&lt;100,表示有m组测试数据；<br>每组测试数据有一个正整数n&lt;1000000;<br><strong>输出</strong><br>如果符合条件，输出Yes，否则输出No;<br><strong>样例输入</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">29</span><br><span class="line">10</span><br></pre></td></tr></tbody></table></figure><p><strong>样例输出</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Yes</span><br><span class="line">No</span><br></pre></td></tr></tbody></table></figure><h3 id="喷水装置（一）"><a href="#喷水装置（一）" class="headerlink" title="喷水装置（一）"></a>喷水装置（一）</h3><p><strong>描述</strong><br>现有一块草坪，长为20米，宽为2米，要在横中心线上放置半径为Ri的喷水装置，每个喷水装置的效果都会让以它为中心的半径为实数Ri(0&lt;Ri&lt;15)的圆被湿润，这有充足的喷水装置i（1&lt;i&lt;600)个，并且一定能把草坪全部湿润，你要做的是：选择尽量少的喷水装置，把整个草坪的全部湿润。</p><p><strong>输入</strong><br>第一行m表示有m组测试数据<br>每一组测试数据的第一行有一个整数数n，n表示共有n个喷水装置，随后的一行，有n个实数ri，ri表示该喷水装置能覆盖的圆的半径。</p><p><strong>输出</strong><br>输出所用装置的个数</p><p><strong>样例输入</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">5</span><br><span class="line">2 3.2 4 4.5 6 </span><br><span class="line">10</span><br><span class="line">1 2 3 1 2 1.2 3 1.1 1 2</span><br></pre></td></tr></tbody></table></figure><p><strong>样例输出</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">5</span><br></pre></td></tr></tbody></table></figure><h3 id="gt-喷水装置（二）"><a href="#gt-喷水装置（二）" class="headerlink" title="> 喷水装置（二）"></a>&gt; 喷水装置（二）</h3><p>改成二维，输入装置个数n、草坪宽 w、高 h（实数），以及每个喷水装置的横坐标和半径。其余题意同上一题。</p><h3 id="过河问题"><a href="#过河问题" class="headerlink" title="过河问题"></a>过河问题</h3><p><strong>描述</strong><br>在漆黑的夜里，N位旅行者来到了一座狭窄而且没有护栏的桥边。如果不借助手电筒的话，大家是无论如何也不敢过桥去的。不幸的是，N个人一共只带了一只手电筒，而桥窄得只够让两个人同时过。如果各自单独过桥的话，N人所需要的时间已知；而如果两人同时过桥，所需要的时间就是走得比较慢的那个人单独行动时所需的时间。问题是，如何设计一个方案，让这N人尽快过桥。 </p><p><strong>输入</strong><br>第一行是一个整数T(1&lt;=T&lt;=20)表示测试数据的组数<br>每组测试数据的第一行是一个整数N(1&lt;=N&lt;=1000)表示共有N个人要过河<br>每组测试数据的第二行是N个整数Si,表示此人过河所需要花时间。(0&lt;Si&lt;=100)<br><strong>输出</strong><br>输出所有人都过河需要用的最少时间<br><strong>样例输入</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">4</span><br><span class="line">1 2 5 10</span><br></pre></td></tr></tbody></table></figure><p><strong>样例输出</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">17</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ACM-贪心算法&quot;&gt;&lt;a href=&quot;#ACM-贪心算法&quot; class=&quot;headerlink&quot; title=&quot;ACM 贪心算法&quot;&gt;&lt;/a&gt;ACM 贪心算法&lt;/h1&gt;&lt;p&gt;贪心算法（又称贪婪算法）是指，在对问题求解时，总是做出在&lt;strong&gt;当前看来是最好的选择&lt;/strong&gt;。也就是说，不从整体最优上加以考虑，他所做出的是在某种意义上的&lt;strong&gt;局部最优解&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
      <category term="讲解" scheme="http://blog.iwxyi.com/categories/Code/%E8%AE%B2%E8%A7%A3/"/>
    
    
      <category term="算法" scheme="http://blog.iwxyi.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Bat常用脚本命令</title>
    <link href="http://blog.iwxyi.com/2018/09/01/Bat%E5%B8%B8%E7%94%A8%E8%84%9A%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
    <id>http://blog.iwxyi.com/2018/09/01/Bat常用脚本命令/</id>
    <published>2018-09-01T12:40:00.000Z</published>
    <updated>2019-10-12T12:41:10.078Z</updated>
    
    <content type="html"><![CDATA[<p><strong>run.bat—打开百度</strong></p><figure class="highlight bat"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">path</span>=<span class="variable">%path%</span>; C:\Program Files (x86)\Internet Explorer\</span><br><span class="line"><span class="built_in">start</span> iexplore http://www.baidu.com</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><p><strong>将c盘下所有文件名输出到a.txt中，如果没有a文件，则在bat同一目录下创建一个</strong></p><figure class="highlight bat"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dir</span> c:\*.* &gt;a.txt</span><br></pre></td></tr></tbody></table></figure><p><strong>执行另一个批处理文件</strong></p><figure class="highlight bat"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> c:\code\run.bat</span><br></pre></td></tr></tbody></table></figure><p><strong>echo回显</strong></p><figure class="highlight bat"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off      表示在此语句后所有运行的命令都不显示命令行本身 </span><br><span class="line"><span class="built_in">cd</span> code          进入code文件夹</span><br><span class="line"><span class="built_in">echo</span> enter code directory     显示enter code directory</span><br><span class="line"><span class="keyword">call</span> run.bat</span><br></pre></td></tr></tbody></table></figure><p><strong>增加入参</strong></p><figure class="highlight bat"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"> <span class="built_in">type</span> %<span class="number">1</span> </span><br><span class="line"> <span class="built_in">type</span> %<span class="number">2</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>cmd为 run.bat a.txt b.txt<br>控制台会显示出a和b的文件内容</p></blockquote><p><strong>for循环的使用</strong></p><figure class="highlight bat"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bat脚本</span><br><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="keyword">for</span> <span class="variable">%%t</span> <span class="keyword">in</span> (*.bat *.txt) <span class="keyword">do</span> <span class="built_in">type</span> <span class="variable">%%t</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>注意1，打印的是bat和txt文件的内容<br>注意2，此bat放在需打印文件内容的文件一个目录层级下</p></blockquote><figure class="highlight bat"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="keyword">FOR</span> /L <span class="variable">%%i</span> <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">20</span>) <span class="keyword">DO</span> <span class="built_in">echo</span> <span class="variable">%%i</span></span><br></pre></td></tr></tbody></table></figure><p><strong>if/else判断语句的使用</strong></p><figure class="highlight bat"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">bat脚本</span><br><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="keyword">if</span> {<span class="variable">%1}=={%</span><span class="number">2</span>} (</span><br><span class="line"><span class="built_in">echo</span> eq l.</span><br><span class="line">) <span class="keyword">else</span> (</span><br><span class="line"><span class="built_in">echo</span> <span class="keyword">not</span> eq l.</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><p>cmd输入run.bat 1 2<br>结果为 not eq 1</p><p><strong>在一个批处理文件内最多可以使用10个替换参数(%0到%9)</strong></p><figure class="highlight bat"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">exist</span> a.txt (</span><br><span class="line">    <span class="built_in">echo</span> This is a.txt</span><br><span class="line">    <span class="built_in">type</span> a.txt</span><br><span class="line">)<span class="keyword">else</span> (</span><br><span class="line">    <span class="built_in">echo</span> a.txt missing.</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><p><strong>判断当前目录下是否有a.txt</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@ECHO OFF</span><br><span class="line">IF EXIST D:\*.XLS () else (GOTO fail)</span><br><span class="line">PAUSE </span><br><span class="line">:fail</span><br><span class="line">ECHO 没找到文件</span><br></pre></td></tr></tbody></table></figure><p><strong>删除文件</strong></p><figure class="highlight bat"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">del</span> a.txt</span><br></pre></td></tr></tbody></table></figure><blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; 注意：指定路径会删除该路径下所有文件</span><br><span class="line">&gt;</span><br></pre></td></tr></tbody></table></figure></blockquote><p><strong>移动、拷贝文件、文件夹</strong></p><figure class="highlight bat"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">move</span> c:\a.txt c:\code\a.txt </span><br><span class="line"></span><br><span class="line"><span class="built_in">copy</span> c:\code\a.txt c:\a.txt </span><br><span class="line"></span><br><span class="line"><span class="built_in">rd</span> c:\code\abc\abc   <span class="built_in">REM</span> 删除非空文件夹</span><br></pre></td></tr></tbody></table></figure><p><strong>GOTO语句</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@ECHO OFF</span><br><span class="line">GOTO SECOND</span><br><span class="line">:FIRST</span><br><span class="line">echo I AM FIRST</span><br><span class="line">:SECOND</span><br><span class="line">echo I AM SECOND</span><br></pre></td></tr></tbody></table></figure><p><strong>choice/errorlevel的用法</strong></p><figure class="highlight bat"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off </span><br><span class="line">choice /C <span class="number">123</span> /M "RUN1,RUN2,RUN3"</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">errorlevel</span> <span class="number">3</span> <span class="keyword">goto</span> RUN3</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">errorlevel</span> <span class="number">2</span> <span class="keyword">goto</span> RUN2 </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">errorlevel</span> <span class="number">1</span> <span class="keyword">goto</span> RUN1 </span><br><span class="line"></span><br><span class="line">:RUN1  </span><br><span class="line"><span class="function">c:\<span class="title">code</span>\<span class="title">RUN1</span> </span></span><br><span class="line"><span class="function"><span class="title">goto</span> <span class="title">RUN3</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">:<span class="title">RUN2</span></span></span><br><span class="line"><span class="function"><span class="title">c</span>:\<span class="title">code</span>\<span class="title">RUN2</span></span></span><br><span class="line"><span class="function"><span class="title">goto</span> <span class="title">RUN3</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">:<span class="title">RUN3</span></span></span><br><span class="line"><span class="function"><span class="title">echo</span> <span class="title">good</span> <span class="title">bye</span></span></span><br></pre></td></tr></tbody></table></figure><p><strong>set</strong></p><figure class="highlight bat"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">set</span> a=aa1bb1aa2bb2</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">%a%</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> b=<span class="number">12</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">%b%</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> /a c=<span class="number">39</span>/<span class="number">10</span>           </span><br><span class="line"><span class="built_in">echo</span> <span class="variable">%c%</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight bat"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">set</span> p=aaa</span><br><span class="line"><span class="keyword">if</span> <span class="variable">%p%</span>==aaa (</span><br><span class="line">      <span class="built_in">echo</span> <span class="variable">%p%</span></span><br><span class="line">      <span class="built_in">set</span> p=bbb</span><br><span class="line">      <span class="built_in">echo</span> <span class="variable">%p%</span></span><br><span class="line">      )</span><br></pre></td></tr></tbody></table></figure><p>输出 aaa aaa</p><figure class="highlight bat"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">set</span> p=aaa</span><br><span class="line"><span class="keyword">if</span> <span class="variable">%p%</span>==aaa (</span><br><span class="line">      <span class="built_in">echo</span> <span class="variable">%p%</span></span><br><span class="line">      <span class="built_in">set</span> /p p=bbb</span><br><span class="line">      <span class="built_in">echo</span> <span class="variable">%p%</span></span><br><span class="line">      )</span><br></pre></td></tr></tbody></table></figure><p>输出 aaa bbb</p><figure class="highlight bat"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">%CD%</span>                    #代表当前目录的字符串</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">%DATE%</span>                  #当前日期</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">%TIME%</span>                  #当前时间</span><br></pre></td></tr></tbody></table></figure><p><strong>从FTP下载文件</strong></p><figure class="highlight bat"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> open <span class="number">10</span>.<span class="number">86</span>.<span class="number">56</span>.<span class="number">6</span> &gt;ftp.txt      <span class="built_in">rem</span> ftp server ip</span><br><span class="line"></span><br><span class="line">@<span class="built_in">echo</span> user mos&gt;&gt;ftp.txt             <span class="built_in">rem</span> 用户名</span><br><span class="line"></span><br><span class="line">@<span class="built_in">echo</span> mos&gt;&gt;ftp.txt                  <span class="built_in">rem</span> 密码</span><br><span class="line"></span><br><span class="line">@<span class="built_in">echo</span> <span class="built_in">cd</span> test&gt;&gt;ftp.txt              <span class="built_in">rem</span> 文件路径</span><br><span class="line"></span><br><span class="line">@<span class="built_in">echo</span> get mw-license-switch-conffile.xml&gt;&gt;ftp.txt <span class="built_in">rem</span> 文件名</span><br><span class="line"></span><br><span class="line">@<span class="built_in">echo</span> bye&gt;&gt;ftp.txt</span><br><span class="line"></span><br><span class="line">ftp -i -n -s:ftp.txt                <span class="built_in">rem</span> 文件存放在脚本所在路径下</span><br></pre></td></tr></tbody></table></figure><p><strong>切换盘符</strong></p><figure class="highlight bat"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> current_dir=C:\Program Files\HaoZip    </span><br><span class="line"><span class="built_in">pushd</span> <span class="variable">%current_dir%</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="variable">%cd%</span></span><br></pre></td></tr></tbody></table></figure><hr><blockquote><p>博客来源：<a href="https://www.cnblogs.com/laislabonita/p/7145731.html" target="_blank" rel="noopener">https://www.cnblogs.com/laislabonita/p/7145731.html</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;run.bat—打开百度&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bat&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;path&lt;/span&gt;=&lt;span class=&quot;variable&quot;&gt;%path%&lt;/span&gt;; C:\Program Files (x86)\Internet Explorer\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;start&lt;/span&gt; iexplore http://www.baidu.com&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="Bat" scheme="http://blog.iwxyi.com/tags/Bat/"/>
    
  </entry>
  
  <entry>
    <title>IIS允许下载APK安装包</title>
    <link href="http://blog.iwxyi.com/2018/08/10/IIS%E5%85%81%E8%AE%B8%E4%B8%8B%E8%BD%BDAPK%E5%AE%89%E8%A3%85%E5%8C%85/"/>
    <id>http://blog.iwxyi.com/2018/08/10/IIS允许下载APK安装包/</id>
    <published>2018-08-10T12:41:00.000Z</published>
    <updated>2019-10-12T12:43:12.341Z</updated>
    
    <content type="html"><![CDATA[<h2 id="IIS允许下载APK安装包（MIME类型配置）"><a href="#IIS允许下载APK安装包（MIME类型配置）" class="headerlink" title="IIS允许下载APK安装包（MIME类型配置）"></a>IIS允许下载APK安装包（MIME类型配置）</h2><p>IIS7MIME配置过程：</p><p>打开IIS信息服务管理器，找到要添加配置的网站；</p><p>在该网站的功能视图中单击”MIME类型“按钮（如果在功能视图中没有MIME按钮，则需要通过服务器管理器中角色管理进行添加），打开MIME类型设置窗口；</p><a id="more"></a><p>在操作栏里点击”添加“按钮；</p><p>单机”确定“保存设置；</p><p>重启IIS，使设置生效。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;IIS允许下载APK安装包（MIME类型配置）&quot;&gt;&lt;a href=&quot;#IIS允许下载APK安装包（MIME类型配置）&quot; class=&quot;headerlink&quot; title=&quot;IIS允许下载APK安装包（MIME类型配置）&quot;&gt;&lt;/a&gt;IIS允许下载APK安装包（MIME类型配置）&lt;/h2&gt;&lt;p&gt;IIS7MIME配置过程：&lt;/p&gt;
&lt;p&gt;打开IIS信息服务管理器，找到要添加配置的网站；&lt;/p&gt;
&lt;p&gt;在该网站的功能视图中单击”MIME类型“按钮（如果在功能视图中没有MIME按钮，则需要通过服务器管理器中角色管理进行添加），打开MIME类型设置窗口；&lt;/p&gt;
    
    </summary>
    
    
      <category term="服务器" scheme="http://blog.iwxyi.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="服务器" scheme="http://blog.iwxyi.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>fread和fwrite转移文件数据</title>
    <link href="http://blog.iwxyi.com/2018/08/04/fread%E5%92%8Cfwrite%E8%BD%AC%E7%A7%BB%E6%96%87%E4%BB%B6%E6%95%B0%E6%8D%AE/"/>
    <id>http://blog.iwxyi.com/2018/08/04/fread和fwrite转移文件数据/</id>
    <published>2018-08-04T12:18:00.000Z</published>
    <updated>2019-10-12T12:15:15.046Z</updated>
    
    <content type="html"><![CDATA[<p>读取文件，再写入到另一个文件里面：</p><p><strong>1、获取文件大小</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FILE* fp_size = fopen(<span class="string">"T:/img.jpg"</span>, <span class="string">"rb"</span>);</span><br><span class="line">fseek(fp_size, <span class="number">0</span>, SEEK_END);</span><br><span class="line"><span class="keyword">int</span> size = ftell(fp_size);</span><br><span class="line">fclose(fp_size);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"文件大小(指针偏移计算):"</span> &lt;&lt; size; <span class="comment">// 字节大小</span></span><br></pre></td></tr></tbody></table></figure><a id="more"></a><p><strong>2、读取文件</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FILE* fp_read = fopen(<span class="string">"T:/img.jpg"</span>, <span class="string">"rb"</span>);</span><br><span class="line"><span class="keyword">int</span>* buffer = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(size+<span class="number">4</span>); <span class="comment">// 可以改成其他类型也没事，比如 char*</span></span><br><span class="line">fread(buffer, size, <span class="number">1</span>, fp_read);</span><br><span class="line">fclose(fp_read);</span><br></pre></td></tr></tbody></table></figure><p><strong>3、写入到另一个文件</strong></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FILE* fp_write = fopen(<span class="string">"T:/img1.png"</span>, <span class="string">"wb"</span>);</span><br><span class="line">fwrite(buffer,size, <span class="number">1</span>, fp_write);</span><br><span class="line">fclose(fp_write);</span><br></pre></td></tr></tbody></table></figure><p><code>fread</code>和<code>write</code>的<code>size</code>可以更大，不影响结果（表示上限）</p><hr><p>实测一张jpg图片：</p><ul><li>size超过体积，保存的会是size的大小</li><li>1/10时：图片只有一半显示，体积也只有1/10</li><li>1/4时：上方5/6的部分清晰，剩下的模糊</li><li>1/2时：虽然体积只有一半，但是好像一样清晰……</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;读取文件，再写入到另一个文件里面：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、获取文件大小&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;FILE* fp_size = fopen(&lt;span class=&quot;string&quot;&gt;&quot;T:/img.jpg&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;rb&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fseek(fp_size, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, SEEK_END);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; size = ftell(fp_size);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fclose(fp_size);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;文件大小(指针偏移计算):&quot;&lt;/span&gt; &amp;lt;&amp;lt; size; &lt;span class=&quot;comment&quot;&gt;// 字节大小&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C" scheme="http://blog.iwxyi.com/tags/C/"/>
    
      <category term="文件" scheme="http://blog.iwxyi.com/tags/%E6%96%87%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>SQL查询及删除重复记录</title>
    <link href="http://blog.iwxyi.com/2018/06/15/SQL%E6%9F%A5%E8%AF%A2%E5%8F%8A%E5%88%A0%E9%99%A4%E9%87%8D%E5%A4%8D%E8%AE%B0%E5%BD%95/"/>
    <id>http://blog.iwxyi.com/2018/06/15/SQL查询及删除重复记录/</id>
    <published>2018-06-15T10:38:00.000Z</published>
    <updated>2019-10-12T12:33:16.357Z</updated>
    
    <content type="html"><![CDATA[<p>1、查找表中多余的重复记录，重复记录是根据单个字段（peopleId）来判断</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> people</span><br><span class="line"><span class="keyword">where</span> peopleId <span class="keyword">in</span> (<span class="keyword">select</span> peopleId <span class="keyword">from</span> people <span class="keyword">group</span> <span class="keyword">by</span> peopleId <span class="keyword">having</span> <span class="keyword">count</span>(peopleId) &gt; <span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><p>2、删除表中多余的重复记录，重复记录是根据单个字段（peopleId）来判断，只留有rowid最小的记录</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> people</span><br><span class="line"><span class="keyword">where</span> peopleId <span class="keyword">in</span> (<span class="keyword">select</span> peopleId <span class="keyword">from</span> people <span class="keyword">group</span> <span class="keyword">by</span> peopleId <span class="keyword">having</span> <span class="keyword">count</span>(peopleId) &gt; <span class="number">1</span>)</span><br><span class="line"><span class="keyword">and</span> <span class="keyword">rowid</span> <span class="keyword">not</span> <span class="keyword">in</span> (<span class="keyword">select</span> <span class="keyword">min</span>(<span class="keyword">rowid</span>) <span class="keyword">from</span> people <span class="keyword">group</span> <span class="keyword">by</span> peopleId <span class="keyword">having</span> <span class="keyword">count</span>(peopleId )&gt;<span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure><p>3、查找表中多余的重复记录（多个字段）</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> vitae a</span><br><span class="line"><span class="keyword">where</span> (a.peopleId,a.seq) <span class="keyword">in</span> (<span class="keyword">select</span> peopleId,seq <span class="keyword">from</span> vitae <span class="keyword">group</span> <span class="keyword">by</span> peopleId,seq <span class="keyword">having</span> <span class="keyword">count</span>(*) &gt; <span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure><p>4、删除表中多余的重复记录（多个字段），只留有rowid最小的记录</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> vitae a</span><br><span class="line"><span class="keyword">where</span> (a.peopleId,a.seq) <span class="keyword">in</span> (<span class="keyword">select</span> peopleId,seq <span class="keyword">from</span> vitae <span class="keyword">group</span> <span class="keyword">by</span> peopleId,seq <span class="keyword">having</span> <span class="keyword">count</span>(*) &gt; <span class="number">1</span>)</span><br><span class="line"><span class="keyword">and</span> <span class="keyword">rowid</span> <span class="keyword">not</span> <span class="keyword">in</span> (<span class="keyword">select</span> <span class="keyword">min</span>(<span class="keyword">rowid</span>) <span class="keyword">from</span> vitae <span class="keyword">group</span> <span class="keyword">by</span> peopleId,seq <span class="keyword">having</span> <span class="keyword">count</span>(*)&gt;<span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure><p>5、查找表中多余的重复记录（多个字段），不包含rowid最小的记录</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> vitae a</span><br><span class="line"><span class="keyword">where</span> (a.peopleId,a.seq) <span class="keyword">in</span> (<span class="keyword">select</span> peopleId,seq <span class="keyword">from</span> vitae <span class="keyword">group</span> <span class="keyword">by</span> peopleId,seq <span class="keyword">having</span> <span class="keyword">count</span>(*) &gt; <span class="number">1</span>)</span><br><span class="line"><span class="keyword">and</span> <span class="keyword">rowid</span> <span class="keyword">not</span> <span class="keyword">in</span> (<span class="keyword">select</span> <span class="keyword">min</span>(<span class="keyword">rowid</span>) <span class="keyword">from</span> vitae <span class="keyword">group</span> <span class="keyword">by</span> peopleId,seq <span class="keyword">having</span> <span class="keyword">count</span>(*)&gt;<span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1、查找表中多余的重复记录，重复记录是根据单个字段（peopleId）来判断&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; * &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; people&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt; peopleId &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; peopleId &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; people &lt;span class=&quot;keyword&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;by&lt;/span&gt; peopleId &lt;span class=&quot;keyword&quot;&gt;having&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;count&lt;/span&gt;(peopleId) &amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="SQL" scheme="http://blog.iwxyi.com/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>嵌套循环优化</title>
    <link href="http://blog.iwxyi.com/2018/05/20/%E5%B5%8C%E5%A5%97%E5%BE%AA%E7%8E%AF%E4%BC%98%E5%8C%96/"/>
    <id>http://blog.iwxyi.com/2018/05/20/嵌套循环优化/</id>
    <published>2018-05-20T11:50:00.000Z</published>
    <updated>2019-10-12T12:14:07.126Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>请对以下的代码进行优化：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++)  </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">100</span>; j++)  </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">10</span>; k++)  </span><br><span class="line">            testFunction (i, j, k);</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>从给出的代码可知，不论如何优化，testFunction执行的次数都是相同的，该部分不存在优化的可能。那么，代码的优化只能从循环变量i、j、k的实例化、初始化、比较、自增等方面的耗时上进行分析。</p><p>首先，我们先分析原题代码循环变量在实例化、初始化、比较、自增等方面的耗时情况： </p><table><thead><tr><th>变量</th><th>实例化(次数)</th><th>初始化(次数)</th><th>比较(次数)</th><th>自增(次数)</th></tr></thead><tbody><tr><td>i</td><td>1</td><td>1</td><td>1000</td><td>1000</td></tr><tr><td>j</td><td>1000</td><td>1000</td><td>1000 * 100</td><td>1000 * 100</td></tr><tr><td>k</td><td>1000 * 100</td><td>1000 * 100</td><td>1000 * 100 * 10</td><td>1000 * 100 * 10</td></tr></tbody></table><p>该代码的性能优化就是尽可能减少循环变量i、j、k的实例化、初始化、比较、自增的次数，同时，不能引进其它可能的运算耗时。 </p><h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)  </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">100</span>; j++)  </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">1000</span>; k++)  </span><br><span class="line">            testFunction (k, j, i);</span><br></pre></td></tr></tbody></table></figure><p>该方案主要是将循环次数最少的放到外面，循环次数最多的放里面，这样可以最大程度的（注：3个不同次数的循环变量共有6种排列组合情况，此种组合为最优）减少相关循环变量的实例化次数、初始化次数、比较次数、自增次数，方案耗时情况如下： </p><table><thead><tr><th>变量</th><th>实例化(次数)</th><th>初始化(次数)</th><th>比较(次数)</th><th>自增(次数)</th></tr></thead><tbody><tr><td>i</td><td>1</td><td>1</td><td>10</td><td>10</td></tr><tr><td>j</td><td>10</td><td>10</td><td>10 * 100</td><td>10 * 100</td></tr><tr><td>k</td><td>10 * 100</td><td>10 * 100</td><td>10 * 100 * 1000</td><td>10 * 100 * 1000</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;请对以下的代码进行优化：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;; i++)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j &amp;lt; &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;; j++)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; k = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; k &amp;lt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;; k++)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            testFunction (i, j, k);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C" scheme="http://blog.iwxyi.com/tags/C/"/>
    
      <category term="优化" scheme="http://blog.iwxyi.com/tags/%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Windows卡顿优化</title>
    <link href="http://blog.iwxyi.com/2018/03/04/Windows%E5%8D%A1%E9%A1%BF%E4%BC%98%E5%8C%96/"/>
    <id>http://blog.iwxyi.com/2018/03/04/Windows卡顿优化/</id>
    <published>2018-03-04T11:52:00.000Z</published>
    <updated>2019-10-12T12:16:03.381Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Windows-卡顿优化"><a href="#Windows-卡顿优化" class="headerlink" title="Windows 卡顿优化"></a>Windows 卡顿优化</h1><h2 id="关闭家庭组"><a href="#关闭家庭组" class="headerlink" title="关闭家庭组"></a>关闭家庭组</h2><p>因为这功能会导致硬盘和CPU处于高负荷状态</p><p>关闭方案：控制面板–管理工具–服务– HomeGroup Listener 和 HomeGroup Provider 禁用。</p><a id="more"></a><h2 id="关闭性能特效（配置较低的机器可以关闭）"><a href="#关闭性能特效（配置较低的机器可以关闭）" class="headerlink" title="关闭性能特效（配置较低的机器可以关闭）"></a>关闭性能特效（配置较低的机器可以关闭）</h2><p>系统属性-高级-性能-设置-关闭淡出淡入效果。</p><h2 id="关闭磁盘碎片整理计划"><a href="#关闭磁盘碎片整理计划" class="headerlink" title="关闭磁盘碎片整理计划"></a>关闭磁盘碎片整理计划</h2><p>磁盘碎片整理可以提高磁盘性能，但不需要整理计划，可以关闭整理计划。选中磁盘C-属性–工具–对驱动器进行优化和碎片整理–优化–更改设置–取消选择按计划执行。关闭IPv6协议</p><p>Win10默认开启的IPv6协议，对于日常使用的我们来讲，使用率几乎为0，而它却大大的占用着系统资源。<br>打开控制面板，进入网络和 Internet，找到网络和共享中心窗口，从左侧的栏目中点击更改适配器设置进入网络连接。<br>打开以太网属性窗口。在列表中找到Internet协议版本6(TCP/IPv6)，点击取消勾选，确定=】即可。</p><h2 id="卸载预装应用（强力）"><a href="#卸载预装应用（强力）" class="headerlink" title="卸载预装应用（强力）"></a>卸载预装应用（强力）</h2><p>使用Cortana搜索，输入PowerShell，右键PowerShell，以管理员身份运行。<br>在PowerShell中输入：Get-AppXPackage | Remove-AppxPackage<br>遇到错误时请无视，继续执行该命令<br>最终结果是，所有预装软件中只剩Edge浏览器，连APP商店都没了<br>使用win更新系统后，预装软件均可找回</p><h2 id="关闭服务"><a href="#关闭服务" class="headerlink" title="关闭服务"></a>关闭服务</h2><p><code>win+r</code>输入<code>services.msc</code></p><p>以下是可以更改为手动启动的服务（按名称排序）：</p><p>1、Application Experience（启动时为程序处理应用程序兼容性缓存请求）</p><p>2、Computer Browser（维护网络上计算机的更新列表，不需要联网的话可以改为手动）</p><p>3、Diagnostic Policy Service（诊断策略服务）Diagnositic 开头的都<strong>禁用</strong></p><p>4、Distributed Link Tracking Client（维护计算机内的NTFS文件之间的链接）</p><p>5、IP Helper（使用IPv6转换技术）</p><p>6、Offline Files（脱机文件服务）</p><p>7、Program Compatibility Assistant Service（为应用程序兼容性助手提供支持）</p><p>8、Portable Device Enumerator Service（强制可移动大容量存储设备的组策略）</p><p>9、Print Spooler（没有打印机的话可以关闭它）</p><p>10、Remote Registry（远程注册表设置，这项服务应该保持禁用状态）</p><p>11、Secondary Logon（在不同凭据下启用启动过程，改为手动即可，禁用会导致魔兽世界等游戏无法登录）</p><p>12、Security Center（监视并报告计算机上的安全健康设置）</p><p>13、Server （支持计算机通过网络进行共享，若处于单机状态的话，可以改为手动）</p><p>14、TCP/IP NetBIOS Helper （提供NetBIOS名称解析支持，若你的计算机没有连接到工作组网络的话，可以改为手动）</p><p>15、Windows Error Reporting Service （报告错误并提供现有解决方案）</p><p>16、Windows Image Acquisition （WIA） （为扫描仪和照相机提供图像采集服务）</p><p>17、Windows Search （提供内容索引，如果你不怎么使用Windows自带搜索的话，可以改<strong>手动</strong>）</p><p>18、Windows Time （维护时间和日期同步）</p><p>19、Windows Update 系统更新（<strong>禁用</strong>）</p><p>20、Superfetch 超级与读取（<strong>禁用</strong>）</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Windows-卡顿优化&quot;&gt;&lt;a href=&quot;#Windows-卡顿优化&quot; class=&quot;headerlink&quot; title=&quot;Windows 卡顿优化&quot;&gt;&lt;/a&gt;Windows 卡顿优化&lt;/h1&gt;&lt;h2 id=&quot;关闭家庭组&quot;&gt;&lt;a href=&quot;#关闭家庭组&quot; class=&quot;headerlink&quot; title=&quot;关闭家庭组&quot;&gt;&lt;/a&gt;关闭家庭组&lt;/h2&gt;&lt;p&gt;因为这功能会导致硬盘和CPU处于高负荷状态&lt;/p&gt;
&lt;p&gt;关闭方案：控制面板–管理工具–服务– HomeGroup Listener 和 HomeGroup Provider 禁用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="修电脑" scheme="http://blog.iwxyi.com/categories/%E4%BF%AE%E7%94%B5%E8%84%91/"/>
    
    
      <category term="Windows" scheme="http://blog.iwxyi.com/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Emment语法</title>
    <link href="http://blog.iwxyi.com/2018/03/03/Emment%E8%AF%AD%E6%B3%95/"/>
    <id>http://blog.iwxyi.com/2018/03/03/Emment语法/</id>
    <published>2018-03-03T11:57:00.000Z</published>
    <updated>2019-10-12T12:16:19.225Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Emment语法"><a href="#Emment语法" class="headerlink" title="Emment语法"></a>Emment语法</h1><h3 id="1-1-生成html初始文档"><a href="#1-1-生成html初始文档" class="headerlink" title="1.1 生成html初始文档"></a>1.1 生成html初始文档</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">!+tab或者html:5   生成html5文档的初始结构</span><br><span class="line">html:xt           生成html4过渡型</span><br><span class="line">html:4s           生成html4严格型）</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><p>生成的文档如下：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="1-2-生成带有id-class的HTML标签"><a href="#1-2-生成带有id-class的HTML标签" class="headerlink" title="1.2 生成带有id,class的HTML标签"></a>1.2 生成带有id,class的HTML标签</h3><p>1.</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#aaa  生成一个ID为aaa的div</span><br></pre></td></tr></tbody></table></figure><p>生成结构如下：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"aaa"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>2.</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ul#ccc.ddd   生成一个ID为ccc,class为ddd的ul</span><br></pre></td></tr></tbody></table></figure><p>生成结构如下：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"ccc"</span> <span class="attr">class</span>=<span class="string">"ddd"</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="1-3-生成后代-“-gt-”"><a href="#1-3-生成后代-“-gt-”" class="headerlink" title="1.3 生成后代 “>”"></a>1.3 生成后代 “&gt;”</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">div.aaa&gt;ul&gt;li   生成一个无序列表，而且被class为aaa的div包裹</span><br></pre></td></tr></tbody></table></figure><p>生成结构如下：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"aaa"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="1-4-生成兄弟"><a href="#1-4-生成兄弟" class="headerlink" title="1.4 生成兄弟"></a>1.4 生成兄弟</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">div+p+dp</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dp</span>&gt;</span><span class="tag">&lt;/<span class="name">dp</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="1-5-生成上级元素-“-”"><a href="#1-5-生成上级元素-“-”" class="headerlink" title="1.5 生成上级元素 “^”"></a>1.5 生成上级元素 “^”</h3><p>上级 （Climb-up）元素是什么意思呢？前面咱们说过了生成下级元素的符号“&gt;”，当使用 div&gt;ul&gt;li 的指令之后，再继续写下去，那么后续内容都是在 li 下级的。如果我想编写一个跟 ul 平级的 span 标签，那么我需要先用 “^” 提升一下层次。例如：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">div&gt;ul&gt;li^span</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>如果我想生成一个与div平级的span，那么就再上升一个层级，多用一个^</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">div&gt;ul&gt;li^^span</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="1-6重复生成多份"><a href="#1-6重复生成多份" class="headerlink" title="1.6重复生成多份*"></a>1.6重复生成多份*</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ul&gt;li*5</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="1-7生成分组"><a href="#1-7生成分组" class="headerlink" title="1.7生成分组()"></a>1.7生成分组()</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">div&gt;(header&gt;ul&gt;li*2&gt;a)+footer&gt;p</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>分组还可以结合上面的*符号生成重复结构</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(div&gt;dl&gt;(dt&gt;dd)*3)+footer&gt;p</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="1-8生成自定义属性-attr"><a href="#1-8生成自定义属性-attr" class="headerlink" title="1.8生成自定义属性[attr]"></a>1.8生成自定义属性[attr]</h3><p>a 标签中往往需要附带 href 属性和 title 属性，如果我们想生成一个 href 为 “<a href="http://google.com/" target="_blank" rel="noopener">http://google.com</a>” ，title 为“我爱水煮鱼”的 a 标签，可以这样写：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a[href="www.google.com" title="我爱水煮鱼"]</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"www.google.com"</span> <span class="attr">title</span>=<span class="string">"我爱水煮鱼"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="1-9生成内容编号"><a href="#1-9生成内容编号" class="headerlink" title="1.9生成内容编号$"></a>1.9生成内容编号$</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ul&gt;li.item$*5</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item1"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item2"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item3"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item4"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item5"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ul&gt;li.item$$$*5</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item001"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item002"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item003"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item004"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item005"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>只能这样单调的生成序号？对于强大的 Emmet 来说，肯定不会会了，我们也可以在 $ 后面增加 @- 来实现倒序排列：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ul&gt;li.item$@-*5</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item5"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item4"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item3"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item2"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item1"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>我们也可以使用@N指定开始的序号</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ul&gt;li.item$@3*5</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item3"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item4"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item5"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item6"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item7"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>配合上面倒序输出，可以这样写:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ul&gt;li.item$@-3*5</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item7"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item6"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item5"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item4"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item3"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="2-0生成文本内容"><a href="#2-0生成文本内容" class="headerlink" title="2.0生成文本内容{}"></a>2.0生成文本内容{}</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a[href="www.google.com"]{click me}</span><br></pre></td></tr></tbody></table></figure><p>或者</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a[href="www.google.com"]&gt;{click me}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"www.google.com"</span>&gt;</span>click me<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>注意不能有空格</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Emment语法&quot;&gt;&lt;a href=&quot;#Emment语法&quot; class=&quot;headerlink&quot; title=&quot;Emment语法&quot;&gt;&lt;/a&gt;Emment语法&lt;/h1&gt;&lt;h3 id=&quot;1-1-生成html初始文档&quot;&gt;&lt;a href=&quot;#1-1-生成html初始文档&quot; class=&quot;headerlink&quot; title=&quot;1.1 生成html初始文档&quot;&gt;&lt;/a&gt;1.1 生成html初始文档&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;!+tab或者html:5   生成html5文档的初始结构&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;html:xt           生成html4过渡型&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;html:4s           生成html4严格型）&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="HTML" scheme="http://blog.iwxyi.com/tags/HTML/"/>
    
      <category term="语法" scheme="http://blog.iwxyi.com/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>安卓Rec模式清除锁屏密码</title>
    <link href="http://blog.iwxyi.com/2018/01/29/%E5%AE%89%E5%8D%93Rec%E6%A8%A1%E5%BC%8F%E6%B8%85%E9%99%A4%E9%94%81%E5%B1%8F%E5%AF%86%E7%A0%81/"/>
    <id>http://blog.iwxyi.com/2018/01/29/安卓Rec模式清除锁屏密码/</id>
    <published>2018-01-29T12:44:00.000Z</published>
    <updated>2019-10-12T12:45:42.948Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安卓REC清除锁屏密码"><a href="#安卓REC清除锁屏密码" class="headerlink" title="安卓REC清除锁屏密码"></a>安卓REC清除锁屏密码</h2><p>打开TWRP的<code>adb shell</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rm /data/system/locksettings.db</span><br><span class="line">rm /data/system/locksettings.db-shm</span><br><span class="line">rm /data/system/locksettings.db-wal</span><br><span class="line">rm /data/system/gatekeeper.password.key</span><br><span class="line">rm /data/system/gatekeeper.pattern.key</span><br></pre></td></tr></tbody></table></figure><p>实测可以用文件管理删除前两项即可（不同类型密码的文件不同）</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安卓REC清除锁屏密码&quot;&gt;&lt;a href=&quot;#安卓REC清除锁屏密码&quot; class=&quot;headerlink&quot; title=&quot;安卓REC清除锁屏密码&quot;&gt;&lt;/a&gt;安卓REC清除锁屏密码&lt;/h2&gt;&lt;p&gt;打开TWRP的&lt;code&gt;adb shell&lt;/code&gt;&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="搞机" scheme="http://blog.iwxyi.com/categories/%E6%90%9E%E6%9C%BA/"/>
    
    
      <category term="搞机" scheme="http://blog.iwxyi.com/tags/%E6%90%9E%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>这样学Java不枯燥-学习笔记</title>
    <link href="http://blog.iwxyi.com/2017/10/12/%E8%BF%99%E6%A0%B7%E5%AD%A6Java%E4%B8%8D%E6%9E%AF%E7%87%A5-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://blog.iwxyi.com/2017/10/12/这样学Java不枯燥-学习笔记/</id>
    <published>2017-10-12T12:10:00.000Z</published>
    <updated>2019-10-12T12:11:30.598Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.rupeng.game.GameCore;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">GameCore.start(<span class="keyword">new</span> Main());</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{ <span class="comment">// 游戏运行的函数</span></span><br><span class="line">GameCore.alert(<span class="string">"Hello World"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GameCore.pause(<span class="keyword">int</span> x) <span class="comment">// 暂停x毫秒</span></span><br><span class="line">GameCore.setGameTitle(<span class="keyword">char</span> * name); <span class="comment">// 设置名字</span></span><br><span class="line">GameCore.setGameSize(<span class="keyword">int</span> width, <span class="keyword">int</span> height); <span class="comment">// 设置宽高</span></span><br><span class="line">GameCore.alert(Object msg); <span class="comment">// 弹出提示框（整数、字符串都行）</span></span><br><span class="line">Dimension d = GameCore.getGameSize();  </span><br><span class="line"><span class="comment">// d.width 、 d.height （imprt java.awt.Demension;）</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GameCore.loadBgView(String imgName); <span class="comment">// 不重叠不拉伸显示图片。图片放到 src/Images 下面（注意大小写），可拖拽或者 ctrl+V粘贴</span></span><br><span class="line">playSound(String soundName, <span class="keyword">boolean</span> repeat); <span class="comment">// 播放音乐（仅支持mp3），音乐放到 src/Sounds 下面</span></span><br><span class="line">closeSound(String soundName); <span class="comment">// 关闭音乐播放（包括重复播放的）</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> a = <span class="number">99999L</span> <span class="comment">// 常数数字默认为整型，long赋值需要转换到int</span></span><br><span class="line"><span class="keyword">float</span> f = <span class="number">3.14</span> <span class="comment">// 这样写是错的，需要加个F或f</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String s = GameCore.input(Object value, Object msg); <span class="comment">// 输入框（默认信息， 提示信息）</span></span><br><span class="line"><span class="keyword">boolean</span> b = GameCore.confirm(Object msg); <span class="comment">// 确认框（提示信息）</span></span><br><span class="line"><span class="keyword">int</span> i = Integer.parseInt(s); <span class="comment">// 输入的内容到整数</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createText</span><span class="params">(<span class="keyword">int</span> txtNum, String text)</span> <span class="comment">// 创建只读文本</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setTextPosition</span><span class="params">(<span class="keyword">int</span> txtNum, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> <span class="comment">// 修改文本位置</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setText</span><span class="params">(<span class="keyword">int</span> txtNum, String text)</span> <span class="comment">// 设置文本内容</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setTextColor</span><span class="params">(<span class="keyword">int</span> txtNum, Color color)</span> <span class="comment">// 设置文本颜色，color.RED、color.green、new color(int R, int G, int B)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setTextFontSize</span><span class="params">(<span class="keyword">int</span> txtNum, <span class="keyword">int</span> size)</span> <span class="comment">// 设置文本大小</span></span></span><br><span class="line"><span class="function">Point <span class="title">getTextPosition</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> num)</span> <span class="comment">// 获取文本位置（import java.awt.Point;）</span></span></span><br><span class="line"><span class="function">Dimension <span class="title">getTextSize</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> textNum)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hdieText</span><span class="params">(fina <span class="keyword">int</span> labelNum)</span> <span class="comment">// 隐藏文字</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showText</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> labelNum)</span> <span class="comment">// 显示文字</span></span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createImage</span><span class="params">(<span class="keyword">int</span> num, String imgName)</span> <span class="comment">// 创建图片控件，图片放到 src/Images 里面（注意大小写）</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createImage</span><span class="params">(<span class="keyword">int</span> num)</span> <span class="comment">// 创建一个什么都不显示的图片</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setImageSource</span><span class="params">(<span class="keyword">int</span> num, String imgName)</span> <span class="comment">// 修改显示的图片源</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setImagePosition</span><span class="params">(<span class="keyword">int</span> num, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> <span class="comment">// 修改坐标</span></span></span><br><span class="line"><span class="function">Point <span class="title">getImagePosition</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> num)</span> <span class="comment">// 获得坐标</span></span></span><br><span class="line"><span class="function">Dimension <span class="title">getImagePosition</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> num)</span> <span class="comment">// 获得大小</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hideImage</span><span class="params">(<span class="keyword">int</span> num)</span> <span class="comment">// 隐藏图片</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showImage</span><span class="params">(<span class="keyword">int</span> num)</span> <span class="comment">// 显示图片</span></span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">精灵文件位置：src/Sprites/精灵名字[]/精灵动作[]/i.png图片  按顺序放好（多选文件夹粘贴）（分层：工作空间—右上角倒三角—包表示法）</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createSprite</span><span class="params">(<span class="keyword">int</span> num, String spriteName)</span></span>; <span class="comment">// 创建精灵</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">palySpriteAnimate</span><span class="params">(<span class="keyword">int</span> spriteNum, String animateName, <span class="keyword">boolean</span> repeat)</span></span>; <span class="comment">// 播放精灵的动作</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setSpritePosition</span><span class="params">(<span class="keyword">int</span> spriteNum, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>; <span class="comment">// 设置精灵的位置</span></span><br><span class="line"><span class="function">Point <span class="title">getSpritePosition</span><span class="params">(<span class="keyword">int</span> spriteNum)</span></span>; <span class="comment">//获得精灵的位置</span></span><br><span class="line"><span class="function">Dimension <span class="title">getSpriteSize</span><span class="params">(<span class="keyword">int</span> spriteNum)</span></span>; <span class="comment">// 获取精灵尺寸</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hideSprite</span><span class="params">(<span class="keyword">int</span> spriteNum)</span></span>; <span class="comment">// 隐藏精灵</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showSprite</span><span class="params">(<span class="keyword">int</span> spriteNum)</span></span>; <span class="comment">// 显示精灵</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setSpriteFlipX</span><span class="params">(<span class="keyword">int</span> spriteNum, <span class="keyword">boolean</span> flipX)</span></span>; <span class="comment">// 是否进行X方向翻转（左右对称,fip为true时翻转，false时还原）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setSpriteFlipY</span><span class="params">(<span class="keyword">int</span> spriteNum, <span class="keyword">boolean</span> flipY)</span></span>; <span class="comment">// 是否设置Y方向翻转（上下对称）</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Java程序打包：拷贝bin和两个jar到单独的文件夹，拷贝jre，去掉src.zip、lib\ext\jfxrt.jar、bin\server、bin\jfxwebkit.dll，减小尺寸；</span><br><span class="line">创建一个.bat文件，内容：start jre\bin\javaw.exe -cp .\bin\ -Djava.ext.dirs=. Main1</span><br><span class="line">Main1 代表入口类，如果有包名则要写全名（xxx.Main1）</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String转int：Integer.parseInt("123")</span><br><span class="line">String相等：s1.equal(s2);   （必须用这种方式写）</span><br><span class="line">s1==s2 不使用原因： "abc"+"123" != "abc123" （初学者常犯错误）</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if (i = 10) // Java中这么写是错误的，C语言可以</span><br><span class="line">if (b = true) // 这样是正确的</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">switch (表达式) // 表达式可以为byte/short/int/char，JDK5后可以是枚举，JDK7后可以是String类型</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GameCore.getPressedKeyCode(); // 获得用户当前按键（只适合“连续动作”，一次性触发最好用“事件驱动”）</span><br><span class="line">与KeyEvent中的值作比较：（import java.awt.event.KeyEvent;）</span><br><span class="line">用法：if ( key == KeyEvent.VK_UP )</span><br><span class="line">数字键：VK_0、VK_1……</span><br><span class="line">字母键：VK_A、VK_B……</span><br><span class="line">功能键：VK_F1、VK_F2……</span><br><span class="line">回车：VK_ENTER</span><br><span class="line">空格：VK_SPACE</span><br><span class="line">ESC：VK_ESCAPE</span><br><span class="line">方向键：VK_LEFT、VK_UP、VK_RIGHT、VK_DOWN</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int[10] a = new int[10];  等价于  int a[10];  但是前者有初始化</span><br><span class="line">int、double等默认为0，String、Integer等默认为null</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">编译器认为，if(无else的)、for等操作可能不执行，所以里面的变量初始化会被忽略，若没有初始化则编译器报错</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">double</span> d = Math.random(); <span class="comment">// 返回 [ 0, 1.0 ) 之间的 double</span></span><br><span class="line"><span class="keyword">int</span> num = (<span class="keyword">int</span>) (Math.random() * <span class="number">3</span>); <span class="comment">// 0-2的整数</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GameCore.rand(<span class="keyword">int</span> low, <span class="keyword">int</span> high); <span class="comment">// low &lt;= x &lt; high</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">System.currentTimeMillis() <span class="comment">// 返回当前的毫秒事件</span></span><br><span class="line">Date d = <span class="keyword">new</span> Date(<span class="number">2009</span>-<span class="number">1900</span>,<span class="number">3</span>-<span class="number">1</span>,<span class="number">9</span>); <span class="comment">// 需-1900.1.0，为：2009.3.9</span></span><br><span class="line">System.out.println(d1);</span><br><span class="line"><span class="keyword">int</span> year = d.getYear()+<span class="number">1900</span>;  getMonth()+<span class="number">1</span>;  getDate(); <span class="comment">// 年月日</span></span><br><span class="line">getHours();  getMinutes();  getSeconds(); <span class="comment">// 时分秒</span></span><br><span class="line">getDat(); <span class="comment">//星期几，周日=0，周一=1</span></span><br><span class="line"><span class="keyword">long</span> time = d.getTime(); <span class="comment">// 获取时间的毫秒（相对时间）</span></span><br><span class="line">Date d = <span class="keyword">new</span> Date(time); <span class="comment">// 毫秒转换成时间</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] a = { { <span class="number">1</span> }, { <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> }, { <span class="number">6</span>, <span class="number">7</span> } }; <span class="comment">// 每一行的列数可以不一样，a[i].length也不一样。</span></span><br></pre></td></tr></tbody></table></figure><hr><blockquote><p>课程视频：如鹏网《这样学Java不枯燥》</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; com.rupeng.game.GameCore;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Runnable&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		GameCore.start(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Main());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{ &lt;span class=&quot;comment&quot;&gt;// 游戏运行的函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		GameCore.alert(&lt;span class=&quot;string&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
      <category term="学习笔记" scheme="http://blog.iwxyi.com/categories/Code/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Java" scheme="http://blog.iwxyi.com/tags/Java/"/>
    
      <category term="游戏开发" scheme="http://blog.iwxyi.com/tags/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>0x3F3F3F3F</title>
    <link href="http://blog.iwxyi.com/2017/09/01/0x3F3F3F3F/"/>
    <id>http://blog.iwxyi.com/2017/09/01/0x3F3F3F3F/</id>
    <published>2017-09-01T11:40:00.000Z</published>
    <updated>2019-10-12T12:13:42.792Z</updated>
    
    <content type="html"><![CDATA[<p><code>0x3f3f3f3f</code>的十进制是<code>1061109567</code>，是<code>10^9</code>级别的（和<code>0x7fffffff</code>一个数量级），而一般场合下的数据都是小于<code>10^9</code>的，所以它可以作为无穷大使用而不致出现数据大于无穷大的情形。 </p><a id="more"></a><p>另一方面，由于一般的数据都不会大于<code>10^9</code>，所以当我们把无穷大加上一个数据时，它并不会溢出（这就满足了“无穷大加一个有穷的数依然是无穷大”），事实上<code>0x3f3f3f3f</code>+<code>0x3f3f3f3f</code>=<code>2122219134</code>，这非常大但却没有超过<code>32-bit int</code>的表示范围，所以<code>0x3f3f3f3f</code>还满足了我们“无穷大加无穷大还是无穷大”的需求。</p><p>最后，<code>0x3f3f3f3f</code>还能给我们带来一个意想不到的额外好处：<br>如果我们想要将某个数组清零，我们通常会使用<code>memset(a,0,sizeof(a))</code>，方便又高效，但是当我们想将某个数组全部赋值为无穷大时，就不能使用memset函数而得自己写循环了，因为<code>memset</code>是按字节操作的，它能够对数组清零是因为0的每个字节都是0（一般我们只有赋值为-1和0的时候才使用它）。现在好了，如果我们将无穷大设为<code>0x3f3f3f3f</code>，那么奇迹就发生了，<code>0x3f3f3f3f</code>的每个字节都是0x3f！所以要把一段内存全部置为无穷大，我们只需要<code>memset(a,0x3f,sizeof(a))</code>。</p><p>所以在通常的场合下，<code>0x3f3f3f3f</code>真的是一个非常棒的选择！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;0x3f3f3f3f&lt;/code&gt;的十进制是&lt;code&gt;1061109567&lt;/code&gt;，是&lt;code&gt;10^9&lt;/code&gt;级别的（和&lt;code&gt;0x7fffffff&lt;/code&gt;一个数量级），而一般场合下的数据都是小于&lt;code&gt;10^9&lt;/code&gt;的，所以它可以作为无穷大使用而不致出现数据大于无穷大的情形。 &lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="C" scheme="http://blog.iwxyi.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Java大数相加示例</title>
    <link href="http://blog.iwxyi.com/2017/03/05/Java%E5%A4%A7%E6%95%B0%E7%9B%B8%E5%8A%A0/"/>
    <id>http://blog.iwxyi.com/2017/03/05/Java大数相加/</id>
    <published>2017-03-05T12:02:00.000Z</published>
    <updated>2019-10-12T12:14:28.621Z</updated>
    
    <content type="html"><![CDATA[<p>题目：两个整数和能否整除 86</p><a id="more"></a><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"></span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(sc.hasNext()) {</span><br><span class="line"><span class="keyword">int</span> a = sc.nextInt();</span><br><span class="line"><span class="keyword">int</span> b = sc.nextInt();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((a + b) % <span class="number">86</span> == <span class="number">0</span>) {</span><br><span class="line">System.out.println(<span class="string">"yes"</span>);</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">System.out.println(<span class="string">"no"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目：两个整数和能否整除 86&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="Java" scheme="http://blog.iwxyi.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>正则二三事</title>
    <link href="http://blog.iwxyi.com/2017/01/02/%E6%AD%A3%E5%88%99%E4%BA%8C%E4%B8%89%E4%BA%8B/"/>
    <id>http://blog.iwxyi.com/2017/01/02/正则二三事/</id>
    <published>2017-01-02T11:40:00.000Z</published>
    <updated>2019-10-12T12:13:13.410Z</updated>
    
    <content type="html"><![CDATA[<p>一、校验数字的表达式</p><p>1、 数字：<code>^[0-9]*$</code></p><p>2、 n位的数字：<code>^\d{n}$</code></p><p>3、 至少n位的数字：<code>^\d{n,}$</code></p><p>4、 m-n位的数字：<code>^\d{m,n}$</code></p><a id="more"></a><p>5、 零和非零开头的数字：<code>^(0|[1-9][0-9]*)$</code></p><p>6、 非零开头的最多带两位小数的数字：<code>^([1-9][0-9]*)+(.[0-9]{1,2})?$</code></p><p>7、 带1-2位小数的正数或负数：<code>^(-)?\d+(.\d{1,2})?$</code></p><p>8、 正数、负数、和小数：<code>^(-|+)?\d+(.\d+)?$</code></p><p>9、 有两位小数的正实数：<code>^[0-9]+(.[0-9]{2})?$</code></p><p>10、 有1~3位小数的正实数：<code>^[0-9]+(.[0-9]{1,3})?$</code></p><p>11、 非零的正整数：<code>^[1-9]\d$ 或 ^([1-9][0-9]){1,3}$ 或 ^+?[1-9][0-9]*$</code></p><p>12、 非零的负整数：<code>^-[1-9][]0-9"$ 或 ^-[1-9]\d$</code></p><p>13、 非负整数：<code>^\d+$ 或 ^[1-9]\d*|0$</code></p><p>14、 非正整数：<code>^-[1-9]\d*|0$ 或 ^((-\d+)|(0+))$</code></p><p>15、 非负浮点数：<code>^\d+(.\d+)?$ 或 ^[1-9]\d.\d|0.\d[1-9]\d|0?.0+|0$</code></p><p>16、 非正浮点数：<code>^((-\d+(.\d+)?)|(0+(.0+)?))$ 或 ^(-([1-9]\d.\d|0.\d[1-9]\d))|0?.0+|0$</code></p><p>17、 正浮点数：<code>^[1-9]\d.\d|0.\d[1-9]\d$ 或 ^(([0-9]+.[0-9][1-9][0-9])|([0-9][1-9][0-9].[0-9]+)|([0-9][1-9][0-9]))$</code></p><p>18、 负浮点数：<code>^-([1-9]\d.\d|0.\d[1-9]\d)$ 或 ^(-(([0-9]+.[0-9][1-9][0-9])|([0-9][1-9][0-9].[0-9]+)|([0-9][1-9][0-9])))$</code></p><p>19、 浮点数：<code>^(-?\d+)(.\d+)?$ 或 ^-?([1-9]\d.\d|0.\d[1-9]\d|0?.0+|0)$</code></p><p>二、校验字符的表达式</p><p>1、 汉字：<code>^[\u4e00-\u9fa5]{0,}$</code></p><p>2、 英文和数字：<code>^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]{4,40}$</code></p><p>3、 长度为3-20的所有字符：<code>^.{3,20}$</code></p><p>4、 由26个英文字母组成的字符串：<code>^[A-Za-z]+$</code></p><p>5、 由26个大写英文字母组成的字符串：<code>^[A-Z]+$</code></p><p>6、 由26个小写英文字母组成的字符串：<code>^[a-z]+$</code></p><p>7、 由数字和26个英文字母组成的字符串：<code>^[A-Za-z0-9]+$</code></p><p>8、 由数字、26个英文字母或者下划线组成的字符串：<code>^\w+$ 或 ^\w{3,20}$</code></p><p>9、 中文、英文、数字包括下划线：<code>^[\u4E00-\u9FA5A-Za-z0-9_]+$</code></p><p>10、 中文、英文、数字但不包括下划线等符号：<code>^[\u4E00-\u9FA5A-Za-z0-9]+$ 或 ^[\u4E00-\u9FA5A-Za-z0-9]{2,20}$</code></p><p>11、 可以输入含有<code>^%&amp;',;=?$\"</code>等字符：<code>[^%&amp;',;=?$\x22]+</code></p><p>12、 禁止输入含有<code>~</code>的字符：<code>[^~\x22]+</code></p><p>三、特殊需求表达式</p><p>1、 Email地址：<code>^\w+([-+.]\w+)@\w+([-.]\w+).\w+([-.]\w+)*$</code></p><p>2、 域名：<code>[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/.?</code></p><p>3、 InternetURL：<code>[a-zA-z]+://[^\s]</code> 或 <code>^http://([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=])?$</code></p><p>4、 手机号码：<code>^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d{8}$</code></p><p>5、 电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)：<code>^((\d{3,4}-)|\d{3.4}-)?\d{7,8}$</code></p><p>6、 国内电话号码(0511-4405222、021-87888822)：<code>\d{3}-\d{8}|\d{4}-\d{7}</code></p><p>7、 身份证号(15位、18位数字)：<code>^\d{15}|\d{18}$</code></p><p>8、 短身份证号码(数字、字母x结尾)：<code>^([0-9]){7,18}(x|X)?$ 或 ^\d{8,18}|[0-9x]{8,18}|[0-9X]{8,18}?$</code></p><p>9、 帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：<code>^[a-zA-Z][a-zA-Z0-9_]{4,15}$</code></p><p>10、 密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：<code>^[a-zA-Z]\w{5,17}$</code></p><p>11、 强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：<code>^(?=.\d)(?=.[a-z])(?=.*[A-Z]).{8,10}$</code></p><p>12、 日期格式：<code>^\d{4}-\d{1,2}-\d{1,2}</code></p><p>13、 一年的12个月(01～09和1～12)：<code>^(0?[1-9]|1[0-2])$</code></p><p>14 一个月的31天(01～09和1～31)：<code>^((0?[1-9])|((1|2)[0-9])|30|31)$</code></p><p>15、 钱的输入格式：</p><p>   1.有四种钱的表示形式我们可以接受:”10000.00” 和 “10,000.00”, 和没有 “分” 的 “10000” 和 “10,000”：<code>^[1-9][0-9]*$</code></p><p>   2.这表示任意一个不以0开头的数字,但是,这也意味着一个字符”0”不通过,所以我们采用下面的形式：<code>^(0|[1-9][0-9]*)$</code></p><p>   3.一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：<code>^(0|-?[1-9][0-9]*)$</code></p><p>   4.这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：<code>^[0-9]+(.[0-9]+)?$</code></p><p>   5.必须说明的是,小数点后面至少应该有1位数,所以”10.”是不通过的,但是 “10” 和 “10.2” 是通过的：<code>^[0-9]+(.[0-9]{2})?$</code></p><p>   6.这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：<code>^[0-9]+(.[0-9]{1,2})?$</code></p><p>   7.这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：<code>^[0-9]{1,3}(,[0-9]{3})*(.[0-9]{1,2})?$</code></p><ol start="8"><li>1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：<code>^([0-9]+|[0-9]{1,3}(,[0-9]{3})*)(.[0-9]{1,2})?$</code></li></ol><p>16、 备注：这就是最终结果了,别忘了”+”可以用”*”替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里</p><p>17、 xml文件：<code>^([a-zA-Z]+-?)+[a-zA-Z0-9]+\.[x|X][m|M][l|L]$</code></p><p>18、 中文字符的正则表达式：<code>[\u4e00-\u9fa5]</code></p><p>19、 双字节字符：<code>[^\x00-\xff]</code> (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))</p><p>20、 空白行的正则表达式：\n\s*\r (可以用来删除空白行)</p><p>21、 HTML标记的正则表达式：<code>&lt;(\S?)[^&gt;]&gt;.?&lt;/\1&gt;|&lt;.? /&gt;</code> (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)</p><p>22、 首尾空白字符的正则表达式：<code>^\s|\s$</code>或<code>(^\s)|(\s$)</code> (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)</p><p>23、 腾讯QQ号：<code>[1-9][0-9]{4,}</code> (腾讯QQ号从10000开始)</p><p>24、 中国邮政编码：<code>[1-9]\d{5}(?!\d)</code> (中国邮政编码为6位数字)</p><p>25、 IP地址：<code>\d+.\d+.\d+.\d+</code> (提取IP地址时有用)</p><p>26、 IP地址：<code>((?:(?:25[0-5]|2[0-4]\d|[01]?\d?\d)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d?\d))</code></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一、校验数字的表达式&lt;/p&gt;
&lt;p&gt;1、 数字：&lt;code&gt;^[0-9]*$&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;2、 n位的数字：&lt;code&gt;^\d{n}$&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;3、 至少n位的数字：&lt;code&gt;^\d{n,}$&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;4、 m-n位的数字：&lt;code&gt;^\d{m,n}$&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
    
      <category term="RegExp" scheme="http://blog.iwxyi.com/tags/RegExp/"/>
    
  </entry>
  
  <entry>
    <title>CGI-C语言也能干大事</title>
    <link href="http://blog.iwxyi.com/2016/07/12/CGI-C%E8%AF%AD%E8%A8%80%E4%B9%9F%E8%83%BD%E5%B9%B2%E5%A4%A7%E4%BA%8B/"/>
    <id>http://blog.iwxyi.com/2016/07/12/CGI-C语言也能干大事/</id>
    <published>2016-07-12T11:42:00.000Z</published>
    <updated>2019-10-12T12:34:31.251Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CGI-amp-DGI"><a href="#CGI-amp-DGI" class="headerlink" title="CGI &amp; DGI"></a>CGI &amp; DGI</h1><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> * qs = getenv(<span class="string">"QUERY_STRING"</span>);<span class="comment">//获取环境变量</span></span><br><span class="line"><span class="keyword">char</span> username[<span class="number">256</span>];</span><br><span class="line"><span class="built_in">sscanf</span>(qs, <span class="string">"username=%s"</span>, username);<span class="comment">//获取地址栏后面的东西</span></span><br></pre></td></tr></tbody></table></figure><p>断点调试：<code>include \&lt;windows.h&gt;</code>，然后 <code>MessageBoxA(0,"ok","ok",0);</code></p><a id="more"></a><p>让程序启动后暂停，等待着按按钮；<br>浏览器访问CGI，窗口弹出后，在VS中“调试”→“附加到进程”，设置断点，然后在关闭消息对话框。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"Location:http://www.baidu.com\r\n"</span>);<span class="comment">//重定向，302 Found。注意\r\n</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Location:1.html\r\n"</span>);<span class="comment">//重定向至cgi程序同目录的1.html文件</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Content-Type:text/html;charset=gbk\r\n\r\n"</span>);<span class="comment">//改成 text/plain，为普通文本，显示HTML标签。</span></span><br></pre></td></tr></tbody></table></figure><p>注意<code>\r\n\r\n</code>（两个），表示报文头结束了（各个报文头顺序可调换）<br>源代码中，<code>\n</code>能换行，但是浏览器上要用<code>&lt;br&gt;</code>才换行，所以用： <code>\n&lt;br&gt;</code></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">itoa(i, str, x); <span class="comment">//int i 转换成 char str[]、x进制的文本</span></span><br><span class="line"><span class="keyword">int</span> i = atoi(str); <span class="comment">//字符串转换成int</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">fprintf</span>(cgiOut, <span class="string">"&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;大家好，Querystring=%s，你的浏览器UserAgent是：%s，你的IP地址是：%s，当前cgi地址：%s&lt;/body&gt;&lt;/html&gt;"</span>, cgiQueryString, cgiUserAgent, cgiRemoteAddr, cgiScriptName);<span class="comment">//可以用printf</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cgiFormString(<span class="string">"name"</span>, name, <span class="keyword">sizeof</span> name); <span class="comment">// 获取用户名：name=xxx</span></span><br><span class="line"><span class="keyword">if</span> (cgiFormString(<span class="string">"password"</span>, pwd, <span class="keyword">sizeof</span> pwd) != cgiFormSuccess);<span class="comment">//返回值表示有没有这个值</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">&lt;!--点击登陆转到网址：../11.cgi?name=admin&amp;pwd=123，</span></span><br><span class="line"><span class="comment">  或者绝对网址："http://www.baidu.com"。</span></span><br><span class="line"><span class="comment">  method="get"（默认）或者"post"，post时地址栏看不到表单 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"11.cgi"</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"admin"</span> /&gt;</span></span><br><span class="line">    密　码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"pwd"</span> <span class="attr">value</span>=<span class="string">"123"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"登陆"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--form中的：input、textarea、select 中的名字和值都会提交给服务器</span></span><br><span class="line"><span class="comment">没有name值的表单将不会提交，包括submit。--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"se"</span>&gt;</span><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"nan"</span>&gt;</span>男<span class="tag">&lt;/<span class="name">option</span>&gt;</span><span class="tag">&lt;<span class="name">option...</span> /<span class="attr">option</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--提交的值为value属性，如：se="nan"--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"ch"</span> <span class="attr">id</span>=<span class="string">"chk"</span> / &gt;</span><span class="tag">&lt;<span class="name">lable</span> <span class="attr">for</span>=<span class="string">"chk"</span>&gt;</span>我已阅读XXX<span class="tag">&lt;/<span class="name">lable</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--如果勾上了，会有 "ch=on"   提交给服务器。</span></span><br><span class="line"><span class="comment">   radio 的 name 属性相同的为一组，提交选中的 value--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">...</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--隐藏的字段，不会显示，但是也会提交--&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>1、select、input、textarea必须要在form中。<br>2、当点击<code>input type="submit"</code>的按钮的时候，会把它所在的form中的所有“<strong>有name属性的</strong>”<code>input</code>/<code>select</code>/<code>textarea</code>的值（value）提交给服务器。<br>3、<strong>表单提交的值</strong></p><ul><li><code>input type="text"</code>的值就是用户输入的值；</li><li>对于<code>input type="checkbox"</code>的值就是“选中是on，没选中则没有”；</li><li>对于<code>inpu type="radio</code>“的则是被选中的name、value提交给服务器；</li><li>对于<code>input type="submit"</code>的则是被点击的name、value被提交给服务器；</li><li>对textarea就是输入的文本；</li><li>对于select就是选择项对应的option的value。</li></ul><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">TMPL_varlist *varlist1 = <span class="number">0</span>;<span class="comment">//空的参数列表 C99</span></span><br><span class="line">cgiHeaderContentType(<span class="string">"text/html;charset=gbk"</span>);</span><br><span class="line">varlist1 = TMPL_add_var(varlist1, <span class="string">"test1"</span>, <span class="string">"特斯特1"</span>, <span class="string">"pwd"</span>, <span class="string">"小密码"</span>, <span class="string">"name"</span>, <span class="string">"小鹏"</span>, <span class="number">0</span>); <span class="comment">// 3对，最后一个必须为0表示可变</span></span><br><span class="line"><span class="keyword">char</span> *age = <span class="string">"38"</span>;</span><br><span class="line">varlist1 = TMPL_add_var(varlist1, <span class="string">"age"</span>, age, <span class="number">0</span>);<span class="comment">//执行完了varlist1四对参数</span></span><br><span class="line">TMPL_write(<span class="string">"P1.htm"</span>, <span class="number">0</span>, <span class="number">0</span>, varlist1, cgiOut, cgiOut);</span><br></pre></td></tr></tbody></table></figure><p>变量使用：<code>&lt;TMPL_VAR name="test1" /&gt;&lt;br /&gt;</code></p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">TMPL_varlist * varlist1 = <span class="number">0</span>;</span><br><span class="line">TMPL_loop * loopUsers = <span class="number">0</span>;</span><br><span class="line">varlist1 = TMPL_add_var(varlist1, <span class="string">"Title"</span>, <span class="string">"测试Loop"</span>, <span class="number">0</span>);</span><br><span class="line">loopUsers = TMPL_add_varlist(loopUsers, TMPL_add_var(<span class="number">0</span>, <span class="string">"Name"</span>, <span class="string">"如鹏网"</span>, <span class="string">"Age"</span>, <span class="string">"8"</span>, <span class="string">"Title"</span>, <span class="string">"t1"</span>, <span class="number">0</span>));<span class="comment">//t1，同一行有的用同一行</span></span><br><span class="line">loopUsers = TMPL_add_varlist(loopUsers, TMPL_add_var(<span class="number">0</span>, <span class="string">"Name"</span>, <span class="string">"淘宝"</span>, <span class="string">"Age"</span>, <span class="string">"15"</span>, <span class="string">"Title"</span>, <span class="string">"t2"</span>, <span class="number">0</span>));<span class="comment">//t2</span></span><br><span class="line">loopUsers = TMPL_add_varlist(loopUsers, TMPL_add_var(<span class="number">0</span>, <span class="string">"Name"</span>, <span class="string">"京东"</span>, <span class="string">"Age"</span>, <span class="string">"10"</span>, <span class="number">0</span>));<span class="comment">//测试Loop，同一行没有的到上层去找</span></span><br><span class="line">varlist1 = TMPL_add_loop(varlist1, <span class="string">"users"</span>, loopUsers);<span class="comment">//大List里面的小List（name=“users”的Loop）</span></span><br><span class="line">cgiHeaderContentType(<span class="string">"text/html;charset=gbk"</span>);</span><br><span class="line">TMPL_write(<span class="string">"Users.htm"</span>, <span class="number">0</span>, <span class="number">0</span>, varlist1, cgiOut, cgiOut);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">tbody</span>&gt;</span><span class="tag">&lt;<span class="name">TMPL_LOOP</span> <span class="attr">name</span>=<span class="string">"users"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">TMPL_VAR</span> <span class="attr">name</span>=<span class="string">"Name"</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">TMPL_VAR</span> <span class="attr">name</span>=<span class="string">"Age"</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">TMPL_VAR</span> <span class="attr">name</span>=<span class="string">"Title"</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;/<span class="name">TMPL_LOOP</span>&gt;</span><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span> <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h1 id="MySQL-数据库"><a href="#MySQL-数据库" class="headerlink" title="MySQL 数据库"></a>MySQL 数据库</h1><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from Students // 表里面的数据</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into Students(ID, Name, Gender) value(3, 'asd', 1) // 插入数据，属性值对应（允许为空或者自动递增可不用写）</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">update Persons set Name='hehehe',Age=Age+1 // 全部更新表中某几列的数据</span><br><span class="line">update Persons set Age=Age+1 where Name='Tom' // 名字为 Tom 的人年龄+1</span><br><span class="line">条件用法：where (Age&gt;20 and Age&lt;30) or(Age=80)   // or、and、not、&lt;、&gt;、&gt;=、&lt;=、!=（或&lt;&gt;）</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">delete from Person where ... // 删除表中的数据，没有where为删除所有</span><br><span class="line">drop table Persons // 删除表</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select Age+1, Name from Persons where...// 显示表中的某几列（Age的列结果为Age+1）</span><br><span class="line">select Name 姓名, Age as 年龄 from Persons; // 为列取别名，可以不写as</span><br><span class="line">select 1+1 // 检索不与表关联的数据，结果为2</span><br><span class="line">select now() // 返回时间</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SQL聚合函数：MAX（最大值）、MIN（最小值）、AVG （平均值）、SUM （和）、COUNT（数量）</span><br><span class="line">select min(Age), max(Age) from Persons // 最低、最高年龄</span><br><span class="line">select count(*) from Persons where Age&gt;25 // 年龄大于25的人数</span><br><span class="line">select sum(Age), avg(Age) from Persons // 总年龄和平均年龄</span><br><span class="line">select count(Hobbies) from Persons // Hobbies 不为空的数量</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from Persons (where……) order by Age ASC, Salary DESC // 按照年龄升序(ASC,不写时默认)、薪水降序(DESC) 排列</span><br><span class="line">order 必须放在 where 后面</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">单字符通配符：_</span><br><span class="line">多字符通配符：% （可以为0个）</span><br><span class="line">select * from Persons where Name like 'T%' // 名字为 T 开头的所有</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nul 代表“不知道”，而不是“没有”。null+1 结果是 null</span><br><span class="line">select ...... name=null 或者 name != null 或者 nul=null 都没有任何返回结果</span><br><span class="line">select name+"a" from Persons</span><br><span class="line">select * from Persons where name is (not) null // 判断是不是null</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">limit 首行行号（行号从 0 开始）, 最大数目 // limit 必须放在所有语句的最后</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">group by Age   // 按照年龄分组，相同的为一组（重复的堆到一起）</span><br><span class="line">select age, count(*) from Persons group by age  // 显示所有年龄段，并且显示数量</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">查询每张订单的订单号、价格、对应的客户姓名以及客户年龄</span><br><span class="line">SELECT o.Number 订单编号,o.Price 价格,c.Name 客户姓名,c.Age FROM T_Orders o // 表别名为 o</span><br><span class="line">LEFT JOIN T_Customers c  ON o.CustomerId=c.Id // 别名为 c，当两个相等的时候，进行连接</span><br><span class="line">LEFT JOIN T_OrderTypes t ON o.TypeId=t.Id // 可以 join 多张表</span><br><span class="line">WHERE o.Price&gt;=150 // 可添加 where 条件</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">设计表——外键——添加，然后删除时会提示无法删除（可设置）</span><br><span class="line">删除时、更新时：一般默认RESTRICT（一起删除）；SET NULL（删除后连接的项目设置为NULL）；NO ACTION/RESTRICT（拒绝删除）</span><br></pre></td></tr></tbody></table></figure><h1 id="C-MySQL"><a href="#C-MySQL" class="headerlink" title="C + MySQL"></a>C + MySQL</h1><h2 id="使用方法：需要修改三个目录，以及复制dll"><a href="#使用方法：需要修改三个目录，以及复制dll" class="headerlink" title="使用方法：需要修改三个目录，以及复制dll"></a><strong>使用方法</strong>：需要修改三个目录，以及复制dll</h2><blockquote><p>1、在项目属性中【VC++目录】→“包含目录”，选择mysql的include文件夹；“库目录”选择mysql的lib文件夹；【链接器】→【输入】的“附加依赖项”增加“libmysql.lib”。</p><p>2、C代码里<code>include</code>头文件<code>mysql.h</code>，并且在之前要<code>include</code>头文件<code>winsock.h</code>。</p><p>3、<code>MYSQL *pConn = mysql_init(0);</code></p><p>4、编译运行，会报错找不到“libmysql.dll”，把mysql的<code>libmysql.dll</code>复制到exe的目录下。</p></blockquote><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;winsock.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mysql.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">MYSQL *mysql = mysql_init(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(!mysql_real_connect(mysql,<span class="string">"localhost"</span>,<span class="string">"root"</span>,<span class="string">"root"</span>,<span class="string">"study3"</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)){</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"连接数据库出错：%s"</span>,mysql_error(mysql));<span class="comment">// mysql的上一次错误信息</span></span><br><span class="line"><span class="keyword">goto</span> <span class="built_in">exit</span>;<span class="comment">//goto一般不推荐使用，但是在错误处理的时候，很好用</span></span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"连接数据库成功！\n"</span>);</span><br><span class="line"><span class="keyword">if</span>(mysql_query(mysql,<span class="string">"set names gbk"</span>)){ <span class="comment">// 这样才能用中文。失败时 为 真</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"设定连接编码失败%s"</span>,mysql_error(mysql));</span><br><span class="line"><span class="keyword">goto</span> <span class="built_in">exit</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span>:</span><br><span class="line">mysql_close(mysql);<span class="comment">//程序最后必须关闭连接，否则会有mysql服务器连接过多卡死的可能性</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"exit"</span>);</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="execute封装"><a href="#execute封装" class="headerlink" title="execute封装"></a>execute封装</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;winsock.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mysql.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">executeNonQuery</span><span class="params">(<span class="keyword">char</span> * sql)</span></span>; <span class="comment">// 没有返回值的</span></span><br><span class="line"><span class="function">MYSQL_RES * <span class="title">executeQuery</span><span class="params">(<span class="keyword">char</span> * sql)</span></span>; <span class="comment">// 有返回值的</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">executeNonQuery(<span class="string">"insert into Persons(name, gender) value('aaa', 1)"</span>);</span><br><span class="line"></span><br><span class="line">MYSQL_RES * res = executeQuery(<span class="string">"select * from Persons"</span>);</span><br><span class="line">MYSQL_ROW row;</span><br><span class="line"><span class="keyword">while</span> (row = mysql_fetch_row(res))</span><br><span class="line">{</span><br><span class="line"><span class="keyword">char</span> * un = row[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">char</span> * pwd = row[<span class="number">1</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"username = %s, password = %s\n"</span>, un, pwd);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">executeNonQuery</span><span class="params">(<span class="keyword">char</span> * sql)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">MYSQL * pConn = mysql_init(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (!mysql_real_connect(pConn, <span class="string">"localhost"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>, <span class="string">"test"</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)) {</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"连接失败：%s\n"</span>, mysql_error(pConn));</span><br><span class="line"><span class="keyword">goto</span> endd;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (mysql_query(pConn, <span class="string">"set names gbk"</span>)) {</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"设置gbk失败：%s\n"</span>, mysql_error(pConn));</span><br><span class="line"><span class="keyword">goto</span> endd;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (mysql_query(pConn, sql)) {</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"查询失败：%s\n"</span>, mysql_error(pConn));</span><br><span class="line"><span class="keyword">goto</span> endd;</span><br><span class="line">}</span><br><span class="line">endd:</span><br><span class="line">mysql_close(pConn);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function">MYSQL_RES * <span class="title">executeQuery</span><span class="params">(<span class="keyword">char</span> * sql)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">MYSQL * pConn = mysql_init(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (!mysql_real_connect(pConn, <span class="string">"localhost"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>, <span class="string">"test"</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)) {</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"连接失败：%s\n"</span>, mysql_error(pConn));</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (mysql_query(pConn, <span class="string">"set names gbk"</span>)) {</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"设置gbk失败：%s\n"</span>, mysql_error(pConn));</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (mysql_query(pConn, sql)) {</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"查询失败：%s\n"</span>, mysql_error(pConn));</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">MYSQL_RES * result = mysql_store_result(pConn);</span><br><span class="line">mysql_close(pConn);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="表单数据"><a href="#表单数据" class="headerlink" title="表单数据"></a>表单数据</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> sql[<span class="number">1024</span>]={<span class="number">0</span>}; <span class="comment">// 把用户输入的字符串动态拼接生成sql语句</span></span><br><span class="line"><span class="keyword">char</span> userName, hexUserName[<span class="number">1024</span>]={<span class="number">0</span>}; <span class="comment">// 把可能含有特殊符号的字符串进行16进制转换</span></span><br><span class="line">mysql_hex_string(hexUserName, userName, <span class="built_in">strlen</span>(userName)); <span class="comment">// 转换成安全的16进制</span></span><br><span class="line"><span class="built_in">sprintf</span>(sql, <span class="string">"Insert into T_Users(UserName,Password) values(0x%s,'%s')"</span>, hexUserName,password);</span><br><span class="line"><span class="comment">// 可以直接识别命令里面0x开头的16进制数据，并自动转换成原来的字符串(数字 0，不是 英文o)</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">cgiFormInteger(<span class="string">"age"</span>, &amp;age, <span class="number">100</span>); <span class="comment">// 获取整型表单。注意，是地址！最后一个是失败后的age默认值</span></span><br><span class="line"><span class="comment">// 例如，当 "age=aaa" 时，取不到整型的值，所以 age = 100</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> len; <span class="comment">// 用来决定需要申请的长度</span></span><br><span class="line"><span class="keyword">char</span> *txt;</span><br><span class="line">TMPL_varlist *varlist = <span class="number">0</span>;</span><br><span class="line">cgiFormStringSpaceNeeded(<span class="string">"txt1"</span>,&amp;len); <span class="comment">// 用于获取可能会非常长的值的长度</span></span><br><span class="line">txt = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(len+<span class="number">1</span>); <span class="comment">// 动态申请内存</span></span><br><span class="line">cgiFormString(<span class="string">"txt1"</span>,txt,len);</span><br><span class="line"><span class="built_in">free</span>(txt); <span class="comment">// 最后别忘了 free</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(cgiFormCheckboxSingle(<span class="string">"agree"</span>)!=cgiFormSuccess) <span class="comment">// 多选框是否选中</span></span><br><span class="line">&lt;select&gt;&lt;option&gt;xxx&lt;/option&gt;&lt;/select&gt; 和 "radio" 都用 cgiFormString 来获取是否输入</span><br></pre></td></tr></tbody></table></figure><h1 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h1><h2 id="HTML文件"><a href="#HTML文件" class="headerlink" title="HTML文件"></a>HTML文件</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span> // 必须这样写</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"f1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="文件参数"><a href="#文件参数" class="headerlink" title="文件参数"></a>文件参数</h3><ul><li><code>cgiFormFileName</code>：上传的文件名</li><li><code>cgiFormFileSize</code>：文件大小（单位为B）</li><li><code>cgiFormFileRead</code>：读取上传文件</li><li><code>cgiFormFileClose</code>：关闭上传的文件</li></ul><h3 id="判断有没有上传文件"><a href="#判断有没有上传文件" class="headerlink" title="判断有没有上传文件"></a>判断有没有上传文件</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(cgiFormFileName(<span class="string">"file1"</span>,uploadfilename,<span class="keyword">sizeof</span>(uploadfilename))!=cgiFormSuccess)</span><br></pre></td></tr></tbody></table></figure><h3 id="获取扩展名"><a href="#获取扩展名" class="headerlink" title="获取扩展名"></a>获取扩展名</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">_splitpath(uploadfilename,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,fileExt); <span class="comment">// &lt;stdlib.h&gt;中</span></span><br><span class="line">参数：全路径指针，盘符（带冒号），路径（纯目录无盘符，如 /aaa/），文件名（不包含后缀名），后缀名（带点）</span><br><span class="line">文件格式：d:/aaa/bbb.jpg</span><br><span class="line"><span class="keyword">if</span>(stricmp(fileExt,<span class="string">".jpg"</span>)!=<span class="number">0</span>&amp;&amp;stricmp(fileExt,<span class="string">".png"</span>))…… <span class="comment">// stricmp 为不区分大小写的比较</span></span><br></pre></td></tr></tbody></table></figure><h3 id="获取文件大小"><a href="#获取文件大小" class="headerlink" title="获取文件大小"></a>获取文件大小</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cgiFormFileSize(<span class="string">"file1"</span>,&amp;filesize);</span><br><span class="line"><span class="keyword">if</span>(filesize&gt;<span class="number">1024</span>*<span class="number">1024</span>)…… <span class="comment">// 1024 * 1024 = 1 M</span></span><br></pre></td></tr></tbody></table></figure><h2 id="总的操作"><a href="#总的操作" class="headerlink" title="总的操作"></a>总的操作</h2><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cgiFilePtr file1; <span class="comment">// 声明类似文件指针的变量，网络文件指针</span></span><br><span class="line"><span class="comment">//读取本地文件，用于写入，本地文件指针</span></span><br><span class="line">FILE *fileLocal = fopen(uploadfilename,<span class="string">"wb"</span>); <span class="comment">// C语言读取文件，wb是二进制模式，默认是用文本</span></span><br><span class="line"><span class="keyword">char</span> buffer[<span class="number">1024</span>]; <span class="comment">// 每次最多1024kb</span></span><br><span class="line"><span class="keyword">int</span> lenRead; <span class="comment">// 实际读的字节数</span></span><br><span class="line">cgiFormFileOpen(<span class="string">"file1"</span>,&amp;file1);</span><br><span class="line"><span class="keyword">while</span>(cgiFormFileRead(file1,buffer,<span class="keyword">sizeof</span>(buffer),&amp;lenRead)==cgiFormSuccess)</span><br><span class="line">{</span><br><span class="line">fwrite(buffer,lenRead,<span class="number">1</span>,fileLocal); <span class="comment">// buffer[] 的前 lenRead 字节写入到 fileLocal 中</span></span><br><span class="line">}</span><br><span class="line">fclose(fileLocal);</span><br><span class="line">cgiFormFileClose(file1);</span><br><span class="line">printFileUploadMsg(<span class="string">"上传成功"</span>);</span><br></pre></td></tr></tbody></table></figure><hr><blockquote><p>如鹏网《C语言也能干大事》学习笔记</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CGI-amp-DGI&quot;&gt;&lt;a href=&quot;#CGI-amp-DGI&quot; class=&quot;headerlink&quot; title=&quot;CGI &amp;amp; DGI&quot;&gt;&lt;/a&gt;CGI &amp;amp; DGI&lt;/h1&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; * qs = getenv(&lt;span class=&quot;string&quot;&gt;&quot;QUERY_STRING&quot;&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//获取环境变量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; username[&lt;span class=&quot;number&quot;&gt;256&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;sscanf&lt;/span&gt;(qs, &lt;span class=&quot;string&quot;&gt;&quot;username=%s&quot;&lt;/span&gt;, username);&lt;span class=&quot;comment&quot;&gt;//获取地址栏后面的东西&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;断点调试：&lt;code&gt;include \&amp;lt;windows.h&amp;gt;&lt;/code&gt;，然后 &lt;code&gt;MessageBoxA(0,&quot;ok&quot;,&quot;ok&quot;,0);&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://blog.iwxyi.com/categories/Code/"/>
    
      <category term="学习笔记" scheme="http://blog.iwxyi.com/categories/Code/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="C" scheme="http://blog.iwxyi.com/tags/C/"/>
    
      <category term="CGI" scheme="http://blog.iwxyi.com/tags/CGI/"/>
    
      <category term="Web" scheme="http://blog.iwxyi.com/tags/Web/"/>
    
  </entry>
  
</feed>
